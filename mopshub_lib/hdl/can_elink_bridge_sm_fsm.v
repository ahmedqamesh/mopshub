//
// Module mopshub_lib.can_elink_bridge_SM.fsm
//
// Created:
//          by - dcs.dcs (chipdev2.physik.uni-wuppertal.de)
//          at - 17:52:44 09/03/21
//
// Generated by Mentor Graphics' HDL Designer(TM) 2019.4 (Build 4)
//
`resetall
`timescale 1ns/10ps
module can_elink_bridge_SM( 
   // Port Declarations
   input   wire           can_bus_match, 
   input   wire           clk,                 // posedge
   input   wire           en_osc_trim, 
   input   wire           end_cnt_dbg, 
   input   wire           end_init,            // Signal from CAN interface block to indicate that initialization process is finished 
   input   wire           end_osc_cnt, 
   input   wire           end_read_can,        // signal from CANopen block to indicate that it has read receive message buffer 
   input   wire           end_read_elink,      // this signal goes high when CANopen block has finshed writing transmit message buffer register 
   input   wire           end_trim_osc, 
   input   wire           end_write_can,       // goes high when can interface block had finished writing canakari transmit registers
   input   wire           end_write_elink,     // Goes high when CANopen block finished reading the received message buffer register 
   input   wire           endwait,             // This signal indicates when message can't be decoded in one of the CANopen objects to go back to known state to receive message
   input   wire           irq_can_rec,         // interrupt signal from canakari to indicate successful read of a new message by one of the 32 buses 
   input   wire           irq_can_tra,         // successful transmission interrupt signal from cankari 
   input   wire           irq_elink_tra,       // interrupt from elink to indicate it has a msg
   input   wire           priority_sig, 
   input   wire           reset_irq_rec_done, 
   input   wire           reset_irq_tra_done, 
   input   wire           rst,                 // lowactive
   input   wire           timeoutrst,          // timeout reset in case bridge controller does not respond in a specied amount of time 
   output  reg            abort_mes,           // Signals other state machines to come to a known statte 
   output  reg            can_bus_comp, 
   output  reg            done_trim_osc_all, 
   output  reg            end_can_proc, 
   output  reg            end_trim_bus, 
   output  reg            entimeout,           // enable for timeout reset counter 
   output  reg            irq_can_ack,         // tto start transmitting CAN message 
   output  reg            reset_irq_can,       // reset canakri interrupt 
   output  reg            reset_irq_can_all,   // reset all canakri interrupt 
   output  reg            reset_irq_osc_can, 
   output  reg            reset_irq_rec_can, 
   output  reg            reset_irq_tra_can, 
   output  reg            rst_mops_dbg, 
   output  reg            rst_osc_cnt, 
   output  reg            rst_power_en, 
   output  reg            send_mes_can, 
   output  reg            sign_on_sig,         // Signal to send one time NMT message after bootup
   output  reg            start_init,          // to initialize the CAN node (cankari)
   output  reg            start_osc_cnt, 
   output  reg            start_read_can,      // to read canakari receive registers
   output  reg            start_read_elink,    // signal to read transmit message buffer register 
   output  reg            start_trim_osc, 
   output  reg            start_write_can,     // to write transmit registers of canakari 
   output  reg            start_write_elink, 
   output  reg     [5:0]  statedeb
);


// Internal Declarations


// Module Declarations

// State encoding
parameter 
          reset              = 6'd0,
          initialize         = 6'd1,
          waittoact          = 6'd2,
          Abort_current      = 6'd3,
          pass_mes_to_elink  = 6'd4,
          rst_rec_irq_can    = 6'd5,
          write_mes_canakari = 6'd6,
          rst_irq            = 6'd7,
          Wait_tra           = 6'd8,
          read_elink_mes     = 6'd9,
          assign_bus_id      = 6'd10,
          endwaitst          = 6'd11,
          Start              = 6'd12,
          Start_read_new     = 6'd13,
          signon             = 6'd14,
          comp_bus_select    = 6'd15,
          check_rec2         = 6'd16,
          finish_proc        = 6'd17,
          rst_all_irq_can    = 6'd18,
          check_rec1         = 6'd19,
          send_ack           = 6'd20,
          Check_powering     = 6'd21,
          s1                 = 6'd22,
          finish_proc1       = 6'd23,
          rst_rec_irq_can1   = 6'd24,
          Rread_Resp         = 6'd25,
          pass_to_elink      = 6'd26,
          Break_Loop         = 6'd27,
          finishtrim         = 6'd28,
          send_ack1          = 6'd29,
          ST_Start_Cnt1      = 6'd30,
          ST_CountRst2       = 6'd31,
          s2                 = 6'd32,
          Wait_Resp          = 6'd33,
          rst_irq1           = 6'd34,
          s3                 = 6'd35,
          RST_BUS            = 6'd36,
          Wait_Resp1         = 6'd37,
          Rread_Resp1        = 6'd38,
          pass_to_elink1     = 6'd39,
          rst_rec_irq_can2   = 6'd40,
          finish_proc2       = 6'd41,
          RST_MOPS_dbg       = 6'd42;

reg [5:0] current_state, next_state;

//-----------------------------------------------------------------
// Next State Block for machine csm
//-----------------------------------------------------------------
always @(
   can_bus_match, 
   current_state, 
   en_osc_trim, 
   end_cnt_dbg, 
   end_init, 
   end_osc_cnt, 
   end_read_can, 
   end_read_elink, 
   end_write_can, 
   end_write_elink, 
   irq_can_rec, 
   irq_can_tra, 
   irq_elink_tra, 
   priority_sig, 
   reset_irq_rec_done, 
   reset_irq_tra_done, 
   rst
)
begin : next_state_block_proc
   case (current_state) 
      reset: begin
         if (rst == 1)
            next_state = Start;
         else
            next_state = reset;
      end
      initialize: begin
         if (end_init == 1)
            next_state = Check_powering;
         else
            next_state = initialize;
      end
      waittoact: begin
         if (irq_elink_tra == 1)
            next_state = check_rec1;
         else if (irq_can_rec == 1)
            next_state = assign_bus_id;
         else
            next_state = waittoact;
      end
      Abort_current: begin
         next_state = assign_bus_id;
      end
      pass_mes_to_elink: begin
         if (end_write_elink == 1)
            next_state = rst_rec_irq_can;
         else
            next_state = pass_mes_to_elink;
      end
      rst_rec_irq_can: begin
         if (reset_irq_rec_done ==1)
            next_state = finish_proc;
         else
            next_state = rst_rec_irq_can;
      end
      write_mes_canakari: begin
         if (end_write_can == 1)
            next_state = Wait_tra;
         else
            next_state = write_mes_canakari;
      end
      rst_irq: begin
         if (reset_irq_tra_done ==1)
            next_state = waittoact;
         else
            next_state = rst_irq;
      end
      Wait_tra: begin
         if (irq_can_tra == 1)
            next_state = send_ack;
         else
            next_state = Wait_tra;
      end
      read_elink_mes: begin
         if (end_read_elink == 1)
            next_state = check_rec2;
         else
            next_state = read_elink_mes;
      end
      assign_bus_id: begin
         next_state = Start_read_new;
      end
      endwaitst: begin
         next_state = rst_all_irq_can;
      end
      Start: begin
         next_state = initialize;
      end
      Start_read_new: begin
         if (end_read_can == 1)
            next_state = pass_mes_to_elink;
         else
            next_state = Start_read_new;
      end
      signon: begin
         if (irq_can_rec == 1)
            next_state = assign_bus_id;
         else
            next_state = waittoact;
      end
      comp_bus_select: begin
         if (can_bus_match ==1)
            next_state = assign_bus_id;
         else
            next_state = read_elink_mes;
      end
      check_rec2: begin
         if (irq_can_rec == 1)
            next_state = comp_bus_select;
         else
            next_state = write_mes_canakari;
      end
      finish_proc: begin
         next_state = waittoact;
      end
      rst_all_irq_can: begin
         next_state = waittoact;
      end
      check_rec1: begin
         if (priority_sig ==1)
            next_state = write_mes_canakari;
         else
            next_state = read_elink_mes;
      end
      send_ack: begin
         next_state = rst_irq;
      end
      Check_powering: begin
         if (en_osc_trim ==1)
            next_state = s3;
         else
            next_state = signon;
      end
      s1: begin
         if (end_write_can == 1)
            next_state = s2;
         else
            next_state = s1;
      end
      finish_proc1: begin
         next_state = Wait_Resp1;
      end
      rst_rec_irq_can1: begin
         if (reset_irq_rec_done ==1)
            next_state = finish_proc1;
         else
            next_state = rst_rec_irq_can1;
      end
      Rread_Resp: begin
         if (end_read_can == 1)
            next_state = pass_to_elink;
         else
            next_state = Rread_Resp;
      end
      pass_to_elink: begin
         if (end_write_elink == 1)
            next_state = rst_rec_irq_can1;
         else
            next_state = pass_to_elink;
      end
      Break_Loop: begin
         if (end_osc_cnt ==1 |  end_cnt_dbg ==1)
            next_state = ST_CountRst2;
         else
            next_state = RST_MOPS_dbg;
      end
      finishtrim: begin
         next_state = signon;
      end
      send_ack1: begin
         next_state = rst_irq1;
      end
      ST_Start_Cnt1: begin
         next_state = s3;
      end
      ST_CountRst2: begin
         next_state = finishtrim;
      end
      s2: begin
         if (irq_can_tra ==1)
            next_state = send_ack1;
         else
            next_state = s2;
      end
      Wait_Resp: begin
         if (irq_can_rec == 1)
            next_state = Rread_Resp;
         else
            next_state = Wait_Resp;
      end
      rst_irq1: begin
         if (reset_irq_tra_done ==1)
            next_state = Wait_Resp;
         else
            next_state = rst_irq1;
      end
      s3: begin
         next_state = RST_BUS;
      end
      RST_BUS: begin
         next_state = s1;
      end
      Wait_Resp1: begin
         if (irq_can_rec == 1)
            next_state = Rread_Resp1;
         else
            next_state = Wait_Resp1;
      end
      Rread_Resp1: begin
         if (end_read_can == 1)
            next_state = pass_to_elink1;
         else
            next_state = Rread_Resp1;
      end
      pass_to_elink1: begin
         if (end_write_elink == 1)
            next_state = rst_rec_irq_can2;
         else
            next_state = pass_to_elink1;
      end
      rst_rec_irq_can2: begin
         if (reset_irq_rec_done ==1)
            next_state = finish_proc2;
         else
            next_state = rst_rec_irq_can2;
      end
      finish_proc2: begin
         next_state = Break_Loop;
      end
      RST_MOPS_dbg: begin
         next_state = ST_Start_Cnt1;
      end
      default: 
         next_state = reset;
   endcase
end // Next State Block

//-----------------------------------------------------------------
// Output Block for machine csm
//-----------------------------------------------------------------
always @(
   current_state
)
begin : output_block_proc
   // Default Assignment
   abort_mes = 0;
   can_bus_comp = 0;
   done_trim_osc_all = 0;
   end_can_proc = 0;
   end_trim_bus = 0;
   entimeout = 1;
   irq_can_ack = 0;
   reset_irq_can = 0;
   reset_irq_can_all = 0;
   reset_irq_osc_can = 0;
   reset_irq_rec_can = 0;
   reset_irq_tra_can = 0;
   rst_mops_dbg = 0;
   rst_osc_cnt = 0;
   rst_power_en = 0;
   send_mes_can = 0;
   sign_on_sig = 0;
   start_init = 0;
   start_osc_cnt = 0;
   start_read_can = 0;
   start_read_elink = 0;
   start_trim_osc = 0;
   start_write_can = 0;
   start_write_elink = 0;

   // Combined Actions
   case (current_state) 
      reset: begin
         abort_mes = 1 ;
         reset_irq_can = 0 ;
         reset_irq_can_all = 0 ;
         send_mes_can = 0 ;  
         start_read_can = 0 ;
         start_read_elink = 0 ;
         start_write_can = 0 ;
         start_write_elink = 0 ;
         start_init = 0 ;
         sign_on_sig = 0;
         entimeout = 0 ;
      end
      initialize: begin
         start_init = 1 ;
         entimeout = 0 ;
      end
      waittoact: begin
         entimeout = 0 ;
      end
      Abort_current: begin
         abort_mes = 1 ;
      end
      pass_mes_to_elink: begin
         start_write_elink = 1;
      end
      rst_rec_irq_can: begin
         reset_irq_can = 1 ;
         reset_irq_rec_can = 1 ;
      end
      write_mes_canakari: begin
         start_write_can = 1 ;
      end
      rst_irq: begin
         reset_irq_can = 1 ;
         reset_irq_tra_can = 1 ;
      end
      Wait_tra: begin
         send_mes_can =1;
      end
      read_elink_mes: begin
         start_read_elink = 1 ;
      end
      Start_read_new: begin
         start_read_can = 1 ;
      end
      signon: begin
         sign_on_sig = 1 ;
      end
      comp_bus_select: begin
         can_bus_comp =1;
      end
      finish_proc: begin
         end_can_proc = 1;
      end
      rst_all_irq_can: begin
         reset_irq_can_all = 1 ;
      end
      send_ack: begin
         irq_can_ack = 1 ;
      end
      s1: begin
         start_trim_osc =1;
      end
      finish_proc1: begin
         end_can_proc = 1;
      end
      rst_rec_irq_can1: begin
         reset_irq_can = 1 ;
         reset_irq_rec_can = 1 ;
      end
      Rread_Resp: begin
         start_read_can = 1 ;
      end
      pass_to_elink: begin
         start_write_elink = 1;
      end
      finishtrim: begin
         done_trim_osc_all =1;
      end
      send_ack1: begin
         irq_can_ack = 1 ;
      end
      ST_Start_Cnt1: begin
         start_osc_cnt =1;
      end
      ST_CountRst2: begin
         rst_osc_cnt =1;
      end
      s2: begin
         send_mes_can = 1;
      end
      rst_irq1: begin
         reset_irq_can = 1 ;
         reset_irq_osc_can = 1 ;
      end
      s3: begin
         rst_power_en =1;
      end
      Rread_Resp1: begin
         start_read_can = 1 ;
      end
      pass_to_elink1: begin
         start_write_elink = 1;
      end
      rst_rec_irq_can2: begin
         reset_irq_can = 1 ;
         reset_irq_rec_can = 1 ;
      end
      finish_proc2: begin
         end_can_proc = 1;
         end_trim_bus =1;
      end
      RST_MOPS_dbg: begin
         rst_mops_dbg =1;
      end
   endcase
end // Output Block

//-----------------------------------------------------------------
// Clocked Block for machine csm
//-----------------------------------------------------------------
always @(
   posedge clk, 
   negedge rst
) 
begin : clocked_block_proc
   if (!rst) begin
      current_state <= reset;
   end
   else 
   begin
      if (timeoutrst) begin
         current_state <= reset;
      end
      else if (endwait) begin
         current_state <= endwaitst;
      end
      else 
      begin
         current_state <= next_state;
      end
   end
end // Clocked Block

// State-As-Output assignment
always @(current_state)
statedeb = current_state;

endmodule // can_elink_bridge_SM
