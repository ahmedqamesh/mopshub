//
// Module mopshub_lib.data_generator.struct
//
// Created:
//          by - dcs.dcs (chipdev2.physik.uni-wuppertal.de)
//          at - 14:30:28 03/30/21
//
// Generated by Mentor Graphics' HDL Designer(TM) 2019.4 (Build 4)
//

`resetall
`timescale 1ns/10ps
module data_generator( 
   // Port Declarations
   // Port Declarations
   // Port Declarations
   input   wire            clk_usr, 
   input   wire            enable, 
   input   wire            loop_en, 
   input   wire            tx_fifo_pfull, 
   output  wire            done, 
   output  wire    [17:0]  dout, 
   output  wire            wr_en, 
   output  wire    [1:0]   delimeter
);


// Internal Declarations


// Local declarations

// Internal signal declarations
reg   [17:0] dout_i   = 18'b0;
wire  [2:0]  sel_cnt;


// Instances 
data_generator_SM U_0( 
   .clk_usr           (clk_usr), 
   .enable            (enable), 
   .loop_en           (loop_en), 
   .tx_fifo_pfull_gen (tx_fifo_pfull), 
   .done              (done), 
   .sel_cnt           (sel_cnt), 
   .wr_en             (wr_en)
); 

// HDL Embedded Text Block 1 data_loader
// data_loader 1
//sel din process
always @(posedge clk_usr)
 begin 
  if(enable == 1 | loop_en == 1)
    case (sel_cnt)
        2'b00 : begin 
                 dout_i = {2'b10,16'h0};
                end
        2'b01 : begin 
                dout_i = {2'b00,16'hDEAD};
                end
        2'b10 : begin 
                 dout_i = {2'b00,16'hBEEF};
                end
        2'b11 : begin 
                 dout_i ={2'b01,16'h0};
                end
    endcase
  else
    dout_i = {2'b11,16'h0};
end                                            




// HDL Embedded Text Block 2 Assign
// Assign 2
//Synchronized output of the elink FIFO signals  
//always@(posedge clk_usr)
//begin
  assign dout = dout_i;                                     
//end


// HDL Embedded Text Block 3 delimeter_loader
// delimeter loader
//sel din process
always @(posedge clk_usr)
 begin 
  if(enable == 1 | loop_en == 1)
    case (sel_cnt)
        2'b00 : begin 
                 delimeter = 2'b10;
                end
        2'b01 : begin 
                delimeter = 2'b00;
                end
        2'b10 : begin 
                 delimeter = 2'b00;
                end
        2'b11 : begin 
                 delimeter =2'b01;
                end
    endcase
  else
    delimeter = 2'b11;
end  

endmodule // data_generator

