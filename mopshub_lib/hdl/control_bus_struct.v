//
// Module mopshub_lib.control_bus.struct
//
// Created:
//          by - dcs.dcs (localhost)
//          at - 14:31:27 06/01/22
//
// Generated by Mentor Graphics' HDL Designer(TM) 2019.4 (Build 4)
//

`resetall
`timescale 1ns/10ps
module control_bus( 
   // Port Declarations
   input   wire    [4:0]  addr, 
   input   wire           clk, 
   input   wire           cs_p, 
   input   wire    [7:0]  data_tra_spi_out, 
   input   wire           miso, 
   input   wire    [4:0]  n_buses, 
   input   wire           rst, 
   input   wire           rst_cnt_osc, 
   input   wire           start_cnt_osc, 
   input   wire           start_power_init, 
   output  wire           cs_active, 
   output  reg            end_osc_cnt, 
   output  wire           mosi, 
   output  wire    [4:0]  power_bus_cnt, 
   output  wire           sck
);


// Internal Declarations


// Local declarations

// Internal signal declarations
wire        busy;
wire  [7:0] data_init;
wire  [7:0] o_RX_Byte;
wire        o_RX_DV;
wire        o_SPI_Clk;
wire        o_SPI_MOSI;
wire        o_TX_Ready;
wire  [7:0] rxdat;
wire        transceive;
wire  [7:0] txdat;


// Instances 
bit_counter bit_counter_trim( 
   .ext_rst    (rst_cnt_osc), 
   .rst        (rst), 
   .data_out   (power_bus_cnt), 
   .clk        (clk), 
   .cnt_enable (start_cnt_osc)
); 

initialize_spi_communcation initialize_spi_bus_cont( 
   .addr      (addr), 
   .data_init (data_init)
); 

spi_master #(50000000,25000000) spi_master0( 
   .clk        (clk), 
   .rst        (rst), 
   .sck        (sck), 
   .miso       (miso), 
   .mosi       (mosi), 
   .txdat      (txdat), 
   .rxdat      (rxdat), 
   .transceive (transceive), 
   .busy       (busy)
); 

spi_module_trial U_0( 
   .i_Rst_L    (rst), 
   .i_Clk      (clk), 
   .i_TX_Byte  (txdat), 
   .i_TX_DV    (transceive), 
   .o_TX_Ready (o_TX_Ready), 
   .o_RX_DV    (o_RX_DV), 
   .o_RX_Byte  (o_RX_Byte), 
   .o_SPI_Clk  (o_SPI_Clk), 
   .i_SPI_MISO (), 
   .o_SPI_MOSI (o_SPI_MOSI)
); 

// HDL Embedded Text Block 7 eb7
// Wire_assign 1            
assign txdat = (start_power_init ==1)? data_init : data_tra_spi_out;       
initial end_osc_cnt  = 1'b0;
assign transceive = !cs_p;
assign cs_active = cs_p;
// Counter end_osc_cnt over the Clock signal
always @(posedge clk)
begin
  if (!rst) end_osc_cnt <= 0;
  else 
    case(power_bus_cnt)
     n_buses: end_osc_cnt <= 1;
     default: end_osc_cnt <= 0;
    endcase
end

























































endmodule // control_bus

