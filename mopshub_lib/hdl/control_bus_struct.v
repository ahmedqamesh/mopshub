//
// Module mopshub_lib.control_bus.struct
//
// Created:
//          by - dcs.dcs (chipdev2.physik.uni-wuppertal.de)
//          at - 13:29:25 03/10/22
//
// Generated by Mentor Graphics' HDL Designer(TM) 2019.4 (Build 4)
//

`resetall
`timescale 1ns/10ps
module control_bus( 
   // Port Declarations
   input   wire    [4:0]  addr, 
   input   wire           clk, 
   input   wire           cs, 
   input   wire           cs_p, 
   input   wire           miso, 
   input   wire    [4:0]  n_buses, 
   input   wire           power_bus_en, 
   input   wire           rst, 
   input   wire           rst_cnt_osc, 
   input   wire           start_cnt_osc, 
   output  wire           cs_active, 
   output  reg            end_osc_cnt     = 1'b0, 
   output  wire           mosi, 
   output  wire    [4:0]  power_bus_cnt, 
   output  wire           sck
);


// Internal Declarations


// Local declarations

// Internal signal declarations
wire        busy;
wire  [7:0] data_init;
wire        output0;
wire        output1;
wire        output10;
wire        output11;
wire        output12;
wire        output13;
wire        output14;
wire        output15;
wire        output16;
wire        output17;
wire        output18;
wire        output19;
wire        output2;
wire        output20;
wire        output21;
wire        output22;
wire        output23;
wire        output24;
wire        output25;
wire        output26;
wire        output27;
wire        output28;
wire        output29;
wire        output3;
wire        output30;
wire        output31;
wire        output4;
wire        output5;
wire        output6;
wire        output7;
wire        output8;
wire        output9;
wire        transceive;


// Instances 
bit_counter bit_counter_trim( 
   .ext_rst    (rst_cnt_osc), 
   .rst        (rst), 
   .data_out   (power_bus_cnt), 
   .clk        (clk), 
   .cnt_enable (start_cnt_osc)
); 

demux1_1bit #(1'b0) demux1_1bit_cs_tra( 
   .sel        (power_bus_cnt), 
   .input_port (power_bus_en), 
   .output9    (output9), 
   .output18   (output18), 
   .output19   (output19), 
   .output20   (output20), 
   .output21   (output21), 
   .output22   (output22), 
   .output23   (output23), 
   .output24   (output24), 
   .output4    (output4), 
   .output5    (output5), 
   .output6    (output6), 
   .output7    (output7), 
   .output8    (output8), 
   .output10   (output10), 
   .output11   (output11), 
   .output12   (output12), 
   .output13   (output13), 
   .output14   (output14), 
   .output15   (output15), 
   .output16   (output16), 
   .output17   (output17), 
   .output0    (output0), 
   .output1    (output1), 
   .output2    (output2), 
   .output3    (output3), 
   .output26   (output26), 
   .output27   (output27), 
   .output28   (output28), 
   .output29   (output29), 
   .output30   (output30), 
   .output31   (output31), 
   .output25   (output25)
); 

initialize_spi_communcation initialize_spi_bus_cont( 
   .addr      (addr), 
   .data_init (data_init)
); 

spi_master #(40000000,10000000) spi_master0( 
   .clk        (clk), 
   .rst        (rst), 
   .sck        (sck), 
   .miso       (miso), 
   .mosi       (mosi), 
   .txdat      (), 
   .rxdat      (), 
   .transceive (transceive), 
   .busy       (busy)
); 

// HDL Embedded Text Block 7 eb7

assign transceive = (!cs_p || !cs);//1'b1;
assign cs_active = (cs ||cs_p);
// Counter end_osc_cnt over the Clock signal
always @(posedge clk)
begin
  if (!rst) end_osc_cnt <= 0;
  else 
    case(power_bus_cnt)
     n_buses: end_osc_cnt <= 1;
     default: end_osc_cnt <= 0;
    endcase
end









































endmodule // control_bus

