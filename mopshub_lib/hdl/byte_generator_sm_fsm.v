//
// Module mopshub_lib.byte_generator_SM.fsm
//
// Created:
//          by - dcs.dcs (chipdev2.physik.uni-wuppertal.de)
//          at - 21:28:07 03/30/21
//
// Generated by Mentor Graphics' HDL Designer(TM) 2018.1 (Build 12)
//
`resetall
`timescale 1ns/10ps
module byte_generator_SM( 
   // Port Declarations
   input   wire    [17:0]  GEN_EDATA_18bit, 
   input   wire    [1:0]   byte0_code, 
   input   wire    [1:0]   byte1_code, 
   input   wire            clk, 
   input   wire            rd_en, 
   input   wire            rst, 
   output  reg     [10:0]  byte_out, 
   output  reg             byte_rdy
);


// Internal Declarations


// Module Declarations

// State encoding
parameter 
          rd_enable       = 3'd0,
          byte0_gen       = 3'd1,
          byte1_gen       = 3'd2,
          reset_outputs   = 3'd3,
          reset_byte_rdy0 = 3'd4,
          reset_byte_rdy1 = 3'd5;

reg [2:0] current_state, next_state;

//-----------------------------------------------------------------
// Next State Block for machine csm
//-----------------------------------------------------------------
always @(
   current_state, 
   rd_en
)
begin : next_state_block_proc
   case (current_state) 
      rd_enable: begin
         next_state = byte0_gen;
      end
      byte0_gen: begin
         next_state = reset_byte_rdy0;
      end
      byte1_gen: begin
         next_state = reset_byte_rdy1;
      end
      reset_outputs: begin
         if (rd_en ==1)
            next_state = rd_enable;
         else
            next_state = reset_outputs;
      end
      reset_byte_rdy0: begin
         if (rd_en ==1)
            next_state = byte1_gen;
         else
            next_state = reset_byte_rdy0;
      end
      reset_byte_rdy1: begin
         next_state = reset_outputs;
      end
      default: 
         next_state = reset_outputs;
   endcase
end // Next State Block

//-----------------------------------------------------------------
// Output Block for machine csm
//-----------------------------------------------------------------
always @(
   GEN_EDATA_18bit, 
   byte0_code, 
   byte1_code, 
   current_state
)
begin : output_block_proc

   // Combined Actions
   case (current_state) 
      byte0_gen: begin
         byte_out = {byte0_code,GEN_EDATA_18bit[15:8]};
         byte_rdy = 1;
      end
      byte1_gen: begin
         byte_out = {byte1_code,GEN_EDATA_18bit[7:0]};
         byte_rdy = 1;
      end
      reset_outputs: begin
         byte_out = 10'b1100000000;
         byte_rdy = 0;
      end
      reset_byte_rdy0: begin
         byte_rdy = 0;
      end
      reset_byte_rdy1: begin
         byte_rdy = 0;
      end
   endcase
end // Output Block

//-----------------------------------------------------------------
// Clocked Block for machine csm
//-----------------------------------------------------------------
always @(
   posedge clk, 
   posedge rst
) 
begin : clocked_block_proc
   if (rst) begin
      current_state <= reset_outputs;
   end
   else 
   begin
      current_state <= next_state;
   end
end // Clocked Block

endmodule // byte_generator_SM
