//
// Module mopshub_lib.dec_8b10b_wrap.struct
//
// Created:
//          by - dcs.dcs (chipdev2.physik.uni-wuppertal.de)
//          at - 18:36:36 04/02/21
//
// Generated by Mentor Graphics' HDL Designer(TM) 2018.1 (Build 12)
//

`resetall
`timescale 1ns/10ps
module dec_8b10b_wrap #(
   // synopsys template
   parameter COMMAp       = 10'b0011111010,  //-K.28.5//comma / idle character
   parameter COMMAn       = 10'b1100000101,  //+K.28.5
   parameter EOCp         = 10'b0011110110,  //-K.28.6 //start-of-chunk and end-of-chunk characters
   parameter EOCn         = 10'b1100001001,  //+K.28.6
   parameter SOCp         = 10'b0011111001,  //-K.28.1
   parameter SOCn         = 10'b1100000110,  //+K.28.1
   parameter SOBp         = 10'b0011110101,  //-K.28.2 //start-of-busy and end-of-busy characters
   parameter SOBn         = 10'b1100001010,  //+K.28.2
   parameter EOBp         = 10'b0011110011,  //-K.28.3 
   parameter EOBn         = 10'b1100001100,  //+K.28.3 
   parameter FEI4B_COMMAp = 10'b1100000110,  //+K.28.1
   parameter FEI4B_COMMAn = 10'b0011111001,  //-K.28.1
   parameter FEI4B_EOCp   = 10'b1100000101,  //+K.28.5 
   parameter FEI4B_EOCn   = 10'b0011111010,  //-K.28.5 
   parameter FEI4B_SOCp   = 10'b1100000111,  //+K.28.7
   parameter FEI4B_SOCn   = 10'b0011111000   //-K.28.7
)
( 
   // Port Declarations
   input   wire    [9:0]  ABCDEIFGHJ_IN, 
   input   wire           RBYTECLK, 
   input   wire           datain_valid, 
   input   wire           reset, 
   output  wire           BUSY, 
   output  wire    [7:0]  HGFEDCBA, 
   output  wire    [1:0]  ISK, 
   output  wire           code_err, 
   output  wire           disp_err
);


// Internal Declarations


// Local declarations

// Internal signal declarations
reg         BUSY_s;
wire  [7:0] HGFEDCBA_falling_edge;
reg   [7:0] HGFEDCBA_reg            = 0;
wire        ISK_comma;
wire        ISK_eob;
wire        ISK_eoc;
wire        ISK_falling_edge;
reg   [1:0] ISK_reg                 = 0;
wire        ISK_sob;
wire        ISK_soc;
wire  [1:0] ISKcode;


// Instances 
dec_8b10b U_0( 
   .reset        (reset), 
   .clk          (RBYTECLK), 
   .datain       (ABCDEIFGHJ_IN), 
   .datain_valid (datain_valid), 
   .ko           (ISK_falling_edge), 
   .dataout      (HGFEDCBA_falling_edge), 
   .code_err     (code_err), 
   .disp_err     (disp_err)
); 

// HDL Embedded Text Block 1 GBT_mode_Sig
// GBT_mode_Sig 1                                        
   assign ISK_comma   = (ABCDEIFGHJ_IN == COMMAp |  ABCDEIFGHJ_IN == COMMAn )  ? 1: 0;
   assign ISK_soc     = (ABCDEIFGHJ_IN == SOCp   |  ABCDEIFGHJ_IN == SOCn   )  ? 1: 0;
   assign ISK_eoc     = (ABCDEIFGHJ_IN == EOCp   |  ABCDEIFGHJ_IN == EOCn   )  ? 1: 0;
   assign ISK_sob     = (ABCDEIFGHJ_IN == SOBp   |  ABCDEIFGHJ_IN == SOBn   )  ? 1: 0;
   assign ISK_eob     = (ABCDEIFGHJ_IN == EOBp   |  ABCDEIFGHJ_IN == EOBn   )  ? 1: 0;




// HDL Embedded Text Block 2 ISKcode_asign
// ISKcode_asign 2                                        
assign ISKcode[0] = ((! ISK_soc) & (ISK_eoc ^ ISK_comma)) | ISK_sob | ISK_eob;
assign ISKcode[1] = ((!  ISK_eoc) & (ISK_soc ^ ISK_comma)) | ISK_sob | ISK_eob;
// HDL Embedded Text Block 3 isk_signal
// isk_signal 3 
always@(posedge RBYTECLK)
if (reset)
   ISK_reg <= 2'b00;
else
begin
if (ISK_falling_edge == 1)
   ISK_reg <= ISKcode; 
else
   ISK_reg <= 2'b00;
end                                        
// HDL Embedded Text Block 4 eb1
always@(posedge RBYTECLK)
begin
if (reset)
   HGFEDCBA_reg <= 0;
else
   HGFEDCBA_reg <= HGFEDCBA_falling_edge;
end                                        
                                  
// HDL Embedded Text Block 5 eb2
// eb2 5 
assign   ISK = HGFEDCBA_reg;
assign   HGFEDCBA = HGFEDCBA_reg;   
assign   BUSY = BUSY_s;                                    


// HDL Embedded Text Block 6 eb3
// eb3 6    
always@(posedge RBYTECLK)
if (reset)
   BUSY_s <= 0;
else
begin
if (reset == 1 | ISK_eob ==1)
   BUSY_s <= 0; 
else if (ISK_sob ==1)
   BUSY_s <= 1;
end                                        
                                    



endmodule // dec_8b10b_wrap

