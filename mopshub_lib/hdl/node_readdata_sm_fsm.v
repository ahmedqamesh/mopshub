//
// Module mopshub_lib.node_readdata_SM.fsm
//
// Created:
//          by - dcs.dcs (chipdev2.physik.uni-wuppertal.de)
//          at - 15:58:35 01/19/21
//
// Generated by Mentor Graphics' HDL Designer(TM) 2019.4 (Build 4)
//
`resetall
`timescale 1ns/10ps
module node_readdata_SM( 
   // Port Declarations
   output  reg     [4:0]   bus_rec_select, 
   input   wire    [15:0]  readdata0, 
   input   wire    [15:0]  readdata1, 
   input   wire    [15:0]  readdata2, 
   input   wire    [15:0]  readdata3, 
   input   wire    [15:0]  readdata4, 
   input   wire    [15:0]  readdata5, 
   input   wire    [15:0]  readdata6, 
   input   wire    [15:0]  readdata7, 
   input   wire    [15:0]  readdata8, 
   input   wire    [15:0]  readdata9, 
   input   wire    [15:0]  readdata10, 
   input   wire    [15:0]  readdata11, 
   input   wire    [15:0]  readdata12, 
   input   wire    [15:0]  readdata13, 
   input   wire    [15:0]  readdata14, 
   input   wire    [15:0]  readdata15, 
   input   wire    [15:0]  readdata16, 
   input   wire    [15:0]  readdata17, 
   input   wire    [15:0]  readdata18, 
   input   wire    [15:0]  readdata19, 
   input   wire    [15:0]  readdata20, 
   input   wire    [15:0]  readdata21, 
   input   wire    [15:0]  readdata22, 
   input   wire    [15:0]  readdata23, 
   input   wire    [15:0]  readdata24, 
   input   wire    [15:0]  readdata25, 
   input   wire    [15:0]  readdata26, 
   input   wire    [15:0]  readdata27, 
   input   wire    [15:0]  readdata28, 
   input   wire    [15:0]  readdata29, 
   input   wire    [15:0]  readdata30, 
   input   wire    [15:0]  readdata31, 
   input   wire    [31:0]  can_rec, 
   output  reg             irq_can_rec, 
   output  reg     [15:0]  readdata, 
   input   wire            clock, 
   input   wire            choose_bus_start, 
   output  reg             choose_bus_end, 
   input   wire            rst, 
   output  reg             init,              // to initialize the node
   input   wire            genrst, 
   input   wire            endwait
);


// Internal Declarations


// Module Declarations
reg [31:0] can_rec_reg;  
reg [31:0] can_rec_counter;  

// State encoding
parameter 
          busloop          = 7'd0,
          canbus0          = 7'd1,
          canbus1          = 7'd2,
          canbus2          = 7'd3,
          canbus3          = 7'd4,
          canbus4          = 7'd5,
          canbus5          = 7'd6,
          canbus6          = 7'd7,
          canbus7          = 7'd8,
          canbus8          = 7'd9,
          canbus9          = 7'd10,
          canbus10         = 7'd11,
          canbus11         = 7'd12,
          canbus12         = 7'd13,
          canbus13         = 7'd14,
          canbus14         = 7'd15,
          canbus15         = 7'd16,
          canbus16         = 7'd17,
          canbus17         = 7'd18,
          canbus18         = 7'd19,
          canbus19         = 7'd20,
          canbus20         = 7'd21,
          canbus21         = 7'd22,
          canbus22         = 7'd23,
          canbus23         = 7'd24,
          canbus24         = 7'd25,
          canbus25         = 7'd26,
          canbus26         = 7'd27,
          canbus27         = 7'd28,
          canbus28         = 7'd29,
          canbus29         = 7'd30,
          canbus30         = 7'd31,
          canbus31         = 7'd32,
          resetbus         = 7'd33,
          donebus          = 7'd34,
          donebus1         = 7'd35,
          donebus2         = 7'd36,
          donebus3         = 7'd37,
          donebus4         = 7'd38,
          donebus5         = 7'd39,
          donebus6         = 7'd40,
          donebus7         = 7'd41,
          donebus8         = 7'd42,
          donebus9         = 7'd43,
          donebus10        = 7'd44,
          donebus11        = 7'd45,
          donebus12        = 7'd46,
          donebus13        = 7'd47,
          donebus14        = 7'd48,
          donebus15        = 7'd49,
          donebus16        = 7'd50,
          donebus17        = 7'd51,
          donebus18        = 7'd52,
          donebus19        = 7'd53,
          donebus20        = 7'd54,
          donebus21        = 7'd55,
          donebus22        = 7'd56,
          donebus23        = 7'd57,
          donebus24        = 7'd58,
          donebus25        = 7'd59,
          donebus26        = 7'd60,
          donebus27        = 7'd61,
          donebus28        = 7'd62,
          donebus29        = 7'd63,
          donebus30        = 7'd64,
          donebus31        = 7'd65,
          shiftcounter     = 7'd66,
          initialize       = 7'd67,
          reset            = 7'd68,
          waitnew          = 7'd69,
          endwaitst        = 7'd70,
          rst_rec_irq_can1 = 7'd71;

reg [6:0] current_state, next_state;

//-----------------------------------------------------------------
// Next State Block for machine csm
//-----------------------------------------------------------------
always @(
   can_rec_counter, 
   can_rec_reg, 
   choose_bus_start, 
   current_state, 
   genrst, 
   rst
)
begin : next_state_block_proc
   case (current_state) 
      busloop: begin
         if ((can_rec_counter[1]&& can_rec_reg[1]))
            next_state = canbus1;
         else if ((can_rec_counter[2] && can_rec_reg[2]))
            next_state = canbus2;
         else if ((can_rec_counter[3]&& can_rec_reg[3]))
            next_state = canbus3;
         else if ((can_rec_counter[4]&& can_rec_reg[4]))
            next_state = canbus4;
         else if ((can_rec_counter[5] && can_rec_reg[5]))
            next_state = canbus5;
         else if ((can_rec_counter[6]&& can_rec_reg[6]))
            next_state = canbus6;
         else if ((can_rec_counter[7] && can_rec_reg[7]))
            next_state = canbus7;
         else if ((can_rec_counter[8] && can_rec_reg[8]))
            next_state = canbus8;
         else if ((can_rec_counter[9] && can_rec_reg[9]))
            next_state = canbus9;
         else if ((can_rec_counter[10] && can_rec_reg[10]))
            next_state = canbus10;
         else if ((can_rec_counter[11] && can_rec_reg[11]))
            next_state = canbus11;
         else if ((can_rec_counter[12] && can_rec_reg[12]))
            next_state = canbus12;
         else if ((can_rec_counter[13] && can_rec_reg[13]))
            next_state = canbus13;
         else if ((can_rec_counter[14] && can_rec_reg[14]))
            next_state = canbus14;
         else if ((can_rec_counter[15] && can_rec_reg[15]))
            next_state = canbus15;
         else if ((can_rec_counter[16] && can_rec_reg[16]))
            next_state = canbus16;
         else if ((can_rec_counter[17] && can_rec_reg[17]))
            next_state = canbus17;
         else if ((can_rec_counter[18] && can_rec_reg[18]))
            next_state = canbus18;
         else if ((can_rec_counter[19] && can_rec_reg[19]))
            next_state = canbus19;
         else if ((can_rec_counter[20] && can_rec_reg[20]))
            next_state = canbus20;
         else if ((can_rec_counter[21] && can_rec_reg[21]))
            next_state = canbus21;
         else if ((can_rec_counter[22] && can_rec_reg[22]))
            next_state = canbus22;
         else if ((can_rec_counter[23] && can_rec_reg[23]))
            next_state = canbus23;
         else if ((can_rec_counter[24] && can_rec_reg[24]))
            next_state = canbus24;
         else if ((can_rec_counter[25] && can_rec_reg[25]))
            next_state = canbus25;
         else if ((can_rec_counter[26] && can_rec_reg[26]))
            next_state = canbus26;
         else if ((can_rec_counter[27] && can_rec_reg[27]))
            next_state = canbus27;
         else if ((can_rec_counter[28] && can_rec_reg[28]))
            next_state = canbus28;
         else if ((can_rec_counter[29] && can_rec_reg[29]))
            next_state = canbus29;
         else if ((can_rec_counter[30] && can_rec_reg[30]))
            next_state = canbus30;
         else if ((can_rec_counter[31] && can_rec_reg[31]))
            next_state = canbus31;
         else if ((can_rec_counter[0] && can_rec_reg[0]))
            next_state = canbus0;
         else if (can_rec_reg !=31'b0)
            next_state = shiftcounter;
         else if (can_rec_reg ==31'b0)
            next_state = waitnew;
         else
            next_state = busloop;
      end
      canbus0: begin
         next_state = donebus;
      end
      canbus1: begin
         next_state = donebus1;
      end
      canbus2: begin
         next_state = donebus2;
      end
      canbus3: begin
         next_state = donebus3;
      end
      canbus4: begin
         next_state = donebus4;
      end
      canbus5: begin
         next_state = donebus5;
      end
      canbus6: begin
         next_state = donebus6;
      end
      canbus7: begin
         next_state = donebus7;
      end
      canbus8: begin
         next_state = donebus8;
      end
      canbus9: begin
         next_state = donebus9;
      end
      canbus10: begin
         next_state = donebus10;
      end
      canbus11: begin
         next_state = donebus11;
      end
      canbus12: begin
         next_state = donebus12;
      end
      canbus13: begin
         next_state = donebus13;
      end
      canbus14: begin
         next_state = donebus14;
      end
      canbus15: begin
         next_state = donebus15;
      end
      canbus16: begin
         next_state = donebus16;
      end
      canbus17: begin
         next_state = donebus17;
      end
      canbus18: begin
         next_state = donebus18;
      end
      canbus19: begin
         next_state = donebus19;
      end
      canbus20: begin
         next_state = donebus20;
      end
      canbus21: begin
         next_state = donebus21;
      end
      canbus22: begin
         next_state = donebus22;
      end
      canbus23: begin
         next_state = donebus23;
      end
      canbus24: begin
         next_state = donebus24;
      end
      canbus25: begin
         next_state = donebus25;
      end
      canbus26: begin
         next_state = donebus26;
      end
      canbus27: begin
         next_state = donebus27;
      end
      canbus28: begin
         next_state = donebus28;
      end
      canbus29: begin
         next_state = donebus29;
      end
      canbus30: begin
         next_state = donebus30;
      end
      canbus31: begin
         next_state = donebus31;
      end
      resetbus: begin
         if (choose_bus_start ==1)
            next_state = busloop;
         else
            next_state = resetbus;
      end
      donebus: begin
         next_state = busloop;
      end
      donebus1: begin
         next_state = busloop;
      end
      donebus2: begin
         next_state = busloop;
      end
      donebus3: begin
         next_state = busloop;
      end
      donebus4: begin
         next_state = busloop;
      end
      donebus5: begin
         next_state = busloop;
      end
      donebus6: begin
         next_state = busloop;
      end
      donebus7: begin
         next_state = busloop;
      end
      donebus8: begin
         next_state = busloop;
      end
      donebus9: begin
         next_state = busloop;
      end
      donebus10: begin
         next_state = busloop;
      end
      donebus11: begin
         next_state = busloop;
      end
      donebus12: begin
         next_state = busloop;
      end
      donebus13: begin
         next_state = busloop;
      end
      donebus14: begin
         next_state = busloop;
      end
      donebus15: begin
         next_state = busloop;
      end
      donebus16: begin
         next_state = busloop;
      end
      donebus17: begin
         next_state = busloop;
      end
      donebus18: begin
         next_state = busloop;
      end
      donebus19: begin
         next_state = busloop;
      end
      donebus20: begin
         next_state = busloop;
      end
      donebus21: begin
         next_state = busloop;
      end
      donebus22: begin
         next_state = busloop;
      end
      donebus23: begin
         next_state = busloop;
      end
      donebus24: begin
         next_state = busloop;
      end
      donebus25: begin
         next_state = busloop;
      end
      donebus26: begin
         next_state = busloop;
      end
      donebus27: begin
         next_state = busloop;
      end
      donebus28: begin
         next_state = busloop;
      end
      donebus29: begin
         next_state = busloop;
      end
      donebus30: begin
         next_state = busloop;
      end
      donebus31: begin
         next_state = busloop;
      end
      shiftcounter: begin
         next_state = busloop;
      end
      initialize: begin
         next_state = resetbus;
      end
      reset: begin
         if (rst == 1)
            next_state = initialize;
         else
            next_state = reset;
      end
      waitnew: begin
         if (genrst==1)
            next_state = reset;
         else
            next_state = waitnew;
      end
      endwaitst: begin
         next_state = rst_rec_irq_can1;
      end
      rst_rec_irq_can1: begin
         next_state = resetbus;
      end
      default: 
         next_state = reset;
   endcase
end // Next State Block

//-----------------------------------------------------------------
// Output Block for machine csm
//-----------------------------------------------------------------
always @(
   current_state, 
   readdata0, 
   readdata1, 
   readdata10, 
   readdata11, 
   readdata12, 
   readdata13, 
   readdata14, 
   readdata15, 
   readdata16, 
   readdata17, 
   readdata18, 
   readdata19, 
   readdata2, 
   readdata20, 
   readdata21, 
   readdata22, 
   readdata23, 
   readdata24, 
   readdata25, 
   readdata26, 
   readdata27, 
   readdata28, 
   readdata29, 
   readdata3, 
   readdata30, 
   readdata31, 
   readdata4, 
   readdata5, 
   readdata6, 
   readdata7, 
   readdata8, 
   readdata9
)
begin : output_block_proc
   // Default Assignment
   bus_rec_select = 5'b0;
   irq_can_rec = 0;
   readdata = 16'b0;
   choose_bus_end = 0;
   init = 0;

   // Combined Actions
   case (current_state) 
      canbus0: begin
         readdata=readdata0;
         bus_rec_select = 5'b00000;
         irq_can_rec =1;
      end
      canbus1: begin
         readdata=readdata1;
         bus_rec_select = 5'b00001;
         irq_can_rec =1;
      end
      canbus2: begin
         readdata=readdata2;
         bus_rec_select = 5'b00010;
         irq_can_rec =1;
      end
      canbus3: begin
         readdata=readdata3;
         bus_rec_select = 5'b00011;
         irq_can_rec =1;
      end
      canbus4: begin
         readdata=readdata4;
         bus_rec_select = 5'b00100;
         irq_can_rec =1;
      end
      canbus5: begin
         readdata=readdata5;
         bus_rec_select = 5'b00101;
         irq_can_rec =1;
      end
      canbus6: begin
         readdata=readdata6;
         bus_rec_select = 5'b00110;
         irq_can_rec =1;
      end
      canbus7: begin
         readdata=readdata7;
         bus_rec_select = 5'b00111;
         irq_can_rec =1;
      end
      canbus8: begin
         readdata=readdata8;
         bus_rec_select = 5'b01000;
         irq_can_rec =1;
      end
      canbus9: begin
         readdata=readdata9;
         bus_rec_select = 5'b01001;
         irq_can_rec =1;
      end
      canbus10: begin
         readdata=readdata10;
         bus_rec_select = 5'b01010;
         irq_can_rec =1;
      end
      canbus11: begin
         readdata=readdata11;
         bus_rec_select = 5'b01011;
         irq_can_rec =1;
      end
      canbus12: begin
         readdata=readdata12;
         bus_rec_select = 5'b01100;
         irq_can_rec =1;
      end
      canbus13: begin
         readdata=readdata13;
         bus_rec_select = 5'b01101;
         irq_can_rec =1;
      end
      canbus14: begin
         readdata=readdata14;
         bus_rec_select = 5'b01110;
         irq_can_rec =1;
      end
      canbus15: begin
         readdata=readdata15;
         bus_rec_select = 5'b01111;
         irq_can_rec =1;
      end
      canbus16: begin
         readdata=readdata16;
         bus_rec_select = 5'b10000;
         irq_can_rec =1;
      end
      canbus17: begin
         readdata=readdata17;
         bus_rec_select = 5'b10001;
         irq_can_rec =1;
      end
      canbus18: begin
         readdata=readdata18;
         bus_rec_select = 5'b10010;
         irq_can_rec =1;
      end
      canbus19: begin
         readdata=readdata19;
         bus_rec_select = 5'b10011;
         irq_can_rec =1;
      end
      canbus20: begin
         readdata=readdata20;
         bus_rec_select = 5'b10100;
         irq_can_rec =1;
      end
      canbus21: begin
         readdata=readdata21;
         bus_rec_select = 5'b10101;
         irq_can_rec =1;
      end
      canbus22: begin
         readdata=readdata22;
         bus_rec_select = 5'b10110;
         irq_can_rec =1;
      end
      canbus23: begin
         readdata=readdata23;
         bus_rec_select = 5'b10111;
         irq_can_rec =1;
      end
      canbus24: begin
         readdata=readdata24;
         bus_rec_select = 5'b11000;
         irq_can_rec =1;
      end
      canbus25: begin
         readdata=readdata25;
         bus_rec_select = 5'b11001;
         irq_can_rec =1;
      end
      canbus26: begin
         readdata=readdata26;
         bus_rec_select = 5'b11010;
         irq_can_rec =1;
      end
      canbus27: begin
         readdata=readdata27;
         bus_rec_select = 5'b11011;
         irq_can_rec =1;
      end
      canbus28: begin
         readdata=readdata28;
         bus_rec_select = 5'b11100;
         irq_can_rec =1;
      end
      canbus29: begin
         readdata=readdata29;
         bus_rec_select = 5'b11101;
         irq_can_rec =1;
      end
      canbus30: begin
         readdata=readdata30;
         bus_rec_select = 5'b11110;
         irq_can_rec =1;
      end
      canbus31: begin
         readdata=readdata31;
         bus_rec_select = 5'b11111;
         irq_can_rec =1;
      end
      donebus: begin
         choose_bus_end =1;
      end
      donebus1: begin
         choose_bus_end =1;
      end
      donebus2: begin
         choose_bus_end =1;
      end
      donebus3: begin
         choose_bus_end =1;
      end
      donebus4: begin
         choose_bus_end =1;
      end
      donebus5: begin
         choose_bus_end =1;
      end
      donebus6: begin
         choose_bus_end =1;
      end
      donebus7: begin
         choose_bus_end =1;
      end
      donebus8: begin
         choose_bus_end =1;
      end
      donebus9: begin
         choose_bus_end =1;
      end
      donebus10: begin
         choose_bus_end =1;
      end
      donebus11: begin
         choose_bus_end =1;
      end
      donebus12: begin
         choose_bus_end =1;
      end
      donebus13: begin
         choose_bus_end =1;
      end
      donebus14: begin
         choose_bus_end =1;
      end
      donebus15: begin
         choose_bus_end =1;
      end
      donebus16: begin
         choose_bus_end =1;
      end
      donebus17: begin
         choose_bus_end =1;
      end
      donebus18: begin
         choose_bus_end =1;
      end
      donebus19: begin
         choose_bus_end =1;
      end
      donebus20: begin
         choose_bus_end =1;
      end
      donebus21: begin
         choose_bus_end =1;
      end
      donebus22: begin
         choose_bus_end =1;
      end
      donebus23: begin
         choose_bus_end =1;
      end
      donebus24: begin
         choose_bus_end =1;
      end
      donebus25: begin
         choose_bus_end =1;
      end
      donebus26: begin
         choose_bus_end =1;
      end
      donebus27: begin
         choose_bus_end =1;
      end
      donebus28: begin
         choose_bus_end =1;
      end
      donebus29: begin
         choose_bus_end =1;
      end
      donebus30: begin
         choose_bus_end =1;
      end
      donebus31: begin
         choose_bus_end =1;
      end
      initialize: begin
         init = 1 ;
      end
      reset: begin
         init = 0 ;
      end
   endcase
end // Output Block

//-----------------------------------------------------------------
// Clocked Block for machine csm
//-----------------------------------------------------------------
always @(
   posedge clock, 
   negedge rst
) 
begin : clocked_block_proc
   if (!rst) begin
      current_state <= reset;
   end
   else 
   begin
      if (endwait) begin
         current_state <= endwaitst;
      end
      else 
      begin
         current_state <= next_state;

         // Combined Actions
         case (current_state) 
            resetbus: begin
               can_rec_reg = can_rec;
               can_rec_counter = 31'b1;
            end
            donebus: begin
               can_rec_reg[0]=0;
            end
            donebus1: begin
               can_rec_reg[1]=0;
            end
            donebus2: begin
               can_rec_reg[2]=0;
            end
            donebus3: begin
               can_rec_reg[3]= 0;
            end
            donebus5: begin
               can_rec_reg[5]=0;
            end
            donebus6: begin
               can_rec_reg[6]=0;
            end
            donebus7: begin
               can_rec_reg[7]=0;
            end
            donebus8: begin
               can_rec_reg[8]=0;
            end
            donebus9: begin
               can_rec_reg[9]=0;
            end
            donebus10: begin
               can_rec_reg [10]=0;
            end
            donebus11: begin
               can_rec_reg[11]=0;
            end
            donebus12: begin
               can_rec_reg [12] = 0;
            end
            donebus13: begin
               can_rec_reg[13]=0;
            end
            donebus14: begin
               can_rec_reg[14]=0;
            end
            donebus25: begin
               can_rec_reg[25]=0;
            end
            donebus26: begin
               can_rec_reg[26]=0;
            end
            donebus27: begin
               can_rec_reg[27]=0;
            end
            donebus28: begin
               can_rec_reg[28]=0;
            end
            donebus29: begin
               can_rec_reg[29]=0;
            end
            donebus30: begin
               can_rec_reg[30]=0;
            end
            donebus31: begin
               can_rec_reg[31]=0;
            end
            shiftcounter: begin
               can_rec_counter <=  can_rec_counter<<1;
            end
         endcase
      end
   end
end // Clocked Block

endmodule // node_readdata_SM
