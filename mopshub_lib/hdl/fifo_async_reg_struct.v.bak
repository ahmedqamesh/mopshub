//
// Module mopshub_lib.fifo_async_reg.struct
//
// Created:
//          by - dcs.dcs (chipdev2.physik.uni-wuppertal.de)
//          at - 12:17:27 04/25/24
//
// Generated by Mentor Graphics' HDL Designer(TM) 2019.4 (Build 4)
//

`resetall
`timescale 1ns/10ps
module fifo_async_reg #(
   // synopsys template
   // synopsys template
   parameter DSIZE       = 10,
   parameter ASIZE       = 15,
   parameter FALLTHROUGH = "False"   // First word fall-through without latency
   // First word fall-through without latency
// First word fall-through without latency
// First word fall-through without latency
)
( 
   // Port Declarations
   // Port Declarations
   input   wire           wclk, 
   input   wire           clk_en, 
   input   wire    [9:0]  wdata, 
   input   wire           rinc, 
   input   wire           wrst_n, 
   input   wire           winc, 
   output  wire           aempty, 
   output  wire           afull, 
   output  wire           empty, 
   output  wire    [9:0]  dout_fifo, 
   output  wire           full
);


// Internal Declarations


// Local declarations

// Internal signal declarations

// ModuleWare signal declarations(v1.12) for instance 'data_reg0' of 'fifo'
reg [9:0] mw_data_reg0reg_cval0;
reg [9:0] mw_data_reg0reg_cval1;
reg [9:0] mw_data_reg0reg_cval2;
reg [9:0] mw_data_reg0reg_cval3;
reg [9:0] mw_data_reg0reg_cval4;
reg [9:0] mw_data_reg0reg_cval5;
wire [9:0] mw_data_reg0reg_nval0;
wire [9:0] mw_data_reg0reg_nval1;
wire [9:0] mw_data_reg0reg_nval2;
wire [9:0] mw_data_reg0reg_nval3;
wire [9:0] mw_data_reg0reg_nval4;
wire [9:0] mw_data_reg0reg_nval5;
wire mw_data_reg0temp_rena;
wire mw_data_reg0temp_wena;
wire mw_data_reg0temp_full;
wire mw_data_reg0temp_empty;
reg [2:0] mw_data_reg0addr_cval;
wire [2:0] mw_data_reg0addr_nval;


// Instances 

// ModuleWare code(v1.12) for instance 'data_reg0' of 'fifo'
assign full = mw_data_reg0temp_full;
assign empty = mw_data_reg0temp_empty;
assign dout_fifo = mw_data_reg0reg_cval0;
assign afull = mw_data_reg0temp_full;
assign aempty = mw_data_reg0temp_empty;
assign mw_data_reg0temp_rena = wrst_n & rinc & ~mw_data_reg0temp_empty;
assign mw_data_reg0temp_wena = wrst_n & winc & ~mw_data_reg0temp_full;
assign mw_data_reg0temp_empty = (mw_data_reg0addr_cval == 0);
assign mw_data_reg0temp_full = (mw_data_reg0addr_cval == 5);

assign mw_data_reg0addr_nval = (~wrst_n) ? 0
   : mw_data_reg0temp_wena ? mw_data_reg0addr_cval + 1'b1
   : mw_data_reg0temp_rena ? mw_data_reg0addr_cval - 1'b1
   : mw_data_reg0addr_cval;
always @(posedge wclk)
begin : data_reg0seq_proc
   if (clk_en)
      mw_data_reg0addr_cval = mw_data_reg0addr_nval;
end

always @(posedge wclk)
begin : data_reg0move_proc
   if (clk_en)
   begin
      mw_data_reg0reg_cval0[9:0]  = mw_data_reg0reg_nval0[9:0] ;
      mw_data_reg0reg_cval1[9:0]  = mw_data_reg0reg_nval1[9:0] ;
      mw_data_reg0reg_cval2[9:0]  = mw_data_reg0reg_nval2[9:0] ;
      mw_data_reg0reg_cval3[9:0]  = mw_data_reg0reg_nval3[9:0] ;
      mw_data_reg0reg_cval4[9:0]  = mw_data_reg0reg_nval4[9:0] ;
      mw_data_reg0reg_cval5[9:0]  = mw_data_reg0reg_nval5[9:0] ;
   end
end
assign mw_data_reg0reg_nval0[9:0] = mw_data_reg0temp_wena ? mw_data_reg0reg_cval0[9:0] : mw_data_reg0temp_rena ? mw_data_reg0reg_cval1[9:0] : mw_data_reg0reg_cval0[9:0];
assign mw_data_reg0reg_nval1[9:0] = mw_data_reg0temp_wena ? (mw_data_reg0addr_cval == 0) ? wdata : mw_data_reg0reg_cval1[9:0]
    : mw_data_reg0temp_rena ? mw_data_reg0reg_cval2[9:0] : mw_data_reg0reg_cval1[9:0];
assign mw_data_reg0reg_nval2[9:0] = mw_data_reg0temp_wena ? (mw_data_reg0addr_cval == 1) ? wdata : mw_data_reg0reg_cval2[9:0]
    : mw_data_reg0temp_rena ? mw_data_reg0reg_cval3[9:0] : mw_data_reg0reg_cval2[9:0];
assign mw_data_reg0reg_nval3[9:0] = mw_data_reg0temp_wena ? (mw_data_reg0addr_cval == 2) ? wdata : mw_data_reg0reg_cval3[9:0]
    : mw_data_reg0temp_rena ? mw_data_reg0reg_cval4[9:0] : mw_data_reg0reg_cval3[9:0];
assign mw_data_reg0reg_nval4[9:0] = mw_data_reg0temp_wena ? (mw_data_reg0addr_cval == 3) ? wdata : mw_data_reg0reg_cval4[9:0]
    : mw_data_reg0temp_rena ? mw_data_reg0reg_cval5[9:0] : mw_data_reg0reg_cval4[9:0];
assign mw_data_reg0reg_nval5[9:0] = mw_data_reg0temp_wena ? (mw_data_reg0addr_cval == 4) ? wdata : mw_data_reg0reg_cval5[9:0] : mw_data_reg0temp_rena ? mw_data_reg0reg_cval5[9:0] : mw_data_reg0reg_cval5[9:0];

endmodule // fifo_async_reg

