//
// Module mopshub_lib.dbg_uart_top.struct
//
// Created:
//          by - dcs.dcs (chipdev2.physik.uni-wuppertal.de)
//          at - 10:38:53 11/17/22
//
// Generated by Mentor Graphics' HDL Designer(TM) 2020.4 Built on 12 Oct 2020 at 16:52:03
//

`resetall
`timescale 1ns/10ps
module dbg_uart_top( 
   // Port Declarations
   input   wire            clk, 
   input   wire            m_axi_lite_arready, 
   input   wire            m_axi_lite_awready, 
   input   wire            m_axi_lite_bvalid, 
   input   wire    [31:0]  m_axi_lite_rdata, 
   input   wire            m_axi_lite_rvalid, 
   input   wire            m_axi_lite_wready, 
   input   wire            reset, 
   output  wire    [3:0]   m_axi_lite_araddr, 
   output  wire            m_axi_lite_arvalid, 
   output  wire    [3:0]   m_axi_lite_awaddr, 
   output  wire            m_axi_lite_awvalid, 
   output  wire            m_axi_lite_bready, 
   output  wire            m_axi_lite_rready, 
   output  wire    [31:0]  m_axi_lite_wdata, 
   output  wire            m_axi_lite_wvalid
);


// Internal Declarations


// Local declarations

// Internal signal declarations
wire         rst;                        // should be used through VIO
wire  [31:0] rx_uart_data;
reg   [31:0] rx_uart_data_reg;
wire         test_can_core     = 1'b0;
wire         test_uart_core    = 1'b1;


// Instances 
elink_data_gen_SM elink_data_gen_SM0( 
   .clk                (clk), 
   .rst                (rst), 
   .irq_elink_tra      (), 
   .state_o            (), 
   .start_read_elink   (), 
   .end_read_elink     (), 
   .cnt_done           (), 
   .buffer_en          (), 
   .data_tra_in        (), 
   .rst_cnt            (), 
   .counter_gen_en     (), 
   .test_can_core      (test_can_core), 
   .test_uart_core     (test_uart_core), 
   .tx_uart_ready      (m_axi_lite_wready), 
   .data_10bit_in_dbg  (), 
   .rdy_dbg            (), 
   .irq_elink_dbg      (), 
   .tx_uart_valid      (m_axi_lite_wvalid), 
   .tx_uart_data       (m_axi_lite_wdata), 
   .tx_uart_addr       (m_axi_lite_awaddr), 
   .rx_uart_valid      (m_axi_lite_rvalid), 
   .rx_uart_addr_valid (m_axi_lite_arvalid), 
   .rx_uart_ready      (m_axi_lite_rready), 
   .rx_uart_addr_ready (m_axi_lite_arready), 
   .rx_uart_addr       (m_axi_lite_araddr)
); 

// HDL Embedded Text Block 3 eb3
// eb1 1                                        
assign rst = !reset;                               
//Tx signals
assign m_axi_lite_awvalid = m_axi_lite_wvalid;//valid signal for address
assign m_axi_lite_bready = m_axi_lite_wvalid || m_axi_lite_bvalid;
//Rx Signals 
//the address
// 1. The master assert the ARVALID signal when it drives valid address
// 2. ARVALID must remain asserted until the rising clock edge after the slave asserts the ARREADY signal.
// Read data channel
// 1.The slave can assert the RVALID signal only when it drives valid read data
// 2. RVALID must remain asserted until the rising clock edge after the master asserts RREADY
// 3. The master interface uses the RREADY signal to indicate that it accepts the data
assign rx_uart_data = rx_uart_data_reg;

always@(posedge clk)
begin 
  if(!rst) rx_uart_data_reg <= 32'b0;
   else
   begin 
    if (m_axi_lite_rready ==1'b1) rx_uart_data_reg <= m_axi_lite_rdata;
    else rx_uart_data_reg <= rx_uart_data_reg;
   end
end





































endmodule // dbg_uart_top

