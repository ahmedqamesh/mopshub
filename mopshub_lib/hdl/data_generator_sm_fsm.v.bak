//
// Module mopshub_lib.data_generator_SM.fsm
//
// Created:
//          by - dcs.dcs (chipdev2.physik.uni-wuppertal.de)
//          at - 11:44:17 06/25/21
//
// Generated by Mentor Graphics' HDL Designer(TM) 2019.4 (Build 4)
//
`resetall
`timescale 1ns/10ps
module data_generator_SM #(
   // synopsys template
   parameter max_cnt = 5'b00010
)
( 
   // Port Declarations
   // Port Declarations
   // Port Declarations
   // Port Declarations
   // Port Declarations
   // Port Declarations
   // Port Declarations
   input   wire           clk,               // write FIFO clk
   input   wire           rst,               // should be used through VIO
   output  reg            done,              // dbg
   output  reg     [4:0]  sel_cnt, 
   output  reg            irq_elink,         //  ena signal
   output  reg            en,                //  en buffer signal
   input   wire           loop_en, 
   input   wire           sign_on_sig, 
   input   wire           start_read_elink, 
   output  reg            end_read_elink, 
   input   wire           end_send_msg
);


// Internal Declarations


// Declare any pre-registered internal signals
reg [4:0] sel_cnt_cld;

// Module Declarations
reg [2:0] state_o;  
reg [2:0] wait_cnt;  

// State encoding
parameter 
          ST_IDLE    = 4'd0,
          ST_WAIT_0  = 4'd1,
          ST_SWITCH  = 4'd2,
          ST_WAIT_1  = 4'd3,
          ST_DONE    = 4'd4,
          ST_RESET   = 4'd5,
          ST_WR      = 4'd6,
          Wait_Read  = 4'd7,
          ST_WR_msg2 = 4'd8;

reg [3:0] current_state, next_state;

//-----------------------------------------------------------------
// Next State Block for machine csm
//-----------------------------------------------------------------
always @(
   current_state, 
   end_send_msg, 
   loop_en, 
   sel_cnt_cld, 
   sign_on_sig, 
   start_read_elink, 
   wait_cnt
)
begin : next_state_block_proc
   case (current_state) 
      ST_IDLE: begin
         if (sign_on_sig == 1)
            next_state = ST_WAIT_0;
         else
            next_state = ST_IDLE;
      end
      ST_WAIT_0: begin
         next_state = ST_WR;
      end
      ST_SWITCH: begin
         if (sel_cnt_cld == max_cnt)
            next_state = ST_DONE;
         else
            next_state = ST_WAIT_1;
      end
      ST_WAIT_1: begin
         if (wait_cnt == 3'b011)
            next_state = ST_WAIT_0;
         else
            next_state = ST_WR;
      end
      ST_DONE: begin
         if (loop_en == 1)
            next_state = ST_RESET;
         else
            next_state = ST_DONE;
      end
      ST_RESET: begin
         next_state = ST_IDLE;
      end
      ST_WR: begin
         if (start_read_elink ==1)
            next_state = Wait_Read;
         else
            next_state = ST_WR;
      end
      Wait_Read: begin
         if (end_send_msg == 1)
            next_state = ST_WR_msg2;
         else
            next_state = Wait_Read;
      end
      ST_WR_msg2: begin
         if (wait_cnt == 3'b011)
            next_state = ST_SWITCH;
         else
            next_state = ST_WR_msg2;
      end
      default: 
         next_state = ST_IDLE;
   endcase
end // Next State Block

//-----------------------------------------------------------------
// Output Block for machine csm
//-----------------------------------------------------------------
always
begin : output_block_proc
   // Default Assignment
   done = 0;
   irq_elink = 0;
   en = 0;
   end_read_elink = 0;
end // Output Block

//-----------------------------------------------------------------
// Clocked Block for machine csm
//-----------------------------------------------------------------
always @(
   posedge clk, 
   negedge rst
) 
begin : clocked_block_proc
   if (!rst) begin
      current_state <= ST_IDLE;
   end
   else 
   begin
      current_state <= next_state;
   end
end // Clocked Block

// Concurrent Statements
// Clocked output assignments
always @(
   sel_cnt_cld
)
begin : clocked_output_proc
   sel_cnt = sel_cnt_cld;
end
endmodule // data_generator_SM
