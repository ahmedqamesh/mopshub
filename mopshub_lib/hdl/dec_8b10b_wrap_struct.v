//
// Module mopshub_lib.dec_8b10b_wrap.struct
//
// Created:
//          by - dcs.dcs (chipdev2.physik.uni-wuppertal.de)
//          at - 18:04:55 09/30/21
//
// Generated by Mentor Graphics' HDL Designer(TM) 2019.4 (Build 4)
//

`resetall
`timescale 1ns/10ps
module dec_8b10b_wrap #(
   // synopsys template
   parameter generate_mopshub = 0,
   parameter COMMAp           = 10'b0011111010,  //-K.28.5//comma / idle character
   parameter COMMAn           = 10'b1100000101,  //+K.28.5
   parameter EOCp             = 10'b0011110110,  //-K.28.6 //start-of-chunk and end-of-chunk characters
   parameter EOCn             = 10'b1100001001,  //+K.28.6
   parameter SOCp             = 10'b0011111001,  //-K.28.1
   parameter SOCn             = 10'b1100000110,  //+K.28.1
   parameter SOBp             = 10'b0011110101,  //-K.28.2 //start-of-busy and end-of-busy characters
   parameter SOBn             = 10'b1100001010,  //+K.28.2
   parameter EOBp             = 10'b0011110011,  //-K.28.3 
   parameter EOBn             = 10'b1100001100,  //+K.28.3 
   parameter FEI4B_COMMAp     = 10'b1100000110,  //+K.28.1
   parameter FEI4B_COMMAn     = 10'b0011111001,  //-K.28.1
   parameter FEI4B_EOCp       = 10'b1100000101,  //+K.28.5 
   parameter FEI4B_EOCn       = 10'b0011111010,  //-K.28.5 
   parameter FEI4B_SOCp       = 10'b1100000111,  //+K.28.7
   parameter FEI4B_SOCn       = 10'b0011111000   //-K.28.7
)
( 
   // Port Declarations
   input   wire           clk, 
   input   wire           clk_160, 
   input   wire           datain_valid, 
   input   wire    [9:0]  enc10b_data_in, 
   input   wire           rst, 
   output  wire    [1:0]  ISK, 
   output  wire           busy, 
   output  wire           code_err, 
   output  wire    [7:0]  dec10b_data_out, 
   output  wire           disp_err
);


// Internal Declarations


// Local declarations

// Internal signal declarations
wire  [7:0] HGFEDCBA_falling_edge;
wire        ISK_comma;
wire        ISK_eob;
wire        ISK_eoc;
wire        ISK_falling_edge;
reg   [1:0] ISK_r                  = 0;
wire        ISK_sob;
wire        ISK_soc;
wire  [1:0] ISKcode;
reg         busy_r;
reg   [7:0] dec10b_data_r          = 0;
wire        reset;


// Instances 
dec_8b10b dec_8b10b0( 
   .reset        (reset), 
   .clk          (clk_160), 
   .datain       (enc10b_data_in), 
   .datain_valid (datain_valid), 
   .ko           (ISK_falling_edge), 
   .dataout      (HGFEDCBA_falling_edge), 
   .code_err     (code_err), 
   .disp_err     (disp_err)
); 

// HDL Embedded Text Block 2 ISKcode_asign
// ISKcode_asign 2                                        
assign ISKcode[0] = ((! ISK_soc) & (ISK_eoc ^ ISK_comma)) | ISK_sob | ISK_eob;
assign ISKcode[1] = ((! ISK_eoc) & (ISK_soc ^ ISK_comma)) | ISK_sob | ISK_eob;
// GBT_mode_Sig 1                                        
if (generate_mopshub == 0) 
  begin:EMCI_mode
   assign ISK_comma   = (enc10b_data_in == COMMAp |  enc10b_data_in == COMMAn )  ? 1: 0;
   assign ISK_soc     = (enc10b_data_in == SOCp   |  enc10b_data_in == SOCn   )  ? 1: 0;
   assign ISK_eoc     = (enc10b_data_in == EOCp   |  enc10b_data_in == EOCn   )  ? 1: 0;
   assign ISK_sob     = (enc10b_data_in == SOBp   |  enc10b_data_in == SOBn   )  ? 1: 0;
   assign ISK_eob     = (enc10b_data_in == EOBp   |  enc10b_data_in == EOBn   )  ? 1: 0;
  end
else
  begin:MOPSHUB_mode 
   assign ISK_comma   = (enc10b_data_in == FEI4B_COMMAp |  enc10b_data_in == FEI4B_COMMAn )  ? 1: 0;
   assign ISK_soc     = (enc10b_data_in == FEI4B_SOCp   |  enc10b_data_in == FEI4B_SOCn   )  ? 1: 0;
   assign ISK_eoc     = (enc10b_data_in == FEI4B_EOCp   |  enc10b_data_in == FEI4B_EOCn   )  ? 1: 0;
   assign ISK_sob     = 0;
   assign ISK_eob     = 0;    
  end

always@(posedge clk_160)
if (!rst)
   busy_r <= 0;
else
begin
if (!rst | ISK_eob ==1)
   busy_r <= 0; 
else if (ISK_sob ==1)
   busy_r <= 1;
end                                        
                                    








// HDL Embedded Text Block 3 isk_signal
// isk_signal 3 
always@(posedge clk_160)
if (!rst)
begin
   ISK_r <= 2'b00;
   dec10b_data_r <= 0;
end
else
begin
dec10b_data_r <= HGFEDCBA_falling_edge;
if (ISK_falling_edge == 1)//edges of the data frame
   ISK_r <= ISKcode; 
else
   ISK_r <= 2'b00;
end                                        

















// HDL Embedded Text Block 5 eb2
// eb2 5 
assign   ISK = ISK_r;
assign   dec10b_data_out = dec10b_data_r;
assign   busy = busy_r;                                   









// HDL Embedded Text Block 9 reset_assign
assign reset = !rst;




























endmodule // dec_8b10b_wrap

