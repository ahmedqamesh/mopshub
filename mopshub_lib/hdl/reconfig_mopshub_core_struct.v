//
// Module mopshub_lib.reconfig_mopshub_core.struct
//
// Created:
//          by - dcs.dcs (chipdev2.physik.uni-wuppertal.de)
//          at - 10:42:31 06/12/23
//
// Generated by Mentor Graphics' HDL Designer(TM) 2019.4 (Build 4)
//

`resetall
`timescale 1ns/10ps
module reconfig_mopshub_core( 
   // Port Declarations
   input   wire           clk, 
   input   wire           clk_40, 
   input   wire    [7:0]  data_rx, 
   input   wire           new_data_rx, 
   input   wire           rstn, 
   output  wire    [7:0]  address, 
   output  wire    [7:0]  address_elink, 
   output  wire    [7:0]  data, 
   output  wire           data_received, 
   output  wire           data_received_elink, 
   output  wire    [7:0]  data_rx_elink
);


// Internal Declarations


// Local declarations

// Internal signal declarations
reg   [9:0] COMMAn;
reg   [9:0] COMMAp;
reg   [7:0] Kchar_comma;
reg   [7:0] Kchar_eop;
reg   [7:0] Kchar_sop;
wire  [7:0] address1;
wire        clk_resc;
wire        cs_eread;
wire        cs_ewrite;
wire  [7:0] data1;
wire  [9:0] data_10bit_in;                  //Data stored in the FIFO
wire  [1:0] data_2bit_out;                  //  @ 40MHz
wire        data_received1;
wire  [9:0] data_tra_10bitin;
wire  [9:0] dec10b_Out;
wire        dec10b_rdy;
wire  [7:0] dlc_length;
wire  [9:0] dout10bit;
reg   [9:0] dout_fifo_reg;
reg         dout_rdy_fifo_reg;
wire  [9:0] elink_data;
wire        end_read_elink;                 // request to bridge FSM 
wire        entimeout;
wire        partial_reconfig_id;
wire        partial_reconfig_rec  = 1'b0;
wire        rd_en;
reg         rd_en_data;
wire        rd_en_s;
wire        rdy_fifo;
wire        read_en;
wire        rst_fifo;
wire        rx_data_rdy;
wire        rx_fifo_empty;
wire  [2:0] state_out;
wire  [6:0] statedeb;
wire        timeoutrst            = 1'b0;
wire        tx_fifo_empty;
wire        wfull;


// Instances 
elink_proc_in_dec8b10b elink_proc_in_dec8b10b0( 
   .DATA_IN        (data_2bit_out), 
   .clk            (clk_40), 
   .rst            (rstn), 
   .word10b_rdy    (), 
   .dec8b_rdy      (dec10b_rdy), 
   .COMMAn         (COMMAn), 
   .COMMAp         (COMMAp), 
   .Kchar_comma    (Kchar_comma), 
   .Kchar_eop      (Kchar_eop), 
   .Kchar_sop      (Kchar_sop), 
   .dec8b_data_out (dec10b_Out[7:0]), 
   .ISK            (dec10b_Out[9:8])
); 

elink_proc_out_enc8b10b elink_proc_out_enc8b10b0( 
   .clk           (clk_40), 
   .data_10bit_in (data_10bit_in), 
   .data_in_rdy   (rdy_fifo), 
   .rst           (rstn), 
   .get_data_trig (rd_en), 
   .data_2bit_out (data_2bit_out), 
   .COMMAn        (COMMAn), 
   .COMMAp        (COMMAp), 
   .Kchar_comma   (Kchar_comma), 
   .Kchar_eop     (Kchar_eop), 
   .Kchar_sop     (Kchar_sop)
); 

fifo_async #(10,15) fifo_async0( 
   .wclk      (clk), 
   .wrst_n    (rst_fifo), 
   .winc      (cs_ewrite), 
   .wdata     (elink_data), 
   .wfull     (wfull), 
   .awfull    (), 
   .rclk      (clk_40), 
   .rrst_n    (rst_fifo), 
   .rinc      (rd_en_s), 
   .dout_fifo (dout10bit), 
   .rempty    (tx_fifo_empty), 
   .arempty   ()
); 

fifo_async #(10,15,"False") fifo_async1( 
   .wclk      (clk_40), 
   .wrst_n    (rst_fifo), 
   .winc      (dec10b_rdy), 
   .wdata     (dec10b_Out), 
   .wfull     (), 
   .awfull    (), 
   .rclk      (clk), 
   .rrst_n    (rst_fifo), 
   .rinc      (cs_eread), 
   .dout_fifo (data_tra_10bitin), 
   .rempty    (rx_fifo_empty), 
   .arempty   ()
); 

reconfig_elink_in_sm reconfig_elink_in_sm0( 
   .Kchar_comma          (Kchar_comma), 
   .Kchar_eop            (Kchar_eop), 
   .Kchar_sop            (Kchar_sop), 
   .clk                  (clk), 
   .data_tra_10bitin     (data_tra_10bitin), 
   .fifo_elink_rdy       (rx_data_rdy), 
   .partial_reconfig_rec (partial_reconfig_rec), 
   .rst                  (rstn), 
   .address_elink        (address_elink), 
   .cs_eread             (cs_eread), 
   .data_received_elink  (data_received_elink), 
   .data_rx_elink        (data_rx_elink), 
   .end_read_elink       (end_read_elink), 
   .partial_reconfig_id  (partial_reconfig_id), 
   .statedeb             (statedeb)
); 

reconfig_elink_out_sm reconfig_elink_out_sm0( 
   .Kchar_comma   (Kchar_comma), 
   .Kchar_eop     (Kchar_eop), 
   .Kchar_sop     (Kchar_sop), 
   .clk           (clk), 
   .data_rx       (data_rx), 
   .new_data_rx   (new_data_rx), 
   .rst           (rstn), 
   .timeoutrst    (timeoutrst), 
   .address       (address), 
   .cs_ewrite     (cs_ewrite), 
   .data          (data), 
   .data_received (data_received), 
   .dlc_length    (dlc_length), 
   .elink_data    (elink_data), 
   .entimeout     (entimeout), 
   .read_en       (read_en), 
   .state_out     (state_out)
); 

decapsulation decapsulation0( 
   .clk           (clk), 
   .rstn          (rstn), 
   .data_rx       (data_rx), 
   .new_data_rx   (new_data_rx), 
   .address       (address1), 
   .data          (data1), 
   .data_received (data_received1)
); 

// HDL Embedded Text Block 2 eb2
// eb1 1  
initial Kchar_comma = 8'b10111100;//K28.5  BC
initial Kchar_eop = 8'b11011100;// K28.6 DC
initial Kchar_sop = 8'b00111100;// K28.1 3C
initial COMMAn = 10'b1100000101;
initial COMMAp = 10'b0011111010;















// HDL Embedded Text Block 3 eb3
// eb1 1  
assign rx_data_rdy = !rx_fifo_empty;

initial dout_rdy_fifo_reg  = 1'b0;
initial dout_fifo_reg      = {2'b11,8'b10111100};
initial rd_en_data         = 1'b0;


assign data_10bit_in = dout_fifo_reg;
assign rdy_fifo = dout_rdy_fifo_reg;
//add read_en signal to overcome the clock Domains issues 
assign clk_resc = read_en || wfull;
assign rd_en_s   = (rd_en && !tx_fifo_empty && clk_resc);
assign rst_fifo  = (rstn);

always @ (posedge clk_40)
  if (!rstn) rd_en_data       <=1'b0;
  else rd_en_data  <= rd_en_s;     
    

always @ (posedge clk_40)
  if (!rstn) 
  begin 
  dout_fifo_reg       <={2'b11,Kchar_comma};
  dout_rdy_fifo_reg   <= 1'b0;
  end
  else
    begin
      if (rd_en_data == 1)      
      begin
        dout_fifo_reg  <= {2'b11,dout10bit} ;
        
        dout_rdy_fifo_reg <= 1'b1;
      end
      else
      begin                  
        dout_fifo_reg  <= dout_fifo_reg; 
        dout_rdy_fifo_reg <= 1'b0;

      end
    end  





























































endmodule // reconfig_mopshub_core

