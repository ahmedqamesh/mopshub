//
// Module mopshub_lib.elink_interface_SM.fsm
//
// Created:
//          by - dcs.dcs (chipdev2.physik.uni-wuppertal.de)
//          at - 18:26:18 08/18/21
//
// Generated by Mentor Graphics' HDL Designer(TM) 2019.4 (Build 4)
//
`resetall
`timescale 1ns/10ps
module elink_interface_SM #(
   // synopsys template
   parameter Kchar_eop = 8'b11011100,  // K28.6
   parameter Kchar_sop = 8'b00111100   // K28.1
)
( 
   // Port Declarations
   input   wire           abort,              // Upon receiving a reset message on the CANbus. FSM goes into a known state
   input   wire           clk,                // posedge
   input   wire           elink_delim_dbg, 
   input   wire           fifo_data_eop, 
   input   wire           fifo_data_sop, 
   input   wire           fifo_elink_rdy, 
   input   wire           rst,                // synchronous low active
   input   wire           start_write_elink,  // request from bridge FSM
   input   wire           timeoutrst,         // timeout reset signal to the state machine in case bridge controller is not respoding for a specified time
   output  reg     [4:0]  addr,               // request to caninterface block
   output  reg            buffer_elink_en, 
   output  reg            buffer_rec_en, 
   output  reg            cs_elink, 
   output  reg            end_read_elink,     // request to bridge FSM 
   output  reg            end_write_elink,    // request to bridge FSM
   output  reg            irq_elink_rec, 
   output  reg            irq_elink_tra, 
   output  reg            start_read_elink, 
   output  reg     [6:0]  statedeb
);

//tmrg default triplicate
//tmrg tmr_error false
// Internal Declarations


// Module Declarations

// State encoding
parameter 
          waittoact       = 6'd0,
          reset           = 6'd1,
          RB0             = 6'd2,
          ST_wait_sop     = 6'd3,
          RB2             = 6'd4,
          store_RB2       = 6'd5,
          RB3             = 6'd6,
          RB4             = 6'd7,
          store_RB3       = 6'd8,
          ST_wait_buffer  = 6'd9,
          store_RB4       = 6'd10,
          ST_end_write_en = 6'd11,
          store_RB0       = 6'd12,
          RB1             = 6'd13,
          store_RB1       = 6'd14,
          RB5             = 6'd15,
          store_RB5       = 6'd16,
          RB6             = 6'd17,
          store_RB6       = 6'd18,
          RB7             = 6'd19,
          store_RB7       = 6'd20,
          store_RB8       = 6'd21,
          RB8             = 6'd22,
          store_RB9       = 6'd23,
          RB9             = 6'd24,
          ST_wait_eop     = 6'd25,
          ST_read_fifo    = 6'd26,
          st_read_data    = 6'd27,
          ST_end_read_en  = 6'd28,
          store_WB0       = 6'd29,
          store_WB1       = 6'd30,
          ST_wait_eop1    = 6'd31,
          store_WB8       = 6'd32,
          store_WB2       = 6'd33,
          store_WB7       = 6'd34,
          store_WB3       = 6'd35,
          store_WB6       = 6'd36,
          store_WB4       = 6'd37,
          store_WB5       = 6'd38,
          st_write_data   = 6'd39,
          store_COMMA     = 6'd40,
          store_SOP       = 6'd41,
          store_WB9       = 6'd42,
          store_Eop       = 6'd43,
          ST_wait_buffer1 = 6'd44;

reg [5:0] current_state, next_state;

// Wait State Signals
reg [2:0] csm_timer;
reg [2:0] csm_next_timer;
reg       csm_timeout;
reg       csm_to_ST_wait_buffer;
reg       csm_to_ST_wait_buffer1;

//-----------------------------------------------------------------
// Next State Block for machine csm
//-----------------------------------------------------------------
always @(
   csm_timeout, 
   current_state, 
   elink_delim_dbg, 
   fifo_data_eop, 
   fifo_data_sop, 
   fifo_elink_rdy, 
   rst, 
   start_write_elink
)
begin : next_state_block_proc
   // Default assignments to Wait State entry flags
   csm_to_ST_wait_buffer = 1'b0;
   csm_to_ST_wait_buffer1 = 1'b0;
   case (current_state) 
      waittoact: begin
         if (fifo_elink_rdy ==1)
            next_state = ST_wait_sop;
         else if (start_write_elink == 1)
            next_state = st_write_data;
         else
            next_state = waittoact;
      end
      reset: begin
         if (rst == 1)
            next_state = waittoact;
         else
            next_state = reset;
      end
      RB0: begin
         next_state = store_RB0;
      end
      ST_wait_sop: begin
         if (fifo_data_sop ==1)
            next_state = st_read_data;
         else
            next_state = ST_wait_sop;
      end
      RB2: begin
         next_state = store_RB2;
      end
      store_RB2: begin
         if (fifo_elink_rdy ==1)
            next_state = RB3;
         else
            next_state = store_RB2;
      end
      RB3: begin
         next_state = store_RB3;
      end
      RB4: begin
         next_state = store_RB4;
      end
      store_RB3: begin
         if (fifo_elink_rdy ==1)
            next_state = RB4;
         else
            next_state = store_RB3;
      end
      ST_wait_buffer: begin
         if (csm_timeout)
            next_state = ST_end_read_en;
         else
            next_state = ST_wait_buffer;
      end
      store_RB4: begin
         if (fifo_elink_rdy ==1)
            next_state = RB5;
         else
            next_state = store_RB4;
      end
      ST_end_write_en: begin
         next_state = waittoact;
      end
      store_RB0: begin
         if (fifo_elink_rdy ==1)
            next_state = RB1;
         else
            next_state = store_RB0;
      end
      RB1: begin
         next_state = store_RB1;
      end
      store_RB1: begin
         if (fifo_elink_rdy ==1)
            next_state = RB2;
         else
            next_state = store_RB1;
      end
      RB5: begin
         next_state = store_RB5;
      end
      store_RB5: begin
         if (fifo_elink_rdy ==1)
            next_state = RB6;
         else
            next_state = store_RB5;
      end
      RB6: begin
         next_state = store_RB6;
      end
      store_RB6: begin
         if (fifo_elink_rdy ==1)
            next_state = RB7;
         else
            next_state = store_RB6;
      end
      RB7: begin
         next_state = store_RB7;
      end
      store_RB7: begin
         if (fifo_elink_rdy ==1)
            next_state = RB8;
         else
            next_state = store_RB7;
      end
      store_RB8: begin
         if (fifo_elink_rdy ==1)
            next_state = RB9;
         else
            next_state = store_RB8;
      end
      RB8: begin
         next_state = store_RB8;
      end
      store_RB9: begin
         if (fifo_elink_rdy ==1)
            next_state = ST_wait_eop;
         else
            next_state = store_RB9;
      end
      RB9: begin
         next_state = store_RB9;
      end
      ST_wait_eop: begin
         if (fifo_data_eop ==1) begin
            next_state = ST_wait_buffer;
            csm_to_ST_wait_buffer = 1'b1;
         end
         else
            next_state = ST_wait_eop;
      end
      ST_read_fifo: begin
         next_state = RB0;
      end
      st_read_data: begin
         if (fifo_elink_rdy ==1)
            next_state = ST_read_fifo;
         else
            next_state = st_read_data;
      end
      ST_end_read_en: begin
         next_state = waittoact;
      end
      store_WB0: begin
         next_state = store_WB1;
      end
      store_WB1: begin
         next_state = store_WB2;
      end
      ST_wait_eop1: begin
         next_state = ST_wait_buffer1;
         csm_to_ST_wait_buffer1 = 1'b1;
      end
      store_WB8: begin
         next_state = store_WB9;
      end
      store_WB2: begin
         next_state = store_WB3;
      end
      store_WB7: begin
         next_state = store_WB8;
      end
      store_WB3: begin
         next_state = store_WB4;
      end
      store_WB6: begin
         next_state = store_WB7;
      end
      store_WB4: begin
         next_state = store_WB5;
      end
      store_WB5: begin
         next_state = store_WB6;
      end
      st_write_data: begin
         if (elink_delim_dbg ==1)
            next_state = store_COMMA;
         else
            next_state = store_WB0;
      end
      store_COMMA: begin
         next_state = store_SOP;
      end
      store_SOP: begin
         next_state = store_WB0;
      end
      store_WB9: begin
         if (elink_delim_dbg ==1)
            next_state = store_Eop;
         else
            next_state = ST_wait_eop1;
      end
      store_Eop: begin
         next_state = ST_wait_eop1;
      end
      ST_wait_buffer1: begin
         next_state = ST_end_write_en;
      end
      default: 
         next_state = reset;
   endcase
end // Next State Block

//-----------------------------------------------------------------
// Output Block for machine csm
//-----------------------------------------------------------------
always @(
   current_state
)
begin : output_block_proc
   // Default Assignment
   addr = 5'b0;
   buffer_elink_en = 0;
   buffer_rec_en = 0;
   cs_elink = 0;
   end_read_elink = 0;
   end_write_elink = 0;
   irq_elink_rec = 0;
   irq_elink_tra = 0;
   start_read_elink = 0;

   // Combined Actions
   case (current_state) 
      RB0: begin
         addr = 5'b00010 ;
         cs_elink =1;
      end
      ST_wait_sop: begin
         addr = 5'b00000;
         cs_elink = 1 ;
      end
      RB2: begin
         addr = 5'b00100 ;
         cs_elink = 1 ;
      end
      store_RB2: begin
         addr = 5'b00100 ;
         cs_elink = 1 ;
         buffer_elink_en =1;
      end
      RB3: begin
         addr = 5'b00101 ;
         cs_elink = 1 ;
      end
      RB4: begin
         addr = 5'b00110 ;
         cs_elink = 1 ;
      end
      store_RB3: begin
         addr = 5'b00101 ;
         cs_elink = 1 ;
         buffer_elink_en =1;
      end
      store_RB4: begin
         addr = 5'b00110 ;
         cs_elink = 1 ;
         buffer_elink_en =1;
      end
      ST_end_write_en: begin
         end_write_elink =1;
      end
      store_RB0: begin
         addr = 5'b00010 ;
         buffer_elink_en =1;
         cs_elink =1;
      end
      RB1: begin
         addr = 5'b00011 ;
         cs_elink = 1 ;
      end
      store_RB1: begin
         addr = 5'b00011 ;
         cs_elink = 1 ;
         buffer_elink_en =1;
      end
      RB5: begin
         addr = 5'b00111 ;
         cs_elink = 1 ;
      end
      store_RB5: begin
         addr = 5'b00111 ;
         cs_elink = 1 ;
         buffer_elink_en =1;
      end
      RB6: begin
         addr = 5'b01000 ;
         cs_elink = 1 ;
      end
      store_RB6: begin
         addr = 5'b01000 ;
         cs_elink = 1 ;
         buffer_elink_en =1;
      end
      RB7: begin
         addr = 5'b01001 ;
         cs_elink = 1 ;
      end
      store_RB7: begin
         addr = 5'b01001 ;
         cs_elink = 1 ;
         buffer_elink_en =1;
      end
      store_RB8: begin
         addr = 5'b01010 ;
         cs_elink = 1 ;
         buffer_elink_en =1;
      end
      RB8: begin
         addr = 5'b01010 ;
         cs_elink = 1 ;
      end
      store_RB9: begin
         addr = 5'b01011 ;
         cs_elink = 1 ;
         buffer_elink_en =1;
      end
      RB9: begin
         addr = 5'b01011 ;
         cs_elink = 1 ;
      end
      ST_wait_eop: begin
         addr = 5'b00000;
         cs_elink = 1 ;
         buffer_elink_en =0;
         irq_elink_tra =1;
      end
      ST_read_fifo: begin
         addr = 5'b00000;
         cs_elink =1;
      end
      st_read_data: begin
         start_read_elink =1;
         cs_elink =1;
      end
      ST_end_read_en: begin
         end_read_elink = 1 ;
         addr = 5'b00000;
      end
      store_WB0: begin
         addr = 5'b00010 ;
         cs_elink = 1 ;
         buffer_rec_en =1;
      end
      store_WB1: begin
         addr = 5'b00011 ;
         cs_elink = 1 ;
         buffer_rec_en =1;
      end
      ST_wait_eop1: begin
         addr = 5'b00000;
         buffer_rec_en =0;
         irq_elink_rec =1;
      end
      store_WB8: begin
         addr = 5'b01010 ;
         cs_elink = 1 ;
         buffer_rec_en =1;
      end
      store_WB2: begin
         addr = 5'b00100 ;
         cs_elink = 1 ;
         buffer_rec_en =1;
      end
      store_WB7: begin
         addr = 5'b01001 ;
         cs_elink = 1 ;
         buffer_rec_en =1;
      end
      store_WB3: begin
         addr = 5'b00101 ;
         cs_elink = 1 ;
         buffer_rec_en =1;
      end
      store_WB6: begin
         addr = 5'b01000 ;
         cs_elink = 1 ;
         buffer_rec_en =1;
      end
      store_WB4: begin
         addr = 5'b00110 ;
         cs_elink = 1 ;
         buffer_rec_en =1;
      end
      store_WB5: begin
         addr = 5'b00111 ;
         cs_elink = 1 ;
         buffer_rec_en =1;
      end
      store_COMMA: begin
         addr = 5'b00000 ;
         cs_elink =1;
      end
      store_SOP: begin
         addr = 5'b00001 ;
         cs_elink =1;
      end
      store_WB9: begin
         addr = 5'b01011 ;
         cs_elink = 1 ;
         buffer_rec_en =1;
      end
      store_Eop: begin
         addr = 5'b01100 ;
         //cs_elink =1;
      end
   endcase
end // Output Block

//-----------------------------------------------------------------
// Clocked Block for machine csm
//-----------------------------------------------------------------
always @(
   posedge clk, 
   negedge rst
) 
begin : clocked_block_proc
   if (!rst) begin
      current_state <= reset;
      csm_timer <= 3'd0;
   end
   else 
   begin
      if (timeoutrst) begin
         current_state <= reset;
         csm_timer <= 3'd0;
      end
      else if (abort) begin
         current_state <= reset;
         csm_timer <= 3'd0;
      end
      else 
      begin
         current_state <= next_state;
         csm_timer <= csm_next_timer;
      end
   end
end // Clocked Block

//-----------------------------------------------------------------
// Wait state logic for machine csm
//-----------------------------------------------------------------
always @(
   csm_timer,
   csm_to_ST_wait_buffer,
   csm_to_ST_wait_buffer1
)
begin : csm_wait_block_proc
   csm_timeout = (csm_timer == 3'd0);
   if (csm_to_ST_wait_buffer == 1'b1) begin
      csm_next_timer = 3'd3;  //no cycles(4)-1=3
   end
   else if (csm_to_ST_wait_buffer1 == 1'b1) begin
      csm_next_timer = 3'd3;  //no cycles(4)-1=3
   end
   else begin
      csm_next_timer = (csm_timeout)? 3'd0: (csm_timer - 3'd1);
   end
end // Wait State Block
// State-As-Output assignment
always @(current_state)
begin
   statedeb = 7'b0;
   statedeb[5:0] = current_state;
end

endmodule // elink_interface_SM
