//
// Module mopshub_lib.spi_interface.struct
//
// Created:
//          by - dcs.dcs (chipdev2.physik.uni-wuppertal.de)
//          at - 09:04:03 04/14/23
//
// Generated by Mentor Graphics' HDL Designer(TM) 2019.4 (Build 4)
//

`resetall
`timescale 1ns/10ps
module spi_interface( 
   // Port Declarations
   input   wire    [4:0]   addr_write, 
   input   wire            clk, 
   input   wire    [75:0]  data_tra_spi_out, 
   input   wire            miso, 
   input   wire    [4:0]   n_buses, 
   input   wire            rst, 
   input   wire            rst_cnt, 
   input   wire            start_cnt, 
   input   wire            start_init, 
   input   wire            transceive, 
   input   wire    [7:0]   tx_spi_data, 
   input   wire    [11:0]  xadc_rec_in, 
   output  wire    [4:0]   bus_cnt_active, 
   output  wire    [75:0]  data_tra_out, 
   output  reg             end_cnt, 
   output  wire            mosi, 
   output  wire            sck, 
   output  wire    [7:0]   spi_reg, 
   output  wire            w_Master_TX_Ready
);


// Internal Declarations


// Local declarations

// Internal signal declarations
wire        SPI_MODE;
wire  [4:0] bus_cnt;
wire        resceive;
wire  [7:0] rx_spi_data;
wire  [7:0] spi_id;
wire  [7:0] spi_select;


// Instances 
bit_counter bit_counter_trim( 
   .ext_rst    (rst_cnt), 
   .rst        (rst), 
   .data_out   (bus_cnt), 
   .clk        (clk), 
   .cnt_enable (start_cnt)
); 

buffer_rec_spi_data buffer_rec_spi_data0( 
   .clk          (clk), 
   .rst          (rst), 
   .buffer_en    (resceive), 
   .addr         (addr_write), 
   .xadc_rec_in  (xadc_rec_in), 
   .spi_id_in    (spi_id), 
   .spi_reg      (spi_reg), 
   .data_rec_in  (rx_spi_data), 
   .spi_select   (spi_select), 
   .data_tra_out (data_tra_out)
); 

spi_master spi_master_monitor( 
   .i_Rst_L    (rst), 
   .i_Clk      (clk), 
   .SPI_MODE   (SPI_MODE), 
   .i_TX_Byte  (tx_spi_data), 
   .i_TX_DV    (transceive), 
   .o_TX_Ready (w_Master_TX_Ready), 
   .o_RX_DV    (resceive), 
   .o_RX_Byte  (rx_spi_data), 
   .o_SPI_Clk  (sck), 
   .i_SPI_MISO (miso), 
   .o_SPI_MOSI (mosi)
); 

// HDL Embedded Text Block 8 eb8
assign spi_id     = data_tra_spi_out[75:68];
assign spi_select = data_tra_spi_out[67:60];
assign spi_reg    = data_tra_spi_out[59:52];

assign SPI_MODE     = 1'b0;
initial end_cnt = 1'b0;
assign bus_cnt_active = (start_init ==1)? bus_cnt : spi_select[4:0];
// Counter end_cnt over the Clock signal
always @(posedge clk)
begin
  if (!rst) end_cnt <= 0;
  else 
    case(bus_cnt)
     n_buses: end_cnt <= 1;
     default: end_cnt <= 0;
    endcase
end










































endmodule // spi_interface

