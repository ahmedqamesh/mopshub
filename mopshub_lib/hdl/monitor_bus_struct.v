//
// Module mopshub_lib.monitor_bus.struct
//
// Created:
//          by - dcs.dcs (localhost)
//          at - 14:24:09 06/01/22
//
// Generated by Mentor Graphics' HDL Designer(TM) 2019.4 (Build 4)
//

`resetall
`timescale 1ns/10ps
module monitor_bus( 
   // Port Declarations
   input   wire    [4:0]   addr, 
   input   wire            clk, 
   input   wire            cs, 
   input   wire            cs_m, 
   input   wire    [7:0]   data_tra_spi_out,  // Output data to be written on the CAN bus
   input   wire            miso, 
   input   wire            rst, 
   input   wire    [7:0]   spi_id, 
   input   wire    [7:0]   spi_reg, 
   input   wire    [7:0]   spi_select, 
   input   wire            start_mon_init, 
   input   wire            start_read_miso, 
   output  wire            cs_active, 
   output  wire    [31:0]  data_rec_spi_in, 
   output  wire            end_read_miso, 
   output  wire    [4:0]   mon_bus_cnt, 
   output  wire            mosi, 
   output  wire            sck
);


// Internal Declarations


// Local declarations

// Internal signal declarations
wire  [7:0] data_init;
wire  [7:0] rxdat;
wire        ss;
wire        transceive;
wire  [7:0] txdat;


// Instances 
buffer_rec_spi_data buffer_rec_spi_data0( 
   .clk           (clk), 
   .rst           (rst), 
   .buffer_en     (start_read_miso), 
   .spi_id_in     (spi_id), 
   .spi_reg       (spi_reg), 
   .data_rec_in   (rxdat), 
   .spi_select    (spi_select), 
   .end_read_miso (end_read_miso), 
   .data_rec_out  (data_rec_spi_in)
); 

initialize_spi_communcation initialize_spi_monitoring0( 
   .addr      (addr), 
   .data_init (data_init)
); 

spi_master #(40000000,2000000) spi_master0( 
   .clk        (clk), 
   .rst        (rst), 
   .sck        (sck), 
   .miso       (miso), 
   .mosi       (mosi), 
   .txdat      (txdat), 
   .rxdat      (rxdat), 
   .transceive (transceive), 
   .busy       (ss)
); 

// HDL Embedded Text Block 6 eb6
assign mon_bus_cnt = spi_select[4:0];
assign transceive = (!cs || !cs_m);//1'b1;
assign cs_active = ~(rst^(cs & cs_m));
assign txdat = (start_mon_init ==1)? data_init : data_tra_spi_out;
























endmodule // monitor_bus

