//
// Module mopshub_lib.data_generator_SM.fsm
//
// Created:
//          by - dcs.dcs (chipdev2.physik.uni-wuppertal.de)
//          at - 17:41:52 04/02/21
//
// Generated by Mentor Graphics' HDL Designer(TM) 2019.4 (Build 4)
//
`resetall
`timescale 1ns/10ps
module data_generator_SM( 
   // Port Declarations
   // Port Declarations
   // Port Declarations
   // Port Declarations
   // Port Declarations
   // Port Declarations
   input   wire           clk_usr,            // write FIFO clk
   input   wire           enable,             // should be used through VIO
   input   wire           loop_en, 
   input   wire           tx_fifo_pfull_gen,  // pfull from Tx FIFO
   output  reg            done,               // dbg
   output  reg     [2:0]  sel_cnt, 
   output  reg            wr_en               //  ena signal
);


// Internal Declarations


// Declare any pre-registered internal signals
reg [2:0] sel_cnt_cld;

// Module Declarations
reg [2:0] state_o;  
reg [2:0] wait_cnt;  
reg [2:0] max_cnt;  // # of wen to send starting from 000 (011: 4 x wen)

// State encoding
parameter 
          ST_IDLE   = 3'd0,
          ST_WR     = 3'd1,
          ST_SWITCH = 3'd2,
          ST_WAIT_1 = 3'd3,
          ST_DONE   = 3'd4,
          ST_RESET  = 3'd5,
          ST_WAIT_0 = 3'd6;

reg [2:0] current_state, next_state;

//-----------------------------------------------------------------
// Next State Block for machine csm
//-----------------------------------------------------------------
always @(
   current_state, 
   loop_en, 
   max_cnt, 
   sel_cnt_cld, 
   tx_fifo_pfull_gen, 
   wait_cnt
)
begin : next_state_block_proc
   case (current_state) 
      ST_IDLE: begin
         next_state = ST_WR;
      end
      ST_WR: begin
         if (tx_fifo_pfull_gen ==0)
            next_state = ST_WAIT_0;
         else
            next_state = ST_WR;
      end
      ST_SWITCH: begin
         if (sel_cnt_cld == max_cnt)
            next_state = ST_DONE;
         else
            next_state = ST_WAIT_1;
      end
      ST_WAIT_1: begin
         if (wait_cnt == 3'b011)
            next_state = ST_WR;
         else
            next_state = ST_WAIT_0;
      end
      ST_DONE: begin
         if (loop_en == 1)
            next_state = ST_RESET;
         else
            next_state = ST_DONE;
      end
      ST_RESET: begin
         next_state = ST_IDLE;
      end
      ST_WAIT_0: begin
         if (wait_cnt == 3'b011)
            next_state = ST_SWITCH;
         else
            next_state = ST_WAIT_0;
      end
      default: 
         next_state = ST_IDLE;
   endcase
end // Next State Block

//-----------------------------------------------------------------
// Output Block for machine csm
//-----------------------------------------------------------------
always @(
   current_state
)
begin : output_block_proc
   // Default Assignment
   done = 0;
   wr_en = 0;
   // Default Assignment To Internals
   max_cnt = 3'b111;

   // Combined Actions
   case (current_state) 
      ST_WR: begin
         wr_en =0;
      end
      ST_DONE: begin
         done =1;
      end
      ST_RESET: begin
         done =0;
         wr_en =0;
      end
      ST_WAIT_0: begin
         wr_en      = 1;
      end
   endcase
end // Output Block

//-----------------------------------------------------------------
// Clocked Block for machine csm
//-----------------------------------------------------------------
always @(
   posedge clk_usr, 
   negedge enable
) 
begin : clocked_block_proc
   if (!enable) begin
      current_state <= ST_IDLE;
   end
   else 
   begin
      current_state <= next_state;

      // Combined Actions
      case (current_state) 
         ST_IDLE: begin
            //write to the e-link FIFO
            state_o     = 3'b000;
            sel_cnt_cld     = 0;
            wait_cnt =0;
         end
         ST_WR: begin
            state_o  = 3'b001;
         end
         ST_SWITCH: begin
            //rest the wait 
            state_o     = 3'b011;
            wait_cnt =0;
         end
         ST_WAIT_1: begin
            //second wait state
            //Increment the counter
            state_o = 3'b100;
            sel_cnt_cld = sel_cnt_cld +1;
            wait_cnt =wait_cnt + 1;
         end
         ST_DONE: begin
            state_o = 3'b101;
         end
         ST_RESET: begin
            state_o     = 3'b110;
            wait_cnt =0;
            state_o     = 3'b111;
         end
         ST_WAIT_0: begin
            state_o     = 3'b010;
            wait_cnt = wait_cnt + 1;
         end
      endcase
   end
end // Clocked Block

// Concurrent Statements
// Clocked output assignments
always @(
   sel_cnt_cld
)
begin : clocked_output_proc
   sel_cnt = sel_cnt_cld;
end
endmodule // data_generator_SM
