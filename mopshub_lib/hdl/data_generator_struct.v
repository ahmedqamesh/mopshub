//
// Module mopshub_lib.data_generator.struct
//
// Created:
//          by - dcs.dcs (chipdev2.physik.uni-wuppertal.de)
//          at - 19:03:15 06/23/21
//
// Generated by Mentor Graphics' HDL Designer(TM) 2019.4 (Build 4)
//

`resetall
`timescale 1ns/10ps
module data_generator #(
   // synopsys template
   parameter DATA_WIDTH   = 76,     //Data bytes 1...8
   parameter CAN_ID_WIDTH = 12,     //CAN ID is 11-bits.  Here 3 Hex values are used to reprent COB-ID
   parameter SDO_RX       = 5'h0B,
   parameter SDO_TX       = 5'h0C
)
( 
   // Port Declarations
   input   wire                        rst, 
   input   wire                        loop_en, 
   output  wire                        done, 
   output  wire    [DATA_WIDTH-1:0]    payload, 
   input   wire                        end_send_msg, 
   output  wire    [CAN_ID_WIDTH-1:0]  canid, 
   output  wire                        irq_elink, 
   input   wire                        clk,               // write FIFO clk
   output  wire                        en, 
   input   wire                        sign_on_sig, 
   output  wire                        end_read_elink, 
   input   wire                        start_read_elink, 
   output  wire                        txgen
);


// Internal Declarations


// Local declarations

// Internal signal declarations
reg   [64-1:0]           data       = 64'h0;   // 64 bytes of data to be sent 
reg   [DATA_WIDTH-1:0]   payload_r  = 76'b0;
wire  [4:0]              sel_cnt;
reg   [CAN_ID_WIDTH-1:0] canid_r    = 0;
wire  [CAN_ID_WIDTH-1:0] sdoid;                 // this is the actual ID of the CANOpen message for SDO objects
reg   [6:0]              nodeid     = 7'h0;     // Hardwired CANopen Node-ID for each DCS controller chip


// Instances 
can_frame_gen U_0( 
   .rst     (rst), 
   .clk     (clk), 
   .payload (payload), 
   .txgen   (txgen)
); 

data_generator_SM DataGeratorSM( 
   .clk              (clk), 
   .rst              (rst), 
   .done             (done), 
   .sel_cnt          (sel_cnt), 
   .irq_elink        (irq_elink), 
   .en               (en), 
   .loop_en          (loop_en), 
   .sign_on_sig      (sign_on_sig), 
   .start_read_elink (start_read_elink), 
   .end_read_elink   (end_read_elink), 
   .end_send_msg     (end_send_msg)
); 

// HDL Embedded Text Block 1 data_loader
// data_loader 1
//sel din process
assign sdoid = {SDO_TX,nodeid}; //600+nodeid 
always @(posedge clk)
begin 
  if(!rst| loop_en == 1)
    begin
    payload_r <= 76'h0;
    canid_r  <=2'b11;
  case (sel_cnt)
    5'h0 : begin 
      payload_r  <= {sdoid,16'hDEAD, 16'h0, 16'hBEEF,8'h0, 8'h0};
      canid_r  <= sdoid;
    end
    5'h1 : begin 
      payload_r  <= {sdoid,16'hDEAD, 16'h0, 16'hBEEF,8'h0,8'h1};
      canid_r  <= sdoid;
    end
    5'h2 : begin 
      payload_r  <= {sdoid,16'hDEAD, 16'h0, 16'hBEEF,8'h0, 8'h2};
      canid_r  <= sdoid;
    end
    5'h3 : begin 
      payload_r  <= {sdoid,16'hDEAD, 16'h0, 16'hBEEF,8'h0,8'h3};
      canid_r  <= sdoid;
    end
    5'h4 : begin
      payload_r  <= {sdoid,16'hDEAD, 16'h0, 16'hBEEF, 8'h0,8'h4};
      canid_r  <= sdoid;
    end
    5'h5 : begin 
      payload_r  <= {sdoid,16'hDEAD, 16'h0, 16'hBEEF, 8'h0,8'h5};
      canid_r  <= sdoid;
    end
    5'h6 : begin 
      payload_r  <= {56'hDEADBEAFDEAD, 8'b1};
      canid_r  <= sdoid;
    end
    5'h7 : begin 
      payload_r  <= {56'hDEADBEAFDEAD, 8'b1};
      canid_r  <= sdoid;
    end
    5'h8 : begin 
      payload_r  <= {56'hDEADBEAFDEAD, 8'b1};
      canid_r  <= sdoid;
    end
    5'h9 : begin
      payload_r  <= {56'hDEADBEAFDEAD, 8'b1};
      canid_r  <= sdoid;
    end
    5'hA : begin 
      payload_r  <= {56'hDEADBEAFDEAD, 8'b1};
      canid_r  <= sdoid;
    end
    5'hB : begin 
      payload_r  <= {56'hDEADBEAFDEAD, 8'b1};
      canid_r  <= sdoid;
    end
    5'hC : begin 
      payload_r  <= {56'hDEADBEAFDEAD, 8'b1};
      canid_r  <= sdoid;
    end
    5'hD : begin 
      payload_r  <= {56'hDEADBEAFDEAD, 8'b1};
      canid_r  <= sdoid;
    end
    5'hE : begin
      payload_r  <= {56'hDEADBEAFDEAD, 8'b1};
      canid_r  <= sdoid;
    end
    5'hF : begin 
      payload_r  <= {56'hDEADBEAFDEAD, 8'b1};
      canid_r  <= sdoid;
    end
    5'h10 : begin 
      payload_r  <= {56'hDEADBEAFDEAD, 8'b1};
      canid_r  <= sdoid;
    end
    5'h11 : begin 
      payload_r  <= {56'hDEADBEAFDEAD, 8'b1};
      canid_r  <= sdoid;
    end
    5'h12 : begin 
      payload_r  <= {56'hDEADBEAFDEAD, 8'b1};
      canid_r  <= sdoid;
    end
    5'h13 : begin
      payload_r  <= {56'hDEADBEAFDEAD, 8'b1};
      canid_r  <= sdoid;     
    end
    5'h14 : begin 
      payload_r  <= {56'hDEADBEAFDEAD, 8'b1};
      canid_r  <= sdoid;
    end
    5'h15 : begin 
      payload_r  <= {56'hDEADBEAFDEAD, 8'b1};
      canid_r  <= sdoid;
    end
    5'h16 : begin 
      payload_r  <= {56'hDEADBEAFDEAD, 8'b1};
      canid_r  <= sdoid;
    end
    5'h17 : begin
      payload_r  <= {56'hDEADBEAFDEAD, 8'b1};
      canid_r  <= sdoid;
    end
    5'h18 : begin 
      payload_r  <= {56'hDEADBEAFDEAD, 8'b1};
      canid_r  <= sdoid;
    end
    5'h19 : begin 
      payload_r  <= {56'hDEADBEAFDEAD, 8'b1};
      canid_r  <= sdoid;
    end
    5'h1A : begin 
      payload_r  <= {56'hDEADBEAFDEAD, 8'b1};
      canid_r  <= sdoid;
    end
    5'h1B : begin 
      payload_r  <= {56'hDEADBEAFDEAD, 8'b1};
      canid_r  <= sdoid;
    end
    5'h1C : begin
      payload_r  <= {56'hDEADBEAFDEAD, 8'b1};
      canid_r  <= sdoid;
    end 
    5'h1D : begin 
      payload_r  <= {56'hDEADBEAFDEAD, 8'b1};
      canid_r  <= sdoid;
    end
    5'h1E : begin 
      payload_r  <= {56'hDEADBEAFDEAD, 8'b1};
      canid_r  <= sdoid;
    end
    5'h1F : begin
      payload_r  <= {56'hDEADBEAFDEAD, 8'b1};
      canid_r  <= sdoid;
    end
    default: begin
      payload_r  <= 64'h0;
      canid_r  <= sdoid;
    end    
  endcase
  end
  else
  begin
    payload_r <= 76'h0;
    canid_r  <=2'b11;
  end
end                                            



















// HDL Embedded Text Block 2 Assign
// Assign 2
//Synchronized output of the elink FIFO signals  
//always@(posedge clk_usr)
//begin
  assign payload = payload_r; 
  assign canid = canid_r;                                     
//end







endmodule // data_generator

