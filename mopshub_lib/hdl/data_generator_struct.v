//
// Module mopshub_lib.data_generator.struct
//
// Created:
//          by - dcs.dcs (chipdev2.physik.uni-wuppertal.de)
//          at - 00:43:39 06/26/21
//
// Generated by Mentor Graphics' HDL Designer(TM) 2019.4 (Build 4)
//

`resetall
`timescale 1ns/10ps
module data_generator #(
   // synopsys template
   parameter DATA_WIDTH   = 76,     //Data bytes 1...8
   parameter CAN_ID_WIDTH = 12,     //CAN ID is 11-bits.  Here 3 Hex values are used to reprent COB-ID
   parameter SDO_RX       = 5'h0B,
   parameter SDO_TX       = 5'h0C,
   parameter max_cnt      = 5,
   parameter bus_cnt      = 2
)
( 
   // Port Declarations
   input   wire                        rst, 
   input   wire                        loop_en, 
   output  wire                        done, 
   output  wire    [DATA_WIDTH-1:0]    payload, 
   output  wire    [CAN_ID_WIDTH-1:0]  canid, 
   output  wire                        irq_elink, 
   input   wire                        clk,               // write FIFO clk
   input   wire                        sign_on_sig, 
   input   wire                        start_read_elink, 
   output  wire                        end_read_elink, 
   input   wire                        end_send_msg, 
   output  wire                        buffer_en, 
   output  wire                        txgen, 
   output  wire    [7:0]               busid
);


// Internal Declarations


// Local declarations

// Internal signal declarations
reg   [DATA_WIDTH-1:0]   payload_r     = 76'b0;
reg   [CAN_ID_WIDTH-1:0] canid_r       = 0;
wire  [CAN_ID_WIDTH-1:0] sdoid;                    // this is the actual ID of the CANOpen message for SDO objects
reg   [6:0]              nodeid        = 7'h0;     // Hardwired CANopen Node-ID for each DCS controller chip
wire                     counter_en;
wire                     request_trig;
wire  [max_cnt-1:0]      sel_cnt;
wire  [2:0]              state_o;
reg   [7:0]              busid_r       = 0;


// Instances 
bit_counter #(max_cnt) BitCounter( 
   .data_out (sel_cnt), 
   .enable   (counter_en), 
   .clk      (clk), 
   .rst      (rst)
); 

can_frame_gen CANGen( 
   .rst     (rst), 
   .clk     (clk), 
   .payload (payload_r), 
   .txgen   (txgen)
); 

data_generator_SM DataGen( 
   .clk              (clk), 
   .rst              (rst), 
   .done             (done), 
   .end_send_msg     (end_send_msg), 
   .irq_elink        (irq_elink), 
   .counter_en       (counter_en), 
   .buffer_en        (buffer_en), 
   .state_o          (state_o), 
   .loop_en          (loop_en), 
   .end_read_elink   (end_read_elink), 
   .cnt_done         (request_trig), 
   .sign_on_sig      (sign_on_sig), 
   .start_read_elink (start_read_elink)
); 

// HDL Embedded Text Block 1 data_loader
// data_loader 1
//sel din process
assign request_trig = (sel_cnt == bus_cnt) ? 1:0; 
assign sdoid = {SDO_TX,nodeid}; //600+nodeid 
always @(posedge clk)
begin busid_r  <= 8'h0; 
  if(rst == 1| loop_en == 1)
    begin busid_r  <= 8'h0;
    payload_r <= 76'h0;
    canid_r  <=12'b0;
    busid_r  <=8'b0;
  case (sel_cnt)
    5'h0 : begin busid_r  <= 8'h0; 
      payload_r  <= {sdoid,16'hDEAD, 16'h0, 16'hBEEF,8'h0, busid_r};
      canid_r  <= sdoid;
    end
    5'h1 : begin busid_r  <= 8'h1; 
      payload_r  <= {sdoid,16'hDEAD, 16'h0, 16'hBEEF,8'h0, busid_r};
      canid_r  <= sdoid;
    end
    5'h2 : begin busid_r  <= 8'h2; 
      payload_r  <= {sdoid,16'hDEAD, 16'h0, 16'hBEEF,8'h0, busid_r};
      canid_r  <= sdoid;
    end
    5'h3 : begin busid_r  <= 8'h3; 
      payload_r  <= {sdoid,16'hDEAD, 16'h0, 16'hBEEF,8'h0, busid_r};
      canid_r  <= sdoid;
    end
    5'h4 : begin busid_r  <= 8'h4;
      payload_r  <= {sdoid,16'hDEAD, 16'h0, 16'hBEEF, 8'h0, busid_r};
      canid_r  <= sdoid;
    end
    5'h5 : begin busid_r  <= 8'h5; 
      payload_r  <= {sdoid,16'hDEAD, 16'h0, 16'hBEEF, 8'h0, busid_r};
      canid_r  <= sdoid;
    end
    5'h6 : begin busid_r  <= 8'h6; 
      payload_r  <= {sdoid,16'hDEAD, 16'h0, 16'hBEEF, 8'h0, busid_r};
      canid_r  <= sdoid;
    end
    5'h7 : begin busid_r  <= 8'h7; 
      payload_r  <= {sdoid,16'hDEAD, 16'h0, 16'hBEEF, 8'h0, busid_r};
      canid_r  <= sdoid;
    end
    5'h8 : begin busid_r  <= 8'h8; 
      payload_r  <= {sdoid,16'hDEAD, 16'h0, 16'hBEEF, 8'h0, busid_r};
      canid_r  <= sdoid;
    end
    5'h9 : begin busid_r  <= 8'h9;
      payload_r  <= {sdoid,16'hDEAD, 16'h0, 16'hBEEF, 8'h0, busid_r};
      canid_r  <= sdoid;
    end
    5'hA : begin busid_r  <= 8'hA; 
      payload_r  <= {sdoid,16'hDEAD, 16'h0, 16'hBEEF, 8'h0, busid_r};
      canid_r  <= sdoid;
    end
    5'hB : begin busid_r  <= 8'hB; 
      payload_r  <= {sdoid,16'hDEAD, 16'h0, 16'hBEEF, 8'h0, busid_r};
      canid_r  <= sdoid;
    end
    5'hC : begin busid_r  <= 8'hC; 
      payload_r  <= {sdoid,16'hDEAD, 16'h0, 16'hBEEF, 8'h0, busid_r};
      canid_r  <= sdoid;
    end
    5'hD : begin busid_r  <= 8'hD; 
      payload_r  <= {sdoid,16'hDEAD, 16'h0, 16'hBEEF, 8'h0, busid_r};
      canid_r  <= sdoid;
    end
    5'hE : begin busid_r  <= 8'hE;
      payload_r  <= {sdoid,16'hDEAD, 16'h0, 16'hBEEF, 8'h0, busid_r};
      canid_r  <= sdoid;
    end
    5'hF : begin busid_r  <= 8'hF; 
      payload_r  <= {sdoid,16'hDEAD, 16'h0, 16'hBEEF, 8'h0, busid_r};
      canid_r  <= sdoid;
    end
    5'h10 : begin busid_r  <= 8'h10; 
      payload_r  <= {sdoid,16'hDEAD, 16'h0, 16'hBEEF, 8'h0, busid_r};
      canid_r  <= sdoid;
    end
    5'h11 : begin busid_r  <= 8'h11; 
      payload_r  <= {sdoid,16'hDEAD, 16'h0, 16'hBEEF, 8'h0, busid_r};
      canid_r  <= sdoid;
    end
    5'h12 : begin busid_r  <= 8'h12; 
      payload_r  <= {sdoid,16'hDEAD, 16'h0, 16'hBEEF, 8'h0, busid_r};
      canid_r  <= sdoid;
    end
    5'h13 : begin busid_r  <= 8'h13;
      payload_r  <= {sdoid,16'hDEAD, 16'h0, 16'hBEEF, 8'h0, busid_r};
      canid_r  <= sdoid;     
    end
    5'h14 : begin busid_r  <= 8'h14; 
      payload_r  <= {sdoid,16'hDEAD, 16'h0, 16'hBEEF, 8'h0, busid_r};
      canid_r  <= sdoid;
    end
    5'h15 : begin busid_r  <= 8'h15; 
      payload_r  <= {sdoid,16'hDEAD, 16'h0, 16'hBEEF, 8'h0, busid_r};
      canid_r  <= sdoid;
    end
    5'h16 : begin busid_r  <= 8'h16; 
      payload_r  <= {sdoid,16'hDEAD, 16'h0, 16'hBEEF, 8'h0, busid_r};
      canid_r  <= sdoid;
    end
    5'h17 : begin busid_r  <= 8'h17;
      payload_r  <= {sdoid,16'hDEAD, 16'h0, 16'hBEEF, 8'h0, busid_r};
      canid_r  <= sdoid;
    end
    5'h18 : begin busid_r  <= 8'h18; 
      payload_r  <= {sdoid,16'hDEAD, 16'h0, 16'hBEEF, 8'h0, busid_r};
      canid_r  <= sdoid;
    end
    5'h19 : begin busid_r  <= 8'h19; 
      payload_r  <= {sdoid,16'hDEAD, 16'h0, 16'hBEEF, 8'h0, busid_r};
      canid_r  <= sdoid;
    end
    5'h1A : begin busid_r  <= 8'h1A; 
      payload_r  <= {sdoid,16'hDEAD, 16'h0, 16'hBEEF, 8'h0, busid_r};
      canid_r  <= sdoid;
    end
    5'h1B : begin busid_r  <= 8'h1B; 
      payload_r  <= {sdoid,16'hDEAD, 16'h0, 16'hBEEF, 8'h0, busid_r};
      canid_r  <= sdoid;
    end
    5'h1C : begin busid_r  <= 8'h1C;
      payload_r  <= {sdoid,16'hDEAD, 16'h0, 16'hBEEF, 8'h0, busid_r};
      canid_r  <= sdoid;
    end 
    5'h1D : begin busid_r  <= 8'h1D; 
      payload_r  <= {sdoid,16'hDEAD, 16'h0, 16'hBEEF, 8'h0, busid_r};
      canid_r  <= sdoid;
    end
    5'h1E : begin busid_r  <= 8'h1E; 
      payload_r  <= {sdoid,16'hDEAD, 16'h0, 16'hBEEF, 8'h0, busid_r};
      canid_r  <= sdoid;
    end
    5'h1F : begin busid_r  <= 8'h1F;
      payload_r  <= {sdoid,16'hDEAD, 16'h0, 16'hBEEF, 8'h0, busid_r};
      canid_r  <= sdoid;
    end
    default: begin busid_r  <= 8'h0;
      payload_r  <= 76'h0;
      canid_r  <= sdoid;
    end    
  endcase
  end
  else
  begin busid_r  <= 8'h0;
    payload_r <= 76'h0;
    canid_r  <=12'b0;
  end
end                                            


























// HDL Embedded Text Block 2 Assign
assign payload = payload_r; 
assign canid = canid_r;
assign busid = busid_r;                                     









endmodule // data_generator

