//
// Module mopshub_lib.data_generator.struct
//
// Created:
//          by - dcs.dcs (chipdev2.physik.uni-wuppertal.de)
//          at - 16:34:05 08/09/21
//
// Generated by Mentor Graphics' HDL Designer(TM) 2019.4 (Build 4)
//

`resetall
`timescale 1ns/10ps
module data_generator #(
   // synopsys template
   parameter DATA_WIDTH   = 76,
   parameter max_cnt_size = 5,
   parameter SDO_RX       = 5'h0B,
   parameter SDO_TX       = 5'h0C,
   parameter n_buses      = 5'b11111
)
( 
   // Port Declarations
   input   wire                      rst, 
   output  reg     [DATA_WIDTH-1:0]  bus_payload          = 76'b0100000, 
   input   wire                      clk,                                 // write FIFO clk
   output  wire                      buffer_en, 
   input   wire                      loop_en, 
   input   wire                      start_read_elink, 
   input   wire                      osc_auto_trim, 
   output  wire                      reqmsg, 
   output  wire                      respmsg, 
   input   wire                      read_adc, 
   output  wire    [31:0]            ch, 
   input   wire                      rx0, 
   input   wire                      elink_test, 
   output  wire                      irq_elink, 
   output  wire                      end_read_elink, 
   output  wire                      start_trim_sig, 
   output  wire                      read_adc_start, 
   output  wire                      read_adc_end, 
   output  wire    [75:0]            bus_data, 
   input   wire                      rx1, 
   input   wire                      tx0, 
   input   wire                      tx1, 
   output  reg     [7:0]             bus_id               = 8'b0, 
   input   wire                      start_data_gen, 
   input   wire                      sel_bus, 
   input   wire                      sel_ch, 
   input   wire    [4:0]             bus_cnt, 
   output  wire                      sign_in_end, 
   output  wire                      sign_in_start, 
   input   wire                      irq_can_ack, 
   output  wire                      elink_test_done, 
   output  wire    [7:0]             DEC_EDATA_OUT_8bit, 
   input   wire    [1:0]             tx_elink2bit
);


// Internal Declarations


// Local declarations

// Internal signal declarations
wire                     tx_mopshub;
wire  [max_cnt_size-1:0] bus_loop_cnt;
wire  [11:0]             sdoid;                            // this is the actual ID of the CANOpen message for SDO objects
wire                     counter_en;
wire  [2:0]              state_o;
reg                      out_request_trig;
wire                     clk_low;
wire                     start;                           // To start Driver /generator
wire                     read;                            // Prepare SDO read request
wire                     write;                           // Prepare SDO write request
wire  [23:0]             indexsubindex;                    // from state machine index and subindex to write and read. Index bytes are sent LSB first 
wire  [31:0]             taildata;                        // Data which must be written to the chip 
wire  [63:0]             data;                            // Complete 8 bytes of data to be sent in a custom message
wire                     readadc;                         // indicates to read an ADC channel 
wire  [10:0]             customcanid;                     // ID to be sent in a custom message
wire                     custommsg;                       // To start a custom message
wire                     txgen;
wire  [3:0]              dlc                 = 4'h8;      // "1" = wait for oscillator trimming before sign-in message 
wire  [10:0]             id                  = 11'h601;   // here define the node id for the chip to communicate with 
reg   [6:0]              can_nodeid          = 7'h1;       // Hardwired CANopen Node-ID for each DCS controller chip
wire                     txmops;
wire                     ready_osc;
wire                     tx;
wire                     txdec;
reg   [31:0]             payload             = 32'b0;
wire  [4:0]              ch_cnt              = 5'hC;
wire                     rxdec;
wire                     rxmops;
wire  [4:0]              select_bus;
wire                     rst_cnt;
reg   [4:0]              bus_cnt_reg         = 5'b0;
reg   [4:0]              bus_loop_cnt_reg    = 5'b0;
wire                     rx_mopshub;
wire                     bitCLKx4;
wire                     bitCLKx2;
wire                     DATA1bitIN          = 0;
wire                     swap_tx_bits        = 0;
wire                     reverse_stream_10b  = 1;
wire                     reset;
wire  [1:0]              ISK;


// Instances 
CANbus_decoder CANbus_decoder0( 
   .clk          (clk), 
   .rst          (rst), 
   .rx           (rxdec), 
   .data_rec_out (bus_data), 
   .tx           (txdec)
); 

EMCI_Emulator EMCI_Emulator0( 
   .bitCLK             (clk), 
   .data_10b_en        (), 
   .data_10b_in        (), 
   .rst                (reset), 
   .enc10bit_out_dbg   (), 
   .tx_elink2bit       (tx_elink2bit), 
   .bitCLKx2           (bitCLKx2), 
   .DATA1bitIN         (DATA1bitIN), 
   .swap_tx_bits       (swap_tx_bits), 
   .bitCLKx4           (bitCLKx4), 
   .reverse_stream_10b (reverse_stream_10b), 
   .efifoEmpty         (), 
   .efifoFull          (), 
   .HGFEDCBA           (DEC_EDATA_OUT_8bit), 
   .ISK                (ISK), 
   .fifo_dout          ()
); 

bit_counter bit_counter2( 
   .ext_rst    (rst_cnt), 
   .rst        (rst), 
   .data_out   (bus_loop_cnt), 
   .clk        (clk), 
   .cnt_enable (counter_en)
); 

canframegen canframegen0( 
   .clk           (clk), 
   .clk_low       (clk_low), 
   .rst_n         (rst), 
   .start         (start), 
   .read          (read), 
   .write         (write), 
   .random1000    (), 
   .indexsubindex (indexsubindex), 
   .rstchip       (), 
   .readadc       (readadc), 
   .allch         (), 
   .ch            (ch), 
   .custommsg     (custommsg), 
   .dlc           (dlc), 
   .data          (data), 
   .id            (id), 
   .txgen         (txgen), 
   .doneranwire   (), 
   .finranmes     (), 
   .sendran       (), 
   .nextran       (), 
   .taildata      (taildata), 
   .customcanid   (customcanid)
); 

clk_div clk_div0( 
   .clk_low (clk_low), 
   .rst     (rst), 
   .clk     (clk)
); 

clock_divider #(28'd2)
clock_divider2( 
   .clock_in  (clk), 
   .clock_out (bitCLKx2)
); 

clock_divider #(28'd4)
clock_divider4( 
   .clock_in  (clk), 
   .clock_out (bitCLKx4)
); 

data_generator_SM data_generator_SM0( 
   .clk              (clk), 
   .rst              (rst), 
   .elink_test_done  (elink_test_done), 
   .irq_can_ack      (irq_can_ack), 
   .start_data_gen   (start_data_gen), 
   .irq_elink        (irq_elink), 
   .txdec            (tx_mopshub), 
   .counter_en       (counter_en), 
   .ch               (ch), 
   .buffer_en        (buffer_en), 
   .state_o          (state_o), 
   .loop_en          (loop_en), 
   .customcanid      (customcanid), 
   .end_read_elink   (end_read_elink), 
   .indexsubindex    (indexsubindex), 
   .custommsg        (custommsg), 
   .cnt_done         (out_request_trig), 
   .readadc          (readadc), 
   .data             (data), 
   .read             (read), 
   .start_read_elink (start_read_elink), 
   .reqmsg           (reqmsg), 
   .respmsg          (respmsg), 
   .taildata         (taildata), 
   .start            (start), 
   .osc_auto_trim    (osc_auto_trim), 
   .write            (write), 
   .trimming_done    (ready_osc), 
   .sign_in_start    (sign_in_start), 
   .sign_in_end      (sign_in_end), 
   .read_adc         (read_adc), 
   .read_adc_end     (read_adc_end), 
   .read_adc_start   (read_adc_start), 
   .start_trim_sig   (start_trim_sig), 
   .elink_test       (elink_test), 
   .sel_ch           (sel_ch), 
   .sel_bus          (sel_bus), 
   .rst_cnt          (rst_cnt), 
   .rxdec            (rx_mopshub)
); 

mops_top_level mops_top_level0( 
   .can_nodeid    (can_nodeid), 
   .clk           (clk), 
   .clk_osc       (clk), 
   .osc_auto_trim (osc_auto_trim), 
   .rst_n         (rst), 
   .rxmops        (rxmops), 
   .ready_osc     (ready_osc), 
   .txmops        (txmops)
); 

// HDL Embedded Text Block 1 data_loader
// data_loader 1
assign sdoid = {SDO_TX,can_nodeid}; //600+nodeid 
always @(posedge clk)
begin
  if(!rst)
  begin
    bus_id  <= 8'h20;
    bus_payload <= {sdoid,32'h0, bus_id};
  end
  else
  case (select_bus)
    5'h0 : begin 
      bus_id  <= 8'h0; 
      bus_payload  <= {sdoid,payload,bus_id, 8'h0,16'h0};
      
    end
    5'h1 : begin
      bus_id  <= 8'h1; 
      bus_payload  <= {sdoid,payload,bus_id, 8'h0,16'h0};
      
    end
    5'h2 : begin 
      bus_id  <= 8'h2; 
      bus_payload  <= {sdoid,payload,bus_id, 8'h0,16'h0};
      
    end
    5'h3 : begin 
      bus_id  <= 8'h3; 
      bus_payload  <= {sdoid,payload,bus_id, 8'h0,16'h0};
      
    end
    5'h4 : begin 
      bus_id  <= 8'h4;
      bus_payload  <= {sdoid,payload,bus_id, 8'h0,16'h0};
      
    end
    5'h5 : begin
      bus_id  <= 8'h5; 
      bus_payload  <= {sdoid,payload,bus_id, 8'h0,16'h0};
      
    end
    5'h6 : begin 
      bus_id  <= 8'h6; 
      bus_payload  <= {sdoid,payload,bus_id, 8'h0,16'h0};
      
    end
    5'h7 : begin 
      bus_id  <= 8'h7; 
      bus_payload  <= {sdoid,payload,bus_id, 8'h0,16'h0};
      
    end
    5'h8 : begin 
      bus_id  <= 8'h8; 
      bus_payload  <= {sdoid,payload,bus_id, 8'h0,16'h0};
      
    end
    5'h9 : begin 
      bus_id  <= 8'h9;
      bus_payload  <= {sdoid,payload,bus_id, 8'h0,16'h0};
      
    end
    5'hA : begin 
      bus_id  <= 8'hA; 
      bus_payload  <= {sdoid,payload,bus_id, 8'h0,16'h0};
      
    end
    5'hB : begin 
      bus_id  <= 8'hB; 
      bus_payload  <= {sdoid,payload,bus_id, 8'h0,16'h0};
      
    end
    5'hC : begin 
      bus_id  <= 8'hC; 
      bus_payload  <= {sdoid,payload,bus_id, 8'h0,16'h0};
      
    end
    5'hD : begin 
      bus_id  <= 8'hD; 
      bus_payload  <= {sdoid,payload,bus_id, 8'h0,16'h0};
      
    end
    5'hE : begin 
      bus_id  <= 8'hE;
      bus_payload  <= {sdoid,payload,bus_id, 8'h0,16'h0};
      
    end
    5'hF : begin 
      bus_id  <= 8'hF; 
      bus_payload  <= {sdoid,payload,bus_id, 8'h0,16'h0};
      
    end
    5'h10 : begin 
      bus_id  <= 8'h10; 
      bus_payload  <= {sdoid,payload,bus_id, 8'h0,16'h0};
      
    end
    5'h11 : begin 
      bus_id  <= 8'h11; 
      bus_payload  <= {sdoid,payload,bus_id, 8'h0,16'h0};
      
    end
    5'h12 : begin 
      bus_id  <= 8'h12; 
      bus_payload  <= {sdoid,payload,bus_id, 8'h0,16'h0};
      
    end
    5'h13 : begin 
      bus_id  <= 8'h13;
      bus_payload  <= {sdoid,payload,bus_id, 8'h0,16'h0};
      
    end
    5'h14 : begin 
      bus_id  <= 8'h14; 
      bus_payload  <= {sdoid,payload,bus_id, 8'h0,16'h0};
      
    end
    5'h15 : begin 
      bus_id  <= 8'h15; 
      bus_payload  <= {sdoid,payload,bus_id, 8'h0,16'h0};
      
    end
    5'h16 : begin 
      bus_id  <= 8'h16; 
      bus_payload  <= {sdoid,payload,bus_id, 8'h0,16'h0};
      
    end
    5'h17 : begin 
      bus_id  <= 8'h17;
      bus_payload  <= {sdoid,payload,bus_id, 8'h0,16'h0};
      
    end
    5'h18 : begin 
      bus_id  <= 8'h18; 
      bus_payload  <= {sdoid,payload,bus_id, 8'h0,16'h0};
      
    end
    5'h19 : begin 
      bus_id  <= 8'h19; 
      bus_payload  <= {sdoid,payload,bus_id, 8'h0,16'h0};
      
    end
    5'h1A : begin 
      bus_id  <= 8'h1A; 
      bus_payload  <= {sdoid,payload,bus_id, 8'h0,16'h0};
      
    end
    5'h1B : begin 
      bus_id  <= 8'h1B; 
      bus_payload  <= {sdoid,payload,bus_id, 8'h0,16'h0};
      
    end
    5'h1C : begin 
      bus_id  <= 8'h1C;
      bus_payload  <= {sdoid,payload,bus_id, 8'h0,16'h0};
      
    end 
    5'h1D : begin 
      bus_id  <= 8'h1D; 
      bus_payload  <= {sdoid,payload,bus_id, 8'h0,16'h0};
      
    end
    5'h1E : begin 
      bus_id  <= 8'h1E; 
      bus_payload  <= {sdoid,payload,bus_id, 8'h0,16'h0};
      
    end
    5'h1F : begin 
      bus_id  <= 8'h1F;
      bus_payload  <= {sdoid,payload,bus_id, 8'h0,16'h0};
      
    end
    default: begin 
      bus_id  <= 8'h20;
      bus_payload  <= {sdoid,56'h0, bus_id, 8'h0,16'h0}; 
    end    
  endcase
end                                            




















































































// HDL Embedded Text Block 2 trigger_signal
always @(posedge clk)
  begin
    if (!rst)
    begin
    out_request_trig <= 0;
    end
    else 
    begin
      case(bus_loop_cnt)
       n_buses:begin
          out_request_trig <= 1;
        end
      default:begin
          out_request_trig <= 0;
        end
      endcase
  end
end
















// HDL Embedded Text Block 3 rx_assign
always@(posedge clk)
if (!rst)
begin
  bus_cnt_reg <= bus_cnt;
  bus_loop_cnt_reg <= bus_loop_cnt;
end
else
begin
  bus_loop_cnt_reg <= bus_loop_cnt;
  bus_cnt_reg <= bus_cnt;
end  

assign select_bus =(sel_bus ==1'b1) ? bus_cnt_reg: bus_loop_cnt_reg;
assign rx0 = (select_bus == 5'b0) ? ~(rst ^ (tx0 & txgen & txmops)): 0;
assign rx1 = (select_bus == 5'b1) ? ~(rst ^ (tx1 & txgen & txmops)): 0;

assign rxdec = ~(rst^(rx0 | rx1));
assign tx_mopshub = ~(rst^(tx0 & tx1));
assign rxmops = ~(rst^(rx0 | rx1));
assign rx_mopshub = ~(rst^(rx0 | rx1));
























































































// HDL Embedded Text Block 4 channel_definition
always @(posedge clk)
begin
  if(!rst)
  payload <= {16'h0, 16'h0};
  else
  case (ch_cnt)
    5'h0 : 
    begin 
      payload  <= {16'h4010, 16'h2301};
      
    end
    5'h1 : 
    begin
      payload  <= {16'h4010, 16'h2302};
      
    end
    5'h2 : 
    begin 
      payload  <= {16'h4010, 16'h2303};
      
    end
    5'h3 : 
    begin  
      payload  <= {16'h4000, 16'h2401};
      
    end
    5'h4 : 
    begin 
      payload  <= {16'h4000, 16'h2402};
    end
    5'h5 : 
    begin 
      payload  <= {16'h4000, 16'h2403};     
    end
    5'h6 : 
    begin 
      payload  <= {16'h4000, 16'h2404};  
    end
    5'h7 : 
    begin 
      payload  <= {16'h4000, 16'h2405};
      
    end
    5'h8 : 
    begin 
      payload  <= {16'h4000, 16'h2406};
      
    end
    5'h9 : 
    begin 
      payload  <= {16'h4000, 16'h2407};
      
    end
    5'hA : 
    begin  
      payload  <= {16'h4000, 16'h2408};
      
    end
    5'hB : 
    begin 
      payload  <= {16'h4000, 16'h2409};
      
    end
    5'hC : 
    begin 
      payload  <= {16'h4000, 16'h240A};
      
    end
    5'hD : 
    begin 
      payload  <= {16'h4000, 16'h240B};
      
    end
    5'hE : 
    begin 
      payload  <= {16'h4000, 16'h240C};
      
    end
    5'hF : 
    begin 
      payload  <= {16'h4000, 16'h240D};
      
    end
    5'h10 : 
    begin 
      payload  <= {16'h4000, 16'h240E};
      
    end
    5'h11 : begin 
      payload  <= {16'h4000, 16'h240F};
      
    end
    5'h12 : 
    begin
      payload  <= {16'h4000, 16'h24010};
      
    end
    5'h13 : 
    begin
      payload  <= {16'h4000, 16'h24011};
      
    end
    5'h14 : 
    begin 
      payload  <= {16'h4000, 16'h24012};
      
    end
    5'h15 : 
    begin 
      payload  <= {16'h4000, 16'h24013};
      
    end
    5'h16 : 
    begin
      payload  <= {16'h4000, 16'h24014};
      
    end
    5'h17 : 
    begin
      payload  <= {16'h4000, 16'h24015};
      
    end
    5'h18 : 
    begin  
      payload  <= {16'h4000, 16'h24016};
      
    end
    5'h19 : 
    begin 
      payload  <= {16'h4000, 16'h24017};
      
    end
    5'h1A : 
    begin
      payload  <= {16'h4000, 16'h24018};
      
    end
    5'h1B : 
    begin 
      payload  <= {16'h4000, 16'h24019};
      
    end
    5'h1C : 
    begin
      payload  <= {16'h4000, 16'h2401A};
      
    end 
    5'h1D : 
    begin
      payload  <= {16'h4000, 16'h2401B};
      
    end
    5'h1E : 
    begin 
      payload  <= {16'h4000, 16'h2401C};
      
    end
    5'h1F : 
    begin 
      payload  <= {16'h4000, 16'h2401D};
      
    end
    5'h20 : begin 
      payload  <= {16'h4000, 16'h2401E};
      
    end
    5'h21 : 
    begin 
      payload  <= {16'h4000, 16'h2401F};
      
    end
    5'h22 : 
    begin 
      payload  <= {16'h4000, 16'h24020};
      
    end
    5'h23 : 
    begin 
      payload  <= {16'h4000, 16'h24021};
      
    end
    5'h24 : 
    begin 
      payload  <= {16'h4000, 16'h24022};
      
    end
    5'h25 : 
    begin 
      payload  <= {16'h4000, 16'h24023};
      
    end
    5'h26 : 
    begin 
      payload  <= {16'h4000, 16'h24024};
      
    end
    5'h27 : 
    begin 
      payload  <= {16'h4000, 16'h24025}; 
    end        
    default: 
    begin 
      payload  <= {16'h0, 16'h0};
    end    
  endcase
end                                            














































































// HDL Embedded Text Block 5 Reset_Assign
// Reset_Assign 5   
assign reset = !rst ;                                   

endmodule // data_generator

