//
// Module mopshub_lib.data_generator.struct
//
// Created:
//          by - dcs.dcs (chipdev2.physik.uni-wuppertal.de)
//          at - 16:59:52 07/07/21
//
// Generated by Mentor Graphics' HDL Designer(TM) 2019.4 (Build 4)
//

`resetall
`timescale 1ns/10ps
module data_generator #(
   // synopsys template
   parameter DATA_WIDTH   = 76,
   parameter max_cnt_size = 5,
   parameter CAN_ID_WIDTH = 12,
   parameter SDO_RX       = 5'h0B,
   parameter SDO_TX       = 5'h0C,
   parameter n_buses      = 5'b11111
)
( 
   // Port Declarations
   output  wire                      done, 
   input   wire                      rst, 
   output  wire                      irq_elink, 
   output  reg     [DATA_WIDTH-1:0]  payload             = 76'b0100000, 
   input   wire                      clk,                                // write FIFO clk
   output  wire                      end_read_elink, 
   output  wire                      buffer_en, 
   output  wire                      txgen, 
   input   wire                      loop_en, 
   input   wire                      sign_on_sig, 
   input   wire                      start_read_elink, 
   input   wire                      send_mes_can_done, 
   input   wire                      osc_auto_trim, 
   input   wire                      trimming_done, 
   input   wire                      txdec, 
   output  wire    [10:0]            customcanid, 
   output  wire                      custommsg, 
   output  wire    [63:0]            data, 
   output  wire                      indic_sign_in, 
   output  wire                      reqmsg, 
   output  wire                      respmsg, 
   output  wire                      start, 
   output  wire    [23:0]            indexsubindex, 
   output  wire                      read, 
   output  wire    [31:0]            taildata, 
   output  wire                      write, 
   output  wire                      readadc, 
   input   wire                      read_adc, 
   output  wire                      ch
);


// Internal Declarations


// Local declarations

// Internal signal declarations
reg   [7:0]              busid             = 0;
wire  [CAN_ID_WIDTH-1:0] sdoid;                       // this is the actual ID of the CANOpen message for SDO objects
reg   [6:0]              nodeid            = 7'h1;    // Hardwired CANopen Node-ID for each DCS controller chip
wire                     counter_en;
wire  [max_cnt_size-1:0] sel_cnt;
wire  [2:0]              state_o;
wire                     ext_rst;
reg                      out_request_trig;


// Instances 
bit_counter #(max_cnt_size) BitCounter( 
   .data_out (sel_cnt), 
   .enable   (counter_en), 
   .clk      (clk), 
   .rst      (rst), 
   .ext_rst  (ext_rst)
); 

can_frame_generator CANFrameGen( 
   .rst     (rst), 
   .clk     (clk), 
   .payload (payload), 
   .txgen   (txgen)
); 

data_generator_SM DataGen( 
   .clk              (clk), 
   .rst              (rst), 
   .done             (done), 
   .end_send_msg     (send_mes_can_done), 
   .irq_elink        (irq_elink), 
   .txdec            (txdec), 
   .counter_en       (counter_en), 
   .ch               (ch), 
   .buffer_en        (buffer_en), 
   .state_o          (state_o), 
   .loop_en          (loop_en), 
   .customcanid      (customcanid), 
   .end_read_elink   (end_read_elink), 
   .indexsubindex    (indexsubindex), 
   .custommsg        (custommsg), 
   .cnt_done         (out_request_trig), 
   .readadc          (readadc), 
   .data             (data), 
   .read             (read), 
   .sign_on_sig      (sign_on_sig), 
   .start_read_elink (start_read_elink), 
   .reqmsg           (reqmsg), 
   .osc_auto_trim    (osc_auto_trim), 
   .respmsg          (respmsg), 
   .taildata         (taildata), 
   .indic_sign_in    (indic_sign_in), 
   .start            (start), 
   .write            (write), 
   .trimming_done    (trimming_done), 
   .read_adc         (read_adc)
); 

// HDL Embedded Text Block 1 data_loader
// data_loader 1
//sel din process
//assign request_trig = (sel_cnt == n_buses) ? 1:0; 
assign sdoid = {SDO_TX,nodeid}; //600+nodeid 
always @(posedge clk)
begin
  if(!rst)
  begin
    busid   <= 8'h20;
    payload <= {sdoid,16'h0, 16'h0, 16'h0, 8'h0, busid};
  end
  else
  case (sel_cnt)
    5'h0 : begin 
      busid  <= 8'h0; 
      payload  <= {sdoid,16'h4010, 16'h2301, 16'h0,8'h0, busid};// ch0
      
    end
    5'h1 : begin
      busid  <= 8'h1; 
      payload  <= {sdoid,16'h4010, 16'h2302, 16'h0,8'h0, busid};//ch1
      
    end
    5'h2 : begin 
      busid  <= 8'h2; 
      payload  <= {sdoid,16'h4010, 16'h2303, 16'h0,8'h0, busid};//ch2
      
    end
    5'h3 : begin 
      busid  <= 8'h3; 
      payload  <= {sdoid,16'h4000, 16'h2401, 16'h0,8'h0, busid};//ch3
      
    end
    5'h4 : begin 
      busid  <= 8'h4;
      payload  <= {sdoid,16'h4000, 16'h2402, 16'h0, 8'h0, busid};//ch4
      
    end
    5'h5 : begin
      busid  <= 8'h5; 
      payload  <= {sdoid,16'h4000, 16'h2402, 16'h0, 8'h0, busid};//ch5
      
    end
    5'h6 : begin 
      busid  <= 8'h6; 
      payload  <= {sdoid,16'hDEAD, 16'h0, 16'hBEEF, 8'h0, busid};
      
    end
    5'h7 : begin 
      busid  <= 8'h7; 
      payload  <= {sdoid,16'hDEAD, 16'h0, 16'hBEEF, 8'h0, busid};
      
    end
    5'h8 : begin 
      busid  <= 8'h8; 
      payload  <= {sdoid,16'hDEAD, 16'h0, 16'hBEEF, 8'h0, busid};
      
    end
    5'h9 : begin 
      busid  <= 8'h9;
      payload  <= {sdoid,16'hDEAD, 16'h0, 16'hBEEF, 8'h0, busid};
      
    end
    5'hA : begin 
      busid  <= 8'hA; 
      payload  <= {sdoid,16'hDEAD, 16'h0, 16'hBEEF, 8'h0, busid};
      
    end
    5'hB : begin 
      busid  <= 8'hB; 
      payload  <= {sdoid,16'hDEAD, 16'h0, 16'hBEEF, 8'h0, busid};
      
    end
    5'hC : begin 
      busid  <= 8'hC; 
      payload  <= {sdoid,16'hDEAD, 16'h0, 16'hBEEF, 8'h0, busid};
      
    end
    5'hD : begin 
      busid  <= 8'hD; 
      payload  <= {sdoid,16'hDEAD, 16'h0, 16'hBEEF, 8'h0, busid};
      
    end
    5'hE : begin 
      busid  <= 8'hE;
      payload  <= {sdoid,16'hDEAD, 16'h0, 16'hBEEF, 8'h0, busid};
      
    end
    5'hF : begin 
      busid  <= 8'hF; 
      payload  <= {sdoid,16'hDEAD, 16'h0, 16'hBEEF, 8'h0, busid};
      
    end
    5'h10 : begin 
      busid  <= 8'h10; 
      payload  <= {sdoid,16'hDEAD, 16'h0, 16'hBEEF, 8'h0, busid};
      
    end
    5'h11 : begin 
      busid  <= 8'h11; 
      payload  <= {sdoid,16'hDEAD, 16'h0, 16'hBEEF, 8'h0, busid};
      
    end
    5'h12 : begin busid  <= 8'h12; 
      payload  <= {sdoid,16'hDEAD, 16'h0, 16'hBEEF, 8'h0, busid};
      
    end
    5'h13 : begin busid  <= 8'h13;
      payload  <= {sdoid,16'hDEAD, 16'h0, 16'hBEEF, 8'h0, busid};
      
    end
    5'h14 : begin 
      busid  <= 8'h14; 
      payload  <= {sdoid,16'hDEAD, 16'h0, 16'hBEEF, 8'h0, busid};
      
    end
    5'h15 : begin busid  <= 8'h15; 
      payload  <= {sdoid,16'hDEAD, 16'h0, 16'hBEEF, 8'h0, busid};
      
    end
    5'h16 : begin busid  <= 8'h16; 
      payload  <= {sdoid,16'hDEAD, 16'h0, 16'hBEEF, 8'h0, busid};
      
    end
    5'h17 : begin busid  <= 8'h17;
      payload  <= {sdoid,16'hDEAD, 16'h0, 16'hBEEF, 8'h0, busid};
      
    end
    5'h18 : begin busid  <= 8'h18; 
      payload  <= {sdoid,16'hDEAD, 16'h0, 16'hBEEF, 8'h0, busid};
      
    end
    5'h19 : begin busid  <= 8'h19; 
      payload  <= {sdoid,16'hDEAD, 16'h0, 16'hBEEF, 8'h0, busid};
      
    end
    5'h1A : begin busid  <= 8'h1A; 
      payload  <= {sdoid,16'hDEAD, 16'h0, 16'hBEEF, 8'h0, busid};
      
    end
    5'h1B : begin busid  <= 8'h1B; 
      payload  <= {sdoid,16'hDEAD, 16'h0, 16'hBEEF, 8'h0, busid};
      
    end
    5'h1C : begin busid  <= 8'h1C;
      payload  <= {sdoid,16'hDEAD, 16'h0, 16'hBEEF, 8'h0, busid};
      
    end 
    5'h1D : begin busid  <= 8'h1D; 
      payload  <= {sdoid,16'hDEAD, 16'h0, 16'hBEEF, 8'h0, busid};
      
    end
    5'h1E : begin 
      busid  <= 8'h1E; 
      payload  <= {sdoid,16'hDEAD, 16'h0, 16'hBEEF, 8'h0, busid};
      
    end
    5'h1F : begin 
      busid  <= 8'h1F;
      payload  <= {sdoid,16'hDEAD, 16'h0, 16'hBEEF, 8'h0, busid};
      
    end
    default: begin 
      busid  <= 8'h20;
      payload  <= {sdoid,16'h0, 16'h0, 16'h0, 8'h0, busid};
      
    end    
  endcase
end                                            









































































// HDL Embedded Text Block 2 trigger_signal
always @(negedge clk)
  begin
    if (!rst)
    out_request_trig <= 0;
    else 
    begin
      case(sel_cnt)
       n_buses:begin
          out_request_trig <= 1;
        end
      default:begin
          out_request_trig <= 0;
        end
      endcase
  end
end








endmodule // data_generator

