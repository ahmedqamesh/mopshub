//
// Module mopshub_lib.bridgeController.struct
//
// Created:
//          by - dcs.dcs (chipdev2.physik.uni-wuppertal.de)
//          at - 16:17:28 06/17/21
//
// Generated by Mentor Graphics' HDL Designer(TM) 2019.4 (Build 4)
//

`resetall
`timescale 1ns/10ps
module bridgeController( 
   // Port Declarations
   input   wire    [4:0]   can_rec_select, 
   input   wire            clk, 
   input   wire    [75:0]  data_tra_uplink, 
   input   wire            end_read_elink, 
   input   wire            end_write_elink, 
   input   wire            endwait, 
   input   wire            irq_can_rec, 
   input   wire            irq_can_tra, 
   input   wire            irq_elink, 
   input   wire    [15:0]  read_can, 
   input   wire            rst, 
   output  wire    [4:0]   addr_can, 
   output  wire    [4:0]   can_tra_select, 
   output  wire    [75:0]  data_rec_uplink, 
   output  wire            enable_cs, 
   output  wire            end_can_proc, 
   output  wire            read_sig_can_n, 
   output  wire            send_mes_elink, 
   output  wire            sign_on_sig, 
   output  wire            start_read_elink, 
   output  wire            start_write_elink, 
   output  wire    [15:0]  write_can, 
   output  wire            write_sig_can_n
);


// Internal Declarations


// Local declarations

// Internal signal declarations
wire         abort_mes;             // Signals other state machines to come to a known statte 
wire  [15:0] data_init;             // Ouput data to be written to the registers
wire  [75:0] data_tra_mes;          // complete CAN message to be written on the CAN bus 
wire  [4:0]  data_tra_select;
wire  [4:0]  data_tra_select_sig;
wire         en;                    // enable signal
wire         en_rec_reg;
wire         end_init;              // signal to bridge state machine to end initialization phase 
wire         end_read;              // signal to end read phase 
wire         end_write;             // signal to end write phase 
wire         entimeout;
wire         init;                  // start initialization 
wire         reset_irq_can;         // reset interrupt from Canakari
wire         send_mes;              // start sending message 
wire         start_read;            // start reading canakari registers 
wire         start_write;           // start writing Canakari register 
wire  [4:0]  statedeb;
wire  [5:0]  statedebcan;
wire         timeoutrst;


// Instances 
bridgeSM CAN_Elink_Bridge( 
   .clk                 (clk), 
   .data_rec_select     (can_rec_select), 
   .data_tra_select     (data_tra_select), 
   .end_init            (end_init), 
   .end_read_can        (end_read), 
   .end_read_elink      (end_read_elink), 
   .end_write_can       (end_write), 
   .end_write_elink     (end_write_elink), 
   .endwait             (endwait), 
   .irq_can_rec         (irq_can_rec), 
   .irq_can_tra         (irq_can_tra), 
   .irq_elink           (irq_elink), 
   .rst                 (rst), 
   .timeoutrst          (timeoutrst), 
   .abort_mes           (abort_mes), 
   .data_tra_select_sig (data_tra_select_sig), 
   .end_can_proc        (end_can_proc), 
   .entimeout           (entimeout), 
   .init                (init), 
   .reset_irq_can       (reset_irq_can), 
   .send_mes_can        (send_mes), 
   .send_mes_elink      (send_mes_elink), 
   .sign_on_sig         (sign_on_sig), 
   .start_read_can      (start_read), 
   .start_read_elink    (start_read_elink), 
   .start_write_can     (start_write), 
   .start_write_elink   (start_write_elink), 
   .statedeb            (statedeb)
); 

canakari_interface Interface_canakari( 
   .abort               (abort_mes), 
   .can_rec_select      (can_rec_select), 
   .clk                 (clk), 
   .data_init           (data_init), 
   .data_tra_mes        (data_tra_mes), 
   .data_tra_select_sig (data_tra_select_sig), 
   .init                (init), 
   .read_can            (read_can), 
   .reset_irq_can       (reset_irq_can), 
   .rst                 (rst), 
   .send_mes            (send_mes), 
   .start_read          (start_read), 
   .start_write         (start_write), 
   .timeoutrst          (timeoutrst), 
   .addr_can            (addr_can), 
   .can_tra_select      (can_tra_select), 
   .cs_can              (enable_cs), 
   .en_rec_reg          (en_rec_reg), 
   .end_init            (end_init), 
   .end_read            (end_read), 
   .end_write           (end_write), 
   .read_sig_can_n      (read_sig_can_n), 
   .statedebcan         (statedebcan), 
   .write_can           (write_can), 
   .write_sig_can_n     (write_sig_can_n)
); 

initialize_block Initialize_demux( 
   .addr      (addr_can), 
   .data_init (data_init)
); 

rec_mes_buf Rec_buffer( 
   .clk            (clk), 
   .data_rec_in    (read_can), 
   .can_rec_select (can_rec_select), 
   .en             (en_rec_reg), 
   .rst            (rst), 
   .addr           (addr_can), 
   .data_rec_out   (data_rec_uplink)
); 

timoutrst Timeout_sig( 
   .clk        (clk), 
   .entimeout  (entimeout), 
   .rst        (rst), 
   .timeoutrst (timeoutrst)
); 

tra_mes_buf Tra_buffer( 
   .clk             (clk), 
   .data_tra_in     (data_tra_uplink), 
   .en              (en), 
   .rst             (rst), 
   .data_tra_out    (data_tra_mes), 
   .data_tra_select (data_tra_select)
); 


endmodule // bridgeController

