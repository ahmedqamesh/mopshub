//
// Module mopshub_lib.data_gen_elink.struct
//
// Created:
//          by - dcs.dcs (chipdev2.physik.uni-wuppertal.de)
//          at - 21:17:04 08/16/21
//
// Generated by Mentor Graphics' HDL Designer(TM) 2019.4 (Build 4)
//

`resetall
`timescale 1ns/10ps
module data_gen_elink #(
   // synopsys template
   parameter DATA_WIDTH = 16,
   parameter max_cnt    = 10
)
( 
   // Port Declarations
   input   wire           bitCLK, 
   input   wire           bitCLKx4, 
   input   wire           clk, 
   input   wire           genCLK, 
   input   wire           loop_en, 
   input   wire           reverse_stream_10b, 
   input   wire           rst, 
   input   wire           swap_tx_bits, 
   input   wire           tx_fifo_pfull, 
   output  wire    [1:0]  EDATA_OUT, 
   output  wire    [1:0]  delimeter, 
   output  wire           done, 
   output  wire    [7:0]  dout, 
   output  wire           getDataTrig
);


// Internal Declarations


// Local declarations

// Internal signal declarations
wire                counter_en;
reg   [1:0]         delimeter_r      = 2'b0;
reg   [7:0]         dout_i           = 16'b0;
wire  [9:0]         gen_edata_10bit;
wire                request_trig;
wire                reset;
wire                rst_cnt;
wire  [max_cnt-1:0] sel_cnt;
wire  [2:0]         state_o;
wire                wr_en;                      //  ena signal


// Instances 
bit_counter #(max_cnt) BitCounter( 
   .ext_rst    (rst_cnt), 
   .rst        (rst), 
   .data_out   (sel_cnt), 
   .clk        (genCLK), 
   .cnt_enable (counter_en)
); 

data_gen_elink_SM DataGen( 
   .clk               (genCLK), 
   .cnt_done          (request_trig), 
   .loop_en           (loop_en), 
   .rst               (rst), 
   .tx_fifo_pfull_gen (tx_fifo_pfull), 
   .counter_en        (counter_en), 
   .done              (done), 
   .rst_cnt           (rst_cnt), 
   .state_o           (state_o), 
   .wr_en             (wr_en)
); 

elink_proc_out_enc8b10b elink_proc_out_enc8b10b0( 
   .bitCLKx4           (bitCLKx4), 
   .bitCLK             (bitCLK), 
   .EDATA_IN           (gen_edata_10bit), 
   .EDATA_RDY          (wr_en), 
   .reverse_stream_10b (reverse_stream_10b), 
   .swap_outbits       (swap_tx_bits), 
   .rst                (reset), 
   .getDataTrig        (getDataTrig), 
   .EDATA_OUT          (EDATA_OUT)
); 

// HDL Embedded Text Block 2 data_loader1
// data_loader 1
//sel din process
assign request_trig = (sel_cnt == max_cnt+1) ? 1:0; 
always @(posedge genCLK)
begin 
  if(rst == 1 | loop_en == 1)
  case (sel_cnt)
    5'b0 : begin 
      dout_i  <= 8'h00;
      delimeter_r  <= 2'b11;
    end
    5'b00001 : begin 
      dout_i  <= 8'h00;
      delimeter_r  <= 2'b10;
    end
    5'b00010 : begin 
      dout_i  <= 8'hDE;
      delimeter_r  <= 2'b00;
    end
    5'b00011 : begin 
      dout_i  <= 8'hAD;
      delimeter_r <= 2'b00;
    end
    5'b00100 : begin 
      dout_i  <= 8'hBE;
      delimeter_r  <= 2'b00;
    end
    5'b00101 : begin 
      dout_i  <= 8'hEF;
      delimeter_r <= 2'b00;
    end
    5'b00110 : begin 
      dout_i  <=8'hDE;
      delimeter_r  <=2'b00;
    end
    5'b00111 : begin 
      dout_i  <= 8'hAD;
      delimeter_r  <= 2'b00;
    end
    5'b01000 : begin 
      dout_i  <= 8'hBE;
      delimeter_r  <= 2'b00;
    end
    5'b01001 : begin 
      dout_i  <= 8'hEF;
      delimeter_r <= 2'b00;
    end
    5'b01010 : begin 
      dout_i  <=8'h00;
      delimeter_r  <=2'b01;
    end
    default : begin 
      dout_i  <=8'h0;
      delimeter_r  <=2'b11;
    end
    
  endcase
  else
  begin
    dout_i <= 8'h0;
    delimeter_r  <=2'b11;
  end
end                                            






















// HDL Embedded Text Block 3 Assign1
// Assign 2
//Synchronized output of the elink FIFO signals  
  assign reset = !rst;
  assign dout = dout_i; 
  assign delimeter = delimeter_r;
  assign gen_edata_10bit ={delimeter,dout};                                   






endmodule // data_gen_elink

