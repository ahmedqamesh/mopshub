//
// Module mopshub_lib.data_gen_elink.struct
//
// Created:
//          by - dcs.dcs (chipdev2.physik.uni-wuppertal.de)
//          at - 19:02:51 08/19/21
//
// Generated by Mentor Graphics' HDL Designer(TM) 2019.4 (Build 4)
//

`resetall
`timescale 1ns/10ps
module data_gen_elink #(
   // synopsys template
   parameter DATA_WIDTH = 16,
   parameter max_cnt    = 11
)
( 
   // Port Declarations
   input   wire           bitCLK, 
   input   wire           bitCLKx4, 
   input   wire           genCLK, 
   input   wire           loop_en, 
   input   wire           reverse_stream_10b, 
   input   wire           rst, 
   input   wire           swap_tx_bits, 
   input   wire           tx_fifo_pfull, 
   output  wire    [1:0]  tx_elink2bit
);


// Internal Declarations


// Local declarations

// Internal signal declarations
wire  [4:0]  addr;                                            // request to caninterface block
wire         buffer_rec_en;
wire         counter_en;
wire         cs_elink;
wire  [9:0]  data_rec_10bitout;
wire  [7:0]  data_rec_8bitout;
wire  [1:0]  data_rec_delimiter;
reg   [1:0]  delimeter_r         = 0;
wire         done;                                            // dbg
reg   [7:0]  dout_r              = 0;
wire  [9:0]  dout_r_10b;
wire         elink_delim_dbg     = 1'b1;
wire         end_write_elink;                                 // request to bridge FSM
wire  [75:0] gen_edata_76bit     = 76'hdeadbeefdeadbeefdea;
reg   [75:0] gen_edata_reg       = 76'b0;
wire  [75:0] gen_edata_tra;
wire         getDataTrig;                                     //output Trig signal will enable reading from fifo (rd_en=1)
wire         irq_elink_rec;
wire         request_trig;
wire         reset;
wire         rst_cnt;
wire  [4:0]  sel_cnt;
wire         start_write_elink;
wire  [2:0]  state_o;
wire         wr_en;


// Instances 
bit_counter #(5) bit_counter0( 
   .ext_rst    (rst_cnt), 
   .rst        (rst), 
   .data_out   (sel_cnt), 
   .clk        (genCLK), 
   .cnt_enable (counter_en)
); 

data_gen_elink_SM DataGen( 
   .clk               (genCLK), 
   .cnt_done          (request_trig), 
   .loop_en           (loop_en), 
   .rst               (rst), 
   .tx_fifo_pfull_gen (tx_fifo_pfull), 
   .counter_en        (counter_en), 
   .done              (done), 
   .rst_cnt           (rst_cnt), 
   .start_write_elink (start_write_elink), 
   .state_o           (state_o), 
   .wr_en             (wr_en)
); 

elink_interface_SM elink_interface_SM_gen( 
   .abort             (), 
   .clk               (genCLK), 
   .elink_delim_dbg   (elink_delim_dbg), 
   .fifo_data_eop     (), 
   .fifo_data_sop     (), 
   .fifo_elink_rdy    (), 
   .rst               (rst), 
   .start_write_elink (start_write_elink), 
   .timeoutrst        (), 
   .addr              (addr), 
   .buffer_rec_en     (buffer_rec_en), 
   .buffer_tra_en     (), 
   .cs_elink          (cs_elink), 
   .end_read_elink    (), 
   .end_write_elink   (end_write_elink), 
   .irq_elink_rec     (irq_elink_rec), 
   .irq_elink_tra     (), 
   .start_read_elink  (), 
   .statedeb          ()
); 

elink_proc_out_enc8b10b elink_proc_out_enc8b10b_gen( 
   .bitCLKx4           (bitCLKx4), 
   .bitCLK             (bitCLK), 
   .EDATA_IN           (dout_r_10b), 
   .EDATA_RDY          (wr_en), 
   .reverse_stream_10b (reverse_stream_10b), 
   .swap_outbits       (swap_tx_bits), 
   .rst                (reset), 
   .getDataTrig        (getDataTrig), 
   .EDATA_OUT          ()
); 

fifo_to_elink fifo_to_elink_gen( 
   .fifo_wr_en  (cs_elink), 
   .bitCLKx2    (bitCLK), 
   .bitCLKx4    (bitCLKx4), 
   .rst         (reset), 
   .fifo_din    (data_rec_10bitout), 
   .efifo_pfull (), 
   .DATA1bitOUT (), 
   .elink2bit   (tx_elink2bit), 
   .fifo_flush  (reset), 
   .reverse_tx  (reverse_stream_10b), 
   .swap_output (swap_tx_bits), 
   .bitCLK      (bitCLK), 
   .fifo_wr_clk (bitCLK)
); 

rec_elink_buf rec_elink_buf_gen( 
   .data_rec_in        (gen_edata_76bit), 
   .addr               (addr), 
   .data_rec_8bitout   (data_rec_8bitout), 
   .data_rec_delimiter (data_rec_delimiter)
); 

tra_elink_buf rec_elink_buf_decoder( 
   .clk          (bitCLKx4), 
   .data_tra_in  (data_rec_8bitout), 
   .buffer_en    (buffer_rec_en), 
   .rst          (rst), 
   .addr         (addr), 
   .data_tra_out (gen_edata_tra)
); 

// HDL Embedded Text Block 7 Data_rdy_signal1
//Save data into a buffer
assign data_rec_10bitout ={data_rec_delimiter,data_rec_8bitout}; 
assign reset = !rst;  
always@(posedge bitCLKx4)
begin 
  if (rst)
  begin
    gen_edata_reg <= 75'b0;
  end
  if (irq_elink_rec)
  begin
    gen_edata_reg <= gen_edata_tra; 
  end 
  else
  begin
   gen_edata_reg <= gen_edata_reg; 
  end
end  






























































































































// HDL Embedded Text Block 8 Data_rdy_signal2
// HDL Embedded Text Block 2 data_loader1
// data_loader 1
//sel din process
assign request_trig = (sel_cnt == max_cnt+1) ? 1:0;
assign dout_r_10b ={delimeter_r,dout_r}; 
always @(posedge bitCLKx4)
begin 
  if(rst == 1 | loop_en == 1)
  case (sel_cnt)
    5'b0 : begin 
      dout_r  <= 8'h00;
      delimeter_r  <= 2'b11;
    end
    5'b00001 : begin 
      dout_r  <= 8'h00;
      delimeter_r  <= 2'b10;
    end
    5'b00010 : begin 
      dout_r  <= 8'hDE;
      delimeter_r  <= 2'b00;
    end
    5'b00011 : begin 
      dout_r  <= 8'hAD;
      delimeter_r <= 2'b00;
    end
    5'b00100 : begin 
      dout_r  <= 8'hBE;
      delimeter_r  <= 2'b00;
    end
    5'b00101 : begin 
      dout_r  <= 8'hEF;
      delimeter_r <= 2'b00;
    end
    5'b00110 : begin 
      dout_r  <=8'hDE;
      delimeter_r  <=2'b00;
    end
    5'b00111 : begin 
      dout_r  <= 8'hAD;
      delimeter_r  <= 2'b00;
    end
    5'b01000 : begin 
      dout_r  <= 8'hBE;
      delimeter_r  <= 2'b00;
    end
    5'b01001 : begin 
      dout_r  <= 8'hEF;
      delimeter_r <= 2'b00;
    end
    5'b01010 : begin 
      dout_r  <= 8'hDE;
      delimeter_r  <= 2'b00;
    end
    5'b01011 : begin 
      dout_r  <= {4'hA,4'h0}; 
      delimeter_r <= 2'b00;
    end
    
    5'b01100 : begin 
      dout_r  <=8'h00;
      delimeter_r  <=2'b01;
    end
    default : begin 
      dout_r  <=8'h0;
      delimeter_r  <=2'b11;
    end
    
  endcase
  else
  begin
    dout_r <= 8'h0;
    delimeter_r  <=2'b11;
  end
end                        

































































































































endmodule // data_gen_elink

