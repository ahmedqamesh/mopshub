//
// Module mopshub_lib.data_gen_elink.struct
//
// Created:
//          by - dcs.dcs (chipdev2.physik.uni-wuppertal.de)
//          at - 19:32:52 08/23/21
//
// Generated by Mentor Graphics' HDL Designer(TM) 2019.4 (Build 4)
//

`resetall
`timescale 1ns/10ps
module data_gen_elink #(
   // synopsys template
   parameter DATA_WIDTH = 16,
   parameter max_cnt    = 11
)
( 
   // Port Declarations
   input   wire            bitCLK, 
   // Port Declarations
   // Port Declarations
   input   wire            bitCLKx2,              //bitCLK to send the 2bits EdataOUT [clk_40 MB/s]
   input   wire            bitCLKx4, 
   input   wire            data_10b_en, 
   input   wire    [9:0]   data_10b_in, 
   input   wire            loop_en, 
   input   wire            reverse_10b_dbg, 
   input   wire            reverse_stream_10b, 
   input   wire            rst, 
   input   wire    [1:0]   rx_elink2bit_gen, 
   input   wire            swap_tx_bits, 
   input   wire            tx_fifo_pfull, 
   output  wire    [1:0]   ISK, 
   output  wire    [75:0]  data_gen_rec, 
   output  wire    [9:0]   enc10bit_out_dbg, 
   output  wire            start_write_elink, 
   output  wire    [1:0]   tx_elink2bit_gen, 
   output  wire    [7:0]   tx_elink8bit_dec_dbg
);


// Internal Declarations


// Local declarations

// Internal signal declarations
wire         BUSY;
wire  [1:0]  EDATA_2bit;
wire         code_err;
wire         counter_en;
wire         datain_valid     = 1'b1;
reg   [1:0]  delimeter_r      = 0;
wire         disp_err;
wire         done;                                         // dbg
reg   [7:0]  dout_r           = 0;
wire  [9:0]  dout_r_10b;
wire  [9:0]  enc10bit_out;
reg   [9:0]  enc10bit_r;
wire  [75:0] gen_edata_76bit  = 76'hdeadbeefdeadbeefdea;
wire         getDataTrig;                                  //output Trig signal will enable reading from fifo (rd_en=1)
wire         request_trig;
wire         reset;
wire         rst_cnt;
wire  [4:0]  sel_cnt;
reg   [2:0]  send_count;
wire         send_out_trig;
wire  [2:0]  state_o;
reg   [9:0]  word10b;
wire         wr_en;


// Instances 
bit_counter #(5) bit_counter0( 
   .ext_rst    (rst_cnt), 
   .rst        (rst), 
   .data_out   (sel_cnt), 
   .clk        (bitCLK), 
   .cnt_enable (counter_en)
); 

data_gen_elink_SM DataGen( 
   .clk               (bitCLK), 
   .cnt_done          (request_trig), 
   .loop_en           (loop_en), 
   .rst               (rst), 
   .tx_fifo_pfull_gen (tx_fifo_pfull), 
   .counter_en        (counter_en), 
   .done              (done), 
   .rst_cnt           (rst_cnt), 
   .start_write_elink (start_write_elink), 
   .state_o           (state_o), 
   .wr_en             (wr_en)
); 

dec_8b10b_wrap dec_8b10b_wrap_emci( 
   .ABCDEIFGHJ_IN (word10b), 
   .RBYTECLK      (bitCLKx4), 
   .datain_valid  (datain_valid), 
   .reset         (reset), 
   .BUSY          (BUSY), 
   .HGFEDCBA      (tx_elink8bit_dec_dbg), 
   .ISK           (ISK), 
   .code_err      (code_err), 
   .disp_err      (disp_err)
); 

demux8_Nbit U_1( 
   .sel          (send_count), 
   .EDATA_2bit   (EDATA_2bit), 
   .enc10bit_out (enc10bit_out)
); 

elink_proc_out_enc8b10b elink_proc_out_enc8b10b_gen( 
   .bitCLKx4           (bitCLKx4), 
   .bitCLK             (bitCLK), 
   .EDATA_IN           (dout_r_10b), 
   .EDATA_RDY          (wr_en), 
   .reverse_stream_10b (reverse_stream_10b), 
   .swap_outbits       (swap_tx_bits), 
   .rst                (reset), 
   .getDataTrig        (getDataTrig), 
   .EDATA_OUT          (EDATA_2bit)
); 

triger_counter #(3'b100,3'b011) triger_counter_emci( 
   .rst          (reset), 
   .bitCLK       (bitCLK), 
   .request_trig (send_out_trig)
); 

// HDL Embedded Text Block 4 eb4
// HDL Embedded Text Block 2 eb2
// eb2 2      
assign   enc10bit_out_dbg =  enc10bit_r;
always @(posedge bitCLK)
  begin
   if (reset)
      enc10bit_r <= 10'b0;
   else if (send_out_trig  == 1)
      begin
        if (reverse_10b_dbg == 1)
        enc10bit_r <= enc10bit_out;
       else
        enc10bit_r <= {enc10bit_out[0],enc10bit_out[1],enc10bit_out[2],enc10bit_out[3],enc10bit_out[4],enc10bit_out[5],enc10bit_out[6],enc10bit_out[7],enc10bit_out[8],enc10bit_out[9]};                                  
      end
  end

always @(posedge bitCLK)
  begin
     if (send_out_trig == 1)
        send_count <= 3'b0; 
     else  
      send_count <= send_count + 1'b1;
  end


always@(posedge bitCLK)
if (reset)
word10b <= 0;
else
begin
  if (data_10b_en ==1)
  word10b <= data_10b_in;
  else
  word10b <= enc10bit_out_dbg;     
end



// HDL Embedded Text Block 7 Data_rdy_signal1
//Save data into a buffer
assign tx_elink2bit_gen = rx_elink2bit_gen; // test the elink_to_fifo
assign data_gen_rec = gen_edata_76bit;
assign reset = !rst;  








































































































































// HDL Embedded Text Block 8 Data_rdy_signal2
// HDL Embedded Text Block 2 data_loader1
// data_loader 1
//sel din process
assign request_trig = (sel_cnt == max_cnt+1) ? 1:0;
assign dout_r_10b ={delimeter_r,dout_r}; 
always @(posedge bitCLK)
begin 
  if(rst == 1)
  case (sel_cnt)
    5'b0 : begin 
      dout_r  <= 8'h00;
      delimeter_r  <= 2'b11;
    end
    5'b00001 : begin 
      dout_r  <= 8'h00;
      delimeter_r  <= 2'b10;
    end
    5'b00010 : begin 
      dout_r  <= 8'hDE;
      delimeter_r  <= 2'b00;
    end
    5'b00011 : begin 
      dout_r  <= 8'hAD;
      delimeter_r <= 2'b00;
    end
    5'b00100 : begin 
      dout_r  <= 8'hBE;
      delimeter_r  <= 2'b00;
    end
    5'b00101 : begin 
      dout_r  <= 8'hEF;
      delimeter_r <= 2'b00;
    end
    5'b00110 : begin 
      dout_r  <=8'hDE;
      delimeter_r  <=2'b00;
    end
    5'b00111 : begin 
      dout_r  <= 8'hAD;
      delimeter_r  <= 2'b00;
    end
    5'b01000 : begin 
      dout_r  <= 8'hBE;
      delimeter_r  <= 2'b00;
    end
    5'b01001 : begin 
      dout_r  <= 8'hEF;
      delimeter_r <= 2'b00;
    end
    5'b01010 : begin 
      dout_r  <= 8'hDE;
      delimeter_r  <= 2'b00;
    end
    5'b01011 : begin 
      dout_r  <= {4'hA,4'h0}; 
      delimeter_r <= 2'b00;
    end
    
    5'b01100 : begin 
      dout_r  <=8'h00;
      delimeter_r  <=2'b01;
    end
    default : begin 
      dout_r  <=8'h0;
      delimeter_r  <=2'b11;
    end
    
  endcase
  else
  begin
    dout_r <= 8'h0;
    delimeter_r  <=2'b11;
  end
end                        



































































































































endmodule // data_gen_elink

