//
// Module mopshub_lib.data_generator_SM.fsm
//
// Created:
//          by - dcs.dcs (chipdev2.physik.uni-wuppertal.de)
//          at - 21:35:04 07/31/21
//
// Generated by Mentor Graphics' HDL Designer(TM) 2019.4 (Build 4)
//
`resetall
`timescale 1ns/10ps
module data_generator_SM( 
   // Port Declarations
   // Port Declarations
   // Port Declarations
   // Port Declarations
   // Port Declarations
   // Port Declarations
   // Port Declarations
   input   wire               clk,                // write FIFO clk
   input   wire               rst,                // should be used through VIO
   output  reg                done,               // dbg
   input   wire               send_mes_can_done, 
   input   wire               start_data_gen,     // This dignal should start the SM and comes from TB
   output  reg                irq_elink,          //  ena signal
   input   wire               txdec,              // Axknowledgment of succesfully sent message
   output  reg                counter_en, 
   output  integer            ch, 
   output  reg                buffer_en, 
   output  reg        [2:0]   state_o, 
   input   wire               loop_en, 
   output  reg        [10:0]  customcanid,        // ID to be sent in a custom message
   output  reg                end_read_elink, 
   output  reg        [23:0]  indexsubindex,      // Value of index should be LSByte first 
   output  reg                custommsg,          // To start a custom message
   input   wire               cnt_done, 
   output  reg                readadc,            // indicates to read an ADC channel 
   output  reg        [63:0]  data,               // Complete 8 bytes of data to be sent in a custom message
   output  reg                read,               // Prepare SDO read request
   input   wire               start_read_elink, 
   output  reg                reqmsg,             // Indicates a sent request to the testbench
   output  reg                respmsg,            // Indicates a reponse from the MOPS chip 
   output  reg        [31:0]  taildata,           // Data which must be written to the chip 
   output  reg                start,              // To start Driver /generator
   input   wire               osc_auto_trim,      // Indicates if Automated trim is en/disabled
   output  reg                write,              // Prepare SDO write request
   input   wire               trimming_done,      // Active high. When MOPS sends acknowledgement to a message.Trimming is done. 
   output  reg                sign_in_start,      // To indicate arrival of sign-in message
   output  reg                sign_in_end,        // To indicate arrival of sign-in message
   input   wire               read_adc, 
   output  reg                read_adc_end, 
   output  reg                read_adc_start, 
   output  reg                start_trim_sig, 
   input   wire               elink_test, 
   input   wire               sel_ch, 
   input   wire               sel_bus
);


// Internal Declarations


// Module Declarations

// State encoding
parameter 
          ST_Reset        = 9'd0,
          ST_WAIT         = 9'd1,
          WRITE2          = 9'd2,
          ACK8            = 9'd3,
          ACK9            = 9'd4,
          RESPMSGWAIT80   = 9'd5,
          RESPMSG95       = 9'd6,
          REQMSGWAIT96    = 9'd7,
          REQMSG96        = 9'd8,
          WRITE3          = 9'd9,
          ACK10           = 9'd10,
          ACK174          = 9'd11,
          RESPMSGWAIT81   = 9'd12,
          RESPMSG96       = 9'd13,
          REQMSGWAIT97    = 9'd14,
          REQMSG97        = 9'd15,
          WRITE1          = 9'd16,
          ACK6            = 9'd17,
          ACK7            = 9'd18,
          RESPMSGWAIT6    = 9'd19,
          RESPMSG6        = 9'd20,
          REQMSGWAIT6     = 9'd21,
          REQMSG6         = 9'd22,
          READ91          = 9'd23,
          ACK170          = 9'd24,
          ACK171          = 9'd25,
          REQMSGWAIT94    = 9'd26,
          RESPMSGWAIT78   = 9'd27,
          REQMSG94        = 9'd28,
          RESPMSG93       = 9'd29,
          READ92          = 9'd30,
          ACK172          = 9'd31,
          ACK173          = 9'd32,
          REQMSGWAIT95    = 9'd33,
          RESPMSGWAIT79   = 9'd34,
          REQMSG95        = 9'd35,
          RESPMSG94       = 9'd36,
          READ93          = 9'd37,
          ACK175          = 9'd38,
          ACK176          = 9'd39,
          REQMSGWAIT98    = 9'd40,
          RESPMSGWAIT82   = 9'd41,
          REQMSG98        = 9'd42,
          RESPMSG97       = 9'd43,
          READ36          = 9'd44,
          ACK75           = 9'd45,
          ACK76           = 9'd46,
          REQMSGWAIT38    = 9'd47,
          RESPMSGWAIT37   = 9'd48,
          REQMSG38        = 9'd49,
          RESPMSG37       = 9'd50,
          READ37          = 9'd51,
          ACK77           = 9'd52,
          ACK78           = 9'd53,
          REQMSGWAIT39    = 9'd54,
          RESPMSGWAIT38   = 9'd55,
          REQMSG39        = 9'd56,
          RESPMSG38       = 9'd57,
          READ38          = 9'd58,
          ACK79           = 9'd59,
          ACK80           = 9'd60,
          REQMSGWAIT40    = 9'd61,
          RESPMSGWAIT39   = 9'd62,
          REQMSG40        = 9'd63,
          RESPMSG39       = 9'd64,
          READ39          = 9'd65,
          ACK81           = 9'd66,
          ACK82           = 9'd67,
          REQMSGWAIT41    = 9'd68,
          RESPMSGWAIT40   = 9'd69,
          REQMSG41        = 9'd70,
          RESPMSG40       = 9'd71,
          READ40          = 9'd72,
          ACK83           = 9'd73,
          ACK84           = 9'd74,
          REQMSGWAIT42    = 9'd75,
          RESPMSGWAIT41   = 9'd76,
          REQMSG42        = 9'd77,
          RESPMSG41       = 9'd78,
          READ41          = 9'd79,
          ACK85           = 9'd80,
          ACK86           = 9'd81,
          REQMSGWAIT43    = 9'd82,
          RESPMSGWAIT42   = 9'd83,
          REQMSG43        = 9'd84,
          RESPMSG42       = 9'd85,
          READ42          = 9'd86,
          ACK87           = 9'd87,
          ACK88           = 9'd88,
          REQMSGWAIT44    = 9'd89,
          RESPMSGWAIT43   = 9'd90,
          REQMSG44        = 9'd91,
          RESPMSG43       = 9'd92,
          READ43          = 9'd93,
          ACK89           = 9'd94,
          ACK90           = 9'd95,
          REQMSGWAIT45    = 9'd96,
          RESPMSGWAIT44   = 9'd97,
          REQMSG45        = 9'd98,
          RESPMSG44       = 9'd99,
          READ44          = 9'd100,
          ACK91           = 9'd101,
          ACK92           = 9'd102,
          REQMSGWAIT46    = 9'd103,
          RESPMSGWAIT45   = 9'd104,
          REQMSG46        = 9'd105,
          RESPMSG45       = 9'd106,
          READ45          = 9'd107,
          ACK93           = 9'd108,
          ACK94           = 9'd109,
          REQMSGWAIT47    = 9'd110,
          RESPMSGWAIT46   = 9'd111,
          REQMSG47        = 9'd112,
          RESPMSG46       = 9'd113,
          READ46          = 9'd114,
          ACK95           = 9'd115,
          ACK96           = 9'd116,
          REQMSGWAIT48    = 9'd117,
          RESPMSGWAIT47   = 9'd118,
          REQMSG48        = 9'd119,
          RESPMSG47       = 9'd120,
          READ47          = 9'd121,
          ACK97           = 9'd122,
          ACK98           = 9'd123,
          REQMSGWAIT49    = 9'd124,
          RESPMSGWAIT48   = 9'd125,
          REQMSG49        = 9'd126,
          RESPMSG48       = 9'd127,
          READ48          = 9'd128,
          ACK99           = 9'd129,
          ACK100          = 9'd130,
          REQMSGWAIT50    = 9'd131,
          RESPMSGWAIT49   = 9'd132,
          REQMSG50        = 9'd133,
          RESPMSG49       = 9'd134,
          READ49          = 9'd135,
          ACK101          = 9'd136,
          ACK102          = 9'd137,
          REQMSGWAIT51    = 9'd138,
          RESPMSGWAIT50   = 9'd139,
          REQMSG51        = 9'd140,
          RESPMSG50       = 9'd141,
          READ50          = 9'd142,
          ACK103          = 9'd143,
          ACK104          = 9'd144,
          REQMSGWAIT52    = 9'd145,
          RESPMSGWAIT51   = 9'd146,
          REQMSG52        = 9'd147,
          RESPMSG51       = 9'd148,
          READ51          = 9'd149,
          ACK105          = 9'd150,
          ACK106          = 9'd151,
          REQMSGWAIT53    = 9'd152,
          RESPMSGWAIT52   = 9'd153,
          REQMSG53        = 9'd154,
          RESPMSG52       = 9'd155,
          READ52          = 9'd156,
          ACK107          = 9'd157,
          ACK108          = 9'd158,
          REQMSGWAIT54    = 9'd159,
          RESPMSGWAIT53   = 9'd160,
          REQMSG54        = 9'd161,
          RESPMSG53       = 9'd162,
          READ53          = 9'd163,
          ACK109          = 9'd164,
          ACK110          = 9'd165,
          REQMSGWAIT55    = 9'd166,
          RESPMSGWAIT54   = 9'd167,
          REQMSG55        = 9'd168,
          RESPMSG54       = 9'd169,
          READ54          = 9'd170,
          ACK111          = 9'd171,
          ACK112          = 9'd172,
          REQMSGWAIT56    = 9'd173,
          RESPMSGWAIT55   = 9'd174,
          REQMSG56        = 9'd175,
          RESPMSG55       = 9'd176,
          READ55          = 9'd177,
          ACK113          = 9'd178,
          ACK114          = 9'd179,
          REQMSGWAIT57    = 9'd180,
          RESPMSGWAIT56   = 9'd181,
          REQMSG57        = 9'd182,
          RESPMSG56       = 9'd183,
          READ56          = 9'd184,
          ACK115          = 9'd185,
          ACK116          = 9'd186,
          REQMSGWAIT58    = 9'd187,
          RESPMSGWAIT57   = 9'd188,
          REQMSG58        = 9'd189,
          RESPMSG57       = 9'd190,
          READ57          = 9'd191,
          ACK117          = 9'd192,
          ACK118          = 9'd193,
          REQMSGWAIT59    = 9'd194,
          RESPMSGWAIT58   = 9'd195,
          REQMSG59        = 9'd196,
          RESPMSG58       = 9'd197,
          READ58          = 9'd198,
          ACK119          = 9'd199,
          ACK120          = 9'd200,
          REQMSGWAIT60    = 9'd201,
          RESPMSGWAIT59   = 9'd202,
          REQMSG60        = 9'd203,
          RESPMSG59       = 9'd204,
          READ59          = 9'd205,
          ACK121          = 9'd206,
          ACK122          = 9'd207,
          REQMSGWAIT61    = 9'd208,
          RESPMSGWAIT60   = 9'd209,
          REQMSG61        = 9'd210,
          RESPMSG60       = 9'd211,
          READ60          = 9'd212,
          ACK123          = 9'd213,
          ACK124          = 9'd214,
          REQMSGWAIT62    = 9'd215,
          RESPMSGWAIT61   = 9'd216,
          REQMSG62        = 9'd217,
          RESPMSG61       = 9'd218,
          READ61          = 9'd219,
          ACK125          = 9'd220,
          ACK126          = 9'd221,
          REQMSGWAIT63    = 9'd222,
          RESPMSGWAIT62   = 9'd223,
          REQMSG63        = 9'd224,
          RESPMSG62       = 9'd225,
          READ62          = 9'd226,
          ACK127          = 9'd227,
          ACK128          = 9'd228,
          REQMSGWAIT64    = 9'd229,
          RESPMSGWAIT63   = 9'd230,
          REQMSG64        = 9'd231,
          RESPMSG63       = 9'd232,
          READ63          = 9'd233,
          ACK129          = 9'd234,
          ACK130          = 9'd235,
          REQMSGWAIT65    = 9'd236,
          RESPMSGWAIT64   = 9'd237,
          REQMSG65        = 9'd238,
          RESPMSG64       = 9'd239,
          READ64          = 9'd240,
          ACK131          = 9'd241,
          ACK132          = 9'd242,
          REQMSGWAIT66    = 9'd243,
          RESPMSGWAIT65   = 9'd244,
          REQMSG66        = 9'd245,
          RESPMSG65       = 9'd246,
          READ65          = 9'd247,
          ACK133          = 9'd248,
          ACK134          = 9'd249,
          REQMSGWAIT67    = 9'd250,
          RESPMSGWAIT66   = 9'd251,
          REQMSG67        = 9'd252,
          RESPMSG66       = 9'd253,
          READ66          = 9'd254,
          ACK135          = 9'd255,
          ACK136          = 9'd256,
          REQMSGWAIT68    = 9'd257,
          RESPMSGWAIT67   = 9'd258,
          REQMSG68        = 9'd259,
          RESPMSG67       = 9'd260,
          READ67          = 9'd261,
          ACK137          = 9'd262,
          ACK138          = 9'd263,
          REQMSGWAIT69    = 9'd264,
          RESPMSGWAIT68   = 9'd265,
          REQMSG69        = 9'd266,
          RESPMSG68       = 9'd267,
          READ68          = 9'd268,
          ACK139          = 9'd269,
          ACK140          = 9'd270,
          REQMSGWAIT70    = 9'd271,
          RESPMSGWAIT69   = 9'd272,
          REQMSG70        = 9'd273,
          RESPMSG69       = 9'd274,
          READ69          = 9'd275,
          ACK141          = 9'd276,
          ACK142          = 9'd277,
          REQMSGWAIT71    = 9'd278,
          RESPMSGWAIT70   = 9'd279,
          REQMSG71        = 9'd280,
          RESPMSG70       = 9'd281,
          READ70          = 9'd282,
          ACK143          = 9'd283,
          ACK144          = 9'd284,
          REQMSGWAIT72    = 9'd285,
          RESPMSGWAIT71   = 9'd286,
          REQMSG72        = 9'd287,
          RESPMSG71       = 9'd288,
          END_ADC         = 9'd289,
          TRIMORNOT       = 9'd290,
          SIGN_IN         = 9'd291,
          s4              = 9'd292,
          READ_SIGN_IN    = 9'd293,
          trimming_donest = 9'd294,
          READ75          = 9'd295,
          ACK153          = 9'd296,
          REQMSGWAIT78    = 9'd297,
          REQMSG78        = 9'd298,
          RESPMSG77       = 9'd299,
          finishtrim      = 9'd300,
          ST_Start        = 9'd301,
          ST_Start_Trim   = 9'd302,
          START_ADC       = 9'd303,
          ST_Irq          = 9'd304,
          ST_Select_Sig   = 9'd305,
          ST_En_Buffer    = 9'd306,
          ST_Done         = 9'd307,
          ST_End_Read     = 9'd308,
          ST_End_Read1    = 9'd309,
          ST_Last_Buff    = 9'd310,
          ST_Done_Wait    = 9'd311,
          ST_Bus_cnt      = 9'd312,
          ST_Loop_cnt     = 9'd313,
          ACK1            = 9'd314,
          REQMSG4         = 9'd315,
          RESPMSG4        = 9'd316,
          END_SIGN_IN1    = 9'd317,
          WRITE           = 9'd318,
          REQMSGWAIT      = 9'd319,
          RESPMSGWAIT     = 9'd320,
          ACK2            = 9'd321,
          ST_Elink_Wait   = 9'd322;

reg [8:0] current_state, next_state;

// Wait State Signals
reg [13:0] csm_timer;
reg [13:0] csm_next_timer;
reg        csm_timeout;
reg        csm_to_WRITE2;
reg        csm_to_ACK8;
reg        csm_to_ACK9;
reg        csm_to_RESPMSGWAIT80;
reg        csm_to_REQMSGWAIT96;
reg        csm_to_WRITE3;
reg        csm_to_ACK10;
reg        csm_to_ACK174;
reg        csm_to_RESPMSGWAIT81;
reg        csm_to_REQMSGWAIT97;
reg        csm_to_WRITE1;
reg        csm_to_ACK6;
reg        csm_to_ACK7;
reg        csm_to_RESPMSGWAIT6;
reg        csm_to_REQMSGWAIT6;
reg        csm_to_READ91;
reg        csm_to_ACK170;
reg        csm_to_ACK171;
reg        csm_to_REQMSGWAIT94;
reg        csm_to_RESPMSGWAIT78;
reg        csm_to_READ92;
reg        csm_to_ACK172;
reg        csm_to_ACK173;
reg        csm_to_REQMSGWAIT95;
reg        csm_to_RESPMSGWAIT79;
reg        csm_to_READ93;
reg        csm_to_ACK175;
reg        csm_to_ACK176;
reg        csm_to_REQMSGWAIT98;
reg        csm_to_RESPMSGWAIT82;
reg        csm_to_READ36;
reg        csm_to_ACK75;
reg        csm_to_ACK76;
reg        csm_to_REQMSGWAIT38;
reg        csm_to_RESPMSGWAIT37;
reg        csm_to_READ37;
reg        csm_to_ACK77;
reg        csm_to_ACK78;
reg        csm_to_REQMSGWAIT39;
reg        csm_to_RESPMSGWAIT38;
reg        csm_to_READ38;
reg        csm_to_ACK79;
reg        csm_to_ACK80;
reg        csm_to_REQMSGWAIT40;
reg        csm_to_RESPMSGWAIT39;
reg        csm_to_READ39;
reg        csm_to_ACK81;
reg        csm_to_ACK82;
reg        csm_to_REQMSGWAIT41;
reg        csm_to_RESPMSGWAIT40;
reg        csm_to_READ40;
reg        csm_to_ACK83;
reg        csm_to_ACK84;
reg        csm_to_REQMSGWAIT42;
reg        csm_to_RESPMSGWAIT41;
reg        csm_to_READ41;
reg        csm_to_ACK85;
reg        csm_to_ACK86;
reg        csm_to_REQMSGWAIT43;
reg        csm_to_RESPMSGWAIT42;
reg        csm_to_READ42;
reg        csm_to_ACK87;
reg        csm_to_ACK88;
reg        csm_to_REQMSGWAIT44;
reg        csm_to_RESPMSGWAIT43;
reg        csm_to_READ43;
reg        csm_to_ACK89;
reg        csm_to_ACK90;
reg        csm_to_REQMSGWAIT45;
reg        csm_to_RESPMSGWAIT44;
reg        csm_to_READ44;
reg        csm_to_ACK91;
reg        csm_to_ACK92;
reg        csm_to_REQMSGWAIT46;
reg        csm_to_RESPMSGWAIT45;
reg        csm_to_READ45;
reg        csm_to_ACK93;
reg        csm_to_ACK94;
reg        csm_to_REQMSGWAIT47;
reg        csm_to_RESPMSGWAIT46;
reg        csm_to_READ46;
reg        csm_to_ACK95;
reg        csm_to_ACK96;
reg        csm_to_REQMSGWAIT48;
reg        csm_to_RESPMSGWAIT47;
reg        csm_to_READ47;
reg        csm_to_ACK97;
reg        csm_to_ACK98;
reg        csm_to_REQMSGWAIT49;
reg        csm_to_RESPMSGWAIT48;
reg        csm_to_READ48;
reg        csm_to_ACK99;
reg        csm_to_ACK100;
reg        csm_to_REQMSGWAIT50;
reg        csm_to_RESPMSGWAIT49;
reg        csm_to_READ49;
reg        csm_to_ACK101;
reg        csm_to_ACK102;
reg        csm_to_REQMSGWAIT51;
reg        csm_to_RESPMSGWAIT50;
reg        csm_to_READ50;
reg        csm_to_ACK103;
reg        csm_to_ACK104;
reg        csm_to_REQMSGWAIT52;
reg        csm_to_RESPMSGWAIT51;
reg        csm_to_READ51;
reg        csm_to_ACK105;
reg        csm_to_ACK106;
reg        csm_to_REQMSGWAIT53;
reg        csm_to_RESPMSGWAIT52;
reg        csm_to_READ52;
reg        csm_to_ACK107;
reg        csm_to_ACK108;
reg        csm_to_REQMSGWAIT54;
reg        csm_to_RESPMSGWAIT53;
reg        csm_to_READ53;
reg        csm_to_ACK109;
reg        csm_to_ACK110;
reg        csm_to_REQMSGWAIT55;
reg        csm_to_RESPMSGWAIT54;
reg        csm_to_READ54;
reg        csm_to_ACK111;
reg        csm_to_ACK112;
reg        csm_to_REQMSGWAIT56;
reg        csm_to_RESPMSGWAIT55;
reg        csm_to_READ55;
reg        csm_to_ACK113;
reg        csm_to_ACK114;
reg        csm_to_REQMSGWAIT57;
reg        csm_to_RESPMSGWAIT56;
reg        csm_to_READ56;
reg        csm_to_ACK115;
reg        csm_to_ACK116;
reg        csm_to_REQMSGWAIT58;
reg        csm_to_RESPMSGWAIT57;
reg        csm_to_READ57;
reg        csm_to_ACK117;
reg        csm_to_ACK118;
reg        csm_to_REQMSGWAIT59;
reg        csm_to_RESPMSGWAIT58;
reg        csm_to_READ58;
reg        csm_to_ACK119;
reg        csm_to_ACK120;
reg        csm_to_REQMSGWAIT60;
reg        csm_to_RESPMSGWAIT59;
reg        csm_to_READ59;
reg        csm_to_ACK121;
reg        csm_to_ACK122;
reg        csm_to_REQMSGWAIT61;
reg        csm_to_RESPMSGWAIT60;
reg        csm_to_READ60;
reg        csm_to_ACK123;
reg        csm_to_ACK124;
reg        csm_to_REQMSGWAIT62;
reg        csm_to_RESPMSGWAIT61;
reg        csm_to_READ61;
reg        csm_to_ACK125;
reg        csm_to_ACK126;
reg        csm_to_REQMSGWAIT63;
reg        csm_to_RESPMSGWAIT62;
reg        csm_to_READ62;
reg        csm_to_ACK127;
reg        csm_to_ACK128;
reg        csm_to_REQMSGWAIT64;
reg        csm_to_RESPMSGWAIT63;
reg        csm_to_READ63;
reg        csm_to_ACK129;
reg        csm_to_ACK130;
reg        csm_to_REQMSGWAIT65;
reg        csm_to_RESPMSGWAIT64;
reg        csm_to_READ64;
reg        csm_to_ACK131;
reg        csm_to_ACK132;
reg        csm_to_REQMSGWAIT66;
reg        csm_to_RESPMSGWAIT65;
reg        csm_to_READ65;
reg        csm_to_ACK133;
reg        csm_to_ACK134;
reg        csm_to_REQMSGWAIT67;
reg        csm_to_RESPMSGWAIT66;
reg        csm_to_READ66;
reg        csm_to_ACK135;
reg        csm_to_ACK136;
reg        csm_to_REQMSGWAIT68;
reg        csm_to_RESPMSGWAIT67;
reg        csm_to_READ67;
reg        csm_to_ACK137;
reg        csm_to_ACK138;
reg        csm_to_REQMSGWAIT69;
reg        csm_to_RESPMSGWAIT68;
reg        csm_to_READ68;
reg        csm_to_ACK139;
reg        csm_to_ACK140;
reg        csm_to_REQMSGWAIT70;
reg        csm_to_RESPMSGWAIT69;
reg        csm_to_READ69;
reg        csm_to_ACK141;
reg        csm_to_ACK142;
reg        csm_to_REQMSGWAIT71;
reg        csm_to_RESPMSGWAIT70;
reg        csm_to_READ70;
reg        csm_to_ACK143;
reg        csm_to_ACK144;
reg        csm_to_REQMSGWAIT72;
reg        csm_to_RESPMSGWAIT71;
reg        csm_to_SIGN_IN;
reg        csm_to_s4;
reg        csm_to_READ75;
reg        csm_to_ACK153;
reg        csm_to_REQMSGWAIT78;
reg        csm_to_ACK1;
reg        csm_to_WRITE;
reg        csm_to_REQMSGWAIT;
reg        csm_to_RESPMSGWAIT;
reg        csm_to_ACK2;
reg        csm_to_ST_Elink_Wait;

//-----------------------------------------------------------------
// Next State Block for machine csm
//-----------------------------------------------------------------
always @(
   cnt_done, 
   csm_timeout, 
   current_state, 
   elink_test, 
   loop_en, 
   osc_auto_trim, 
   read_adc, 
   sel_bus, 
   send_mes_can_done, 
   start_data_gen, 
   start_read_elink, 
   trimming_done, 
   txdec
)
begin : next_state_block_proc
   // Default assignments to Wait State entry flags
   csm_to_WRITE2 = 1'b0;
   csm_to_ACK8 = 1'b0;
   csm_to_ACK9 = 1'b0;
   csm_to_RESPMSGWAIT80 = 1'b0;
   csm_to_REQMSGWAIT96 = 1'b0;
   csm_to_WRITE3 = 1'b0;
   csm_to_ACK10 = 1'b0;
   csm_to_ACK174 = 1'b0;
   csm_to_RESPMSGWAIT81 = 1'b0;
   csm_to_REQMSGWAIT97 = 1'b0;
   csm_to_WRITE1 = 1'b0;
   csm_to_ACK6 = 1'b0;
   csm_to_ACK7 = 1'b0;
   csm_to_RESPMSGWAIT6 = 1'b0;
   csm_to_REQMSGWAIT6 = 1'b0;
   csm_to_READ91 = 1'b0;
   csm_to_ACK170 = 1'b0;
   csm_to_ACK171 = 1'b0;
   csm_to_REQMSGWAIT94 = 1'b0;
   csm_to_RESPMSGWAIT78 = 1'b0;
   csm_to_READ92 = 1'b0;
   csm_to_ACK172 = 1'b0;
   csm_to_ACK173 = 1'b0;
   csm_to_REQMSGWAIT95 = 1'b0;
   csm_to_RESPMSGWAIT79 = 1'b0;
   csm_to_READ93 = 1'b0;
   csm_to_ACK175 = 1'b0;
   csm_to_ACK176 = 1'b0;
   csm_to_REQMSGWAIT98 = 1'b0;
   csm_to_RESPMSGWAIT82 = 1'b0;
   csm_to_READ36 = 1'b0;
   csm_to_ACK75 = 1'b0;
   csm_to_ACK76 = 1'b0;
   csm_to_REQMSGWAIT38 = 1'b0;
   csm_to_RESPMSGWAIT37 = 1'b0;
   csm_to_READ37 = 1'b0;
   csm_to_ACK77 = 1'b0;
   csm_to_ACK78 = 1'b0;
   csm_to_REQMSGWAIT39 = 1'b0;
   csm_to_RESPMSGWAIT38 = 1'b0;
   csm_to_READ38 = 1'b0;
   csm_to_ACK79 = 1'b0;
   csm_to_ACK80 = 1'b0;
   csm_to_REQMSGWAIT40 = 1'b0;
   csm_to_RESPMSGWAIT39 = 1'b0;
   csm_to_READ39 = 1'b0;
   csm_to_ACK81 = 1'b0;
   csm_to_ACK82 = 1'b0;
   csm_to_REQMSGWAIT41 = 1'b0;
   csm_to_RESPMSGWAIT40 = 1'b0;
   csm_to_READ40 = 1'b0;
   csm_to_ACK83 = 1'b0;
   csm_to_ACK84 = 1'b0;
   csm_to_REQMSGWAIT42 = 1'b0;
   csm_to_RESPMSGWAIT41 = 1'b0;
   csm_to_READ41 = 1'b0;
   csm_to_ACK85 = 1'b0;
   csm_to_ACK86 = 1'b0;
   csm_to_REQMSGWAIT43 = 1'b0;
   csm_to_RESPMSGWAIT42 = 1'b0;
   csm_to_READ42 = 1'b0;
   csm_to_ACK87 = 1'b0;
   csm_to_ACK88 = 1'b0;
   csm_to_REQMSGWAIT44 = 1'b0;
   csm_to_RESPMSGWAIT43 = 1'b0;
   csm_to_READ43 = 1'b0;
   csm_to_ACK89 = 1'b0;
   csm_to_ACK90 = 1'b0;
   csm_to_REQMSGWAIT45 = 1'b0;
   csm_to_RESPMSGWAIT44 = 1'b0;
   csm_to_READ44 = 1'b0;
   csm_to_ACK91 = 1'b0;
   csm_to_ACK92 = 1'b0;
   csm_to_REQMSGWAIT46 = 1'b0;
   csm_to_RESPMSGWAIT45 = 1'b0;
   csm_to_READ45 = 1'b0;
   csm_to_ACK93 = 1'b0;
   csm_to_ACK94 = 1'b0;
   csm_to_REQMSGWAIT47 = 1'b0;
   csm_to_RESPMSGWAIT46 = 1'b0;
   csm_to_READ46 = 1'b0;
   csm_to_ACK95 = 1'b0;
   csm_to_ACK96 = 1'b0;
   csm_to_REQMSGWAIT48 = 1'b0;
   csm_to_RESPMSGWAIT47 = 1'b0;
   csm_to_READ47 = 1'b0;
   csm_to_ACK97 = 1'b0;
   csm_to_ACK98 = 1'b0;
   csm_to_REQMSGWAIT49 = 1'b0;
   csm_to_RESPMSGWAIT48 = 1'b0;
   csm_to_READ48 = 1'b0;
   csm_to_ACK99 = 1'b0;
   csm_to_ACK100 = 1'b0;
   csm_to_REQMSGWAIT50 = 1'b0;
   csm_to_RESPMSGWAIT49 = 1'b0;
   csm_to_READ49 = 1'b0;
   csm_to_ACK101 = 1'b0;
   csm_to_ACK102 = 1'b0;
   csm_to_REQMSGWAIT51 = 1'b0;
   csm_to_RESPMSGWAIT50 = 1'b0;
   csm_to_READ50 = 1'b0;
   csm_to_ACK103 = 1'b0;
   csm_to_ACK104 = 1'b0;
   csm_to_REQMSGWAIT52 = 1'b0;
   csm_to_RESPMSGWAIT51 = 1'b0;
   csm_to_READ51 = 1'b0;
   csm_to_ACK105 = 1'b0;
   csm_to_ACK106 = 1'b0;
   csm_to_REQMSGWAIT53 = 1'b0;
   csm_to_RESPMSGWAIT52 = 1'b0;
   csm_to_READ52 = 1'b0;
   csm_to_ACK107 = 1'b0;
   csm_to_ACK108 = 1'b0;
   csm_to_REQMSGWAIT54 = 1'b0;
   csm_to_RESPMSGWAIT53 = 1'b0;
   csm_to_READ53 = 1'b0;
   csm_to_ACK109 = 1'b0;
   csm_to_ACK110 = 1'b0;
   csm_to_REQMSGWAIT55 = 1'b0;
   csm_to_RESPMSGWAIT54 = 1'b0;
   csm_to_READ54 = 1'b0;
   csm_to_ACK111 = 1'b0;
   csm_to_ACK112 = 1'b0;
   csm_to_REQMSGWAIT56 = 1'b0;
   csm_to_RESPMSGWAIT55 = 1'b0;
   csm_to_READ55 = 1'b0;
   csm_to_ACK113 = 1'b0;
   csm_to_ACK114 = 1'b0;
   csm_to_REQMSGWAIT57 = 1'b0;
   csm_to_RESPMSGWAIT56 = 1'b0;
   csm_to_READ56 = 1'b0;
   csm_to_ACK115 = 1'b0;
   csm_to_ACK116 = 1'b0;
   csm_to_REQMSGWAIT58 = 1'b0;
   csm_to_RESPMSGWAIT57 = 1'b0;
   csm_to_READ57 = 1'b0;
   csm_to_ACK117 = 1'b0;
   csm_to_ACK118 = 1'b0;
   csm_to_REQMSGWAIT59 = 1'b0;
   csm_to_RESPMSGWAIT58 = 1'b0;
   csm_to_READ58 = 1'b0;
   csm_to_ACK119 = 1'b0;
   csm_to_ACK120 = 1'b0;
   csm_to_REQMSGWAIT60 = 1'b0;
   csm_to_RESPMSGWAIT59 = 1'b0;
   csm_to_READ59 = 1'b0;
   csm_to_ACK121 = 1'b0;
   csm_to_ACK122 = 1'b0;
   csm_to_REQMSGWAIT61 = 1'b0;
   csm_to_RESPMSGWAIT60 = 1'b0;
   csm_to_READ60 = 1'b0;
   csm_to_ACK123 = 1'b0;
   csm_to_ACK124 = 1'b0;
   csm_to_REQMSGWAIT62 = 1'b0;
   csm_to_RESPMSGWAIT61 = 1'b0;
   csm_to_READ61 = 1'b0;
   csm_to_ACK125 = 1'b0;
   csm_to_ACK126 = 1'b0;
   csm_to_REQMSGWAIT63 = 1'b0;
   csm_to_RESPMSGWAIT62 = 1'b0;
   csm_to_READ62 = 1'b0;
   csm_to_ACK127 = 1'b0;
   csm_to_ACK128 = 1'b0;
   csm_to_REQMSGWAIT64 = 1'b0;
   csm_to_RESPMSGWAIT63 = 1'b0;
   csm_to_READ63 = 1'b0;
   csm_to_ACK129 = 1'b0;
   csm_to_ACK130 = 1'b0;
   csm_to_REQMSGWAIT65 = 1'b0;
   csm_to_RESPMSGWAIT64 = 1'b0;
   csm_to_READ64 = 1'b0;
   csm_to_ACK131 = 1'b0;
   csm_to_ACK132 = 1'b0;
   csm_to_REQMSGWAIT66 = 1'b0;
   csm_to_RESPMSGWAIT65 = 1'b0;
   csm_to_READ65 = 1'b0;
   csm_to_ACK133 = 1'b0;
   csm_to_ACK134 = 1'b0;
   csm_to_REQMSGWAIT67 = 1'b0;
   csm_to_RESPMSGWAIT66 = 1'b0;
   csm_to_READ66 = 1'b0;
   csm_to_ACK135 = 1'b0;
   csm_to_ACK136 = 1'b0;
   csm_to_REQMSGWAIT68 = 1'b0;
   csm_to_RESPMSGWAIT67 = 1'b0;
   csm_to_READ67 = 1'b0;
   csm_to_ACK137 = 1'b0;
   csm_to_ACK138 = 1'b0;
   csm_to_REQMSGWAIT69 = 1'b0;
   csm_to_RESPMSGWAIT68 = 1'b0;
   csm_to_READ68 = 1'b0;
   csm_to_ACK139 = 1'b0;
   csm_to_ACK140 = 1'b0;
   csm_to_REQMSGWAIT70 = 1'b0;
   csm_to_RESPMSGWAIT69 = 1'b0;
   csm_to_READ69 = 1'b0;
   csm_to_ACK141 = 1'b0;
   csm_to_ACK142 = 1'b0;
   csm_to_REQMSGWAIT71 = 1'b0;
   csm_to_RESPMSGWAIT70 = 1'b0;
   csm_to_READ70 = 1'b0;
   csm_to_ACK143 = 1'b0;
   csm_to_ACK144 = 1'b0;
   csm_to_REQMSGWAIT72 = 1'b0;
   csm_to_RESPMSGWAIT71 = 1'b0;
   csm_to_SIGN_IN = 1'b0;
   csm_to_s4 = 1'b0;
   csm_to_READ75 = 1'b0;
   csm_to_ACK153 = 1'b0;
   csm_to_REQMSGWAIT78 = 1'b0;
   csm_to_ACK1 = 1'b0;
   csm_to_WRITE = 1'b0;
   csm_to_REQMSGWAIT = 1'b0;
   csm_to_RESPMSGWAIT = 1'b0;
   csm_to_ACK2 = 1'b0;
   csm_to_ST_Elink_Wait = 1'b0;
   case (current_state) 
      ST_Reset: begin
         if (start_data_gen == 1)
            next_state = ST_Start;
         else
            next_state = ST_Reset;
      end
      ST_WAIT: begin
         if (read_adc ==1)
            next_state = START_ADC;
         else if (elink_test ==1)
            next_state = ST_Irq;
         else if (loop_en == 1)
            next_state = ST_Reset;
         else
            next_state = ST_WAIT;
      end
      WRITE2: begin
         if (csm_timeout && (txdec == 0)) begin
            next_state = REQMSGWAIT96;
            csm_to_REQMSGWAIT96 = 1'b1;
         end
         else
            next_state = WRITE2;
      end
      ACK8: begin
         if (csm_timeout && (txdec == 0)) begin
            next_state = RESPMSGWAIT80;
            csm_to_RESPMSGWAIT80 = 1'b1;
         end
         else
            next_state = ACK8;
      end
      ACK9: begin
         if (csm_timeout) begin
            next_state = WRITE3;
            csm_to_WRITE3 = 1'b1;
         end
         else
            next_state = ACK9;
      end
      RESPMSGWAIT80: begin
         if (csm_timeout)
            next_state = RESPMSG95;
         else
            next_state = RESPMSGWAIT80;
      end
      RESPMSG95: begin
         next_state = ACK9;
         csm_to_ACK9 = 1'b1;
      end
      REQMSGWAIT96: begin
         if (csm_timeout)
            next_state = REQMSG96;
         else
            next_state = REQMSGWAIT96;
      end
      REQMSG96: begin
         next_state = ACK8;
         csm_to_ACK8 = 1'b1;
      end
      WRITE3: begin
         if (csm_timeout && (txdec == 0)) begin
            next_state = REQMSGWAIT97;
            csm_to_REQMSGWAIT97 = 1'b1;
         end
         else
            next_state = WRITE3;
      end
      ACK10: begin
         if (csm_timeout && (txdec == 0)) begin
            next_state = RESPMSGWAIT81;
            csm_to_RESPMSGWAIT81 = 1'b1;
         end
         else
            next_state = ACK10;
      end
      ACK174: begin
         if (csm_timeout)
            next_state = END_SIGN_IN1;
         else
            next_state = ACK174;
      end
      RESPMSGWAIT81: begin
         if (csm_timeout)
            next_state = RESPMSG96;
         else
            next_state = RESPMSGWAIT81;
      end
      RESPMSG96: begin
         next_state = ACK174;
         csm_to_ACK174 = 1'b1;
      end
      REQMSGWAIT97: begin
         if (csm_timeout)
            next_state = REQMSG97;
         else
            next_state = REQMSGWAIT97;
      end
      REQMSG97: begin
         next_state = ACK10;
         csm_to_ACK10 = 1'b1;
      end
      WRITE1: begin
         if (csm_timeout && (txdec == 0)) begin
            next_state = REQMSGWAIT6;
            csm_to_REQMSGWAIT6 = 1'b1;
         end
         else
            next_state = WRITE1;
      end
      ACK6: begin
         if (csm_timeout && (txdec == 0)) begin
            next_state = RESPMSGWAIT6;
            csm_to_RESPMSGWAIT6 = 1'b1;
         end
         else
            next_state = ACK6;
      end
      ACK7: begin
         if (csm_timeout) begin
            next_state = WRITE2;
            csm_to_WRITE2 = 1'b1;
         end
         else
            next_state = ACK7;
      end
      RESPMSGWAIT6: begin
         if (csm_timeout)
            next_state = RESPMSG6;
         else
            next_state = RESPMSGWAIT6;
      end
      RESPMSG6: begin
         next_state = ACK7;
         csm_to_ACK7 = 1'b1;
      end
      REQMSGWAIT6: begin
         if (csm_timeout)
            next_state = REQMSG6;
         else
            next_state = REQMSGWAIT6;
      end
      REQMSG6: begin
         next_state = ACK6;
         csm_to_ACK6 = 1'b1;
      end
      READ91: begin
         if (csm_timeout && (txdec == 0)) begin
            next_state = REQMSGWAIT94;
            csm_to_REQMSGWAIT94 = 1'b1;
         end
         else
            next_state = READ91;
      end
      ACK170: begin
         if (csm_timeout && (txdec == 0)) begin
            next_state = RESPMSGWAIT78;
            csm_to_RESPMSGWAIT78 = 1'b1;
         end
         else
            next_state = ACK170;
      end
      ACK171: begin
         if (csm_timeout) begin
            next_state = READ93;
            csm_to_READ93 = 1'b1;
         end
         else
            next_state = ACK171;
      end
      REQMSGWAIT94: begin
         if (csm_timeout)
            next_state = REQMSG94;
         else
            next_state = REQMSGWAIT94;
      end
      RESPMSGWAIT78: begin
         if (csm_timeout)
            next_state = RESPMSG93;
         else
            next_state = RESPMSGWAIT78;
      end
      REQMSG94: begin
         next_state = ACK170;
         csm_to_ACK170 = 1'b1;
      end
      RESPMSG93: begin
         next_state = ACK171;
         csm_to_ACK171 = 1'b1;
      end
      READ92: begin
         if (csm_timeout && (txdec == 0)) begin
            next_state = REQMSGWAIT95;
            csm_to_REQMSGWAIT95 = 1'b1;
         end
         else
            next_state = READ92;
      end
      ACK172: begin
         if (csm_timeout && (txdec == 0)) begin
            next_state = RESPMSGWAIT79;
            csm_to_RESPMSGWAIT79 = 1'b1;
         end
         else
            next_state = ACK172;
      end
      ACK173: begin
         if (csm_timeout) begin
            next_state = WRITE1;
            csm_to_WRITE1 = 1'b1;
         end
         else
            next_state = ACK173;
      end
      REQMSGWAIT95: begin
         if (csm_timeout)
            next_state = REQMSG95;
         else
            next_state = REQMSGWAIT95;
      end
      RESPMSGWAIT79: begin
         if (csm_timeout)
            next_state = RESPMSG94;
         else
            next_state = RESPMSGWAIT79;
      end
      REQMSG95: begin
         next_state = ACK172;
         csm_to_ACK172 = 1'b1;
      end
      RESPMSG94: begin
         next_state = ACK173;
         csm_to_ACK173 = 1'b1;
      end
      READ93: begin
         if (csm_timeout && (txdec == 0)) begin
            next_state = REQMSGWAIT98;
            csm_to_REQMSGWAIT98 = 1'b1;
         end
         else
            next_state = READ93;
      end
      ACK175: begin
         if (csm_timeout && (txdec == 0)) begin
            next_state = RESPMSGWAIT82;
            csm_to_RESPMSGWAIT82 = 1'b1;
         end
         else
            next_state = ACK175;
      end
      ACK176: begin
         if (csm_timeout) begin
            next_state = READ92;
            csm_to_READ92 = 1'b1;
         end
         else
            next_state = ACK176;
      end
      REQMSGWAIT98: begin
         if (csm_timeout)
            next_state = REQMSG98;
         else
            next_state = REQMSGWAIT98;
      end
      RESPMSGWAIT82: begin
         if (csm_timeout)
            next_state = RESPMSG97;
         else
            next_state = RESPMSGWAIT82;
      end
      REQMSG98: begin
         next_state = ACK175;
         csm_to_ACK175 = 1'b1;
      end
      RESPMSG97: begin
         next_state = ACK176;
         csm_to_ACK176 = 1'b1;
      end
      READ36: begin
         if (csm_timeout && (txdec == 0)) begin
            next_state = REQMSGWAIT38;
            csm_to_REQMSGWAIT38 = 1'b1;
         end
         else
            next_state = READ36;
      end
      ACK75: begin
         if (csm_timeout && (txdec == 0)) begin
            next_state = RESPMSGWAIT37;
            csm_to_RESPMSGWAIT37 = 1'b1;
         end
         else
            next_state = ACK75;
      end
      ACK76: begin
         if (csm_timeout) begin
            next_state = READ37;
            csm_to_READ37 = 1'b1;
         end
         else
            next_state = ACK76;
      end
      REQMSGWAIT38: begin
         if (csm_timeout)
            next_state = REQMSG38;
         else
            next_state = REQMSGWAIT38;
      end
      RESPMSGWAIT37: begin
         if (csm_timeout)
            next_state = RESPMSG37;
         else
            next_state = RESPMSGWAIT37;
      end
      REQMSG38: begin
         next_state = ACK75;
         csm_to_ACK75 = 1'b1;
      end
      RESPMSG37: begin
         next_state = ACK76;
         csm_to_ACK76 = 1'b1;
      end
      READ37: begin
         if (csm_timeout && (txdec == 0)) begin
            next_state = REQMSGWAIT39;
            csm_to_REQMSGWAIT39 = 1'b1;
         end
         else
            next_state = READ37;
      end
      ACK77: begin
         if (csm_timeout && (txdec == 0)) begin
            next_state = RESPMSGWAIT38;
            csm_to_RESPMSGWAIT38 = 1'b1;
         end
         else
            next_state = ACK77;
      end
      ACK78: begin
         if (csm_timeout) begin
            next_state = READ38;
            csm_to_READ38 = 1'b1;
         end
         else
            next_state = ACK78;
      end
      REQMSGWAIT39: begin
         if (csm_timeout)
            next_state = REQMSG39;
         else
            next_state = REQMSGWAIT39;
      end
      RESPMSGWAIT38: begin
         if (csm_timeout)
            next_state = RESPMSG38;
         else
            next_state = RESPMSGWAIT38;
      end
      REQMSG39: begin
         next_state = ACK77;
         csm_to_ACK77 = 1'b1;
      end
      RESPMSG38: begin
         next_state = ACK78;
         csm_to_ACK78 = 1'b1;
      end
      READ38: begin
         if (csm_timeout && (txdec == 0)) begin
            next_state = REQMSGWAIT40;
            csm_to_REQMSGWAIT40 = 1'b1;
         end
         else
            next_state = READ38;
      end
      ACK79: begin
         if (csm_timeout && (txdec == 0)) begin
            next_state = RESPMSGWAIT39;
            csm_to_RESPMSGWAIT39 = 1'b1;
         end
         else
            next_state = ACK79;
      end
      ACK80: begin
         if (csm_timeout) begin
            next_state = READ39;
            csm_to_READ39 = 1'b1;
         end
         else
            next_state = ACK80;
      end
      REQMSGWAIT40: begin
         if (csm_timeout)
            next_state = REQMSG40;
         else
            next_state = REQMSGWAIT40;
      end
      RESPMSGWAIT39: begin
         if (csm_timeout)
            next_state = RESPMSG39;
         else
            next_state = RESPMSGWAIT39;
      end
      REQMSG40: begin
         next_state = ACK79;
         csm_to_ACK79 = 1'b1;
      end
      RESPMSG39: begin
         next_state = ACK80;
         csm_to_ACK80 = 1'b1;
      end
      READ39: begin
         if (csm_timeout && (txdec == 0)) begin
            next_state = REQMSGWAIT41;
            csm_to_REQMSGWAIT41 = 1'b1;
         end
         else
            next_state = READ39;
      end
      ACK81: begin
         if (csm_timeout && (txdec == 0)) begin
            next_state = RESPMSGWAIT40;
            csm_to_RESPMSGWAIT40 = 1'b1;
         end
         else
            next_state = ACK81;
      end
      ACK82: begin
         if (csm_timeout) begin
            next_state = READ40;
            csm_to_READ40 = 1'b1;
         end
         else
            next_state = ACK82;
      end
      REQMSGWAIT41: begin
         if (csm_timeout)
            next_state = REQMSG41;
         else
            next_state = REQMSGWAIT41;
      end
      RESPMSGWAIT40: begin
         if (csm_timeout)
            next_state = RESPMSG40;
         else
            next_state = RESPMSGWAIT40;
      end
      REQMSG41: begin
         next_state = ACK81;
         csm_to_ACK81 = 1'b1;
      end
      RESPMSG40: begin
         next_state = ACK82;
         csm_to_ACK82 = 1'b1;
      end
      READ40: begin
         if (csm_timeout && (txdec == 0)) begin
            next_state = REQMSGWAIT42;
            csm_to_REQMSGWAIT42 = 1'b1;
         end
         else
            next_state = READ40;
      end
      ACK83: begin
         if (csm_timeout && (txdec == 0)) begin
            next_state = RESPMSGWAIT41;
            csm_to_RESPMSGWAIT41 = 1'b1;
         end
         else
            next_state = ACK83;
      end
      ACK84: begin
         if (csm_timeout) begin
            next_state = READ41;
            csm_to_READ41 = 1'b1;
         end
         else
            next_state = ACK84;
      end
      REQMSGWAIT42: begin
         if (csm_timeout)
            next_state = REQMSG42;
         else
            next_state = REQMSGWAIT42;
      end
      RESPMSGWAIT41: begin
         if (csm_timeout)
            next_state = RESPMSG41;
         else
            next_state = RESPMSGWAIT41;
      end
      REQMSG42: begin
         next_state = ACK83;
         csm_to_ACK83 = 1'b1;
      end
      RESPMSG41: begin
         next_state = ACK84;
         csm_to_ACK84 = 1'b1;
      end
      READ41: begin
         if (csm_timeout && (txdec == 0)) begin
            next_state = REQMSGWAIT43;
            csm_to_REQMSGWAIT43 = 1'b1;
         end
         else
            next_state = READ41;
      end
      ACK85: begin
         if (csm_timeout && (txdec == 0)) begin
            next_state = RESPMSGWAIT42;
            csm_to_RESPMSGWAIT42 = 1'b1;
         end
         else
            next_state = ACK85;
      end
      ACK86: begin
         if (csm_timeout) begin
            next_state = READ42;
            csm_to_READ42 = 1'b1;
         end
         else
            next_state = ACK86;
      end
      REQMSGWAIT43: begin
         if (csm_timeout)
            next_state = REQMSG43;
         else
            next_state = REQMSGWAIT43;
      end
      RESPMSGWAIT42: begin
         if (csm_timeout)
            next_state = RESPMSG42;
         else
            next_state = RESPMSGWAIT42;
      end
      REQMSG43: begin
         next_state = ACK85;
         csm_to_ACK85 = 1'b1;
      end
      RESPMSG42: begin
         next_state = ACK86;
         csm_to_ACK86 = 1'b1;
      end
      READ42: begin
         if (csm_timeout && (txdec == 0)) begin
            next_state = REQMSGWAIT44;
            csm_to_REQMSGWAIT44 = 1'b1;
         end
         else
            next_state = READ42;
      end
      ACK87: begin
         if (csm_timeout && (txdec == 0)) begin
            next_state = RESPMSGWAIT43;
            csm_to_RESPMSGWAIT43 = 1'b1;
         end
         else
            next_state = ACK87;
      end
      ACK88: begin
         if (csm_timeout) begin
            next_state = READ43;
            csm_to_READ43 = 1'b1;
         end
         else
            next_state = ACK88;
      end
      REQMSGWAIT44: begin
         if (csm_timeout)
            next_state = REQMSG44;
         else
            next_state = REQMSGWAIT44;
      end
      RESPMSGWAIT43: begin
         if (csm_timeout)
            next_state = RESPMSG43;
         else
            next_state = RESPMSGWAIT43;
      end
      REQMSG44: begin
         next_state = ACK87;
         csm_to_ACK87 = 1'b1;
      end
      RESPMSG43: begin
         next_state = ACK88;
         csm_to_ACK88 = 1'b1;
      end
      READ43: begin
         if (csm_timeout && (txdec == 0)) begin
            next_state = REQMSGWAIT45;
            csm_to_REQMSGWAIT45 = 1'b1;
         end
         else
            next_state = READ43;
      end
      ACK89: begin
         if (csm_timeout && (txdec == 0)) begin
            next_state = RESPMSGWAIT44;
            csm_to_RESPMSGWAIT44 = 1'b1;
         end
         else
            next_state = ACK89;
      end
      ACK90: begin
         if (csm_timeout) begin
            next_state = READ44;
            csm_to_READ44 = 1'b1;
         end
         else
            next_state = ACK90;
      end
      REQMSGWAIT45: begin
         if (csm_timeout)
            next_state = REQMSG45;
         else
            next_state = REQMSGWAIT45;
      end
      RESPMSGWAIT44: begin
         if (csm_timeout)
            next_state = RESPMSG44;
         else
            next_state = RESPMSGWAIT44;
      end
      REQMSG45: begin
         next_state = ACK89;
         csm_to_ACK89 = 1'b1;
      end
      RESPMSG44: begin
         next_state = ACK90;
         csm_to_ACK90 = 1'b1;
      end
      READ44: begin
         if (csm_timeout && (txdec == 0)) begin
            next_state = REQMSGWAIT46;
            csm_to_REQMSGWAIT46 = 1'b1;
         end
         else
            next_state = READ44;
      end
      ACK91: begin
         if (csm_timeout && (txdec == 0)) begin
            next_state = RESPMSGWAIT45;
            csm_to_RESPMSGWAIT45 = 1'b1;
         end
         else
            next_state = ACK91;
      end
      ACK92: begin
         if (csm_timeout) begin
            next_state = READ45;
            csm_to_READ45 = 1'b1;
         end
         else
            next_state = ACK92;
      end
      REQMSGWAIT46: begin
         if (csm_timeout)
            next_state = REQMSG46;
         else
            next_state = REQMSGWAIT46;
      end
      RESPMSGWAIT45: begin
         if (csm_timeout)
            next_state = RESPMSG45;
         else
            next_state = RESPMSGWAIT45;
      end
      REQMSG46: begin
         next_state = ACK91;
         csm_to_ACK91 = 1'b1;
      end
      RESPMSG45: begin
         next_state = ACK92;
         csm_to_ACK92 = 1'b1;
      end
      READ45: begin
         if (csm_timeout && (txdec == 0)) begin
            next_state = REQMSGWAIT47;
            csm_to_REQMSGWAIT47 = 1'b1;
         end
         else
            next_state = READ45;
      end
      ACK93: begin
         if (csm_timeout && (txdec == 0)) begin
            next_state = RESPMSGWAIT46;
            csm_to_RESPMSGWAIT46 = 1'b1;
         end
         else
            next_state = ACK93;
      end
      ACK94: begin
         if (csm_timeout) begin
            next_state = READ46;
            csm_to_READ46 = 1'b1;
         end
         else
            next_state = ACK94;
      end
      REQMSGWAIT47: begin
         if (csm_timeout)
            next_state = REQMSG47;
         else
            next_state = REQMSGWAIT47;
      end
      RESPMSGWAIT46: begin
         if (csm_timeout)
            next_state = RESPMSG46;
         else
            next_state = RESPMSGWAIT46;
      end
      REQMSG47: begin
         next_state = ACK93;
         csm_to_ACK93 = 1'b1;
      end
      RESPMSG46: begin
         next_state = ACK94;
         csm_to_ACK94 = 1'b1;
      end
      READ46: begin
         if (csm_timeout && (txdec == 0)) begin
            next_state = REQMSGWAIT48;
            csm_to_REQMSGWAIT48 = 1'b1;
         end
         else
            next_state = READ46;
      end
      ACK95: begin
         if (csm_timeout && (txdec == 0)) begin
            next_state = RESPMSGWAIT47;
            csm_to_RESPMSGWAIT47 = 1'b1;
         end
         else
            next_state = ACK95;
      end
      ACK96: begin
         if (csm_timeout) begin
            next_state = READ47;
            csm_to_READ47 = 1'b1;
         end
         else
            next_state = ACK96;
      end
      REQMSGWAIT48: begin
         if (csm_timeout)
            next_state = REQMSG48;
         else
            next_state = REQMSGWAIT48;
      end
      RESPMSGWAIT47: begin
         if (csm_timeout)
            next_state = RESPMSG47;
         else
            next_state = RESPMSGWAIT47;
      end
      REQMSG48: begin
         next_state = ACK95;
         csm_to_ACK95 = 1'b1;
      end
      RESPMSG47: begin
         next_state = ACK96;
         csm_to_ACK96 = 1'b1;
      end
      READ47: begin
         if (csm_timeout && (txdec == 0)) begin
            next_state = REQMSGWAIT49;
            csm_to_REQMSGWAIT49 = 1'b1;
         end
         else
            next_state = READ47;
      end
      ACK97: begin
         if (csm_timeout && (txdec == 0)) begin
            next_state = RESPMSGWAIT48;
            csm_to_RESPMSGWAIT48 = 1'b1;
         end
         else
            next_state = ACK97;
      end
      ACK98: begin
         if (csm_timeout) begin
            next_state = READ48;
            csm_to_READ48 = 1'b1;
         end
         else
            next_state = ACK98;
      end
      REQMSGWAIT49: begin
         if (csm_timeout)
            next_state = REQMSG49;
         else
            next_state = REQMSGWAIT49;
      end
      RESPMSGWAIT48: begin
         if (csm_timeout)
            next_state = RESPMSG48;
         else
            next_state = RESPMSGWAIT48;
      end
      REQMSG49: begin
         next_state = ACK97;
         csm_to_ACK97 = 1'b1;
      end
      RESPMSG48: begin
         next_state = ACK98;
         csm_to_ACK98 = 1'b1;
      end
      READ48: begin
         if (csm_timeout && (txdec == 0)) begin
            next_state = REQMSGWAIT50;
            csm_to_REQMSGWAIT50 = 1'b1;
         end
         else
            next_state = READ48;
      end
      ACK99: begin
         if (csm_timeout && (txdec == 0)) begin
            next_state = RESPMSGWAIT49;
            csm_to_RESPMSGWAIT49 = 1'b1;
         end
         else
            next_state = ACK99;
      end
      ACK100: begin
         if (csm_timeout) begin
            next_state = READ49;
            csm_to_READ49 = 1'b1;
         end
         else
            next_state = ACK100;
      end
      REQMSGWAIT50: begin
         if (csm_timeout)
            next_state = REQMSG50;
         else
            next_state = REQMSGWAIT50;
      end
      RESPMSGWAIT49: begin
         if (csm_timeout)
            next_state = RESPMSG49;
         else
            next_state = RESPMSGWAIT49;
      end
      REQMSG50: begin
         next_state = ACK99;
         csm_to_ACK99 = 1'b1;
      end
      RESPMSG49: begin
         next_state = ACK100;
         csm_to_ACK100 = 1'b1;
      end
      READ49: begin
         if (csm_timeout && (txdec == 0)) begin
            next_state = REQMSGWAIT51;
            csm_to_REQMSGWAIT51 = 1'b1;
         end
         else
            next_state = READ49;
      end
      ACK101: begin
         if (csm_timeout && (txdec == 0)) begin
            next_state = RESPMSGWAIT50;
            csm_to_RESPMSGWAIT50 = 1'b1;
         end
         else
            next_state = ACK101;
      end
      ACK102: begin
         if (csm_timeout) begin
            next_state = READ50;
            csm_to_READ50 = 1'b1;
         end
         else
            next_state = ACK102;
      end
      REQMSGWAIT51: begin
         if (csm_timeout)
            next_state = REQMSG51;
         else
            next_state = REQMSGWAIT51;
      end
      RESPMSGWAIT50: begin
         if (csm_timeout)
            next_state = RESPMSG50;
         else
            next_state = RESPMSGWAIT50;
      end
      REQMSG51: begin
         next_state = ACK101;
         csm_to_ACK101 = 1'b1;
      end
      RESPMSG50: begin
         next_state = ACK102;
         csm_to_ACK102 = 1'b1;
      end
      READ50: begin
         if (csm_timeout && (txdec == 0)) begin
            next_state = REQMSGWAIT52;
            csm_to_REQMSGWAIT52 = 1'b1;
         end
         else
            next_state = READ50;
      end
      ACK103: begin
         if (csm_timeout && (txdec == 0)) begin
            next_state = RESPMSGWAIT51;
            csm_to_RESPMSGWAIT51 = 1'b1;
         end
         else
            next_state = ACK103;
      end
      ACK104: begin
         if (csm_timeout) begin
            next_state = READ51;
            csm_to_READ51 = 1'b1;
         end
         else
            next_state = ACK104;
      end
      REQMSGWAIT52: begin
         if (csm_timeout)
            next_state = REQMSG52;
         else
            next_state = REQMSGWAIT52;
      end
      RESPMSGWAIT51: begin
         if (csm_timeout)
            next_state = RESPMSG51;
         else
            next_state = RESPMSGWAIT51;
      end
      REQMSG52: begin
         next_state = ACK103;
         csm_to_ACK103 = 1'b1;
      end
      RESPMSG51: begin
         next_state = ACK104;
         csm_to_ACK104 = 1'b1;
      end
      READ51: begin
         if (csm_timeout && (txdec == 0)) begin
            next_state = REQMSGWAIT53;
            csm_to_REQMSGWAIT53 = 1'b1;
         end
         else
            next_state = READ51;
      end
      ACK105: begin
         if (csm_timeout && (txdec == 0)) begin
            next_state = RESPMSGWAIT52;
            csm_to_RESPMSGWAIT52 = 1'b1;
         end
         else
            next_state = ACK105;
      end
      ACK106: begin
         if (csm_timeout) begin
            next_state = READ52;
            csm_to_READ52 = 1'b1;
         end
         else
            next_state = ACK106;
      end
      REQMSGWAIT53: begin
         if (csm_timeout)
            next_state = REQMSG53;
         else
            next_state = REQMSGWAIT53;
      end
      RESPMSGWAIT52: begin
         if (csm_timeout)
            next_state = RESPMSG52;
         else
            next_state = RESPMSGWAIT52;
      end
      REQMSG53: begin
         next_state = ACK105;
         csm_to_ACK105 = 1'b1;
      end
      RESPMSG52: begin
         next_state = ACK106;
         csm_to_ACK106 = 1'b1;
      end
      READ52: begin
         if (csm_timeout && (txdec == 0)) begin
            next_state = REQMSGWAIT54;
            csm_to_REQMSGWAIT54 = 1'b1;
         end
         else
            next_state = READ52;
      end
      ACK107: begin
         if (csm_timeout && (txdec == 0)) begin
            next_state = RESPMSGWAIT53;
            csm_to_RESPMSGWAIT53 = 1'b1;
         end
         else
            next_state = ACK107;
      end
      ACK108: begin
         if (csm_timeout) begin
            next_state = READ53;
            csm_to_READ53 = 1'b1;
         end
         else
            next_state = ACK108;
      end
      REQMSGWAIT54: begin
         if (csm_timeout)
            next_state = REQMSG54;
         else
            next_state = REQMSGWAIT54;
      end
      RESPMSGWAIT53: begin
         if (csm_timeout)
            next_state = RESPMSG53;
         else
            next_state = RESPMSGWAIT53;
      end
      REQMSG54: begin
         next_state = ACK107;
         csm_to_ACK107 = 1'b1;
      end
      RESPMSG53: begin
         next_state = ACK108;
         csm_to_ACK108 = 1'b1;
      end
      READ53: begin
         if (csm_timeout && (txdec == 0)) begin
            next_state = REQMSGWAIT55;
            csm_to_REQMSGWAIT55 = 1'b1;
         end
         else
            next_state = READ53;
      end
      ACK109: begin
         if (csm_timeout && (txdec == 0)) begin
            next_state = RESPMSGWAIT54;
            csm_to_RESPMSGWAIT54 = 1'b1;
         end
         else
            next_state = ACK109;
      end
      ACK110: begin
         if (csm_timeout) begin
            next_state = READ54;
            csm_to_READ54 = 1'b1;
         end
         else
            next_state = ACK110;
      end
      REQMSGWAIT55: begin
         if (csm_timeout)
            next_state = REQMSG55;
         else
            next_state = REQMSGWAIT55;
      end
      RESPMSGWAIT54: begin
         if (csm_timeout)
            next_state = RESPMSG54;
         else
            next_state = RESPMSGWAIT54;
      end
      REQMSG55: begin
         next_state = ACK109;
         csm_to_ACK109 = 1'b1;
      end
      RESPMSG54: begin
         next_state = ACK110;
         csm_to_ACK110 = 1'b1;
      end
      READ54: begin
         if (csm_timeout && (txdec == 0)) begin
            next_state = REQMSGWAIT56;
            csm_to_REQMSGWAIT56 = 1'b1;
         end
         else
            next_state = READ54;
      end
      ACK111: begin
         if (csm_timeout && (txdec == 0)) begin
            next_state = RESPMSGWAIT55;
            csm_to_RESPMSGWAIT55 = 1'b1;
         end
         else
            next_state = ACK111;
      end
      ACK112: begin
         if (csm_timeout) begin
            next_state = READ55;
            csm_to_READ55 = 1'b1;
         end
         else
            next_state = ACK112;
      end
      REQMSGWAIT56: begin
         if (csm_timeout)
            next_state = REQMSG56;
         else
            next_state = REQMSGWAIT56;
      end
      RESPMSGWAIT55: begin
         if (csm_timeout)
            next_state = RESPMSG55;
         else
            next_state = RESPMSGWAIT55;
      end
      REQMSG56: begin
         next_state = ACK111;
         csm_to_ACK111 = 1'b1;
      end
      RESPMSG55: begin
         next_state = ACK112;
         csm_to_ACK112 = 1'b1;
      end
      READ55: begin
         if (csm_timeout && (txdec == 0)) begin
            next_state = REQMSGWAIT57;
            csm_to_REQMSGWAIT57 = 1'b1;
         end
         else
            next_state = READ55;
      end
      ACK113: begin
         if (csm_timeout && (txdec == 0)) begin
            next_state = RESPMSGWAIT56;
            csm_to_RESPMSGWAIT56 = 1'b1;
         end
         else
            next_state = ACK113;
      end
      ACK114: begin
         if (csm_timeout) begin
            next_state = READ56;
            csm_to_READ56 = 1'b1;
         end
         else
            next_state = ACK114;
      end
      REQMSGWAIT57: begin
         if (csm_timeout)
            next_state = REQMSG57;
         else
            next_state = REQMSGWAIT57;
      end
      RESPMSGWAIT56: begin
         if (csm_timeout)
            next_state = RESPMSG56;
         else
            next_state = RESPMSGWAIT56;
      end
      REQMSG57: begin
         next_state = ACK113;
         csm_to_ACK113 = 1'b1;
      end
      RESPMSG56: begin
         next_state = ACK114;
         csm_to_ACK114 = 1'b1;
      end
      READ56: begin
         if (csm_timeout && (txdec == 0)) begin
            next_state = REQMSGWAIT58;
            csm_to_REQMSGWAIT58 = 1'b1;
         end
         else
            next_state = READ56;
      end
      ACK115: begin
         if (csm_timeout && (txdec == 0)) begin
            next_state = RESPMSGWAIT57;
            csm_to_RESPMSGWAIT57 = 1'b1;
         end
         else
            next_state = ACK115;
      end
      ACK116: begin
         if (csm_timeout) begin
            next_state = READ57;
            csm_to_READ57 = 1'b1;
         end
         else
            next_state = ACK116;
      end
      REQMSGWAIT58: begin
         if (csm_timeout)
            next_state = REQMSG58;
         else
            next_state = REQMSGWAIT58;
      end
      RESPMSGWAIT57: begin
         if (csm_timeout)
            next_state = RESPMSG57;
         else
            next_state = RESPMSGWAIT57;
      end
      REQMSG58: begin
         next_state = ACK115;
         csm_to_ACK115 = 1'b1;
      end
      RESPMSG57: begin
         next_state = ACK116;
         csm_to_ACK116 = 1'b1;
      end
      READ57: begin
         if (csm_timeout && (txdec == 0)) begin
            next_state = REQMSGWAIT59;
            csm_to_REQMSGWAIT59 = 1'b1;
         end
         else
            next_state = READ57;
      end
      ACK117: begin
         if (csm_timeout && (txdec == 0)) begin
            next_state = RESPMSGWAIT58;
            csm_to_RESPMSGWAIT58 = 1'b1;
         end
         else
            next_state = ACK117;
      end
      ACK118: begin
         if (csm_timeout) begin
            next_state = READ58;
            csm_to_READ58 = 1'b1;
         end
         else
            next_state = ACK118;
      end
      REQMSGWAIT59: begin
         if (csm_timeout)
            next_state = REQMSG59;
         else
            next_state = REQMSGWAIT59;
      end
      RESPMSGWAIT58: begin
         if (csm_timeout)
            next_state = RESPMSG58;
         else
            next_state = RESPMSGWAIT58;
      end
      REQMSG59: begin
         next_state = ACK117;
         csm_to_ACK117 = 1'b1;
      end
      RESPMSG58: begin
         next_state = ACK118;
         csm_to_ACK118 = 1'b1;
      end
      READ58: begin
         if (csm_timeout && (txdec == 0)) begin
            next_state = REQMSGWAIT60;
            csm_to_REQMSGWAIT60 = 1'b1;
         end
         else
            next_state = READ58;
      end
      ACK119: begin
         if (csm_timeout && (txdec == 0)) begin
            next_state = RESPMSGWAIT59;
            csm_to_RESPMSGWAIT59 = 1'b1;
         end
         else
            next_state = ACK119;
      end
      ACK120: begin
         if (csm_timeout) begin
            next_state = READ59;
            csm_to_READ59 = 1'b1;
         end
         else
            next_state = ACK120;
      end
      REQMSGWAIT60: begin
         if (csm_timeout)
            next_state = REQMSG60;
         else
            next_state = REQMSGWAIT60;
      end
      RESPMSGWAIT59: begin
         if (csm_timeout)
            next_state = RESPMSG59;
         else
            next_state = RESPMSGWAIT59;
      end
      REQMSG60: begin
         next_state = ACK119;
         csm_to_ACK119 = 1'b1;
      end
      RESPMSG59: begin
         next_state = ACK120;
         csm_to_ACK120 = 1'b1;
      end
      READ59: begin
         if (csm_timeout && (txdec == 0)) begin
            next_state = REQMSGWAIT61;
            csm_to_REQMSGWAIT61 = 1'b1;
         end
         else
            next_state = READ59;
      end
      ACK121: begin
         if (csm_timeout && (txdec == 0)) begin
            next_state = RESPMSGWAIT60;
            csm_to_RESPMSGWAIT60 = 1'b1;
         end
         else
            next_state = ACK121;
      end
      ACK122: begin
         if (csm_timeout) begin
            next_state = READ60;
            csm_to_READ60 = 1'b1;
         end
         else
            next_state = ACK122;
      end
      REQMSGWAIT61: begin
         if (csm_timeout)
            next_state = REQMSG61;
         else
            next_state = REQMSGWAIT61;
      end
      RESPMSGWAIT60: begin
         if (csm_timeout)
            next_state = RESPMSG60;
         else
            next_state = RESPMSGWAIT60;
      end
      REQMSG61: begin
         next_state = ACK121;
         csm_to_ACK121 = 1'b1;
      end
      RESPMSG60: begin
         next_state = ACK122;
         csm_to_ACK122 = 1'b1;
      end
      READ60: begin
         if (csm_timeout && (txdec == 0)) begin
            next_state = REQMSGWAIT62;
            csm_to_REQMSGWAIT62 = 1'b1;
         end
         else
            next_state = READ60;
      end
      ACK123: begin
         if (csm_timeout && (txdec == 0)) begin
            next_state = RESPMSGWAIT61;
            csm_to_RESPMSGWAIT61 = 1'b1;
         end
         else
            next_state = ACK123;
      end
      ACK124: begin
         if (csm_timeout) begin
            next_state = READ61;
            csm_to_READ61 = 1'b1;
         end
         else
            next_state = ACK124;
      end
      REQMSGWAIT62: begin
         if (csm_timeout)
            next_state = REQMSG62;
         else
            next_state = REQMSGWAIT62;
      end
      RESPMSGWAIT61: begin
         if (csm_timeout)
            next_state = RESPMSG61;
         else
            next_state = RESPMSGWAIT61;
      end
      REQMSG62: begin
         next_state = ACK123;
         csm_to_ACK123 = 1'b1;
      end
      RESPMSG61: begin
         next_state = ACK124;
         csm_to_ACK124 = 1'b1;
      end
      READ61: begin
         if (csm_timeout && (txdec == 0)) begin
            next_state = REQMSGWAIT63;
            csm_to_REQMSGWAIT63 = 1'b1;
         end
         else
            next_state = READ61;
      end
      ACK125: begin
         if (csm_timeout && (txdec == 0)) begin
            next_state = RESPMSGWAIT62;
            csm_to_RESPMSGWAIT62 = 1'b1;
         end
         else
            next_state = ACK125;
      end
      ACK126: begin
         if (csm_timeout) begin
            next_state = READ62;
            csm_to_READ62 = 1'b1;
         end
         else
            next_state = ACK126;
      end
      REQMSGWAIT63: begin
         if (csm_timeout)
            next_state = REQMSG63;
         else
            next_state = REQMSGWAIT63;
      end
      RESPMSGWAIT62: begin
         if (csm_timeout)
            next_state = RESPMSG62;
         else
            next_state = RESPMSGWAIT62;
      end
      REQMSG63: begin
         next_state = ACK125;
         csm_to_ACK125 = 1'b1;
      end
      RESPMSG62: begin
         next_state = ACK126;
         csm_to_ACK126 = 1'b1;
      end
      READ62: begin
         if (csm_timeout && (txdec == 0)) begin
            next_state = REQMSGWAIT64;
            csm_to_REQMSGWAIT64 = 1'b1;
         end
         else
            next_state = READ62;
      end
      ACK127: begin
         if (csm_timeout && (txdec == 0)) begin
            next_state = RESPMSGWAIT63;
            csm_to_RESPMSGWAIT63 = 1'b1;
         end
         else
            next_state = ACK127;
      end
      ACK128: begin
         if (csm_timeout) begin
            next_state = READ63;
            csm_to_READ63 = 1'b1;
         end
         else
            next_state = ACK128;
      end
      REQMSGWAIT64: begin
         if (csm_timeout)
            next_state = REQMSG64;
         else
            next_state = REQMSGWAIT64;
      end
      RESPMSGWAIT63: begin
         if (csm_timeout)
            next_state = RESPMSG63;
         else
            next_state = RESPMSGWAIT63;
      end
      REQMSG64: begin
         next_state = ACK127;
         csm_to_ACK127 = 1'b1;
      end
      RESPMSG63: begin
         next_state = ACK128;
         csm_to_ACK128 = 1'b1;
      end
      READ63: begin
         if (csm_timeout && (txdec == 0)) begin
            next_state = REQMSGWAIT65;
            csm_to_REQMSGWAIT65 = 1'b1;
         end
         else
            next_state = READ63;
      end
      ACK129: begin
         if (csm_timeout && (txdec == 0)) begin
            next_state = RESPMSGWAIT64;
            csm_to_RESPMSGWAIT64 = 1'b1;
         end
         else
            next_state = ACK129;
      end
      ACK130: begin
         if (csm_timeout) begin
            next_state = READ64;
            csm_to_READ64 = 1'b1;
         end
         else
            next_state = ACK130;
      end
      REQMSGWAIT65: begin
         if (csm_timeout)
            next_state = REQMSG65;
         else
            next_state = REQMSGWAIT65;
      end
      RESPMSGWAIT64: begin
         if (csm_timeout)
            next_state = RESPMSG64;
         else
            next_state = RESPMSGWAIT64;
      end
      REQMSG65: begin
         next_state = ACK129;
         csm_to_ACK129 = 1'b1;
      end
      RESPMSG64: begin
         next_state = ACK130;
         csm_to_ACK130 = 1'b1;
      end
      READ64: begin
         if (csm_timeout && (txdec == 0)) begin
            next_state = REQMSGWAIT66;
            csm_to_REQMSGWAIT66 = 1'b1;
         end
         else
            next_state = READ64;
      end
      ACK131: begin
         if (csm_timeout && (txdec == 0)) begin
            next_state = RESPMSGWAIT65;
            csm_to_RESPMSGWAIT65 = 1'b1;
         end
         else
            next_state = ACK131;
      end
      ACK132: begin
         if (csm_timeout) begin
            next_state = READ65;
            csm_to_READ65 = 1'b1;
         end
         else
            next_state = ACK132;
      end
      REQMSGWAIT66: begin
         if (csm_timeout)
            next_state = REQMSG66;
         else
            next_state = REQMSGWAIT66;
      end
      RESPMSGWAIT65: begin
         if (csm_timeout)
            next_state = RESPMSG65;
         else
            next_state = RESPMSGWAIT65;
      end
      REQMSG66: begin
         next_state = ACK131;
         csm_to_ACK131 = 1'b1;
      end
      RESPMSG65: begin
         next_state = ACK132;
         csm_to_ACK132 = 1'b1;
      end
      READ65: begin
         if (csm_timeout && (txdec == 0)) begin
            next_state = REQMSGWAIT67;
            csm_to_REQMSGWAIT67 = 1'b1;
         end
         else
            next_state = READ65;
      end
      ACK133: begin
         if (csm_timeout && (txdec == 0)) begin
            next_state = RESPMSGWAIT66;
            csm_to_RESPMSGWAIT66 = 1'b1;
         end
         else
            next_state = ACK133;
      end
      ACK134: begin
         if (csm_timeout) begin
            next_state = READ66;
            csm_to_READ66 = 1'b1;
         end
         else
            next_state = ACK134;
      end
      REQMSGWAIT67: begin
         if (csm_timeout)
            next_state = REQMSG67;
         else
            next_state = REQMSGWAIT67;
      end
      RESPMSGWAIT66: begin
         if (csm_timeout)
            next_state = RESPMSG66;
         else
            next_state = RESPMSGWAIT66;
      end
      REQMSG67: begin
         next_state = ACK133;
         csm_to_ACK133 = 1'b1;
      end
      RESPMSG66: begin
         next_state = ACK134;
         csm_to_ACK134 = 1'b1;
      end
      READ66: begin
         if (csm_timeout && (txdec == 0)) begin
            next_state = REQMSGWAIT68;
            csm_to_REQMSGWAIT68 = 1'b1;
         end
         else
            next_state = READ66;
      end
      ACK135: begin
         if (csm_timeout && (txdec == 0)) begin
            next_state = RESPMSGWAIT67;
            csm_to_RESPMSGWAIT67 = 1'b1;
         end
         else
            next_state = ACK135;
      end
      ACK136: begin
         if (csm_timeout) begin
            next_state = READ67;
            csm_to_READ67 = 1'b1;
         end
         else
            next_state = ACK136;
      end
      REQMSGWAIT68: begin
         if (csm_timeout)
            next_state = REQMSG68;
         else
            next_state = REQMSGWAIT68;
      end
      RESPMSGWAIT67: begin
         if (csm_timeout)
            next_state = RESPMSG67;
         else
            next_state = RESPMSGWAIT67;
      end
      REQMSG68: begin
         next_state = ACK135;
         csm_to_ACK135 = 1'b1;
      end
      RESPMSG67: begin
         next_state = ACK136;
         csm_to_ACK136 = 1'b1;
      end
      READ67: begin
         if (csm_timeout && (txdec == 0)) begin
            next_state = REQMSGWAIT69;
            csm_to_REQMSGWAIT69 = 1'b1;
         end
         else
            next_state = READ67;
      end
      ACK137: begin
         if (csm_timeout && (txdec == 0)) begin
            next_state = RESPMSGWAIT68;
            csm_to_RESPMSGWAIT68 = 1'b1;
         end
         else
            next_state = ACK137;
      end
      ACK138: begin
         if (csm_timeout) begin
            next_state = READ68;
            csm_to_READ68 = 1'b1;
         end
         else
            next_state = ACK138;
      end
      REQMSGWAIT69: begin
         if (csm_timeout)
            next_state = REQMSG69;
         else
            next_state = REQMSGWAIT69;
      end
      RESPMSGWAIT68: begin
         if (csm_timeout)
            next_state = RESPMSG68;
         else
            next_state = RESPMSGWAIT68;
      end
      REQMSG69: begin
         next_state = ACK137;
         csm_to_ACK137 = 1'b1;
      end
      RESPMSG68: begin
         next_state = ACK138;
         csm_to_ACK138 = 1'b1;
      end
      READ68: begin
         if (csm_timeout && (txdec == 0)) begin
            next_state = REQMSGWAIT70;
            csm_to_REQMSGWAIT70 = 1'b1;
         end
         else
            next_state = READ68;
      end
      ACK139: begin
         if (csm_timeout && (txdec == 0)) begin
            next_state = RESPMSGWAIT69;
            csm_to_RESPMSGWAIT69 = 1'b1;
         end
         else
            next_state = ACK139;
      end
      ACK140: begin
         if (csm_timeout) begin
            next_state = READ69;
            csm_to_READ69 = 1'b1;
         end
         else
            next_state = ACK140;
      end
      REQMSGWAIT70: begin
         if (csm_timeout)
            next_state = REQMSG70;
         else
            next_state = REQMSGWAIT70;
      end
      RESPMSGWAIT69: begin
         if (csm_timeout)
            next_state = RESPMSG69;
         else
            next_state = RESPMSGWAIT69;
      end
      REQMSG70: begin
         next_state = ACK139;
         csm_to_ACK139 = 1'b1;
      end
      RESPMSG69: begin
         next_state = ACK140;
         csm_to_ACK140 = 1'b1;
      end
      READ69: begin
         if (csm_timeout && (txdec == 0)) begin
            next_state = REQMSGWAIT71;
            csm_to_REQMSGWAIT71 = 1'b1;
         end
         else
            next_state = READ69;
      end
      ACK141: begin
         if (csm_timeout && (txdec == 0)) begin
            next_state = RESPMSGWAIT70;
            csm_to_RESPMSGWAIT70 = 1'b1;
         end
         else
            next_state = ACK141;
      end
      ACK142: begin
         if (csm_timeout) begin
            next_state = READ70;
            csm_to_READ70 = 1'b1;
         end
         else
            next_state = ACK142;
      end
      REQMSGWAIT71: begin
         if (csm_timeout)
            next_state = REQMSG71;
         else
            next_state = REQMSGWAIT71;
      end
      RESPMSGWAIT70: begin
         if (csm_timeout)
            next_state = RESPMSG70;
         else
            next_state = RESPMSGWAIT70;
      end
      REQMSG71: begin
         next_state = ACK141;
         csm_to_ACK141 = 1'b1;
      end
      RESPMSG70: begin
         next_state = ACK142;
         csm_to_ACK142 = 1'b1;
      end
      READ70: begin
         if (csm_timeout && (txdec == 0)) begin
            next_state = REQMSGWAIT72;
            csm_to_REQMSGWAIT72 = 1'b1;
         end
         else
            next_state = READ70;
      end
      ACK143: begin
         if (csm_timeout && (txdec == 0)) begin
            next_state = RESPMSGWAIT71;
            csm_to_RESPMSGWAIT71 = 1'b1;
         end
         else
            next_state = ACK143;
      end
      ACK144: begin
         if (csm_timeout)
            next_state = END_ADC;
         else
            next_state = ACK144;
      end
      REQMSGWAIT72: begin
         if (csm_timeout)
            next_state = REQMSG72;
         else
            next_state = REQMSGWAIT72;
      end
      RESPMSGWAIT71: begin
         if (csm_timeout)
            next_state = RESPMSG71;
         else
            next_state = RESPMSGWAIT71;
      end
      REQMSG72: begin
         next_state = ACK143;
         csm_to_ACK143 = 1'b1;
      end
      RESPMSG71: begin
         next_state = ACK144;
         csm_to_ACK144 = 1'b1;
      end
      END_ADC: begin
         next_state = ST_WAIT;
      end
      TRIMORNOT: begin
         if (osc_auto_trim == 1)
            next_state = ST_Start_Trim;
         else begin
            next_state = SIGN_IN;
            csm_to_SIGN_IN = 1'b1;
         end
      end
      SIGN_IN: begin
         if (csm_timeout)
            next_state = READ_SIGN_IN;
         else
            next_state = SIGN_IN;
      end
      s4: begin
         if (csm_timeout) begin
            next_state = SIGN_IN;
            csm_to_SIGN_IN = 1'b1;
         end
         else
            next_state = s4;
      end
      READ_SIGN_IN: begin
         next_state = READ91;
         csm_to_READ91 = 1'b1;
      end
      trimming_donest: begin
         next_state = s4;
         csm_to_s4 = 1'b1;
      end
      READ75: begin
         if (trimming_done == 1)
            next_state = finishtrim;
         else if (csm_timeout && (txdec == 0)) begin
            next_state = REQMSGWAIT78;
            csm_to_REQMSGWAIT78 = 1'b1;
         end
         else
            next_state = READ75;
      end
      ACK153: begin
         next_state = RESPMSG77;
      end
      REQMSGWAIT78: begin
         if (csm_timeout)
            next_state = REQMSG78;
         else
            next_state = REQMSGWAIT78;
      end
      REQMSG78: begin
         next_state = ACK153;
         csm_to_ACK153 = 1'b1;
      end
      RESPMSG77: begin
         next_state = READ75;
         csm_to_READ75 = 1'b1;
      end
      finishtrim: begin
         next_state = trimming_donest;
      end
      ST_Start: begin
         next_state = TRIMORNOT;
      end
      ST_Start_Trim: begin
         next_state = READ75;
         csm_to_READ75 = 1'b1;
      end
      START_ADC: begin
         next_state = READ36;
         csm_to_READ36 = 1'b1;
      end
      ST_Irq: begin
         next_state = ST_Elink_Wait;
         csm_to_ST_Elink_Wait = 1'b1;
      end
      ST_Select_Sig: begin
         if (sel_bus ==1)
            next_state = ST_Bus_cnt;
         else
            next_state = ST_Loop_cnt;
      end
      ST_En_Buffer: begin
         next_state = ST_End_Read;
      end
      ST_Done: begin
         next_state = ST_WAIT;
      end
      ST_End_Read: begin
         next_state = WRITE;
         csm_to_WRITE = 1'b1;
      end
      ST_End_Read1: begin
         if (send_mes_can_done == 1)
            next_state = ST_Done;
         else
            next_state = ST_End_Read1;
      end
      ST_Last_Buff: begin
         next_state = ST_End_Read1;
      end
      ST_Done_Wait: begin
         if (sel_bus ==1)
            next_state = ST_Done;
         else if (cnt_done ==1)
            next_state = ST_Last_Buff;
         else
            next_state = ST_Irq;
      end
      ST_Bus_cnt: begin
         next_state = ST_En_Buffer;
      end
      ST_Loop_cnt: begin
         next_state = ST_En_Buffer;
      end
      ACK1: begin
         if (csm_timeout && (txdec == 0)) begin
            next_state = RESPMSGWAIT;
            csm_to_RESPMSGWAIT = 1'b1;
         end
         else
            next_state = ACK1;
      end
      REQMSG4: begin
         next_state = ACK1;
         csm_to_ACK1 = 1'b1;
      end
      RESPMSG4: begin
         if (send_mes_can_done == 1) begin
            next_state = ACK2;
            csm_to_ACK2 = 1'b1;
         end
         else
            next_state = RESPMSG4;
      end
      END_SIGN_IN1: begin
         next_state = ST_WAIT;
      end
      WRITE: begin
         if (csm_timeout) begin
            next_state = REQMSGWAIT;
            csm_to_REQMSGWAIT = 1'b1;
         end
         else
            next_state = WRITE;
      end
      REQMSGWAIT: begin
         if (csm_timeout && (txdec == 0))
            next_state = REQMSG4;
         else
            next_state = REQMSGWAIT;
      end
      RESPMSGWAIT: begin
         if (csm_timeout)
            next_state = RESPMSG4;
         else
            next_state = RESPMSGWAIT;
      end
      ACK2: begin
         if (csm_timeout)
            next_state = ST_Done_Wait;
         else
            next_state = ACK2;
      end
      ST_Elink_Wait: begin
         if (csm_timeout && (start_read_elink ==1))
            next_state = ST_Select_Sig;
         else
            next_state = ST_Elink_Wait;
      end
      default: 
         next_state = ST_Reset;
   endcase
end // Next State Block

//-----------------------------------------------------------------
// Output Block for machine csm
//-----------------------------------------------------------------
always @(
   current_state
)
begin : output_block_proc
   // Default Assignment
   done = 0;
   irq_elink = 0;
   counter_en = 0;
   ch = 0;
   buffer_en = 0;
   state_o = 0;
   customcanid = 0;
   end_read_elink = 0;
   indexsubindex = 0;
   custommsg = 0;
   readadc = 0;
   data = 0;
   read = 0;
   reqmsg = 0;
   respmsg = 0;
   taildata = 0;
   start = 0;
   write = 0;
   sign_in_start = 0;
   sign_in_end = 0;
   read_adc_end = 0;
   read_adc_start = 0;
   start_trim_sig = 0;

   // Combined Actions
   case (current_state) 
      ST_Reset: begin
         state_o     = 3'b000;
         done = 0;
         irq_elink = 0;
         counter_en = 0;
         buffer_en = 0;
         end_read_elink = 0;
         read_adc_end = 0;
      end
      WRITE2: begin
         start = 1;
         write = 1;
         indexsubindex = 24'h032000;
         taildata = 32'h01000000 ;
      end
      RESPMSG95: begin
         respmsg = 1 ;
      end
      REQMSG96: begin
         reqmsg = 1 ;
      end
      WRITE3: begin
         start = 1;
         write = 1;
         indexsubindex = 24'h042000;
         taildata = 32'h00000000 ;
      end
      RESPMSG96: begin
         respmsg = 1 ;
      end
      REQMSG97: begin
         reqmsg = 1 ;
      end
      WRITE1: begin
         start = 1;
         write = 1;
         indexsubindex = 24'h022000;
         taildata = 32'h01000000 ;
      end
      RESPMSG6: begin
         respmsg = 1 ;
      end
      REQMSG6: begin
         reqmsg = 1 ;
      end
      READ91: begin
         start = 1;
         read = 1;
         indexsubindex = 24'h022000;
      end
      REQMSG94: begin
         reqmsg = 1 ;
      end
      RESPMSG93: begin
         respmsg = 1 ;
      end
      READ92: begin
         start = 1;
         read = 1;
         indexsubindex = 24'h042000;
      end
      REQMSG95: begin
         reqmsg = 1 ;
      end
      RESPMSG94: begin
         respmsg = 1 ;
      end
      READ93: begin
         start = 1;
         read = 1;
         indexsubindex = 24'h032000;
      end
      REQMSG98: begin
         reqmsg = 1 ;
      end
      RESPMSG97: begin
         respmsg = 1 ;
      end
      READ36: begin
         start = 1;
         readadc = 1 ;
         ch = 0 ;
      end
      REQMSG38: begin
         reqmsg = 1 ;
      end
      RESPMSG37: begin
         respmsg = 1 ;
      end
      READ37: begin
         start = 1;
         readadc = 1 ;
         ch = 1 ;
      end
      REQMSG39: begin
         reqmsg = 1 ;
      end
      RESPMSG38: begin
         respmsg = 1 ;
      end
      READ38: begin
         start = 1;
         readadc = 1 ;
         ch = 2 ;
      end
      REQMSG40: begin
         reqmsg = 1 ;
      end
      RESPMSG39: begin
         respmsg = 1 ;
      end
      READ39: begin
         start = 1;
         readadc = 1 ;
         ch = 3 ;
      end
      REQMSG41: begin
         reqmsg = 1 ;
      end
      RESPMSG40: begin
         respmsg = 1 ;
      end
      READ40: begin
         start = 1;
         readadc = 1 ;
         ch = 4 ;
      end
      REQMSG42: begin
         reqmsg = 1 ;
      end
      RESPMSG41: begin
         respmsg = 1 ;
      end
      READ41: begin
         start = 1;
         readadc = 1 ;
         ch = 5 ;
      end
      REQMSG43: begin
         reqmsg = 1 ;
      end
      RESPMSG42: begin
         respmsg = 1 ;
      end
      READ42: begin
         start = 1;
         readadc = 1 ;
         ch = 6 ;
      end
      REQMSG44: begin
         reqmsg = 1 ;
      end
      RESPMSG43: begin
         respmsg = 1 ;
      end
      READ43: begin
         start = 1;
         readadc = 1 ;
         ch = 7 ;
      end
      REQMSG45: begin
         reqmsg = 1 ;
      end
      RESPMSG44: begin
         respmsg = 1 ;
      end
      READ44: begin
         start = 1;
         readadc = 1 ;
         ch = 8 ;
      end
      REQMSG46: begin
         reqmsg = 1 ;
      end
      RESPMSG45: begin
         respmsg = 1 ;
      end
      READ45: begin
         start = 1;
         readadc = 1 ;
         ch = 9 ;
      end
      REQMSG47: begin
         reqmsg = 1 ;
      end
      RESPMSG46: begin
         respmsg = 1 ;
      end
      READ46: begin
         start = 1;
         readadc = 1 ;
         ch = 10 ;
      end
      REQMSG48: begin
         reqmsg = 1 ;
      end
      RESPMSG47: begin
         respmsg = 1 ;
      end
      READ47: begin
         start = 1;
         readadc = 1 ;
         ch = 11 ;
      end
      REQMSG49: begin
         reqmsg = 1 ;
      end
      RESPMSG48: begin
         respmsg = 1 ;
      end
      READ48: begin
         start = 1;
         readadc = 1 ;
         ch = 12 ;
      end
      REQMSG50: begin
         reqmsg = 1 ;
      end
      RESPMSG49: begin
         respmsg = 1 ;
      end
      READ49: begin
         start = 1;
         readadc = 1 ;
         ch = 13 ;
      end
      REQMSG51: begin
         reqmsg = 1 ;
      end
      RESPMSG50: begin
         respmsg = 1 ;
      end
      READ50: begin
         start = 1;
         readadc = 1 ;
         ch = 14 ;
      end
      REQMSG52: begin
         reqmsg = 1 ;
      end
      RESPMSG51: begin
         respmsg = 1 ;
      end
      READ51: begin
         start = 1;
         readadc = 1 ;
         ch = 15 ;
      end
      REQMSG53: begin
         reqmsg = 1 ;
      end
      RESPMSG52: begin
         respmsg = 1 ;
      end
      READ52: begin
         start = 1;
         readadc = 1 ;
         ch = 16 ;
      end
      REQMSG54: begin
         reqmsg = 1 ;
      end
      RESPMSG53: begin
         respmsg = 1 ;
      end
      READ53: begin
         start = 1;
         readadc = 1 ;
         ch = 17 ;
      end
      REQMSG55: begin
         reqmsg = 1 ;
      end
      RESPMSG54: begin
         respmsg = 1 ;
      end
      READ54: begin
         start = 1;
         readadc = 1 ;
         ch = 18 ;
      end
      REQMSG56: begin
         reqmsg = 1 ;
      end
      RESPMSG55: begin
         respmsg = 1 ;
      end
      READ55: begin
         start = 1;
         readadc = 1 ;
         ch = 19 ;
      end
      REQMSG57: begin
         reqmsg = 1 ;
      end
      RESPMSG56: begin
         respmsg = 1 ;
      end
      READ56: begin
         start = 1;
         readadc = 1 ;
         ch = 20 ;
      end
      REQMSG58: begin
         reqmsg = 1 ;
      end
      RESPMSG57: begin
         respmsg = 1 ;
      end
      READ57: begin
         start = 1;
         readadc = 1 ;
         ch = 21 ;
      end
      REQMSG59: begin
         reqmsg = 1 ;
      end
      RESPMSG58: begin
         respmsg = 1 ;
      end
      READ58: begin
         start = 1;
         readadc = 1 ;
         ch = 22 ;
      end
      REQMSG60: begin
         reqmsg = 1 ;
      end
      RESPMSG59: begin
         respmsg = 1 ;
      end
      READ59: begin
         start = 1;
         readadc = 1 ;
         ch = 23 ;
      end
      REQMSG61: begin
         reqmsg = 1 ;
      end
      RESPMSG60: begin
         respmsg = 1 ;
      end
      READ60: begin
         start = 1;
         readadc = 1 ;
         ch = 24 ;
      end
      REQMSG62: begin
         reqmsg = 1 ;
      end
      RESPMSG61: begin
         respmsg = 1 ;
      end
      READ61: begin
         start = 1;
         readadc = 1 ;
         ch = 25 ;
      end
      REQMSG63: begin
         reqmsg = 1 ;
      end
      RESPMSG62: begin
         respmsg = 1 ;
      end
      READ62: begin
         start = 1;
         readadc = 1 ;
         ch = 26 ;
      end
      REQMSG64: begin
         reqmsg = 1 ;
      end
      RESPMSG63: begin
         respmsg = 1 ;
      end
      READ63: begin
         start = 1;
         readadc = 1 ;
         ch = 27 ;
      end
      REQMSG65: begin
         reqmsg = 1 ;
      end
      RESPMSG64: begin
         respmsg = 1 ;
      end
      READ64: begin
         start = 1;
         readadc = 1 ;
         ch = 28 ;
      end
      REQMSG66: begin
         reqmsg = 1 ;
      end
      RESPMSG65: begin
         respmsg = 1 ;
      end
      READ65: begin
         start = 1;
         readadc = 1 ;
         ch = 29 ;
      end
      REQMSG67: begin
         reqmsg = 1 ;
      end
      RESPMSG66: begin
         respmsg = 1 ;
      end
      READ66: begin
         start = 1;
         readadc = 1 ;
         ch = 30 ;
      end
      REQMSG68: begin
         reqmsg = 1 ;
      end
      RESPMSG67: begin
         respmsg = 1 ;
      end
      READ67: begin
         start = 1;
         readadc = 1 ;
         ch = 31 ;
      end
      REQMSG69: begin
         reqmsg = 1 ;
      end
      RESPMSG68: begin
         respmsg = 1 ;
      end
      READ68: begin
         start = 1;
         readadc = 1 ;
         ch = 32 ;
      end
      REQMSG70: begin
         reqmsg = 1 ;
      end
      RESPMSG69: begin
         respmsg = 1 ;
      end
      READ69: begin
         start = 1;
         readadc = 1 ;
         ch = 33 ;
      end
      REQMSG71: begin
         reqmsg = 1 ;
      end
      RESPMSG70: begin
         respmsg = 1 ;
      end
      READ70: begin
         start = 1;
         readadc = 1 ;
         ch = 34 ;
      end
      REQMSG72: begin
         reqmsg = 1 ;
      end
      RESPMSG71: begin
         respmsg = 1 ;
      end
      END_ADC: begin
         read_adc_end = 1;
      end
      READ_SIGN_IN: begin
         sign_in_start = 1 ;
      end
      READ75: begin
         start = 1;
         custommsg = 1;
         customcanid = 11'h555;
         data = 64'hAAAAAAAAAAAAAAAA;
      end
      REQMSG78: begin
         reqmsg = 1 ;
      end
      RESPMSG77: begin
         respmsg = 1 ;
      end
      ST_Start_Trim: begin
         start_trim_sig = 1;
      end
      START_ADC: begin
         read_adc_start= 1;
      end
      ST_Irq: begin
         state_o     = 3'b001;
         irq_elink      = 1;
      end
      ST_En_Buffer: begin
         state_o     = 3'b011;
         counter_en = 0;
         buffer_en = 1;
      end
      ST_Done: begin
         state_o = 3'b110;
         done =1;
      end
      ST_End_Read: begin
         state_o     = 3'b100;
         end_read_elink =1;
      end
      ST_End_Read1: begin
         state_o     = 3'b100;
         end_read_elink =1;
      end
      ST_Last_Buff: begin
         irq_elink =1;
         buffer_en =1;
      end
      ST_Done_Wait: begin
         state_o     = 3'b101;
      end
      ST_Bus_cnt: begin
         state_o     = 3'b010;
      end
      ST_Loop_cnt: begin
         state_o     = 3'b010;
         counter_en = 1;
      end
      REQMSG4: begin
         reqmsg = 1 ;
      end
      RESPMSG4: begin
         respmsg = 1 ;
      end
      END_SIGN_IN1: begin
         sign_in_end = 1 ;
      end
   endcase
end // Output Block

//-----------------------------------------------------------------
// Clocked Block for machine csm
//-----------------------------------------------------------------
always @(
   posedge clk, 
   negedge rst
) 
begin : clocked_block_proc
   if (!rst) begin
      current_state <= ST_Reset;
      csm_timer <= 14'd0;
   end
   else 
   begin
      current_state <= next_state;
      csm_timer <= csm_next_timer;
   end
end // Clocked Block

//-----------------------------------------------------------------
// Wait state logic for machine csm
//-----------------------------------------------------------------
always @(
   csm_timer,
   csm_to_WRITE2,
   csm_to_ACK8,
   csm_to_ACK9,
   csm_to_RESPMSGWAIT80,
   csm_to_REQMSGWAIT96,
   csm_to_WRITE3,
   csm_to_ACK10,
   csm_to_ACK174,
   csm_to_RESPMSGWAIT81,
   csm_to_REQMSGWAIT97,
   csm_to_WRITE1,
   csm_to_ACK6,
   csm_to_ACK7,
   csm_to_RESPMSGWAIT6,
   csm_to_REQMSGWAIT6,
   csm_to_READ91,
   csm_to_ACK170,
   csm_to_ACK171,
   csm_to_REQMSGWAIT94,
   csm_to_RESPMSGWAIT78,
   csm_to_READ92,
   csm_to_ACK172,
   csm_to_ACK173,
   csm_to_REQMSGWAIT95,
   csm_to_RESPMSGWAIT79,
   csm_to_READ93,
   csm_to_ACK175,
   csm_to_ACK176,
   csm_to_REQMSGWAIT98,
   csm_to_RESPMSGWAIT82,
   csm_to_READ36,
   csm_to_ACK75,
   csm_to_ACK76,
   csm_to_REQMSGWAIT38,
   csm_to_RESPMSGWAIT37,
   csm_to_READ37,
   csm_to_ACK77,
   csm_to_ACK78,
   csm_to_REQMSGWAIT39,
   csm_to_RESPMSGWAIT38,
   csm_to_READ38,
   csm_to_ACK79,
   csm_to_ACK80,
   csm_to_REQMSGWAIT40,
   csm_to_RESPMSGWAIT39,
   csm_to_READ39,
   csm_to_ACK81,
   csm_to_ACK82,
   csm_to_REQMSGWAIT41,
   csm_to_RESPMSGWAIT40,
   csm_to_READ40,
   csm_to_ACK83,
   csm_to_ACK84,
   csm_to_REQMSGWAIT42,
   csm_to_RESPMSGWAIT41,
   csm_to_READ41,
   csm_to_ACK85,
   csm_to_ACK86,
   csm_to_REQMSGWAIT43,
   csm_to_RESPMSGWAIT42,
   csm_to_READ42,
   csm_to_ACK87,
   csm_to_ACK88,
   csm_to_REQMSGWAIT44,
   csm_to_RESPMSGWAIT43,
   csm_to_READ43,
   csm_to_ACK89,
   csm_to_ACK90,
   csm_to_REQMSGWAIT45,
   csm_to_RESPMSGWAIT44,
   csm_to_READ44,
   csm_to_ACK91,
   csm_to_ACK92,
   csm_to_REQMSGWAIT46,
   csm_to_RESPMSGWAIT45,
   csm_to_READ45,
   csm_to_ACK93,
   csm_to_ACK94,
   csm_to_REQMSGWAIT47,
   csm_to_RESPMSGWAIT46,
   csm_to_READ46,
   csm_to_ACK95,
   csm_to_ACK96,
   csm_to_REQMSGWAIT48,
   csm_to_RESPMSGWAIT47,
   csm_to_READ47,
   csm_to_ACK97,
   csm_to_ACK98,
   csm_to_REQMSGWAIT49,
   csm_to_RESPMSGWAIT48,
   csm_to_READ48,
   csm_to_ACK99,
   csm_to_ACK100,
   csm_to_REQMSGWAIT50,
   csm_to_RESPMSGWAIT49,
   csm_to_READ49,
   csm_to_ACK101,
   csm_to_ACK102,
   csm_to_REQMSGWAIT51,
   csm_to_RESPMSGWAIT50,
   csm_to_READ50,
   csm_to_ACK103,
   csm_to_ACK104,
   csm_to_REQMSGWAIT52,
   csm_to_RESPMSGWAIT51,
   csm_to_READ51,
   csm_to_ACK105,
   csm_to_ACK106,
   csm_to_REQMSGWAIT53,
   csm_to_RESPMSGWAIT52,
   csm_to_READ52,
   csm_to_ACK107,
   csm_to_ACK108,
   csm_to_REQMSGWAIT54,
   csm_to_RESPMSGWAIT53,
   csm_to_READ53,
   csm_to_ACK109,
   csm_to_ACK110,
   csm_to_REQMSGWAIT55,
   csm_to_RESPMSGWAIT54,
   csm_to_READ54,
   csm_to_ACK111,
   csm_to_ACK112,
   csm_to_REQMSGWAIT56,
   csm_to_RESPMSGWAIT55,
   csm_to_READ55,
   csm_to_ACK113,
   csm_to_ACK114,
   csm_to_REQMSGWAIT57,
   csm_to_RESPMSGWAIT56,
   csm_to_READ56,
   csm_to_ACK115,
   csm_to_ACK116,
   csm_to_REQMSGWAIT58,
   csm_to_RESPMSGWAIT57,
   csm_to_READ57,
   csm_to_ACK117,
   csm_to_ACK118,
   csm_to_REQMSGWAIT59,
   csm_to_RESPMSGWAIT58,
   csm_to_READ58,
   csm_to_ACK119,
   csm_to_ACK120,
   csm_to_REQMSGWAIT60,
   csm_to_RESPMSGWAIT59,
   csm_to_READ59,
   csm_to_ACK121,
   csm_to_ACK122,
   csm_to_REQMSGWAIT61,
   csm_to_RESPMSGWAIT60,
   csm_to_READ60,
   csm_to_ACK123,
   csm_to_ACK124,
   csm_to_REQMSGWAIT62,
   csm_to_RESPMSGWAIT61,
   csm_to_READ61,
   csm_to_ACK125,
   csm_to_ACK126,
   csm_to_REQMSGWAIT63,
   csm_to_RESPMSGWAIT62,
   csm_to_READ62,
   csm_to_ACK127,
   csm_to_ACK128,
   csm_to_REQMSGWAIT64,
   csm_to_RESPMSGWAIT63,
   csm_to_READ63,
   csm_to_ACK129,
   csm_to_ACK130,
   csm_to_REQMSGWAIT65,
   csm_to_RESPMSGWAIT64,
   csm_to_READ64,
   csm_to_ACK131,
   csm_to_ACK132,
   csm_to_REQMSGWAIT66,
   csm_to_RESPMSGWAIT65,
   csm_to_READ65,
   csm_to_ACK133,
   csm_to_ACK134,
   csm_to_REQMSGWAIT67,
   csm_to_RESPMSGWAIT66,
   csm_to_READ66,
   csm_to_ACK135,
   csm_to_ACK136,
   csm_to_REQMSGWAIT68,
   csm_to_RESPMSGWAIT67,
   csm_to_READ67,
   csm_to_ACK137,
   csm_to_ACK138,
   csm_to_REQMSGWAIT69,
   csm_to_RESPMSGWAIT68,
   csm_to_READ68,
   csm_to_ACK139,
   csm_to_ACK140,
   csm_to_REQMSGWAIT70,
   csm_to_RESPMSGWAIT69,
   csm_to_READ69,
   csm_to_ACK141,
   csm_to_ACK142,
   csm_to_REQMSGWAIT71,
   csm_to_RESPMSGWAIT70,
   csm_to_READ70,
   csm_to_ACK143,
   csm_to_ACK144,
   csm_to_REQMSGWAIT72,
   csm_to_RESPMSGWAIT71,
   csm_to_SIGN_IN,
   csm_to_s4,
   csm_to_READ75,
   csm_to_ACK153,
   csm_to_REQMSGWAIT78,
   csm_to_ACK1,
   csm_to_WRITE,
   csm_to_REQMSGWAIT,
   csm_to_RESPMSGWAIT,
   csm_to_ACK2,
   csm_to_ST_Elink_Wait
)
begin : csm_wait_block_proc
   csm_timeout = (csm_timer == 14'd0);
   if (csm_to_WRITE2 == 1'b1) begin
      csm_next_timer = 14'd1499;  //no cycles(1500)-1=1499
   end
   else if (csm_to_ACK8 == 1'b1) begin
      csm_next_timer = 14'd1499;  //no cycles(1500)-1=1499
   end
   else if (csm_to_ACK9 == 1'b1) begin
      csm_next_timer = 14'd1499;  //no cycles(1500)-1=1499
   end
   else if (csm_to_RESPMSGWAIT80 == 1'b1) begin
      csm_next_timer = 14'd1499;  //no cycles(1500)-1=1499
   end
   else if (csm_to_REQMSGWAIT96 == 1'b1) begin
      csm_next_timer = 14'd1499;  //no cycles(1500)-1=1499
   end
   else if (csm_to_WRITE3 == 1'b1) begin
      csm_next_timer = 14'd1499;  //no cycles(1500)-1=1499
   end
   else if (csm_to_ACK10 == 1'b1) begin
      csm_next_timer = 14'd1499;  //no cycles(1500)-1=1499
   end
   else if (csm_to_ACK174 == 1'b1) begin
      csm_next_timer = 14'd1499;  //no cycles(1500)-1=1499
   end
   else if (csm_to_RESPMSGWAIT81 == 1'b1) begin
      csm_next_timer = 14'd1499;  //no cycles(1500)-1=1499
   end
   else if (csm_to_REQMSGWAIT97 == 1'b1) begin
      csm_next_timer = 14'd1499;  //no cycles(1500)-1=1499
   end
   else if (csm_to_WRITE1 == 1'b1) begin
      csm_next_timer = 14'd1499;  //no cycles(1500)-1=1499
   end
   else if (csm_to_ACK6 == 1'b1) begin
      csm_next_timer = 14'd1499;  //no cycles(1500)-1=1499
   end
   else if (csm_to_ACK7 == 1'b1) begin
      csm_next_timer = 14'd1499;  //no cycles(1500)-1=1499
   end
   else if (csm_to_RESPMSGWAIT6 == 1'b1) begin
      csm_next_timer = 14'd1499;  //no cycles(1500)-1=1499
   end
   else if (csm_to_REQMSGWAIT6 == 1'b1) begin
      csm_next_timer = 14'd1499;  //no cycles(1500)-1=1499
   end
   else if (csm_to_READ91 == 1'b1) begin
      csm_next_timer = 14'd1499;  //no cycles(1500)-1=1499
   end
   else if (csm_to_ACK170 == 1'b1) begin
      csm_next_timer = 14'd1499;  //no cycles(1500)-1=1499
   end
   else if (csm_to_ACK171 == 1'b1) begin
      csm_next_timer = 14'd1499;  //no cycles(1500)-1=1499
   end
   else if (csm_to_REQMSGWAIT94 == 1'b1) begin
      csm_next_timer = 14'd1499;  //no cycles(1500)-1=1499
   end
   else if (csm_to_RESPMSGWAIT78 == 1'b1) begin
      csm_next_timer = 14'd1499;  //no cycles(1500)-1=1499
   end
   else if (csm_to_READ92 == 1'b1) begin
      csm_next_timer = 14'd1499;  //no cycles(1500)-1=1499
   end
   else if (csm_to_ACK172 == 1'b1) begin
      csm_next_timer = 14'd1499;  //no cycles(1500)-1=1499
   end
   else if (csm_to_ACK173 == 1'b1) begin
      csm_next_timer = 14'd1499;  //no cycles(1500)-1=1499
   end
   else if (csm_to_REQMSGWAIT95 == 1'b1) begin
      csm_next_timer = 14'd1499;  //no cycles(1500)-1=1499
   end
   else if (csm_to_RESPMSGWAIT79 == 1'b1) begin
      csm_next_timer = 14'd1499;  //no cycles(1500)-1=1499
   end
   else if (csm_to_READ93 == 1'b1) begin
      csm_next_timer = 14'd1499;  //no cycles(1500)-1=1499
   end
   else if (csm_to_ACK175 == 1'b1) begin
      csm_next_timer = 14'd1499;  //no cycles(1500)-1=1499
   end
   else if (csm_to_ACK176 == 1'b1) begin
      csm_next_timer = 14'd1499;  //no cycles(1500)-1=1499
   end
   else if (csm_to_REQMSGWAIT98 == 1'b1) begin
      csm_next_timer = 14'd1499;  //no cycles(1500)-1=1499
   end
   else if (csm_to_RESPMSGWAIT82 == 1'b1) begin
      csm_next_timer = 14'd1499;  //no cycles(1500)-1=1499
   end
   else if (csm_to_READ36 == 1'b1) begin
      csm_next_timer = 14'd1499;  //no cycles(1500)-1=1499
   end
   else if (csm_to_ACK75 == 1'b1) begin
      csm_next_timer = 14'd1499;  //no cycles(1500)-1=1499
   end
   else if (csm_to_ACK76 == 1'b1) begin
      csm_next_timer = 14'd1499;  //no cycles(1500)-1=1499
   end
   else if (csm_to_REQMSGWAIT38 == 1'b1) begin
      csm_next_timer = 14'd1499;  //no cycles(1500)-1=1499
   end
   else if (csm_to_RESPMSGWAIT37 == 1'b1) begin
      csm_next_timer = 14'd1499;  //no cycles(1500)-1=1499
   end
   else if (csm_to_READ37 == 1'b1) begin
      csm_next_timer = 14'd1499;  //no cycles(1500)-1=1499
   end
   else if (csm_to_ACK77 == 1'b1) begin
      csm_next_timer = 14'd1499;  //no cycles(1500)-1=1499
   end
   else if (csm_to_ACK78 == 1'b1) begin
      csm_next_timer = 14'd1499;  //no cycles(1500)-1=1499
   end
   else if (csm_to_REQMSGWAIT39 == 1'b1) begin
      csm_next_timer = 14'd1499;  //no cycles(1500)-1=1499
   end
   else if (csm_to_RESPMSGWAIT38 == 1'b1) begin
      csm_next_timer = 14'd1499;  //no cycles(1500)-1=1499
   end
   else if (csm_to_READ38 == 1'b1) begin
      csm_next_timer = 14'd1499;  //no cycles(1500)-1=1499
   end
   else if (csm_to_ACK79 == 1'b1) begin
      csm_next_timer = 14'd1499;  //no cycles(1500)-1=1499
   end
   else if (csm_to_ACK80 == 1'b1) begin
      csm_next_timer = 14'd1499;  //no cycles(1500)-1=1499
   end
   else if (csm_to_REQMSGWAIT40 == 1'b1) begin
      csm_next_timer = 14'd1499;  //no cycles(1500)-1=1499
   end
   else if (csm_to_RESPMSGWAIT39 == 1'b1) begin
      csm_next_timer = 14'd1499;  //no cycles(1500)-1=1499
   end
   else if (csm_to_READ39 == 1'b1) begin
      csm_next_timer = 14'd1499;  //no cycles(1500)-1=1499
   end
   else if (csm_to_ACK81 == 1'b1) begin
      csm_next_timer = 14'd1499;  //no cycles(1500)-1=1499
   end
   else if (csm_to_ACK82 == 1'b1) begin
      csm_next_timer = 14'd1499;  //no cycles(1500)-1=1499
   end
   else if (csm_to_REQMSGWAIT41 == 1'b1) begin
      csm_next_timer = 14'd1499;  //no cycles(1500)-1=1499
   end
   else if (csm_to_RESPMSGWAIT40 == 1'b1) begin
      csm_next_timer = 14'd1499;  //no cycles(1500)-1=1499
   end
   else if (csm_to_READ40 == 1'b1) begin
      csm_next_timer = 14'd1499;  //no cycles(1500)-1=1499
   end
   else if (csm_to_ACK83 == 1'b1) begin
      csm_next_timer = 14'd1499;  //no cycles(1500)-1=1499
   end
   else if (csm_to_ACK84 == 1'b1) begin
      csm_next_timer = 14'd1499;  //no cycles(1500)-1=1499
   end
   else if (csm_to_REQMSGWAIT42 == 1'b1) begin
      csm_next_timer = 14'd1499;  //no cycles(1500)-1=1499
   end
   else if (csm_to_RESPMSGWAIT41 == 1'b1) begin
      csm_next_timer = 14'd1499;  //no cycles(1500)-1=1499
   end
   else if (csm_to_READ41 == 1'b1) begin
      csm_next_timer = 14'd1499;  //no cycles(1500)-1=1499
   end
   else if (csm_to_ACK85 == 1'b1) begin
      csm_next_timer = 14'd1499;  //no cycles(1500)-1=1499
   end
   else if (csm_to_ACK86 == 1'b1) begin
      csm_next_timer = 14'd1499;  //no cycles(1500)-1=1499
   end
   else if (csm_to_REQMSGWAIT43 == 1'b1) begin
      csm_next_timer = 14'd1499;  //no cycles(1500)-1=1499
   end
   else if (csm_to_RESPMSGWAIT42 == 1'b1) begin
      csm_next_timer = 14'd1499;  //no cycles(1500)-1=1499
   end
   else if (csm_to_READ42 == 1'b1) begin
      csm_next_timer = 14'd1499;  //no cycles(1500)-1=1499
   end
   else if (csm_to_ACK87 == 1'b1) begin
      csm_next_timer = 14'd1499;  //no cycles(1500)-1=1499
   end
   else if (csm_to_ACK88 == 1'b1) begin
      csm_next_timer = 14'd1499;  //no cycles(1500)-1=1499
   end
   else if (csm_to_REQMSGWAIT44 == 1'b1) begin
      csm_next_timer = 14'd1499;  //no cycles(1500)-1=1499
   end
   else if (csm_to_RESPMSGWAIT43 == 1'b1) begin
      csm_next_timer = 14'd1499;  //no cycles(1500)-1=1499
   end
   else if (csm_to_READ43 == 1'b1) begin
      csm_next_timer = 14'd1499;  //no cycles(1500)-1=1499
   end
   else if (csm_to_ACK89 == 1'b1) begin
      csm_next_timer = 14'd1499;  //no cycles(1500)-1=1499
   end
   else if (csm_to_ACK90 == 1'b1) begin
      csm_next_timer = 14'd1499;  //no cycles(1500)-1=1499
   end
   else if (csm_to_REQMSGWAIT45 == 1'b1) begin
      csm_next_timer = 14'd1499;  //no cycles(1500)-1=1499
   end
   else if (csm_to_RESPMSGWAIT44 == 1'b1) begin
      csm_next_timer = 14'd1499;  //no cycles(1500)-1=1499
   end
   else if (csm_to_READ44 == 1'b1) begin
      csm_next_timer = 14'd1499;  //no cycles(1500)-1=1499
   end
   else if (csm_to_ACK91 == 1'b1) begin
      csm_next_timer = 14'd1499;  //no cycles(1500)-1=1499
   end
   else if (csm_to_ACK92 == 1'b1) begin
      csm_next_timer = 14'd1499;  //no cycles(1500)-1=1499
   end
   else if (csm_to_REQMSGWAIT46 == 1'b1) begin
      csm_next_timer = 14'd1499;  //no cycles(1500)-1=1499
   end
   else if (csm_to_RESPMSGWAIT45 == 1'b1) begin
      csm_next_timer = 14'd1499;  //no cycles(1500)-1=1499
   end
   else if (csm_to_READ45 == 1'b1) begin
      csm_next_timer = 14'd1499;  //no cycles(1500)-1=1499
   end
   else if (csm_to_ACK93 == 1'b1) begin
      csm_next_timer = 14'd1499;  //no cycles(1500)-1=1499
   end
   else if (csm_to_ACK94 == 1'b1) begin
      csm_next_timer = 14'd1499;  //no cycles(1500)-1=1499
   end
   else if (csm_to_REQMSGWAIT47 == 1'b1) begin
      csm_next_timer = 14'd1499;  //no cycles(1500)-1=1499
   end
   else if (csm_to_RESPMSGWAIT46 == 1'b1) begin
      csm_next_timer = 14'd1499;  //no cycles(1500)-1=1499
   end
   else if (csm_to_READ46 == 1'b1) begin
      csm_next_timer = 14'd1499;  //no cycles(1500)-1=1499
   end
   else if (csm_to_ACK95 == 1'b1) begin
      csm_next_timer = 14'd1499;  //no cycles(1500)-1=1499
   end
   else if (csm_to_ACK96 == 1'b1) begin
      csm_next_timer = 14'd1499;  //no cycles(1500)-1=1499
   end
   else if (csm_to_REQMSGWAIT48 == 1'b1) begin
      csm_next_timer = 14'd1499;  //no cycles(1500)-1=1499
   end
   else if (csm_to_RESPMSGWAIT47 == 1'b1) begin
      csm_next_timer = 14'd1499;  //no cycles(1500)-1=1499
   end
   else if (csm_to_READ47 == 1'b1) begin
      csm_next_timer = 14'd1499;  //no cycles(1500)-1=1499
   end
   else if (csm_to_ACK97 == 1'b1) begin
      csm_next_timer = 14'd1499;  //no cycles(1500)-1=1499
   end
   else if (csm_to_ACK98 == 1'b1) begin
      csm_next_timer = 14'd1499;  //no cycles(1500)-1=1499
   end
   else if (csm_to_REQMSGWAIT49 == 1'b1) begin
      csm_next_timer = 14'd1499;  //no cycles(1500)-1=1499
   end
   else if (csm_to_RESPMSGWAIT48 == 1'b1) begin
      csm_next_timer = 14'd1499;  //no cycles(1500)-1=1499
   end
   else if (csm_to_READ48 == 1'b1) begin
      csm_next_timer = 14'd1499;  //no cycles(1500)-1=1499
   end
   else if (csm_to_ACK99 == 1'b1) begin
      csm_next_timer = 14'd1499;  //no cycles(1500)-1=1499
   end
   else if (csm_to_ACK100 == 1'b1) begin
      csm_next_timer = 14'd1499;  //no cycles(1500)-1=1499
   end
   else if (csm_to_REQMSGWAIT50 == 1'b1) begin
      csm_next_timer = 14'd1499;  //no cycles(1500)-1=1499
   end
   else if (csm_to_RESPMSGWAIT49 == 1'b1) begin
      csm_next_timer = 14'd1499;  //no cycles(1500)-1=1499
   end
   else if (csm_to_READ49 == 1'b1) begin
      csm_next_timer = 14'd1499;  //no cycles(1500)-1=1499
   end
   else if (csm_to_ACK101 == 1'b1) begin
      csm_next_timer = 14'd1499;  //no cycles(1500)-1=1499
   end
   else if (csm_to_ACK102 == 1'b1) begin
      csm_next_timer = 14'd1499;  //no cycles(1500)-1=1499
   end
   else if (csm_to_REQMSGWAIT51 == 1'b1) begin
      csm_next_timer = 14'd1499;  //no cycles(1500)-1=1499
   end
   else if (csm_to_RESPMSGWAIT50 == 1'b1) begin
      csm_next_timer = 14'd1499;  //no cycles(1500)-1=1499
   end
   else if (csm_to_READ50 == 1'b1) begin
      csm_next_timer = 14'd1499;  //no cycles(1500)-1=1499
   end
   else if (csm_to_ACK103 == 1'b1) begin
      csm_next_timer = 14'd1499;  //no cycles(1500)-1=1499
   end
   else if (csm_to_ACK104 == 1'b1) begin
      csm_next_timer = 14'd1499;  //no cycles(1500)-1=1499
   end
   else if (csm_to_REQMSGWAIT52 == 1'b1) begin
      csm_next_timer = 14'd1499;  //no cycles(1500)-1=1499
   end
   else if (csm_to_RESPMSGWAIT51 == 1'b1) begin
      csm_next_timer = 14'd1499;  //no cycles(1500)-1=1499
   end
   else if (csm_to_READ51 == 1'b1) begin
      csm_next_timer = 14'd1499;  //no cycles(1500)-1=1499
   end
   else if (csm_to_ACK105 == 1'b1) begin
      csm_next_timer = 14'd1499;  //no cycles(1500)-1=1499
   end
   else if (csm_to_ACK106 == 1'b1) begin
      csm_next_timer = 14'd1499;  //no cycles(1500)-1=1499
   end
   else if (csm_to_REQMSGWAIT53 == 1'b1) begin
      csm_next_timer = 14'd1499;  //no cycles(1500)-1=1499
   end
   else if (csm_to_RESPMSGWAIT52 == 1'b1) begin
      csm_next_timer = 14'd1499;  //no cycles(1500)-1=1499
   end
   else if (csm_to_READ52 == 1'b1) begin
      csm_next_timer = 14'd1499;  //no cycles(1500)-1=1499
   end
   else if (csm_to_ACK107 == 1'b1) begin
      csm_next_timer = 14'd1499;  //no cycles(1500)-1=1499
   end
   else if (csm_to_ACK108 == 1'b1) begin
      csm_next_timer = 14'd1499;  //no cycles(1500)-1=1499
   end
   else if (csm_to_REQMSGWAIT54 == 1'b1) begin
      csm_next_timer = 14'd1499;  //no cycles(1500)-1=1499
   end
   else if (csm_to_RESPMSGWAIT53 == 1'b1) begin
      csm_next_timer = 14'd1499;  //no cycles(1500)-1=1499
   end
   else if (csm_to_READ53 == 1'b1) begin
      csm_next_timer = 14'd1499;  //no cycles(1500)-1=1499
   end
   else if (csm_to_ACK109 == 1'b1) begin
      csm_next_timer = 14'd1499;  //no cycles(1500)-1=1499
   end
   else if (csm_to_ACK110 == 1'b1) begin
      csm_next_timer = 14'd1499;  //no cycles(1500)-1=1499
   end
   else if (csm_to_REQMSGWAIT55 == 1'b1) begin
      csm_next_timer = 14'd1499;  //no cycles(1500)-1=1499
   end
   else if (csm_to_RESPMSGWAIT54 == 1'b1) begin
      csm_next_timer = 14'd1499;  //no cycles(1500)-1=1499
   end
   else if (csm_to_READ54 == 1'b1) begin
      csm_next_timer = 14'd1499;  //no cycles(1500)-1=1499
   end
   else if (csm_to_ACK111 == 1'b1) begin
      csm_next_timer = 14'd1499;  //no cycles(1500)-1=1499
   end
   else if (csm_to_ACK112 == 1'b1) begin
      csm_next_timer = 14'd1499;  //no cycles(1500)-1=1499
   end
   else if (csm_to_REQMSGWAIT56 == 1'b1) begin
      csm_next_timer = 14'd1499;  //no cycles(1500)-1=1499
   end
   else if (csm_to_RESPMSGWAIT55 == 1'b1) begin
      csm_next_timer = 14'd1499;  //no cycles(1500)-1=1499
   end
   else if (csm_to_READ55 == 1'b1) begin
      csm_next_timer = 14'd1499;  //no cycles(1500)-1=1499
   end
   else if (csm_to_ACK113 == 1'b1) begin
      csm_next_timer = 14'd1499;  //no cycles(1500)-1=1499
   end
   else if (csm_to_ACK114 == 1'b1) begin
      csm_next_timer = 14'd1499;  //no cycles(1500)-1=1499
   end
   else if (csm_to_REQMSGWAIT57 == 1'b1) begin
      csm_next_timer = 14'd1499;  //no cycles(1500)-1=1499
   end
   else if (csm_to_RESPMSGWAIT56 == 1'b1) begin
      csm_next_timer = 14'd1499;  //no cycles(1500)-1=1499
   end
   else if (csm_to_READ56 == 1'b1) begin
      csm_next_timer = 14'd1499;  //no cycles(1500)-1=1499
   end
   else if (csm_to_ACK115 == 1'b1) begin
      csm_next_timer = 14'd1499;  //no cycles(1500)-1=1499
   end
   else if (csm_to_ACK116 == 1'b1) begin
      csm_next_timer = 14'd1499;  //no cycles(1500)-1=1499
   end
   else if (csm_to_REQMSGWAIT58 == 1'b1) begin
      csm_next_timer = 14'd1499;  //no cycles(1500)-1=1499
   end
   else if (csm_to_RESPMSGWAIT57 == 1'b1) begin
      csm_next_timer = 14'd1499;  //no cycles(1500)-1=1499
   end
   else if (csm_to_READ57 == 1'b1) begin
      csm_next_timer = 14'd1499;  //no cycles(1500)-1=1499
   end
   else if (csm_to_ACK117 == 1'b1) begin
      csm_next_timer = 14'd1499;  //no cycles(1500)-1=1499
   end
   else if (csm_to_ACK118 == 1'b1) begin
      csm_next_timer = 14'd1499;  //no cycles(1500)-1=1499
   end
   else if (csm_to_REQMSGWAIT59 == 1'b1) begin
      csm_next_timer = 14'd1499;  //no cycles(1500)-1=1499
   end
   else if (csm_to_RESPMSGWAIT58 == 1'b1) begin
      csm_next_timer = 14'd1499;  //no cycles(1500)-1=1499
   end
   else if (csm_to_READ58 == 1'b1) begin
      csm_next_timer = 14'd1499;  //no cycles(1500)-1=1499
   end
   else if (csm_to_ACK119 == 1'b1) begin
      csm_next_timer = 14'd1499;  //no cycles(1500)-1=1499
   end
   else if (csm_to_ACK120 == 1'b1) begin
      csm_next_timer = 14'd1499;  //no cycles(1500)-1=1499
   end
   else if (csm_to_REQMSGWAIT60 == 1'b1) begin
      csm_next_timer = 14'd1499;  //no cycles(1500)-1=1499
   end
   else if (csm_to_RESPMSGWAIT59 == 1'b1) begin
      csm_next_timer = 14'd1499;  //no cycles(1500)-1=1499
   end
   else if (csm_to_READ59 == 1'b1) begin
      csm_next_timer = 14'd1499;  //no cycles(1500)-1=1499
   end
   else if (csm_to_ACK121 == 1'b1) begin
      csm_next_timer = 14'd1499;  //no cycles(1500)-1=1499
   end
   else if (csm_to_ACK122 == 1'b1) begin
      csm_next_timer = 14'd1499;  //no cycles(1500)-1=1499
   end
   else if (csm_to_REQMSGWAIT61 == 1'b1) begin
      csm_next_timer = 14'd1499;  //no cycles(1500)-1=1499
   end
   else if (csm_to_RESPMSGWAIT60 == 1'b1) begin
      csm_next_timer = 14'd1499;  //no cycles(1500)-1=1499
   end
   else if (csm_to_READ60 == 1'b1) begin
      csm_next_timer = 14'd1499;  //no cycles(1500)-1=1499
   end
   else if (csm_to_ACK123 == 1'b1) begin
      csm_next_timer = 14'd1499;  //no cycles(1500)-1=1499
   end
   else if (csm_to_ACK124 == 1'b1) begin
      csm_next_timer = 14'd1499;  //no cycles(1500)-1=1499
   end
   else if (csm_to_REQMSGWAIT62 == 1'b1) begin
      csm_next_timer = 14'd1499;  //no cycles(1500)-1=1499
   end
   else if (csm_to_RESPMSGWAIT61 == 1'b1) begin
      csm_next_timer = 14'd1499;  //no cycles(1500)-1=1499
   end
   else if (csm_to_READ61 == 1'b1) begin
      csm_next_timer = 14'd1499;  //no cycles(1500)-1=1499
   end
   else if (csm_to_ACK125 == 1'b1) begin
      csm_next_timer = 14'd1499;  //no cycles(1500)-1=1499
   end
   else if (csm_to_ACK126 == 1'b1) begin
      csm_next_timer = 14'd1499;  //no cycles(1500)-1=1499
   end
   else if (csm_to_REQMSGWAIT63 == 1'b1) begin
      csm_next_timer = 14'd1499;  //no cycles(1500)-1=1499
   end
   else if (csm_to_RESPMSGWAIT62 == 1'b1) begin
      csm_next_timer = 14'd1499;  //no cycles(1500)-1=1499
   end
   else if (csm_to_READ62 == 1'b1) begin
      csm_next_timer = 14'd1499;  //no cycles(1500)-1=1499
   end
   else if (csm_to_ACK127 == 1'b1) begin
      csm_next_timer = 14'd1499;  //no cycles(1500)-1=1499
   end
   else if (csm_to_ACK128 == 1'b1) begin
      csm_next_timer = 14'd1499;  //no cycles(1500)-1=1499
   end
   else if (csm_to_REQMSGWAIT64 == 1'b1) begin
      csm_next_timer = 14'd1499;  //no cycles(1500)-1=1499
   end
   else if (csm_to_RESPMSGWAIT63 == 1'b1) begin
      csm_next_timer = 14'd1499;  //no cycles(1500)-1=1499
   end
   else if (csm_to_READ63 == 1'b1) begin
      csm_next_timer = 14'd1499;  //no cycles(1500)-1=1499
   end
   else if (csm_to_ACK129 == 1'b1) begin
      csm_next_timer = 14'd1499;  //no cycles(1500)-1=1499
   end
   else if (csm_to_ACK130 == 1'b1) begin
      csm_next_timer = 14'd1499;  //no cycles(1500)-1=1499
   end
   else if (csm_to_REQMSGWAIT65 == 1'b1) begin
      csm_next_timer = 14'd1499;  //no cycles(1500)-1=1499
   end
   else if (csm_to_RESPMSGWAIT64 == 1'b1) begin
      csm_next_timer = 14'd1499;  //no cycles(1500)-1=1499
   end
   else if (csm_to_READ64 == 1'b1) begin
      csm_next_timer = 14'd1499;  //no cycles(1500)-1=1499
   end
   else if (csm_to_ACK131 == 1'b1) begin
      csm_next_timer = 14'd1499;  //no cycles(1500)-1=1499
   end
   else if (csm_to_ACK132 == 1'b1) begin
      csm_next_timer = 14'd1499;  //no cycles(1500)-1=1499
   end
   else if (csm_to_REQMSGWAIT66 == 1'b1) begin
      csm_next_timer = 14'd1499;  //no cycles(1500)-1=1499
   end
   else if (csm_to_RESPMSGWAIT65 == 1'b1) begin
      csm_next_timer = 14'd1499;  //no cycles(1500)-1=1499
   end
   else if (csm_to_READ65 == 1'b1) begin
      csm_next_timer = 14'd1499;  //no cycles(1500)-1=1499
   end
   else if (csm_to_ACK133 == 1'b1) begin
      csm_next_timer = 14'd1499;  //no cycles(1500)-1=1499
   end
   else if (csm_to_ACK134 == 1'b1) begin
      csm_next_timer = 14'd1499;  //no cycles(1500)-1=1499
   end
   else if (csm_to_REQMSGWAIT67 == 1'b1) begin
      csm_next_timer = 14'd1499;  //no cycles(1500)-1=1499
   end
   else if (csm_to_RESPMSGWAIT66 == 1'b1) begin
      csm_next_timer = 14'd1499;  //no cycles(1500)-1=1499
   end
   else if (csm_to_READ66 == 1'b1) begin
      csm_next_timer = 14'd1499;  //no cycles(1500)-1=1499
   end
   else if (csm_to_ACK135 == 1'b1) begin
      csm_next_timer = 14'd1499;  //no cycles(1500)-1=1499
   end
   else if (csm_to_ACK136 == 1'b1) begin
      csm_next_timer = 14'd1499;  //no cycles(1500)-1=1499
   end
   else if (csm_to_REQMSGWAIT68 == 1'b1) begin
      csm_next_timer = 14'd1499;  //no cycles(1500)-1=1499
   end
   else if (csm_to_RESPMSGWAIT67 == 1'b1) begin
      csm_next_timer = 14'd1499;  //no cycles(1500)-1=1499
   end
   else if (csm_to_READ67 == 1'b1) begin
      csm_next_timer = 14'd1499;  //no cycles(1500)-1=1499
   end
   else if (csm_to_ACK137 == 1'b1) begin
      csm_next_timer = 14'd1499;  //no cycles(1500)-1=1499
   end
   else if (csm_to_ACK138 == 1'b1) begin
      csm_next_timer = 14'd1499;  //no cycles(1500)-1=1499
   end
   else if (csm_to_REQMSGWAIT69 == 1'b1) begin
      csm_next_timer = 14'd1499;  //no cycles(1500)-1=1499
   end
   else if (csm_to_RESPMSGWAIT68 == 1'b1) begin
      csm_next_timer = 14'd1499;  //no cycles(1500)-1=1499
   end
   else if (csm_to_READ68 == 1'b1) begin
      csm_next_timer = 14'd1499;  //no cycles(1500)-1=1499
   end
   else if (csm_to_ACK139 == 1'b1) begin
      csm_next_timer = 14'd1499;  //no cycles(1500)-1=1499
   end
   else if (csm_to_ACK140 == 1'b1) begin
      csm_next_timer = 14'd1499;  //no cycles(1500)-1=1499
   end
   else if (csm_to_REQMSGWAIT70 == 1'b1) begin
      csm_next_timer = 14'd1499;  //no cycles(1500)-1=1499
   end
   else if (csm_to_RESPMSGWAIT69 == 1'b1) begin
      csm_next_timer = 14'd1499;  //no cycles(1500)-1=1499
   end
   else if (csm_to_READ69 == 1'b1) begin
      csm_next_timer = 14'd1499;  //no cycles(1500)-1=1499
   end
   else if (csm_to_ACK141 == 1'b1) begin
      csm_next_timer = 14'd1499;  //no cycles(1500)-1=1499
   end
   else if (csm_to_ACK142 == 1'b1) begin
      csm_next_timer = 14'd1499;  //no cycles(1500)-1=1499
   end
   else if (csm_to_REQMSGWAIT71 == 1'b1) begin
      csm_next_timer = 14'd1499;  //no cycles(1500)-1=1499
   end
   else if (csm_to_RESPMSGWAIT70 == 1'b1) begin
      csm_next_timer = 14'd1499;  //no cycles(1500)-1=1499
   end
   else if (csm_to_READ70 == 1'b1) begin
      csm_next_timer = 14'd1499;  //no cycles(1500)-1=1499
   end
   else if (csm_to_ACK143 == 1'b1) begin
      csm_next_timer = 14'd1499;  //no cycles(1500)-1=1499
   end
   else if (csm_to_ACK144 == 1'b1) begin
      csm_next_timer = 14'd1499;  //no cycles(1500)-1=1499
   end
   else if (csm_to_REQMSGWAIT72 == 1'b1) begin
      csm_next_timer = 14'd1499;  //no cycles(1500)-1=1499
   end
   else if (csm_to_RESPMSGWAIT71 == 1'b1) begin
      csm_next_timer = 14'd1499;  //no cycles(1500)-1=1499
   end
   else if (csm_to_SIGN_IN == 1'b1) begin
      csm_next_timer = 14'd9999;  //no cycles(10000)-1=9999
   end
   else if (csm_to_s4 == 1'b1) begin
      csm_next_timer = 14'd3999;  //no cycles(4000)-1=3999
   end
   else if (csm_to_READ75 == 1'b1) begin
      csm_next_timer = 14'd1499;  //no cycles(1500)-1=1499
   end
   else if (csm_to_ACK153 == 1'b1) begin
      csm_next_timer = 14'd1499;  //no cycles(1500)-1=1499
   end
   else if (csm_to_REQMSGWAIT78 == 1'b1) begin
      csm_next_timer = 14'd879;  //no cycles(880)-1=879
   end
   else if (csm_to_ACK1 == 1'b1) begin
      csm_next_timer = 14'd1499;  //no cycles(1500)-1=1499
   end
   else if (csm_to_WRITE == 1'b1) begin
      csm_next_timer = 14'd1499;  //no cycles(1500)-1=1499
   end
   else if (csm_to_REQMSGWAIT == 1'b1) begin
      csm_next_timer = 14'd1499;  //no cycles(1500)-1=1499
   end
   else if (csm_to_RESPMSGWAIT == 1'b1) begin
      csm_next_timer = 14'd1499;  //no cycles(1500)-1=1499
   end
   else if (csm_to_ACK2 == 1'b1) begin
      csm_next_timer = 14'd1499;  //no cycles(1500)-1=1499
   end
   else if (csm_to_ST_Elink_Wait == 1'b1) begin
      csm_next_timer = 14'd1499;  //no cycles(1500)-1=1499
   end
   else begin
      csm_next_timer = (csm_timeout)? 14'd0: (csm_timer - 14'd1);
   end
end // Wait State Block
endmodule // data_generator_SM
