//
// Module mopshub_lib.data_generator_SM.fsm
//
// Created:
//          by - dcs.dcs (chipdev2.physik.uni-wuppertal.de)
//          at - 21:54:41 03/24/21
//
// Generated by Mentor Graphics' HDL Designer(TM) 2018.1 (Build 12)
//
`resetall
`timescale 1ns/10ps
module data_generator_SM( 
   // Port Declarations
   input   wire           clk_usr,            // write FIFO clk
   input   wire           enable,             // should be used through VIO
   input   wire           loop_en, 
   input   wire           tx_fifo_pfull_gen,  // pfull from Tx FIFO
   output  reg            done,               // dbg
   output  reg     [2:0]  sel_cnt, 
   output  reg     [2:0]  state_o, 
   output  reg            wen_i               //  ena signal
);


// Internal Declarations


// Module Declarations
reg [2:0] max_cnt;  
reg [2:0] wait_cnt;  

// State encoding
parameter 
          ST_IDLE   = 3'd0,
          ST_WR     = 3'd1,
          ST_WAIT_0 = 3'd2,
          ST_SWITCH = 3'd3,
          ST_WAIT_1 = 3'd4,
          ST_DONE   = 3'd5,
          ST_RESET  = 3'd6;

reg [2:0] current_state, next_state;

//-----------------------------------------------------------------
// Next State Block for machine csm
//-----------------------------------------------------------------
always @(
   current_state, 
   loop_en, 
   max_cnt, 
   sel_cnt, 
   tx_fifo_pfull_gen, 
   wait_cnt
)
begin : next_state_block_proc
   case (current_state) 
      ST_IDLE: begin
         next_state = ST_WR;
      end
      ST_WR: begin
         if (tx_fifo_pfull_gen ==0)
            next_state = ST_WAIT_0;
         else
            next_state = ST_WR;
      end
      ST_WAIT_0: begin
         if (wait_cnt == 3'b011)
            next_state = ST_SWITCH;
         else
            next_state = ST_WAIT_0;
      end
      ST_SWITCH: begin
         if (sel_cnt == max_cnt)
            next_state = ST_DONE;
         else
            next_state = ST_WAIT_1;
      end
      ST_WAIT_1: begin
         if (wait_cnt == 3'b011)
            next_state = ST_WR;
         else
            next_state = ST_WAIT_0;
      end
      ST_DONE: begin
         if (loop_en == 1)
            next_state = ST_RESET;
         else
            next_state = ST_DONE;
      end
      ST_RESET: begin
         next_state = ST_IDLE;
      end
      default: 
         next_state = ST_IDLE;
   endcase
end // Next State Block

//-----------------------------------------------------------------
// Output Block for machine csm
//-----------------------------------------------------------------
always @(
   current_state, 
   sel_cnt
)
begin : output_block_proc
   // Default Assignment
   sel_cnt = 0;
   state_o = 0;

   // Combined Actions
   case (current_state) 
      ST_IDLE: begin
         state_o     <= 3'b000;
         sel_cnt     <= 0;
      end
      ST_WR: begin
         //write to the e-link FIFO
         state_o  <= 3'b001;
         wen_i <=0;
      end
      ST_WAIT_0: begin
         //first wait state (3 cycles)
         state_o     <= 3'b010;
         wen_i   <= 1;
      end
      ST_SWITCH: begin
         //increment the counter
         state_o     <= 3'b011;
      end
      ST_WAIT_1: begin
         //second wait state
         sel_cnt <= sel_cnt + 1;
         state_o <= 3'b100;
      end
      ST_DONE: begin
         sel_cnt <= sel_cnt;
         state_o     <= 3'b101;
         done <=1;
      end
      ST_RESET: begin
         state_o     <= 3'b110;
         done <=0;
         wen_i<=0;
         sel_cnt     <= 0;
         state_o     <= 3'b111;
      end
   endcase
end // Output Block

//-----------------------------------------------------------------
// Clocked Block for machine csm
//-----------------------------------------------------------------
always @(
   posedge clk_usr
) 
begin : clocked_block_proc
   if (enable) begin
      current_state <= next_state;
      // Default Assignment To Internals
      max_cnt <= 0;
      wait_cnt <= 0;

      // Combined Actions
      case (current_state) 
         ST_IDLE: begin
            max_cnt <=3'b011; // # of wen to send starting from 000 (011: 4 x wen)
         end
         ST_WR: begin
            wait_cnt <=0;
         end
         ST_WAIT_0: begin
            wait_cnt <= wait_cnt + 1;
         end
         ST_SWITCH: begin
            wait_cnt <=0;
         end
         ST_WAIT_1: begin
            wait_cnt <=wait_cnt + 1;
         end
         ST_RESET: begin
            wait_cnt <=0;
         end
      endcase
   end
end // Clocked Block

endmodule // data_generator_SM
