//
// Module mopshub_lib.mopshub_measurement_board.struct
//
// Created:
//          by - dcs.dcs (chipdev2.physik.uni-wuppertal.de)
//          at - 12:08:49 07/04/23
//
// Generated by Mentor Graphics' HDL Designer(TM) 2019.4 (Build 4)
//

`resetall
`timescale 1ns/10ps
module mopshub_measurement_board( 
   // Port Declarations
   // Port Declarations
   input   wire           clk125, 
   input   wire           clk_40, 
   input   wire           clk_rx, 
   input   wire           clk_tx, 
   input   wire           dbg_elink, 
   input   wire    [3:0]  dip_sw, 
   input   wire           gmii_rx_dv, 
   input   wire           gmii_rx_er, 
   input   wire    [7:0]  gmii_rxd, 
   input   wire           mmcm_locked, 
   input   wire           reset, 
   input   wire           resetdone, 
   input   wire           rx_elink_n, 
   input   wire           rx_elink_p, 
   input   wire           sysclk_n, 
   input   wire           sysclk_p, 
   output  wire           clk_ipb, 
   output  wire    [4:0]  configuration_vector, 
   output  wire           gmii_tx_en, 
   output  wire           gmii_tx_er, 
   output  wire    [7:0]  gmii_txd, 
   output  wire           irq_can_rec, 
   output  wire           irq_can_tra, 
   output  wire           irq_elink_dbg, 
   output  wire           irq_elink_rec, 
   output  wire           irq_elink_tra, 
   output  wire           led, 
   output  wire           rst_eth, 
   output  wire           rx_data_rdy, 
   output  wire           sfp_enable, 
   output  wire           tx_data_rdy, 
   output  wire           tx_elink_n, 
   output  wire           tx_elink_p, 
   input   wire           locked, 
   output  wire           clk_out_p, 
   output  wire           clk_out_n, 
   input   wire           osc_auto_trim_mopshub, 
   input   wire           endwait_all, 
   output  wire    [7:0]  statedb_can_mux1, 
   input   wire           rx0, 
   output  wire           tx0
);

// Internal Declarations


// Local declarations

// Internal signal declarations
// Internal Declarations


// Local declarations

// Internal signal declarations
wire  [75:0] data_rec_elink_dbg;
wire  [75:0] data_rec_uplink;
wire  [75:0] data_tra_downlink;
wire         enable_cnt               = 1'b1;   // pfull from Tx FIFO
wire         eth_led;
wire         irq_elink_dbg_sm;
wire         irq_elink_dbg_in_active;
wire         mosi_c;
wire         mosi_m;
wire         data_rdy_10bit_in_dbg;
wire         rst;
wire  [1:0]  rx_elink2bit;
wire         rx_fifo_full_rdy;
wire         start_write_elink_dbg;
wire  [3:0]  state_o;
wire         test_can_core            = 1'b0;
wire         tx_fifo_full_rdy;
wire         word10b_rdy;
wire  [15:0] prescaler_init;
wire  [15:0] general_init;
wire  [4:0]  n_buses;
wire         debug_mode;
wire         dbg_spi;
wire         miso_m;
wire         miso_c;
wire         irq_elink_eth;
wire         buffer_eth_en;
wire  [1:0]  tx_elink2bit;
wire  [11:0] xadc_rec_in;
wire  [7:0]  statedeb_can;
wire  [7:0]  statedeb_elink_rec;
wire  [7:0]  statedeb_elink_tra;
wire  [7:0]  statedeb_main;
wire  [7:0]  statedeb_osc_trim;
wire  [7:0]  statedeb_spi;
wire         start_read_eth_fifo;
reg   [7:0]  Kchar_comma;
wire         end_init;
wire         end_trim_bus;
wire         rx_fifo_full;
wire         tx_efifo_full;
wire         dec10b_out_rdy_dbg;
wire         end_write_elink;
reg   [9:0]  COMMAp;
reg   [9:0]  COMMAn;
reg   [7:0]  Kchar_eop;
wire         start_power_off;
wire         clk;
wire         sign_on_sig;
wire         start_init;
wire         start_write_elink;
wire         buffer_en;
reg   [31:0] time_limit;
wire         timeoutrst;
wire         main_entimeout;
wire         power_bus_en_done;
wire         end_mon_init;
wire         start_mon_init;
wire         end_read_elink;
wire         start_read_elink_can;
wire         start_write_elink_spi;
wire         end_write_elink_spi;
wire         canakari_entimeout;
wire         rst_osc_cnt;
wire         end_osc_cnt;
wire         power_bus_en;
wire         start_osc_cnt;
wire         start_trim_ack;
wire         end_can_proc;
wire         end_power_init;
wire         start_power_init;
wire         start_read_elink_spi;
wire         start_read_elink;
reg          abort;
wire  [9:0]  dec10b_Out_dbg;
wire  [75:0] data_tra_mon_spi;
wire  [75:0] data_rec_mon_spi;
wire  [75:0] data_tra_power_spi;
wire         spi_entimeout;
reg          fifo_flush;                        // Upon receiving a reset message on the CANbus. FSM goes into a known state
wire         irq_spi_mon_tra;
reg   [7:0]  Kchar_sop;
wire  [4:0]  can_tra_select;
wire         write_sig_can_n;
wire  [4:0]  can_rec_select;
wire         enable_cs;
wire         read_can_mode;
wire  [4:0]  addr_can;
wire  [15:0] readdata;
wire  [15:0] writedata;
wire         read_sig_can_n;
wire         cs_active_m;
wire         irq_spi_power_on;
wire         start_power_on;
wire         rst1;
wire         sck_m;
wire  [4:0]  mon_bus_cnt;
wire  [4:0]  power_bus_cnt1;
wire  [4:0]  power_bus_cnt;
wire  [4:0]  n_buses1;
wire         endwait_all1;                      // Upon receiving a reset message on the CANbus. FSM goes into a known state
wire         cs_active_c;
wire         sck_c;
wire         rx10                     = 1'b0;
wire         rx11                     = 1'b0;
wire         rx12                     = 1'b0;
wire         rx13                     = 1'b0;
wire         rx14                     = 1'b0;
wire         rx15                     = 1'b0;
wire         rx8                      = 1'b0;
wire         rx9                      = 1'b0;
wire         tx9;
wire         tx10;
wire         tx11;
wire         tx12;
wire         tx13;
wire         tx14;
wire         tx15;
wire         tx3;
wire         tx5;
wire         tx6;
wire         tx7;
wire         tx4;
wire         tx8;
wire         tx1;
wire         tx2;
wire         rx1                      = 1'b0;
wire         rx4                      = 1'b0;
wire         rx2                      = 1'b0;
wire         rx3                      = 1'b0;
wire         rx5                      = 1'b0;
wire         rx6                      = 1'b0;
wire         rx7                      = 1'b0;
wire         rst_bus;
wire         end_write_elink_dbg;
wire  [9:0]  data_10bit_in_dbg;


// Instances 
bridge_controller bridge_controller0( 
   .buffer_en             (buffer_en), 
   .can_rec_select        (can_rec_select), 
   .clk                   (clk_40), 
   .data_tra_downlink     (data_tra_downlink), 
   .debug_mode            (debug_mode), 
   .end_mon_init          (end_mon_init), 
   .end_osc_cnt           (end_osc_cnt), 
   .end_read_elink        (end_read_elink), 
   .end_write_elink       (end_write_elink), 
   .endwait               (endwait_all), 
   .general_init          (general_init), 
   .irq_can_rec           (irq_can_rec), 
   .irq_can_tra           (irq_can_tra), 
   .irq_elink_tra         (irq_elink_tra), 
   .irq_trim_bus_osc      (irq_spi_power_on), 
   .main_timeoutrst       (timeoutrst), 
   .n_buses               (n_buses), 
   .osc_auto_trim_mopshub (osc_auto_trim_mopshub), 
   .power_bus_cnt         (power_bus_cnt1), 
   .power_bus_en_done     (power_bus_en_done), 
   .prescaler_init        (prescaler_init), 
   .read_can              (readdata), 
   .rst                   (rst), 
   .addr_can              (addr_can), 
   .can_tra_select        (can_tra_select), 
   .data_rec_uplink       (data_rec_uplink), 
   .enable_cs             (enable_cs), 
   .end_can_proc          (end_can_proc), 
   .end_init              (end_init), 
   .end_power_init        (end_power_init), 
   .end_trim_bus          (end_trim_bus), 
   .main_entimeout        (main_entimeout), 
   .power_bus_en          (power_bus_en), 
   .read_can_mode         (read_can_mode), 
   .read_sig_can_n        (read_sig_can_n), 
   .rst_bus               (rst_bus), 
   .rst_osc_cnt           (rst_osc_cnt), 
   .sign_on_sig           (sign_on_sig), 
   .start_init            (start_init), 
   .start_mon_init        (start_mon_init), 
   .start_osc_cnt         (start_osc_cnt), 
   .start_power_init      (start_power_init), 
   .start_power_on        (start_power_on), 
   .start_read_elink      (start_read_elink_can), 
   .start_trim_ack        (start_trim_ack), 
   .start_write_elink     (start_write_elink), 
   .statedeb_can          (statedeb_can), 
   .statedeb_main         (statedeb_main), 
   .statedeb_osc_trim     (statedeb_osc_trim), 
   .write_can             (writedata), 
   .write_sig_can_n       (write_sig_can_n)
); 

canakari_top_16bus canakari_top_16bus0( 
   .address             (addr_can), 
   .bus_tra_select      (can_tra_select), 
   .canakari_timeoutrst (timeoutrst), 
   .clk                 (clk_40), 
   .enable_cs_sig       (enable_cs), 
   .end_can_proc        (end_can_proc), 
   .endwait             (endwait_all1), 
   .read_n_sig          (read_sig_can_n), 
   .rst                 (rst), 
   .rx0                 (rx0), 
   .rx1                 (rx1), 
   .rx10                (rx10), 
   .rx11                (rx11), 
   .rx12                (rx12), 
   .rx13                (rx13), 
   .rx14                (rx14), 
   .rx15                (rx15), 
   .rx2                 (rx2), 
   .rx3                 (rx3), 
   .rx4                 (rx4), 
   .rx5                 (rx5), 
   .rx6                 (rx6), 
   .rx7                 (rx7), 
   .rx8                 (rx8), 
   .rx9                 (rx9), 
   .write_n_sig         (write_sig_can_n), 
   .writedata           (writedata), 
   .bus_rec_select      (can_rec_select), 
   .canakari_entimeout  (canakari_entimeout), 
   .irq_can_rec         (irq_can_rec), 
   .irq_can_tra         (irq_can_tra), 
   .readdata            (readdata), 
   .statedb_can_mux     (statedb_can_mux1), 
   .tx0                 (tx0), 
   .tx1                 (tx1), 
   .tx10                (tx10), 
   .tx11                (tx11), 
   .tx12                (tx12), 
   .tx13                (tx13), 
   .tx14                (tx14), 
   .tx15                (tx15), 
   .tx2                 (tx2), 
   .tx3                 (tx3), 
   .tx4                 (tx4), 
   .tx5                 (tx5), 
   .tx6                 (tx6), 
   .tx7                 (tx7), 
   .tx8                 (tx8), 
   .tx9                 (tx9)
); 

elink_core elink_core0( 
   .clk                   (clk_40), 
   .rst                   (rst), 
   .rx_fifo_full          (rx_fifo_full), 
   .data_rec_uplink       (data_rec_uplink), 
   .start_write_elink     (start_write_elink), 
   .tx_efifo_full         (tx_efifo_full), 
   .irq_elink_rec         (irq_elink_rec), 
   .irq_elink_tra         (irq_elink_tra), 
   .end_write_elink       (end_write_elink), 
   .start_read_elink      (start_read_elink), 
   .end_read_elink        (end_read_elink), 
   .data_2bit_in          (rx_elink2bit), 
   .data_2bit_out         (tx_elink2bit), 
   .fifo_flush            (fifo_flush), 
   .tx_data_rdy           (tx_data_rdy), 
   .rx_data_rdy           (rx_data_rdy), 
   .data_tra_out          (data_tra_downlink), 
   .buffer_tra_en         (buffer_en), 
   .data_tra_mon_spi      (data_tra_mon_spi), 
   .data_rec_spi_in       (data_rec_mon_spi), 
   .end_write_elink_spi   (end_write_elink_spi), 
   .start_write_elink_spi (start_write_elink_spi), 
   .timeoutrst            (timeoutrst), 
   .abort                 (abort), 
   .data_10bit_in_dbg     (data_10bit_in_dbg), 
   .dbg_elink             (dbg_elink), 
   .dbg_spi               (dbg_spi), 
   .statedeb_elink_tra    (statedeb_elink_tra), 
   .statedeb_elink_rec    (statedeb_elink_rec), 
   .word10b_rdy           (word10b_rdy), 
   .start_write_elink_dbg (start_write_elink_dbg), 
   .data_rec_dbg_in       (data_rec_elink_dbg), 
   .end_write_elink_dbg   (end_write_elink_dbg), 
   .irq_elink_eth         (irq_elink_eth), 
   .data_tra_power_spi    (data_tra_power_spi), 
   .irq_spi_power_off     (start_power_off), 
   .irq_spi_power_on      (irq_spi_power_on), 
   .buffer_eth_en         (buffer_eth_en), 
   .irq_spi_mon_tra       (irq_spi_mon_tra), 
   .dec10b_Out_dbg        (dec10b_Out_dbg), 
   .dec10b_out_rdy_dbg    (dec10b_out_rdy_dbg), 
   .data_rdy_10bit_in_dbg (data_rdy_10bit_in_dbg), 
   .Kchar_comma           (Kchar_comma), 
   .Kchar_eop             (Kchar_eop), 
   .Kchar_sop             (Kchar_sop), 
   .COMMAn                (COMMAn), 
   .COMMAp                (COMMAp), 
   .start_read_eth_fifo   (start_read_eth_fifo), 
   .sign_on_signal        (sign_on_sig)
); 

//  Instances
// 
elink_data_gen_SM elink_data_gen_dbg_0( 
   .clk               (clk_40), 
   .rst               (rst), 
   .irq_elink_tra     (), 
   .state_o           (state_o), 
   .start_read_elink  (), 
   .end_read_elink    (), 
   .cnt_done          (), 
   .buffer_en         (), 
   .data_tra_in       (), 
   .rst_cnt           (), 
   .counter_gen_en    (), 
   .test_can_core     (test_can_core), 
   .data_10bit_in_dbg (data_10bit_in_dbg), 
   .rdy_dbg           (data_rdy_10bit_in_dbg), 
   .irq_elink_dbg     (irq_elink_dbg_sm)
); 

ethernet_core ethernet_core0( 
   .clk125                (clk125), 
   .data_rec_uplink       (data_rec_uplink), 
   .data_tra_downlink     (data_tra_downlink), 
   .dip_sw                (dip_sw), 
   .gmii_rx_dv            (gmii_rx_dv), 
   .gmii_rx_er            (gmii_rx_er), 
   .gmii_rxd              (gmii_rxd), 
   .mmcm_locked           (mmcm_locked), 
   .resetdone             (resetdone), 
   .sysclk_n              (sysclk_n), 
   .sysclk_p              (sysclk_p), 
   .clk_ipb               (clk_ipb), 
   .configuration_vector  (configuration_vector), 
   .data_rec_elink_dbg    (data_rec_elink_dbg), 
   .gmii_tx_en            (gmii_tx_en), 
   .gmii_tx_er            (gmii_tx_er), 
   .gmii_txd              (gmii_txd), 
   .led                   (eth_led), 
   .rst_eth               (rst_eth), 
   .sfp_enable            (sfp_enable), 
   .start_write_elink_dbg (start_write_elink_dbg), 
   .clk                   (clk_40), 
   .rst                   (rst), 
   .irq_elink_dbg_in      (irq_elink_eth), 
   .start_read_eth_fifo   (start_read_eth_fifo)
); 

ip_output_diff_clk_mopshub_debug ip_output_diff_clk_mopshub_debug0( 
   .clk_in    (clk_40), 
   .locked    (locked), 
   .clk_out_p (clk_out_p), 
   .clk_out_n (clk_out_n)
); 

ip_select_io_ddr_wrapper ip_select_io_ddr_wrapper0( 
   .clk_rx       (clk_rx), 
   .clk_tx       (clk_tx), 
   .reset        (reset), 
   .rx_elink_n   (rx_elink_n), 
   .rx_elink_p   (rx_elink_p), 
   .rx_elink2bit (rx_elink2bit), 
   .tx_elink2bit (tx_elink2bit), 
   .tx_elink_n   (tx_elink_n), 
   .tx_elink_p   (tx_elink_p)
); 

spi_core spi_core0( 
   .abort                 (abort), 
   .clk                   (clk_40), 
   .data_tra_mon_spi      (data_tra_mon_spi), 
   .data_tra_power_spi    (data_tra_power_spi), 
   .end_read_elink        (end_read_elink), 
   .end_write_elink_spi   (end_write_elink_spi), 
   .irq_spi_mon_tra       (irq_spi_mon_tra), 
   .miso_c                (miso_c), 
   .miso_m                (miso_m), 
   .n_buses               (n_buses1), 
   .power_bus_en          (power_bus_en), 
   .rst                   (rst), 
   .rst_osc_cnt           (rst_osc_cnt), 
   .start_mon_init        (start_mon_init), 
   .start_osc_cnt         (start_osc_cnt), 
   .start_osc_init        (start_power_init), 
   .start_power_off       (start_power_off), 
   .start_power_on        (start_power_on), 
   .timeoutrst            (timeoutrst), 
   .xadc_rec_in           (xadc_rec_in), 
   .cs_active_c           (cs_active_c), 
   .cs_active_m           (cs_active_m), 
   .data_rec_mon_spi      (data_rec_mon_spi), 
   .end_osc_cnt           (end_osc_cnt), 
   .mon_bus_cnt           (mon_bus_cnt), 
   .mon_en_done           (end_mon_init), 
   .mosi_c                (mosi_c), 
   .mosi_m                (mosi_m), 
   .power_bus_cnt         (power_bus_cnt), 
   .power_bus_en_done     (power_bus_en_done), 
   .sck_c                 (sck_c), 
   .sck_m                 (sck_m), 
   .spi_entimeout         (spi_entimeout), 
   .start_read_elink      (start_read_elink_spi), 
   .start_write_elink_spi (start_write_elink_spi), 
   .statedeb_spi          (statedeb_spi)
); 

timout_rst_watchdog timout_rst_watchdog0( 
   .clk        (clk), 
   .entimeout0 (main_entimeout), 
   .entimeout1 (canakari_entimeout), 
   .entimeout2 (spi_entimeout), 
   .time_limit (time_limit), 
   .rst        (rst1), 
   .timeoutrst (timeoutrst)
); 

top_led_enable_SM top_led_enable_SM5( 
   .clk_in     (clk_40), 
   .enable_cnt (enable_cnt), 
   .rst        (rst), 
   .led        (led)
); 

top_led_for_synth top_led_for_synth0( 
   .clk                  (clk_40), 
   .irq_can_rec_in       (irq_can_rec), 
   .irq_can_tra_in       (irq_can_tra), 
   .irq_elink_dbg_in     (irq_elink_dbg_in_active), 
   .irq_elink_rec_in     (irq_elink_rec), 
   .irq_elink_tra_in     (irq_elink_tra), 
   .rst                  (rst), 
   .rx_data_rdy_in       (word10b_rdy), 
   .rx_fifo_full_rdy_in  (rx_fifo_full), 
   .tx_data_rdy_in       (tx_data_rdy), 
   .tx_fifo_full_rdy_in  (tx_efifo_full), 
   .irq_can_rec_out      (irq_can_rec), 
   .irq_can_tra_out      (irq_can_tra), 
   .irq_elink_dbg_out    (irq_elink_dbg), 
   .irq_elink_rec_out    (irq_elink_rec), 
   .irq_elink_tra_out    (irq_elink_tra), 
   .rx_data_rdy_out      (rx_data_rdy), 
   .rx_fifo_full_rdy_out (rx_fifo_full_rdy), 
   .tx_data_rdy_out      (tx_data_rdy), 
   .tx_fifo_full_rdy_out (tx_fifo_full_rdy)
); 

// HDL Embedded Text Block 1 eb1
// HDL Embedded Text Block 2 eb2
// eb1 1             
assign xadc_rec_in=12'hB;                           
assign rst = !reset;                                     
assign irq_elink_dbg_in_active = dbg_elink && irq_elink_dbg_sm;
assign prescaler_init = 16'h00FF;// prescalar register value gives 125000kb/s 
assign general_init = 16'h00A3; // general register.first 7bits<=0 then sjw,tseg1,tseg2 gives 125000kb/s
assign debug_mode   = 1'b1;
assign dbg_spi      = 1'b1;
assign n_buses      =5'b00111;
assign miso_c = 1'b0;
assign miso_m = 1'b0;


// HDL Embedded Text Block 3 reg_assign2
// Wire_assign 1                     
  //to be changed later
assign start_read_elink = (start_read_elink_spi || start_read_elink_can);  
initial  fifo_flush             = 1'b0;    // Upon receiving a reset message on the CANbus. FSM goes into a known state
initial  abort                  = 1'b0;
initial  time_limit             = 32'd50000000;   //corresponds to 5 sec if the FPGA freq is 40Mhz
                     





























// HDL Embedded Text Block 14 K_Code3
// Wire_assign 1                     

initial Kchar_comma = 8'b10111100;//K28.5  BC
initial Kchar_eop = 8'b11011100;// K28.6 DC
initial Kchar_sop = 8'b00111100;// K28.1 3C
initial COMMAn = 10'b1100000101;
initial COMMAp = 10'b0011111010;






























































































































endmodule // mopshub_measurement_board
// mopshub_top_16bus_debug
