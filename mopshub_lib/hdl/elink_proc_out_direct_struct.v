//
// Module mopshub_lib.elink_proc_out_direct.struct
//
// Created:
//          by - dcs.dcs (chipdev2.physik.uni-wuppertal.de)
//          at - 16:58:30 10/04/21
//
// Generated by Mentor Graphics' HDL Designer(TM) 2019.4 (Build 4)
//

`resetall
`timescale 1ns/10ps
module elink_proc_out_direct( 
   // Port Declarations
   input   wire    [9:0]  EDATA_IN, 
   // Port Declarations
   input   wire           clk, 
   input   wire           reverse_stream_10b, 
   input   wire           rst, 
   input   wire           swap_outbits, 
   output  wire    [1:0]  EDATA_OUT, 
   output  wire           get_data_trig
);


// Internal Declarations


// Local declarations

// Internal signal declarations
reg   [7:0] byte_r;
reg   [1:0] edata_out_r           = 2'b0;
wire  [1:0] edata_out_s;
wire        inp_request_trig_out;
reg   [1:0] send_count            = 0;
wire        send_out_trig;


// Instances 
mux4_Nbit #(2) mux4_Nbit5( 
   .data0    (byte_r[1:0]), 
   .data1    (byte_r[3:2]), 
   .data2    (byte_r[5:4]), 
   .data3    (byte_r[7:6]), 
   .sel      (send_count), 
   .data_out (edata_out_s)
); 

//     output Trig signal will enable reading from fifo (rd_en=1)
// 
//     generates a one clk-pulse pd clkss after trigger rising edge
// 
// 
// 
pulse_pdxx_pwxx #(0,1) pulse_pdxx_pwxx1( 
   .clk      (clk), 
   .trigger  (send_out_trig), 
   .pulseout (inp_request_trig_out)
); 

triger_counter #(3'b011,3'b011) triger_counter1( 
   .rst          (rst), 
   .clk          (clk), 
   .request_trig (send_out_trig)
); 

// HDL Embedded Text Block 1 eb1
// eb1 1     
  //-------------------------------------------------------------------------------------------
  //-- sending out 2 bits @ bitCLK using a MUX
  //-------------------------------------------------------------------------------------------                        
  always @(posedge clk)
  begin
    if (!rst)
    byte_r <= 8'b0;
    else if (send_out_trig  == 1) //Trigger after cycle 5 CLKs
    begin
      if (reverse_stream_10b  == 0)//LSB send first 
      byte_r <= {EDATA_IN[0],EDATA_IN[1],EDATA_IN[2],EDATA_IN[3],EDATA_IN[4],EDATA_IN[5],EDATA_IN[6],EDATA_IN[7],EDATA_IN[8],EDATA_IN[9]};
      
      else //MSB send first 
      byte_r <= EDATA_IN;
    end
  end
// HDL Embedded Text Block 3 eb3
assign get_data_trig = inp_request_trig_out; //getDataTrig will enable reading signal from FIFO (rd_en)
// HDL Embedded Text Block 4 eb4
// eb1 1     
  //-------------------------------------------------------------------------------------------
  //-- sending out 2 bits @ bitCLK using a MUX
  //-------------------------------------------------------------------------------------------
  // Counter over the select signal
  always @(posedge clk)
  begin
    if (!rst)
    send_count <= 2'b0;
    else
    begin
      if (send_out_trig == 1)
      send_count <= 2'b0;
      else  
      send_count <= send_count + 1;
    end
  end                                   



// HDL Embedded Text Block 6 eb6
// HDL Embedded Text Block 7 eb7
// buffer the output data
assign EDATA_OUT =edata_out_r;
always @ (swap_outbits, edata_out_s)
begin
  if (swap_outbits)
  edata_out_r = {edata_out_s[0],edata_out_s[1]};
  else     
  edata_out_r = edata_out_s;
end


endmodule // elink_proc_out_direct

