//
// Module mopshub_lib.osc_trim_SM.fsm
//
// Created:
//          by - dcs.dcs (chipdev2.physik.uni-wuppertal.de)
//          at - 16:13:13 01/21/22
//
// Generated by Mentor Graphics' HDL Designer(TM) 2019.4 (Build 4)
//
`resetall
`timescale 1ns/10ps
module osc_trim_SM( 
   // Port Declarations
   input   wire           clk,                    // posedge
   input   wire           end_cnt_dbg, 
   input   wire           end_init, 
   input   wire           end_osc_cnt, 
   input   wire           end_write_trim, 
   input   wire           endwait,                // This signal indicates when message can't be decoded in one of the CANopen objects to go back to known state to receive message
   input   wire           irq_can_tra,            // successful transmission interrupt signal from cankari 
   input   wire           irq_trim_osc, 
   input   wire           osc_auto_trim, 
   input   wire           osc_auto_trim_mopshub, 
   input   wire           osc_auto_trim_sent, 
   input   wire    [4:0]  osc_msg_cnt, 
   input   wire           reset_irq_tra_done, 
   input   wire           rst,                    // lowactive
   input   wire           timeoutrst,             // timeout reset in case bridge controller does not respond in a specied amount of time 
   input   wire           wait_sign_in, 
   output  reg            done_trim_osc_all, 
   output  reg            end_trim_bus, 
   output  reg            entimeout,              // enable for timeout reset counter 
   output  reg            entimeout_trim, 
   output  reg            irq_can_ack,            // tto start transmitting CAN message 
   output  reg            osc_trim_mode, 
   output  reg            power_bus_en,           // Active High signal
   output  reg            read_can_mode, 
   output  reg            reset_irq_can,          // reset canakri interrupt 
   output  reg            reset_irq_can_all,      // reset all canakri interrupt 
   output  reg            reset_irq_osc_can, 
   output  reg            reset_irq_tra_can, 
   output  reg            rst_mops_dbg, 
   output  reg            rst_msg_cnt, 
   output  reg            rst_osc_cnt, 
   output  reg            send_mes_can, 
   output  reg            skip_osc_trim, 
   output  reg            start_msg_cnt, 
   output  reg            start_osc_cnt, 
   output  reg            start_trim_ack, 
   output  reg            start_write_trim, 
   output  reg     [5:0]  statedeb
);


// Internal Declarations


// Module Declarations

// State encoding
parameter 
          waittoact       = 5'd0,
          Start           = 5'd1,
          reset           = 5'd2,
          endwaitst       = 5'd3,
          Wait_initialize = 5'd4,
          Send_Trim       = 5'd5,
          ST_Skip_Bus1    = 5'd6,
          Break_Loop1     = 5'd7,
          RST_MOPS_dbg1   = 5'd8,
          ST_Start_Cnt2   = 5'd9,
          ST_CountRst3    = 5'd10,
          finishtrim1     = 5'd11,
          s9              = 5'd12,
          checkmsg_cnt1   = 5'd13,
          msg_cnt2        = 5'd14,
          s6              = 5'd15,
          s7              = 5'd16,
          s8              = 5'd17,
          send_ack        = 5'd18,
          rst_tra_irq_can = 5'd19,
          rst_msg2        = 5'd20;

reg [4:0] current_state, next_state;

// Wait State Signals
reg [4:0] csm_timer;
reg [4:0] csm_next_timer;
reg       csm_timeout;
reg       csm_to_s9;

//-----------------------------------------------------------------
// Next State Block for machine csm
//-----------------------------------------------------------------
always @(
   csm_timeout, 
   current_state, 
   end_cnt_dbg, 
   end_init, 
   end_osc_cnt, 
   end_write_trim, 
   irq_can_tra, 
   irq_trim_osc, 
   osc_auto_trim_mopshub, 
   osc_auto_trim_sent, 
   osc_msg_cnt, 
   rst
)
begin : next_state_block_proc
   // Default assignments to Wait State entry flags
   csm_to_s9 = 1'b0;
   case (current_state) 
      waittoact: begin
         if (irq_trim_osc ==1)
            next_state = s8;
         else
            next_state = waittoact;
      end
      Start: begin
         if (end_init ==1)
            next_state = Wait_initialize;
         else
            next_state = Start;
      end
      reset: begin
         if (rst == 1)
            next_state = Start;
         else
            next_state = reset;
      end
      endwaitst: begin
         next_state = waittoact;
      end
      Wait_initialize: begin
         if (osc_auto_trim_mopshub ==1)
            next_state = Send_Trim;
         else
            next_state = waittoact;
      end
      Send_Trim: begin
         if (osc_auto_trim_sent ==1)
            next_state = waittoact;
         else
            next_state = Send_Trim;
      end
      ST_Skip_Bus1: begin
         next_state = Break_Loop1;
      end
      Break_Loop1: begin
         if (end_osc_cnt ==1 |  end_cnt_dbg ==1)
            next_state = ST_CountRst3;
         else
            next_state = RST_MOPS_dbg1;
      end
      RST_MOPS_dbg1: begin
         next_state = ST_Start_Cnt2;
      end
      ST_Start_Cnt2: begin
         next_state = s8;
      end
      ST_CountRst3: begin
         next_state = s9;
         csm_to_s9 = 1'b1;
      end
      finishtrim1: begin
         next_state = waittoact;
      end
      s9: begin
         if (csm_timeout)
            next_state = finishtrim1;
         else
            next_state = s9;
      end
      checkmsg_cnt1: begin
         if (osc_msg_cnt ==5'h10)
            next_state = rst_msg2;
         else
            next_state = msg_cnt2;
      end
      msg_cnt2: begin
         next_state = s8;
      end
      s6: begin
         next_state = checkmsg_cnt1;
      end
      s7: begin
         if (end_write_trim == 1)
            next_state = s6;
         else
            next_state = s7;
      end
      s8: begin
         next_state = s7;
      end
      send_ack: begin
         next_state = rst_tra_irq_can;
      end
      rst_tra_irq_can: begin
         next_state = Break_Loop1;
      end
      rst_msg2: begin
         if (irq_can_tra == 1)
            next_state = send_ack;
         else
            next_state = rst_msg2;
      end
      default: 
         next_state = reset;
   endcase
end // Next State Block

//-----------------------------------------------------------------
// Output Block for machine csm
//-----------------------------------------------------------------
always @(
   current_state
)
begin : output_block_proc
   // Default Assignment
   done_trim_osc_all = 0;
   end_trim_bus = 0;
   entimeout = 1;
   entimeout_trim = 1;
   irq_can_ack = 0;
   osc_trim_mode = 0;
   power_bus_en = 1;
   read_can_mode = 0;
   reset_irq_can = 0;
   reset_irq_can_all = 0;
   reset_irq_osc_can = 0;
   reset_irq_tra_can = 0;
   rst_mops_dbg = 0;
   rst_msg_cnt = 0;
   rst_osc_cnt = 0;
   send_mes_can = 0;
   skip_osc_trim = 0;
   start_msg_cnt = 0;
   start_osc_cnt = 0;
   start_trim_ack = 0;
   start_write_trim = 0;

   // Combined Actions
   case (current_state) 
      waittoact: begin
         entimeout = 0 ;
      end
      reset: begin
         entimeout = 0 ;
      end
      Send_Trim: begin
         osc_trim_mode =1;
      end
      ST_Skip_Bus1: begin
         entimeout_trim =0;
         skip_osc_trim = 1;
      end
      RST_MOPS_dbg1: begin
         rst_mops_dbg =1;
      end
      ST_Start_Cnt2: begin
         start_osc_cnt =1;
      end
      ST_CountRst3: begin
         rst_osc_cnt =1;
      end
      finishtrim1: begin
         done_trim_osc_all =1;
      end
      msg_cnt2: begin
         start_msg_cnt  = 1;
      end
      s6: begin
         send_mes_can =1;
      end
      s7: begin
         start_write_trim =1;
      end
      s8: begin
         start_trim_ack =1;
      end
      send_ack: begin
         irq_can_ack = 1 ;
      end
      rst_tra_irq_can: begin
         reset_irq_can = 1 ;
         reset_irq_tra_can = 1 ;
      end
      rst_msg2: begin
         rst_msg_cnt  = 1;
      end
   endcase
end // Output Block

//-----------------------------------------------------------------
// Clocked Block for machine csm
//-----------------------------------------------------------------
always @(
   posedge clk, 
   negedge rst
) 
begin : clocked_block_proc
   if (!rst) begin
      current_state <= reset;
      csm_timer <= 5'd0;
   end
   else 
   begin
      if (timeoutrst) begin
         current_state <= endwaitst;
         csm_timer <= 5'd0;
      end
      else if (endwait) begin
         current_state <= reset;
         csm_timer <= 5'd0;
      end
      else 
      begin
         current_state <= next_state;
         csm_timer <= csm_next_timer;
      end
   end
end // Clocked Block

//-----------------------------------------------------------------
// Wait state logic for machine csm
//-----------------------------------------------------------------
always @(
   csm_timer,
   csm_to_s9
)
begin : csm_wait_block_proc
   csm_timeout = (csm_timer == 5'd0);
   if (csm_to_s9 == 1'b1) begin
      csm_next_timer = 5'd19;  //no cycles(20)-1=19
   end
   else begin
      csm_next_timer = (csm_timeout)? 5'd0: (csm_timer - 5'd1);
   end
end // Wait State Block
endmodule // osc_trim_SM
