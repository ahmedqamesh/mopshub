//
// Module mopshub_lib.osc_trim_SM.fsm
//
// Created:
//          by - dcs.dcs (chipdev2.physik.uni-wuppertal.de)
//          at - 13:13:54 02/16/22
//
// Generated by Mentor Graphics' HDL Designer(TM) 2019.4 (Build 4)
//
`resetall
`timescale 1ns/10ps
module osc_trim_SM( 
   // Port Declarations
   input   wire           clk,                    // posedge
   input   wire           end_cnt_dbg, 
   input   wire           end_osc_cnt, 
   input   wire           end_read_can,           // signal from CANopen block to indicate that it has read receive message buffer 
   input   wire           end_write_can, 
   input   wire           end_write_elink,        // Goes high when CANopen block finished reading the received message buffer register 
   input   wire           endwait,                // This signal indicates when message can't be decoded in one of the CANopen objects to go back to known state to receive message
   input   wire           irq_can_rec,            // interrupt signal from canakari to indicate successful read of a new message by one of the 32 buses 
   input   wire           irq_can_tra,            // successful transmission interrupt signal from cankari 
   input   wire           irq_trim_bus_osc, 
   input   wire           irq_trim_osc, 
   input   wire           osc_auto_trim_mopshub, 
   input   wire           power_bus_en_done, 
   input   wire           reset_irq_can_done, 
   input   wire           rst,                    // lowactive
   input   wire           timeoutrst,             // timeout reset in case bridge controller does not respond in a specied amount of time 
   output  reg            done_trim_osc_all, 
   output  reg            end_can_proc, 
   output  reg            end_trim_bus, 
   output  reg            entimeout_trim, 
   output  reg            ext_counter_gen, 
   output  reg            irq_can_ack,            // tto start transmitting CAN message 
   output  reg            osc_trim_mode, 
   output  reg            power_bus_en,           // Active High signal
   output  reg            reset_irq_can,          // reset canakri interrupt 
   output  reg            reset_irq_osc_can, 
   output  reg            reset_irq_rec_can, 
   output  reg            rst_bus, 
   output  reg            rst_osc_cnt, 
   output  reg            send_mes_can, 
   output  reg            skip_osc_trim, 
   output  reg            start_osc_cnt, 
   output  reg            start_read_can,         // to read canakari receive registers
   output  reg            start_trim_ack, 
   output  reg            start_trim_osc, 
   output  reg            start_write_elink, 
   output  reg     [5:0]  statedeb
);


// Internal Declarations


// Module Declarations

// State encoding
parameter 
          waittoact         = 6'd0,
          reset             = 6'd1,
          ST_Skip_Bus       = 6'd2,
          rst_irq_can       = 6'd3,
          Wait_W_SPI2       = 6'd4,
          ST_Start_Cnt      = 6'd5,
          Count_gen_dbg     = 6'd6,
          Break_Loop        = 6'd7,
          finish_proc       = 6'd8,
          ST_CountRst       = 6'd9,
          Read_Resp         = 6'd10,
          pass_to_elink     = 6'd11,
          Wait_Resp         = 6'd12,
          rst_rec_irq_can   = 6'd13,
          finish_proc1      = 6'd14,
          rst_tra_irq_can   = 6'd15,
          Trim_ack          = 6'd16,
          Start_write_trim  = 6'd17,
          pass_mes_to_can   = 6'd18,
          send_ack1         = 6'd19,
          Check_Trim        = 6'd20,
          ST_Done_Trim      = 6'd21,
          ST_Skip_Bus1      = 6'd22,
          rst_irq_can1      = 6'd23,
          RST_MOPS_dbg1     = 6'd24,
          ST_Start_Cnt1     = 6'd25,
          Count_gen_dbg1    = 6'd26,
          Break_Loop1       = 6'd27,
          finish_proc3      = 6'd28,
          ST_CountRst1      = 6'd29,
          Check_Trim1       = 6'd30,
          ST_Done_Trim1     = 6'd31,
          Read_Resp1        = 6'd32,
          pass_to_elink1    = 6'd33,
          Wait_Resp1        = 6'd34,
          rst_rec_irq_can1  = 6'd35,
          finish_proc2      = 6'd36,
          rst_tra_irq_can1  = 6'd37,
          Trim_ack1         = 6'd38,
          Start_write_trim1 = 6'd39,
          pass_mes_to_can1  = 6'd40,
          send_ack2         = 6'd41,
          ST_En_power0      = 6'd42,
          ST_En_power1      = 6'd43,
          Wait_W_SPI        = 6'd44,
          Wait_W_SPI1       = 6'd45,
          ST_MOPS_dbg2      = 6'd46;

reg [5:0] current_state, next_state;

//-----------------------------------------------------------------
// Next State Block for machine csm
//-----------------------------------------------------------------
always @(
   current_state, 
   end_cnt_dbg, 
   end_osc_cnt, 
   end_read_can, 
   end_write_can, 
   end_write_elink, 
   irq_can_rec, 
   irq_can_tra, 
   irq_trim_bus_osc, 
   irq_trim_osc, 
   osc_auto_trim_mopshub, 
   power_bus_en_done, 
   reset_irq_can_done, 
   rst
)
begin : next_state_block_proc
   case (current_state) 
      waittoact: begin
         if (irq_trim_osc ==1)
            next_state = Check_Trim;
         else if (irq_trim_bus_osc ==1)
            next_state = Check_Trim1;
         else
            next_state = waittoact;
      end
      reset: begin
         if (rst == 1)
            next_state = waittoact;
         else
            next_state = reset;
      end
      ST_Skip_Bus: begin
         next_state = rst_irq_can;
      end
      rst_irq_can: begin
         if (reset_irq_can_done ==1)
            next_state = Break_Loop;
         else
            next_state = rst_irq_can;
      end
      Wait_W_SPI2: begin
         if (power_bus_en_done ==1)
            next_state = ST_MOPS_dbg2;
         else
            next_state = Wait_W_SPI2;
      end
      ST_Start_Cnt: begin
         if (osc_auto_trim_mopshub ==1)
            next_state = ST_MOPS_dbg2;
         else
            next_state = Wait_W_SPI1;
      end
      Count_gen_dbg: begin
         next_state = ST_Start_Cnt;
      end
      Break_Loop: begin
         if (end_osc_cnt ==1 |  end_cnt_dbg ==1)
            next_state = ST_CountRst;
         else
            next_state = Count_gen_dbg;
      end
      finish_proc: begin
         next_state = Break_Loop;
      end
      ST_CountRst: begin
         next_state = ST_Done_Trim;
      end
      Read_Resp: begin
         if (end_read_can == 1)
            next_state = pass_to_elink;
         else
            next_state = Read_Resp;
      end
      pass_to_elink: begin
         if (end_write_elink == 1)
            next_state = rst_rec_irq_can;
         else
            next_state = pass_to_elink;
      end
      Wait_Resp: begin
         if (irq_can_rec == 1)
            next_state = Read_Resp;
         else
            next_state = Wait_Resp;
      end
      rst_rec_irq_can: begin
         if (reset_irq_can_done==1)
            next_state = finish_proc1;
         else
            next_state = rst_rec_irq_can;
      end
      finish_proc1: begin
         next_state = finish_proc;
      end
      rst_tra_irq_can: begin
         if (reset_irq_can_done ==1)
            next_state = Wait_Resp;
         else
            next_state = rst_tra_irq_can;
      end
      Trim_ack: begin
         next_state = Start_write_trim;
      end
      Start_write_trim: begin
         if (end_write_can == 1)
            next_state = pass_mes_to_can;
         else
            next_state = Start_write_trim;
      end
      pass_mes_to_can: begin
         if (irq_can_tra ==1)
            next_state = send_ack1;
         else
            next_state = pass_mes_to_can;
      end
      send_ack1: begin
         next_state = rst_tra_irq_can;
      end
      Check_Trim: begin
         if (osc_auto_trim_mopshub ==1)
            next_state = ST_En_power1;
         else
            next_state = ST_En_power0;
      end
      ST_Done_Trim: begin
         next_state = waittoact;
      end
      ST_Skip_Bus1: begin
         next_state = rst_irq_can1;
      end
      rst_irq_can1: begin
         if (reset_irq_can_done ==1)
            next_state = Break_Loop1;
         else
            next_state = rst_irq_can1;
      end
      RST_MOPS_dbg1: begin
         next_state = Trim_ack1;
      end
      ST_Start_Cnt1: begin
         if (osc_auto_trim_mopshub ==1)
            next_state = RST_MOPS_dbg1;
         else
            next_state = Break_Loop1;
      end
      Count_gen_dbg1: begin
         next_state = ST_Start_Cnt1;
      end
      Break_Loop1: begin
         if (end_osc_cnt ==1 |  end_cnt_dbg ==1)
            next_state = ST_CountRst1;
         else
            next_state = Count_gen_dbg1;
      end
      finish_proc3: begin
         next_state = Break_Loop1;
      end
      ST_CountRst1: begin
         next_state = ST_Done_Trim1;
      end
      Check_Trim1: begin
         if (osc_auto_trim_mopshub ==1)
            next_state = RST_MOPS_dbg1;
         else
            next_state = Break_Loop1;
      end
      ST_Done_Trim1: begin
         next_state = waittoact;
      end
      Read_Resp1: begin
         if (end_read_can == 1)
            next_state = pass_to_elink1;
         else
            next_state = Read_Resp1;
      end
      pass_to_elink1: begin
         if (end_write_elink == 1)
            next_state = rst_rec_irq_can1;
         else
            next_state = pass_to_elink1;
      end
      Wait_Resp1: begin
         if (irq_can_rec == 1)
            next_state = Read_Resp1;
         else
            next_state = Wait_Resp1;
      end
      rst_rec_irq_can1: begin
         if (reset_irq_can_done ==1)
            next_state = finish_proc2;
         else
            next_state = rst_rec_irq_can1;
      end
      finish_proc2: begin
         next_state = finish_proc3;
      end
      rst_tra_irq_can1: begin
         if (reset_irq_can_done ==1)
            next_state = Wait_Resp1;
         else
            next_state = rst_tra_irq_can1;
      end
      Trim_ack1: begin
         next_state = Start_write_trim1;
      end
      Start_write_trim1: begin
         if (end_write_can == 1)
            next_state = pass_mes_to_can1;
         else
            next_state = Start_write_trim1;
      end
      pass_mes_to_can1: begin
         if (irq_can_tra ==1)
            next_state = send_ack2;
         else
            next_state = pass_mes_to_can1;
      end
      send_ack2: begin
         next_state = rst_tra_irq_can1;
      end
      ST_En_power0: begin
         next_state = Wait_W_SPI;
      end
      ST_En_power1: begin
         next_state = Wait_W_SPI2;
      end
      Wait_W_SPI: begin
         if (power_bus_en_done ==1)
            next_state = Break_Loop;
         else
            next_state = Wait_W_SPI;
      end
      Wait_W_SPI1: begin
         if (power_bus_en_done ==1)
            next_state = Break_Loop;
         else
            next_state = Wait_W_SPI1;
      end
      ST_MOPS_dbg2: begin
         next_state = Trim_ack;
      end
      default: 
         next_state = reset;
   endcase
end // Next State Block

//-----------------------------------------------------------------
// Output Block for machine csm
//-----------------------------------------------------------------
always @(
   current_state
)
begin : output_block_proc
   // Default Assignment
   done_trim_osc_all = 0;
   end_can_proc = 0;
   end_trim_bus = 0;
   entimeout_trim = 1;
   ext_counter_gen = 0;
   irq_can_ack = 0;
   osc_trim_mode = 1;
   power_bus_en = 0;
   reset_irq_can = 0;
   reset_irq_osc_can = 0;
   reset_irq_rec_can = 0;
   rst_bus = 0;
   rst_osc_cnt = 0;
   send_mes_can = 0;
   skip_osc_trim = 0;
   start_osc_cnt = 0;
   start_read_can = 0;
   start_trim_ack = 0;
   start_trim_osc = 0;
   start_write_elink = 0;

   // Combined Actions
   case (current_state) 
      waittoact: begin
         entimeout_trim = 0;
         osc_trim_mode = 0;
      end
      reset: begin
         entimeout_trim = 0 ;
         osc_trim_mode =0;
         power_bus_en =0;
      end
      ST_Skip_Bus: begin
         skip_osc_trim = 1;
      end
      rst_irq_can: begin
         reset_irq_osc_can  = 1 ;
      end
      ST_Start_Cnt: begin
         start_osc_cnt =1;
         power_bus_en =1;
      end
      Count_gen_dbg: begin
         ext_counter_gen=1;
      end
      finish_proc: begin
         end_trim_bus =1;
      end
      ST_CountRst: begin
         rst_osc_cnt =1;
      end
      Read_Resp: begin
         start_read_can = 1 ;
      end
      pass_to_elink: begin
         start_write_elink = 1;
      end
      rst_rec_irq_can: begin
         reset_irq_can = 1 ;
         reset_irq_rec_can = 1 ;
      end
      finish_proc1: begin
         end_can_proc = 1;
      end
      rst_tra_irq_can: begin
         reset_irq_can = 1 ;
         reset_irq_osc_can = 1 ;
      end
      Trim_ack: begin
         start_trim_ack =1;
      end
      Start_write_trim: begin
         start_trim_osc =1;
      end
      pass_mes_to_can: begin
         send_mes_can =1;
      end
      send_ack1: begin
         irq_can_ack = 1 ;
      end
      ST_Done_Trim: begin
         done_trim_osc_all =1;
      end
      ST_Skip_Bus1: begin
         skip_osc_trim = 1;
      end
      rst_irq_can1: begin
         reset_irq_osc_can  = 1 ;
      end
      RST_MOPS_dbg1: begin
         rst_bus =1;
      end
      ST_Start_Cnt1: begin
         start_osc_cnt =1;
      end
      Count_gen_dbg1: begin
         ext_counter_gen=1;
      end
      finish_proc3: begin
         end_trim_bus =1;
      end
      ST_CountRst1: begin
         rst_osc_cnt =1;
      end
      Check_Trim1: begin
         power_bus_en =0;
      end
      ST_Done_Trim1: begin
         done_trim_osc_all =1;
      end
      Read_Resp1: begin
         start_read_can = 1 ;
      end
      pass_to_elink1: begin
         start_write_elink = 1;
      end
      rst_rec_irq_can1: begin
         reset_irq_can = 1 ;
         reset_irq_rec_can = 1 ;
      end
      finish_proc2: begin
         end_can_proc = 1;
      end
      rst_tra_irq_can1: begin
         reset_irq_can = 1 ;
         reset_irq_osc_can = 1 ;
      end
      Trim_ack1: begin
         start_trim_ack =1;
      end
      Start_write_trim1: begin
         start_trim_osc =1;
      end
      pass_mes_to_can1: begin
         send_mes_can =1;
      end
      send_ack2: begin
         irq_can_ack = 1 ;
      end
      ST_En_power0: begin
         power_bus_en =1;
      end
      ST_En_power1: begin
         power_bus_en =1;
      end
      ST_MOPS_dbg2: begin
         rst_bus =1;
      end
   endcase
end // Output Block

//-----------------------------------------------------------------
// Clocked Block for machine csm
//-----------------------------------------------------------------
always @(
   posedge clk, 
   negedge rst
) 
begin : clocked_block_proc
   if (!rst) begin
      current_state <= reset;
   end
   else 
   begin
      if (endwait) begin
         current_state <= reset;
      end
      else if (timeoutrst) begin
         current_state <= ST_Skip_Bus;
      end
      else 
      begin
         current_state <= next_state;
      end
   end
end // Clocked Block

endmodule // osc_trim_SM
