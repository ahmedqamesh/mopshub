//
// Module mopshub_lib.elink_proc_out_enc8b10b.struct
//
// Created:
//          by - dcs.dcs (chipdev2.physik.uni-wuppertal.de)
//          at - 15:38:53 09/14/23
//
// Generated by Mentor Graphics' HDL Designer(TM) 2019.4 (Build 4)
//

`resetall
`timescale 1ns/10ps
// 8b10b encoder for EPROC_OUT module
module elink_proc_out_enc8b10b( 
   // Port Declarations
   // Port Declarations
   input   wire           clk, 
   input   wire    [9:0]  data_10bit_in,  //Data stored in the FIFO
   input   wire           data_in_rdy, 
   input   wire           rst,            // reset all the counters and data
   output  wire           get_data_trig, 
   output  wire    [1:0]  data_2bit_out, 
   input   wire    [9:0]  COMMAn, 
   input   wire    [9:0]  COMMAp
);

// Local declarations
  
  // Internal signal declarations
  // Internal Declarations
// Internal Declarations


// Local declarations

// Internal signal declarations
// Internal Declarations


// Local declarations

// Internal signal declarations
reg   [1:0] zeros2bit;
wire  [2:0] send_count;
wire  [1:0] data_code;    // 00"data, 01"eop, 10"sop, 11"comma
wire  [9:0] data_out;
wire  [7:0] data_input;
wire        KI_signal;
wire  [9:0] enc10bit;
reg   [9:0] enc10bit_r;


// Instances 
counter_trigger triger_counter1( 
   .rst          (rst), 
   .clk          (clk), 
   .request_trig (get_data_trig), 
   .send_count   (send_count)
); 

enc_8b10b_mopshub enc_8b10b_mopshub0( 
   .rst     (rst), 
   .clk     (clk), 
   .ena     (data_in_rdy), 
   .ki      (KI_signal), 
   .datain  (data_input), 
   .COMMAp  (COMMAp), 
   .COMMAn  (COMMAn), 
   .dataout (data_out)
); 

mux8_Nbit mux8_Nbit0( 
   .clk      (clk), 
   .rst      (rst), 
   .data0    (enc10bit[1:0]), 
   .data1    (enc10bit[3:2]), 
   .data2    (enc10bit[5:4]), 
   .data3    (enc10bit[7:6]), 
   .data4    (enc10bit[9:8]), 
   .data5    (zeros2bit), 
   .data6    (zeros2bit), 
   .data7    (zeros2bit), 
   .sel      (send_count), 
   .data_out (data_2bit_out)
); 

// HDL Embedded Text Block 3 eb3
initial zeros2bit   = 2'b0;
assign enc10bit = enc10bit_r;
//-------------------------------------------------------------------------------------------
//-- sending out 2 bits @ bitCLK using a MUX
//------------------------------------------------------------------------------------------- 
//Fill the register enc10bit_r with data 
always @(posedge clk)
begin
  if (!rst) enc10bit_r <=COMMAp;
  //Trigger after cycle 5 CLKs
  else 
  begin
    if (get_data_trig  == 1) enc10bit_r <= data_out;
    else  enc10bit_r <= enc10bit_r;
  end
end























































































































// HDL Embedded Text Block 6 eb6
assign data_code  = data_10bit_in[9:8];
assign data_input = data_10bit_in[7:0];
assign KI_signal  = data_code[1] || data_code[0]; //Control signal for the KI of the encoder (goes low if there is data i.e. code = 00, 01, 10)























endmodule // elink_proc_out_enc8b10b
// EPROC_OUT_ENC8b10b
// EPROC_OUT_ENC8b10b
