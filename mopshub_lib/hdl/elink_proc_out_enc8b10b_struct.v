//
// Module mopshub_lib.elink_proc_out_enc8b10b.struct
//
// Created:
//          by - dcs.dcs (chipdev2.physik.uni-wuppertal.de)
//          at - 13:26:11 02/03/22
//
// Generated by Mentor Graphics' HDL Designer(TM) 2019.4 (Build 4)
//

`resetall
`timescale 1ns/10ps
// 8b10b encoder for EPROC_OUT module
module elink_proc_out_enc8b10b( 
   // Port Declarations
   // Port Declarations
   input   wire           clk, 
   input   wire    [9:0]  EDATA_IN,       //Data stored in the FIFO
   input   wire           EDATA_RDY, 
   input   wire           rst,            // reset all the counters and data
   output  wire           get_data_trig, 
   output  wire    [1:0]  EDATA_OUT, 
   input   wire    [7:0]  Kchar_comma, 
   input   wire    [7:0]  Kchar_eop, 
   input   wire    [7:0]  Kchar_sop
);

// Local declarations
  
  // Internal signal declarations
  // Internal Declarations
// Internal Declarations


// Local declarations

// Internal signal declarations
// Internal Declarations


// Local declarations

// Internal signal declarations
wire  [9:0] enc10bit;
reg   [9:0] enc10bit_r;
wire  [1:0] zeros2bit   = 2'b0;
reg   [2:0] send_count  = 0;


// Instances 
//  Instances
//     -------------------------------------------------------------------------------------------
//     -- 8b10b encoding
//     -------------------------------------------------------------------------------------------
// 
// 
// 
// 
// 
enc8b10b_wrap enc8b10b_wrap10( 
   .clk              (clk), 
   .rst              (rst), 
   .dataCode         (EDATA_IN[9:8]), 
   .dataIN           (EDATA_IN[7:0]), 
   .dataINrdy        (EDATA_RDY), 
   .enc_10b_data_out (enc10bit), 
   .Kchar_eop        (Kchar_eop), 
   .Kchar_sop        (Kchar_sop), 
   .Kchar_comma      (Kchar_comma)
); 

mux8_Nbit #(2) bitMUX( 
   .data0    (enc10bit_r[1:0]), 
   .data1    (enc10bit_r[3:2]), 
   .data2    (enc10bit_r[5:4]), 
   .data3    (enc10bit_r[7:6]), 
   .data4    (enc10bit_r[9:8]), 
   .data5    (zeros2bit), 
   .data6    (zeros2bit), 
   .data7    (zeros2bit), 
   .sel      (send_count), 
   .data_out (EDATA_OUT)
); 

triger_counter #(3'b100,3'b011) triger_counter1( 
   .rst          (rst), 
   .clk          (clk), 
   .request_trig (get_data_trig)
); 

// HDL Embedded Text Block 3 eb3

  //Fill the register enc10bit_r with data 
always @(posedge clk)
begin
  if (!rst)
  enc10bit_r <= 10'b0;
  else if (get_data_trig  == 1) //Trigger after cycle 5 CLKs
  begin
    enc10bit_r <= enc10bit;
  end
end

//-------------------------------------------------------------------------------------------
//-- sending out 2 bits @ bitCLK using a MUX
//-------------------------------------------------------------------------------------------
// Counter over the select signal
always @(posedge clk)
begin
  if (!rst)
  send_count <= 3'b0;
  else
  begin
    if (get_data_trig == 1)
    send_count <= 3'b0;
    else  
    send_count <= send_count + 1;
  end
end                                   






























































endmodule // elink_proc_out_enc8b10b
// EPROC_OUT_ENC8b10b
// EPROC_OUT_ENC8b10b
