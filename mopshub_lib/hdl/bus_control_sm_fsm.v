//
// Module mopshub_lib.bus_control_SM.fsm
//
// Created:
//          by - dcs.dcs (chipdev2.physik.uni-wuppertal.de)
//          at - 10:29:08 06/29/22
//
// Generated by Mentor Graphics' HDL Designer(TM) 2019.4 (Build 4)
//
`resetall
`timescale 1ns/10ps
module bus_control_SM( 
   // Port Declarations
   input   wire           abort,                  // Upon receiving a reset message on the CANbus. FSM goes into a known state
   input   wire           busy_m, 
   input   wire           busy_p, 
   input   wire           clk,                    // posedge
   input   wire           cnt_done, 
   input   wire           end_cnt, 
   input   wire           end_mon_cnt, 
   input   wire           end_read_elink,         // this signal goes high when CANopen block has finshed writing transmit message buffer register 
   input   wire           end_read_miso, 
   input   wire           end_write_elink_spi, 
   input   wire           irq_spi_tra, 
   input   wire           rst,                    // synchronous low active
   input   wire           start_bus_init,         // initialize request from bridge FSM of bridge controller 
   input   wire           start_mon_init, 
   input   wire           start_power_off, 
   input   wire           start_power_on, 
   input   wire           start_read_mon, 
   input   wire           start_read_power, 
   input   wire           timeoutrst,             // timeout reset signal to the state machine in case bridge controller is not respoding for a specified time
   output  reg     [4:0]  addr,                   // request to caninterface block
   output  reg            bus_en_done,            // indication to bridge FSM when initialization is finished 
   output  reg            cs_m, 
   output  reg            cs_p, 
   output  reg            end_spi_proc, 
   output  reg            entimeout, 
   output  reg            mon_en_done, 
   output  reg            read_spi_mode, 
   output  reg            rst_mon_cnt, 
   output  reg            spi_cs, 
   output  reg            start_cnt, 
   output  reg            start_init, 
   output  reg            start_mon_cnt, 
   output  reg            start_read_elink,       // signal to read transmit message buffer register 
   output  reg            start_read_miso, 
   output  reg            start_write_elink_spi, 
   output  reg     [8:0]  statedeb,               // State debug signal 
   output  reg            transcieve_m, 
   output  reg            transcieve_p
);

//tmrg default triplicate
//tmrg tmr_error false
// Internal Declarations


// Module Declarations

// State encoding
parameter 
          waittoact       = 9'd0,
          reset           = 9'd1,
          start           = 9'd2,
          endinit1        = 9'd3,
          start1          = 9'd4,
          ST_Read_reg     = 9'd5,
          st_GPIOA        = 9'd6,
          st_GPIOA1       = 9'd7,
          st_GPIOA2       = 9'd8,
          End_Select      = 9'd9,
          st_GPIOA3       = 9'd10,
          st_GPIOA4       = 9'd11,
          st_GPIOA5       = 9'd12,
          st_GPIOA6       = 9'd13,
          st_GPIOA7       = 9'd14,
          st_GPIOA8       = 9'd15,
          Write_Mosi      = 9'd16,
          read_elink_mes1 = 9'd17,
          CS_low          = 9'd18,
          Read_Miso       = 9'd19,
          Done            = 9'd20,
          write_elink     = 9'd21,
          Wait_Miso       = 9'd22,
          Offset_cal0     = 9'd23,
          Offset__cal1    = 9'd24,
          Offset__cal2    = 9'd25,
          Offset__cal3    = 9'd26,
          Gain_cal0       = 9'd27,
          Gain_cal1       = 9'd28,
          Gain_cal2       = 9'd29,
          Gain_cal3       = 9'd30,
          write_csrs7     = 9'd31,
          write_csrs6     = 9'd32,
          write_csrs5     = 9'd33,
          write_csrs4     = 9'd34,
          write_csrs0     = 9'd35,
          write_csrs1     = 9'd36,
          write_csrs2     = 9'd37,
          ST_Config4      = 9'd38,
          ST_Config3      = 9'd39,
          ST_Config1      = 9'd40,
          ST_Config2      = 9'd41,
          ST_Rest_2       = 9'd42,
          ST_Rest_4       = 9'd43,
          ST_Rest_1       = 9'd44,
          St_wait         = 9'd45,
          ST_Rest_RS_1    = 9'd46,
          ST_Rest_RS_2    = 9'd47,
          st_GPIOA9       = 9'd48,
          st_GPIOA10      = 9'd49,
          st_GPIOA11      = 9'd50,
          w_busy15        = 9'd51,
          w_busy16        = 9'd52,
          w_busy17        = 9'd53,
          ST_IODIRA0      = 9'd54,
          w_busy0         = 9'd55,
          ST_IODIRA1      = 9'd56,
          w_busy1         = 9'd57,
          ST_IODIRA2      = 9'd58,
          w_busy2         = 9'd59,
          w_busy5         = 9'd60,
          st_IODIRB1      = 9'd61,
          st_IODIRB2      = 9'd62,
          st_IODIRB       = 9'd63,
          w_busy3         = 9'd64,
          w_busy4         = 9'd65,
          w_busy7         = 9'd66,
          st_GPIOB2       = 9'd67,
          st_GPIOB1       = 9'd68,
          w_busy8         = 9'd69,
          w_busy6         = 9'd70,
          st_GPIOB0       = 9'd71,
          st_GPPUA        = 9'd72,
          w_busy11        = 9'd73,
          w_busy9         = 9'd74,
          st_GPPUA2       = 9'd75,
          st_GPPUA1       = 9'd76,
          w_busy10        = 9'd77,
          st_GPPUB1       = 9'd78,
          w_busy13        = 9'd79,
          w_busy12        = 9'd80,
          st_GPPUB2       = 9'd81,
          w_busy14        = 9'd82,
          st_GPPUB        = 9'd83,
          CS_high0        = 9'd84,
          CS_high1        = 9'd85,
          CS_high2        = 9'd86,
          CS_high3        = 9'd87,
          CS_high4        = 9'd88,
          CS_high5        = 9'd89,
          start2          = 9'd90,
          End_Select1     = 9'd91,
          CS_high6        = 9'd92,
          CS_high11       = 9'd93,
          st_GPIOA12      = 9'd94,
          st_GPIOA13      = 9'd95,
          st_GPIOA14      = 9'd96,
          w_busy18        = 9'd97,
          w_busy19        = 9'd98,
          w_busy20        = 9'd99,
          ST_IODIRA4      = 9'd100,
          ST_IODIRA5      = 9'd101,
          ST_IODIRA6      = 9'd102,
          w_busy21        = 9'd103,
          w_busy22        = 9'd104,
          w_busy23        = 9'd105,
          w_busy24        = 9'd106,
          w_busy25        = 9'd107,
          w_busy26        = 9'd108,
          w_busy27        = 9'd109,
          w_busy28        = 9'd110,
          w_busy29        = 9'd111,
          w_busy30        = 9'd112,
          w_busy31        = 9'd113,
          CS_high7        = 9'd114,
          w_busy32        = 9'd115,
          ST_Init_0       = 9'd116,
          ST_wait_0       = 9'd117,
          ST_Init_1       = 9'd118,
          ST_wait_1       = 9'd119,
          ST_Init_2       = 9'd120,
          ST_wait_2       = 9'd121,
          ST_Init_3       = 9'd122,
          ST_wait_3       = 9'd123,
          ST_Init_4       = 9'd124,
          ST_wait_4       = 9'd125,
          ST_Init_5       = 9'd126,
          ST_wait_5       = 9'd127,
          ST_Init_6       = 9'd128,
          ST_wait_6       = 9'd129,
          ST_Init_7       = 9'd130,
          ST_wait_7       = 9'd131,
          ST_Init_8       = 9'd132,
          ST_wait_8       = 9'd133,
          ST_Init_9       = 9'd134,
          ST_wait_9       = 9'd135,
          ST_Init_10      = 9'd136,
          ST_wait_10      = 9'd137,
          ST_Init_11      = 9'd138,
          ST_wait_11      = 9'd139,
          ST_Init_12      = 9'd140,
          ST_wait_12      = 9'd141,
          ST_Init_13      = 9'd142,
          ST_wait_13      = 9'd143,
          ST_Init_14      = 9'd144,
          ST_wait_14      = 9'd145,
          st_Init_2       = 9'd146,
          ST_wait_15      = 9'd147,
          CS_high8        = 9'd148,
          w_busy33        = 9'd149,
          ST_Rest_3       = 9'd150,
          ST_Rest_RS_3    = 9'd151,
          ST_Rest_RS_4    = 9'd152,
          St_wait1        = 9'd153,
          St_wait5        = 9'd154,
          St_wait6        = 9'd155,
          St_wait7        = 9'd156,
          St_wait8        = 9'd157,
          St_wait9        = 9'd158,
          St_wait10       = 9'd159,
          CS_high9        = 9'd160,
          w_busy34        = 9'd161,
          St_wait13       = 9'd162,
          ST_Rest_RS_6    = 9'd163,
          ST_Rest_RS_7    = 9'd164,
          St_wait14       = 9'd165,
          ST_Rest_RS_8    = 9'd166,
          St_wait15       = 9'd167,
          St_wait16       = 9'd168,
          CS_high10       = 9'd169,
          w_busy35        = 9'd170,
          CS_high12       = 9'd171,
          w_busy36        = 9'd172,
          CS_high13       = 9'd173,
          w_busy37        = 9'd174,
          w_busy38        = 9'd175,
          CS_high14       = 9'd176,
          CS_high15       = 9'd177,
          w_busy39        = 9'd178,
          St_wait17       = 9'd179,
          St_wait18       = 9'd180,
          St_wait19       = 9'd181,
          St_wait20       = 9'd182,
          St_wait32       = 9'd183,
          St_wait33       = 9'd184,
          St_wait34       = 9'd185,
          ST_Config5      = 9'd186,
          ST_Config6      = 9'd187,
          St_wait35       = 9'd188,
          ST_Config7      = 9'd189,
          St_wait36       = 9'd190,
          ST_Config8      = 9'd191,
          St_wait37       = 9'd192,
          ST_Config9      = 9'd193,
          St_wait38       = 9'd194,
          ST_Config10     = 9'd195,
          St_wait39       = 9'd196,
          St_wait40       = 9'd197,
          ST_Config11     = 9'd198,
          St_wait41       = 9'd199,
          ST_Config12     = 9'd200,
          St_wait42       = 9'd201,
          ST_Config13     = 9'd202,
          St_wait43       = 9'd203,
          St_wait44       = 9'd204,
          ST_Config14     = 9'd205,
          St_wait45       = 9'd206,
          ST_Config15     = 9'd207,
          St_wait46       = 9'd208,
          ST_Config16     = 9'd209,
          St_wait47       = 9'd210,
          St_wait25       = 9'd211,
          St_wait26       = 9'd212,
          St_wait27       = 9'd213,
          St_wait28       = 9'd214,
          St_wait29       = 9'd215,
          St_wait30       = 9'd216,
          St_wait31       = 9'd217,
          ST_Read_reg2    = 9'd218,
          St_wait21       = 9'd219,
          ST_Rest_RS_9    = 9'd220,
          ST_Rest_RS_10   = 9'd221,
          St_wait22       = 9'd222,
          ST_Rest_RS_11   = 9'd223,
          St_wait23       = 9'd224,
          St_wait24       = 9'd225,
          ST_Config17     = 9'd226,
          St_wait48       = 9'd227,
          ST_Config18     = 9'd228,
          St_wait49       = 9'd229,
          St_wait50       = 9'd230,
          St_wait51       = 9'd231,
          ST_Config19     = 9'd232,
          St_wait52       = 9'd233,
          ST_Config20     = 9'd234,
          St_wait53       = 9'd235,
          St_wait54       = 9'd236,
          ST_Config21     = 9'd237,
          St_wait55       = 9'd238,
          ST_Config22     = 9'd239,
          St_wait56       = 9'd240,
          St_wait57       = 9'd241,
          ST_Config23     = 9'd242,
          St_wait58       = 9'd243,
          ST_Config24     = 9'd244,
          St_wait59       = 9'd245,
          Break_Loop      = 9'd246,
          ST_CountRst     = 9'd247,
          ST_Start_Cnt    = 9'd248,
          ST_Read_reg3    = 9'd249,
          St_wait60       = 9'd250,
          ST_Rest_RS_12   = 9'd251,
          ST_Rest_RS_13   = 9'd252,
          St_wait61       = 9'd253,
          ST_Rest_RS_14   = 9'd254,
          St_wait62       = 9'd255,
          St_wait63       = 9'd256;

reg [8:0] current_state, next_state;

// Wait State Signals
reg [5:0] csm_timer;
reg [5:0] csm_next_timer;
reg       csm_timeout;
reg       csm_to_CS_low;
reg       csm_to_Read_Miso;

//-----------------------------------------------------------------
// Next State Block for machine csm
//-----------------------------------------------------------------
always @(
   busy_m, 
   busy_p, 
   csm_timeout, 
   current_state, 
   end_mon_cnt, 
   end_read_elink, 
   end_read_miso, 
   end_write_elink_spi, 
   irq_spi_tra, 
   rst, 
   start_bus_init, 
   start_mon_init, 
   start_power_off, 
   start_power_on, 
   start_read_mon, 
   start_read_power
)
begin : next_state_block_proc
   // Default assignments to Wait State entry flags
   csm_to_CS_low = 1'b0;
   csm_to_Read_Miso = 1'b0;
   case (current_state) 
      waittoact: begin
         if (start_bus_init  == 1)
            next_state = start;
         else if (start_mon_init ==1)
            next_state = start1;
         else if (start_power_on ==1)
            next_state = st_GPIOA3;
         else if (start_power_off ==1)
            next_state = st_GPIOA6;
         else if (start_read_mon ==1)
            next_state = ST_Read_reg3;
         else if (irq_spi_tra ==1)
            next_state = read_elink_mes1;
         else if (start_read_power ==1)
            next_state = st_GPIOA9;
         else if (start_bus_init  == 1 && start_power_off)
            next_state = start2;
         else
            next_state = waittoact;
      end
      reset: begin
         if (rst == 1)
            next_state = waittoact;
         else
            next_state = reset;
      end
      start: begin
         next_state = ST_IODIRA0;
      end
      endinit1: begin
         next_state = waittoact;
      end
      start1: begin
         next_state = ST_Init_0;
      end
      ST_Read_reg: begin
         next_state = St_wait16;
      end
      st_GPIOA: begin
         next_state = w_busy15;
      end
      st_GPIOA1: begin
         next_state = w_busy16;
      end
      st_GPIOA2: begin
         next_state = w_busy17;
      end
      End_Select: begin
         next_state = waittoact;
      end
      st_GPIOA3: begin
         next_state = st_GPIOA4;
      end
      st_GPIOA4: begin
         next_state = st_GPIOA5;
      end
      st_GPIOA5: begin
         next_state = waittoact;
      end
      st_GPIOA6: begin
         next_state = st_GPIOA7;
      end
      st_GPIOA7: begin
         next_state = st_GPIOA8;
      end
      st_GPIOA8: begin
         next_state = waittoact;
      end
      Write_Mosi: begin
         next_state = CS_low;
         csm_to_CS_low = 1'b1;
      end
      read_elink_mes1: begin
         if (end_read_elink == 1)
            next_state = Write_Mosi;
         else
            next_state = read_elink_mes1;
      end
      CS_low: begin
         if (csm_timeout) begin
            next_state = Read_Miso;
            csm_to_Read_Miso = 1'b1;
         end
         else
            next_state = CS_low;
      end
      Read_Miso: begin
         if (csm_timeout)
            next_state = Wait_Miso;
         else
            next_state = Read_Miso;
      end
      Done: begin
         next_state = waittoact;
      end
      write_elink: begin
         if (end_write_elink_spi ==1)
            next_state = Done;
         else
            next_state = write_elink;
      end
      Wait_Miso: begin
         if (end_read_miso == 1)
            next_state = write_elink;
         else
            next_state = Wait_Miso;
      end
      Offset_cal0: begin
         next_state = St_wait32;
      end
      Offset__cal1: begin
         next_state = St_wait33;
      end
      Offset__cal2: begin
         next_state = St_wait40;
      end
      Offset__cal3: begin
         next_state = St_wait44;
      end
      Gain_cal0: begin
         next_state = St_wait50;
      end
      Gain_cal1: begin
         next_state = St_wait51;
      end
      Gain_cal2: begin
         next_state = St_wait54;
      end
      Gain_cal3: begin
         next_state = St_wait57;
      end
      write_csrs7: begin
         next_state = St_wait31;
      end
      write_csrs6: begin
         next_state = St_wait30;
      end
      write_csrs5: begin
         next_state = St_wait29;
      end
      write_csrs4: begin
         next_state = St_wait28;
      end
      write_csrs0: begin
         next_state = St_wait25;
      end
      write_csrs1: begin
         next_state = St_wait26;
      end
      write_csrs2: begin
         next_state = St_wait27;
      end
      ST_Config4: begin
         next_state = St_wait20;
      end
      ST_Config3: begin
         next_state = St_wait19;
      end
      ST_Config1: begin
         next_state = St_wait18;
      end
      ST_Config2: begin
         next_state = St_wait17;
      end
      ST_Rest_2: begin
         next_state = St_wait1;
      end
      ST_Rest_4: begin
         next_state = St_wait6;
      end
      ST_Rest_1: begin
         next_state = St_wait;
      end
      St_wait: begin
         if (busy_m==1)
            next_state = ST_Rest_2;
         else
            next_state = St_wait;
      end
      ST_Rest_RS_1: begin
         next_state = St_wait7;
      end
      ST_Rest_RS_2: begin
         next_state = St_wait8;
      end
      st_GPIOA9: begin
         next_state = st_GPIOA10;
      end
      st_GPIOA10: begin
         next_state = st_GPIOA11;
      end
      st_GPIOA11: begin
         next_state = waittoact;
      end
      w_busy15: begin
         if (busy_p==1)
            next_state = st_GPIOA1;
         else
            next_state = w_busy15;
      end
      w_busy16: begin
         if (busy_p==1)
            next_state = st_GPIOA2;
         else
            next_state = w_busy16;
      end
      w_busy17: begin
         if (busy_p==1)
            next_state = CS_high5;
         else
            next_state = w_busy17;
      end
      ST_IODIRA0: begin
         next_state = w_busy0;
      end
      w_busy0: begin
         if (busy_p==1)
            next_state = ST_IODIRA1;
         else
            next_state = w_busy0;
      end
      ST_IODIRA1: begin
         next_state = w_busy1;
      end
      w_busy1: begin
         if (busy_p==1)
            next_state = ST_IODIRA2;
         else
            next_state = w_busy1;
      end
      ST_IODIRA2: begin
         next_state = w_busy2;
      end
      w_busy2: begin
         if (busy_p==1)
            next_state = CS_high0;
         else
            next_state = w_busy2;
      end
      w_busy5: begin
         if (busy_p==1)
            next_state = CS_high1;
         else
            next_state = w_busy5;
      end
      st_IODIRB1: begin
         next_state = w_busy4;
      end
      st_IODIRB2: begin
         next_state = w_busy5;
      end
      st_IODIRB: begin
         next_state = w_busy3;
      end
      w_busy3: begin
         if (busy_p==1)
            next_state = st_IODIRB1;
         else
            next_state = w_busy3;
      end
      w_busy4: begin
         if (busy_p==1)
            next_state = st_IODIRB2;
         else
            next_state = w_busy4;
      end
      w_busy7: begin
         if (busy_p==1)
            next_state = st_GPIOB2;
         else
            next_state = w_busy7;
      end
      st_GPIOB2: begin
         next_state = w_busy8;
      end
      st_GPIOB1: begin
         next_state = w_busy7;
      end
      w_busy8: begin
         if (busy_p==1)
            next_state = CS_high2;
         else
            next_state = w_busy8;
      end
      w_busy6: begin
         if (busy_p==1)
            next_state = st_GPIOB1;
         else
            next_state = w_busy6;
      end
      st_GPIOB0: begin
         next_state = w_busy6;
      end
      st_GPPUA: begin
         next_state = w_busy9;
      end
      w_busy11: begin
         if (busy_p==1)
            next_state = st_GPPUA2;
         else
            next_state = w_busy11;
      end
      w_busy9: begin
         if (busy_p==1)
            next_state = st_GPPUA1;
         else
            next_state = w_busy9;
      end
      st_GPPUA2: begin
         next_state = w_busy10;
      end
      st_GPPUA1: begin
         next_state = w_busy11;
      end
      w_busy10: begin
         if (busy_p==1)
            next_state = CS_high3;
         else
            next_state = w_busy10;
      end
      st_GPPUB1: begin
         next_state = w_busy13;
      end
      w_busy13: begin
         if (busy_p==1)
            next_state = st_GPPUB2;
         else
            next_state = w_busy13;
      end
      w_busy12: begin
         if (busy_p==1)
            next_state = st_GPPUB1;
         else
            next_state = w_busy12;
      end
      st_GPPUB2: begin
         next_state = w_busy14;
      end
      w_busy14: begin
         if (busy_p==1)
            next_state = CS_high4;
         else
            next_state = w_busy14;
      end
      st_GPPUB: begin
         next_state = w_busy12;
      end
      CS_high0: begin
         next_state = w_busy26;
      end
      CS_high1: begin
         next_state = w_busy27;
      end
      CS_high2: begin
         next_state = w_busy28;
      end
      CS_high3: begin
         next_state = w_busy29;
      end
      CS_high4: begin
         next_state = w_busy30;
      end
      CS_high5: begin
         next_state = w_busy31;
      end
      start2: begin
         next_state = ST_IODIRA4;
      end
      End_Select1: begin
         next_state = waittoact;
      end
      CS_high6: begin
         next_state = w_busy24;
      end
      CS_high11: begin
         next_state = w_busy25;
      end
      st_GPIOA12: begin
         next_state = w_busy18;
      end
      st_GPIOA13: begin
         next_state = w_busy19;
      end
      st_GPIOA14: begin
         next_state = w_busy20;
      end
      w_busy18: begin
         if (busy_p==1)
            next_state = st_GPIOA13;
         else
            next_state = w_busy18;
      end
      w_busy19: begin
         if (busy_p==1)
            next_state = st_GPIOA14;
         else
            next_state = w_busy19;
      end
      w_busy20: begin
         if (busy_p==1)
            next_state = CS_high11;
         else
            next_state = w_busy20;
      end
      ST_IODIRA4: begin
         next_state = w_busy21;
      end
      ST_IODIRA5: begin
         next_state = w_busy22;
      end
      ST_IODIRA6: begin
         next_state = w_busy23;
      end
      w_busy21: begin
         if (busy_p==1)
            next_state = ST_IODIRA5;
         else
            next_state = w_busy21;
      end
      w_busy22: begin
         if (busy_p==1)
            next_state = ST_IODIRA6;
         else
            next_state = w_busy22;
      end
      w_busy23: begin
         if (busy_p==1)
            next_state = CS_high6;
         else
            next_state = w_busy23;
      end
      w_busy24: begin
         if (busy_p==1)
            next_state = st_GPIOA12;
         else
            next_state = w_busy24;
      end
      w_busy25: begin
         if (busy_p==1)
            next_state = End_Select1;
         else
            next_state = w_busy25;
      end
      w_busy26: begin
         if (busy_p==1)
            next_state = st_IODIRB;
         else
            next_state = w_busy26;
      end
      w_busy27: begin
         if (busy_p==1)
            next_state = st_GPIOB0;
         else
            next_state = w_busy27;
      end
      w_busy28: begin
         if (busy_p==1)
            next_state = st_GPPUA;
         else
            next_state = w_busy28;
      end
      w_busy29: begin
         if (busy_p==1)
            next_state = st_GPPUB;
         else
            next_state = w_busy29;
      end
      w_busy30: begin
         if (busy_p==1)
            next_state = st_GPIOA;
         else
            next_state = w_busy30;
      end
      w_busy31: begin
         if (busy_p==1)
            next_state = End_Select;
         else
            next_state = w_busy31;
      end
      CS_high7: begin
         next_state = w_busy32;
      end
      w_busy32: begin
         if (busy_m==1)
            next_state = ST_Rest_1;
         else
            next_state = w_busy32;
      end
      ST_Init_0: begin
         next_state = ST_wait_0;
      end
      ST_wait_0: begin
         if (busy_m==1)
            next_state = ST_Init_1;
         else
            next_state = ST_wait_0;
      end
      ST_Init_1: begin
         next_state = ST_wait_1;
      end
      ST_wait_1: begin
         if (busy_m==1)
            next_state = ST_Init_2;
         else
            next_state = ST_wait_1;
      end
      ST_Init_2: begin
         next_state = ST_wait_2;
      end
      ST_wait_2: begin
         if (busy_m==1)
            next_state = ST_Init_3;
         else
            next_state = ST_wait_2;
      end
      ST_Init_3: begin
         next_state = ST_wait_3;
      end
      ST_wait_3: begin
         if (busy_m==1)
            next_state = ST_Init_4;
         else
            next_state = ST_wait_3;
      end
      ST_Init_4: begin
         next_state = ST_wait_4;
      end
      ST_wait_4: begin
         if (busy_m==1)
            next_state = ST_Init_5;
         else
            next_state = ST_wait_4;
      end
      ST_Init_5: begin
         next_state = ST_wait_5;
      end
      ST_wait_5: begin
         if (busy_m==1)
            next_state = ST_Init_6;
         else
            next_state = ST_wait_5;
      end
      ST_Init_6: begin
         next_state = ST_wait_6;
      end
      ST_wait_6: begin
         if (busy_m==1)
            next_state = ST_Init_7;
         else
            next_state = ST_wait_6;
      end
      ST_Init_7: begin
         next_state = ST_wait_7;
      end
      ST_wait_7: begin
         if (busy_m==1)
            next_state = ST_Init_8;
         else
            next_state = ST_wait_7;
      end
      ST_Init_8: begin
         next_state = ST_wait_8;
      end
      ST_wait_8: begin
         if (busy_m==1)
            next_state = ST_Init_9;
         else
            next_state = ST_wait_8;
      end
      ST_Init_9: begin
         next_state = ST_wait_9;
      end
      ST_wait_9: begin
         if (busy_m==1)
            next_state = ST_Init_10;
         else
            next_state = ST_wait_9;
      end
      ST_Init_10: begin
         next_state = ST_wait_10;
      end
      ST_wait_10: begin
         if (busy_m==1)
            next_state = ST_Init_11;
         else
            next_state = ST_wait_10;
      end
      ST_Init_11: begin
         next_state = ST_wait_11;
      end
      ST_wait_11: begin
         if (busy_m==1)
            next_state = ST_Init_12;
         else
            next_state = ST_wait_11;
      end
      ST_Init_12: begin
         next_state = ST_wait_12;
      end
      ST_wait_12: begin
         if (busy_m==1)
            next_state = ST_Init_13;
         else
            next_state = ST_wait_12;
      end
      ST_Init_13: begin
         next_state = ST_wait_13;
      end
      ST_wait_13: begin
         if (busy_m==1)
            next_state = ST_Init_14;
         else
            next_state = ST_wait_13;
      end
      ST_Init_14: begin
         next_state = ST_wait_14;
      end
      ST_wait_14: begin
         if (busy_m==1)
            next_state = st_Init_2;
         else
            next_state = ST_wait_14;
      end
      st_Init_2: begin
         next_state = ST_wait_15;
      end
      ST_wait_15: begin
         if (busy_m==1)
            next_state = CS_high7;
         else
            next_state = ST_wait_15;
      end
      CS_high8: begin
         next_state = w_busy33;
      end
      w_busy33: begin
         if (busy_m==1)
            next_state = ST_Read_reg;
         else
            next_state = w_busy33;
      end
      ST_Rest_3: begin
         next_state = St_wait5;
      end
      ST_Rest_RS_3: begin
         next_state = St_wait9;
      end
      ST_Rest_RS_4: begin
         next_state = St_wait10;
      end
      St_wait1: begin
         if (busy_m==1)
            next_state = ST_Rest_3;
         else
            next_state = St_wait1;
      end
      St_wait5: begin
         next_state = ST_Rest_4;
      end
      St_wait6: begin
         if (busy_m==1)
            next_state = ST_Rest_RS_1;
         else
            next_state = St_wait6;
      end
      St_wait7: begin
         if (busy_m==1)
            next_state = ST_Rest_RS_2;
         else
            next_state = St_wait7;
      end
      St_wait8: begin
         if (busy_m==1)
            next_state = ST_Rest_RS_3;
         else
            next_state = St_wait8;
      end
      St_wait9: begin
         if (busy_m==1)
            next_state = ST_Rest_RS_4;
         else
            next_state = St_wait9;
      end
      St_wait10: begin
         if (busy_m==1)
            next_state = CS_high8;
         else
            next_state = St_wait10;
      end
      CS_high9: begin
         next_state = w_busy34;
      end
      w_busy34: begin
         if (busy_m==1)
            next_state = ST_Config1;
         else
            next_state = w_busy34;
      end
      St_wait13: begin
         if (busy_m==1)
            next_state = ST_Rest_RS_6;
         else
            next_state = St_wait13;
      end
      ST_Rest_RS_6: begin
         next_state = St_wait14;
      end
      ST_Rest_RS_7: begin
         next_state = St_wait13;
      end
      St_wait14: begin
         if (busy_m==1)
            next_state = ST_Rest_RS_8;
         else
            next_state = St_wait14;
      end
      ST_Rest_RS_8: begin
         next_state = St_wait15;
      end
      St_wait15: begin
         if (busy_m==1)
            next_state = CS_high9;
         else
            next_state = St_wait15;
      end
      St_wait16: begin
         if (busy_m==1)
            next_state = ST_Rest_RS_7;
         else
            next_state = St_wait16;
      end
      CS_high10: begin
         next_state = w_busy35;
      end
      w_busy35: begin
         if (busy_m==1)
            next_state = ST_Read_reg2;
         else
            next_state = w_busy35;
      end
      CS_high12: begin
         next_state = w_busy36;
      end
      w_busy36: begin
         if (busy_m==1)
            next_state = write_csrs0;
         else
            next_state = w_busy36;
      end
      CS_high13: begin
         next_state = w_busy37;
      end
      w_busy37: begin
         if (busy_m==1)
            next_state = Offset_cal0;
         else
            next_state = w_busy37;
      end
      w_busy38: begin
         if (busy_m==1)
            next_state = Gain_cal0;
         else
            next_state = w_busy38;
      end
      CS_high14: begin
         next_state = w_busy38;
      end
      CS_high15: begin
         next_state = w_busy39;
      end
      w_busy39: begin
         if (busy_m==1)
            next_state = Break_Loop;
         else
            next_state = w_busy39;
      end
      St_wait17: begin
         if (busy_m==1)
            next_state = ST_Config3;
         else
            next_state = St_wait17;
      end
      St_wait18: begin
         if (busy_m==1)
            next_state = ST_Config2;
         else
            next_state = St_wait18;
      end
      St_wait19: begin
         if (busy_m==1)
            next_state = ST_Config4;
         else
            next_state = St_wait19;
      end
      St_wait20: begin
         if (busy_m==1)
            next_state = CS_high10;
         else
            next_state = St_wait20;
      end
      St_wait32: begin
         if (busy_m==1)
            next_state = ST_Config5;
         else
            next_state = St_wait32;
      end
      St_wait33: begin
         if (busy_m==1)
            next_state = ST_Config8;
         else
            next_state = St_wait33;
      end
      St_wait34: begin
         if (busy_m==1)
            next_state = Offset__cal1;
         else
            next_state = St_wait34;
      end
      ST_Config5: begin
         next_state = St_wait35;
      end
      ST_Config6: begin
         next_state = St_wait34;
      end
      St_wait35: begin
         if (busy_m==1)
            next_state = ST_Config7;
         else
            next_state = St_wait35;
      end
      ST_Config7: begin
         next_state = St_wait36;
      end
      St_wait36: begin
         if (busy_m==1)
            next_state = ST_Config6;
         else
            next_state = St_wait36;
      end
      ST_Config8: begin
         next_state = St_wait37;
      end
      St_wait37: begin
         if (busy_m==1)
            next_state = ST_Config9;
         else
            next_state = St_wait37;
      end
      ST_Config9: begin
         next_state = St_wait38;
      end
      St_wait38: begin
         if (busy_m==1)
            next_state = ST_Config10;
         else
            next_state = St_wait38;
      end
      ST_Config10: begin
         next_state = St_wait39;
      end
      St_wait39: begin
         if (busy_m==1)
            next_state = Offset__cal2;
         else
            next_state = St_wait39;
      end
      St_wait40: begin
         if (busy_m==1)
            next_state = ST_Config11;
         else
            next_state = St_wait40;
      end
      ST_Config11: begin
         next_state = St_wait41;
      end
      St_wait41: begin
         if (busy_m==1)
            next_state = ST_Config12;
         else
            next_state = St_wait41;
      end
      ST_Config12: begin
         next_state = St_wait42;
      end
      St_wait42: begin
         if (busy_m==1)
            next_state = ST_Config13;
         else
            next_state = St_wait42;
      end
      ST_Config13: begin
         next_state = St_wait43;
      end
      St_wait43: begin
         if (busy_m==1)
            next_state = Offset__cal3;
         else
            next_state = St_wait43;
      end
      St_wait44: begin
         if (busy_m==1)
            next_state = ST_Config14;
         else
            next_state = St_wait44;
      end
      ST_Config14: begin
         next_state = St_wait45;
      end
      St_wait45: begin
         if (busy_m==1)
            next_state = ST_Config15;
         else
            next_state = St_wait45;
      end
      ST_Config15: begin
         next_state = St_wait46;
      end
      St_wait46: begin
         if (busy_m==1)
            next_state = ST_Config16;
         else
            next_state = St_wait46;
      end
      ST_Config16: begin
         next_state = St_wait47;
      end
      St_wait47: begin
         if (busy_m==1)
            next_state = CS_high14;
         else
            next_state = St_wait47;
      end
      St_wait25: begin
         if (busy_m==1)
            next_state = write_csrs1;
         else
            next_state = St_wait25;
      end
      St_wait26: begin
         if (busy_m==1)
            next_state = write_csrs2;
         else
            next_state = St_wait26;
      end
      St_wait27: begin
         if (busy_m==1)
            next_state = write_csrs4;
         else
            next_state = St_wait27;
      end
      St_wait28: begin
         if (busy_m==1)
            next_state = write_csrs5;
         else
            next_state = St_wait28;
      end
      St_wait29: begin
         if (busy_m==1)
            next_state = write_csrs6;
         else
            next_state = St_wait29;
      end
      St_wait30: begin
         if (busy_m==1)
            next_state = write_csrs7;
         else
            next_state = St_wait30;
      end
      St_wait31: begin
         if (busy_m==1)
            next_state = CS_high13;
         else
            next_state = St_wait31;
      end
      ST_Read_reg2: begin
         next_state = St_wait24;
      end
      St_wait21: begin
         if (busy_m==1)
            next_state = ST_Rest_RS_9;
         else
            next_state = St_wait21;
      end
      ST_Rest_RS_9: begin
         next_state = St_wait22;
      end
      ST_Rest_RS_10: begin
         next_state = St_wait21;
      end
      St_wait22: begin
         if (busy_m==1)
            next_state = ST_Rest_RS_11;
         else
            next_state = St_wait22;
      end
      ST_Rest_RS_11: begin
         next_state = St_wait23;
      end
      St_wait23: begin
         if (busy_m==1)
            next_state = CS_high12;
         else
            next_state = St_wait23;
      end
      St_wait24: begin
         if (busy_m==1)
            next_state = ST_Rest_RS_10;
         else
            next_state = St_wait24;
      end
      ST_Config17: begin
         next_state = St_wait48;
      end
      St_wait48: begin
         if (busy_m==1)
            next_state = ST_Config18;
         else
            next_state = St_wait48;
      end
      ST_Config18: begin
         next_state = St_wait49;
      end
      St_wait49: begin
         if (busy_m==1)
            next_state = Gain_cal1;
         else
            next_state = St_wait49;
      end
      St_wait50: begin
         if (busy_m==1)
            next_state = ST_Config17;
         else
            next_state = St_wait50;
      end
      St_wait51: begin
         if (busy_m==1)
            next_state = ST_Config19;
         else
            next_state = St_wait51;
      end
      ST_Config19: begin
         next_state = St_wait52;
      end
      St_wait52: begin
         if (busy_m==1)
            next_state = ST_Config20;
         else
            next_state = St_wait52;
      end
      ST_Config20: begin
         next_state = St_wait53;
      end
      St_wait53: begin
         if (busy_m==1)
            next_state = Gain_cal2;
         else
            next_state = St_wait53;
      end
      St_wait54: begin
         if (busy_m==1)
            next_state = ST_Config21;
         else
            next_state = St_wait54;
      end
      ST_Config21: begin
         next_state = St_wait55;
      end
      St_wait55: begin
         if (busy_m==1)
            next_state = ST_Config22;
         else
            next_state = St_wait55;
      end
      ST_Config22: begin
         next_state = St_wait56;
      end
      St_wait56: begin
         if (busy_m==1)
            next_state = Gain_cal3;
         else
            next_state = St_wait56;
      end
      St_wait57: begin
         if (busy_m==1)
            next_state = ST_Config23;
         else
            next_state = St_wait57;
      end
      ST_Config23: begin
         next_state = St_wait58;
      end
      St_wait58: begin
         if (busy_m==1)
            next_state = ST_Config24;
         else
            next_state = St_wait58;
      end
      ST_Config24: begin
         next_state = St_wait59;
      end
      St_wait59: begin
         if (busy_m==1)
            next_state = CS_high15;
         else
            next_state = St_wait59;
      end
      Break_Loop: begin
         if (end_mon_cnt)
            next_state = ST_CountRst;
         else
            next_state = ST_Start_Cnt;
      end
      ST_CountRst: begin
         next_state = endinit1;
      end
      ST_Start_Cnt: begin
         next_state = ST_Init_0;
      end
      ST_Read_reg3: begin
         next_state = St_wait63;
      end
      St_wait60: begin
         if (busy_m==1)
            next_state = ST_Rest_RS_12;
         else
            next_state = St_wait60;
      end
      ST_Rest_RS_12: begin
         next_state = St_wait61;
      end
      ST_Rest_RS_13: begin
         next_state = St_wait60;
      end
      St_wait61: begin
         if (busy_m==1)
            next_state = ST_Rest_RS_14;
         else
            next_state = St_wait61;
      end
      ST_Rest_RS_14: begin
         next_state = St_wait62;
      end
      St_wait62: begin
         if (busy_m==1)
            next_state = waittoact;
         else
            next_state = St_wait62;
      end
      St_wait63: begin
         if (busy_m==1)
            next_state = ST_Rest_RS_13;
         else
            next_state = St_wait63;
      end
      default: 
         next_state = reset;
   endcase
end // Next State Block

//-----------------------------------------------------------------
// Output Block for machine csm
//-----------------------------------------------------------------
always @(
   current_state
)
begin : output_block_proc
   // Default Assignment
   addr = 5'b0;
   bus_en_done = 0;
   cs_m = 1;
   cs_p = 1;
   end_spi_proc = 0;
   entimeout = 1;
   mon_en_done = 0;
   read_spi_mode = 0;
   rst_mon_cnt = 0;
   spi_cs = 1;
   start_cnt = 0;
   start_init = 0;
   start_mon_cnt = 0;
   start_read_elink = 0;
   start_read_miso = 0;
   start_write_elink_spi = 0;
   transcieve_m = 0;
   transcieve_p = 0;

   // Combined Actions
   case (current_state) 
      waittoact: begin
         entimeout =0;
      end
      reset: begin
         read_spi_mode =0;
      end
      start: begin
         start_init =1;
      end
      endinit1: begin
         mon_en_done=1;
      end
      start1: begin
         start_init =1;
      end
      ST_Read_reg: begin
         addr = 5'h7;
         cs_m = 0 ;
         transcieve_m =1;
      end
      st_GPIOA: begin
         addr = 5'h13;
         cs_p = 0 ;
         transcieve_p =1;
      end
      st_GPIOA1: begin
         addr = 5'h1B;
         cs_p = 0 ;
         transcieve_p =1;
      end
      st_GPIOA2: begin
         addr = 5'h14;
         cs_p = 0 ;
         transcieve_p =1;
      end
      End_Select: begin
         bus_en_done =1;
      end
      st_GPIOA3: begin
         addr = 5'h13;
         cs_p = 0 ;
      end
      st_GPIOA4: begin
         addr = 5'h1B;
         cs_p = 0 ;
      end
      st_GPIOA5: begin
         addr = 5'h14;
         cs_p = 0 ;
      end
      st_GPIOA6: begin
         addr = 5'h13;
         cs_p = 0 ;
      end
      st_GPIOA7: begin
         addr = 5'h1B;
         cs_p = 0 ;
      end
      st_GPIOA8: begin
         addr = 5'h1A;
         cs_p = 0 ;
      end
      Write_Mosi: begin
         spi_cs =0;
         read_spi_mode =1;
      end
      read_elink_mes1: begin
         start_read_elink = 1 ;
         read_spi_mode =1;
      end
      CS_low: begin
         spi_cs = 0;
         read_spi_mode =1;
      end
      Read_Miso: begin
         start_read_miso =1;
         spi_cs = 0;
         read_spi_mode =1;
      end
      Done: begin
         end_spi_proc =1;
         read_spi_mode =1;
      end
      write_elink: begin
         start_write_elink_spi =1;
         read_spi_mode =1;
      end
      Wait_Miso: begin
         read_spi_mode =1;
      end
      Offset_cal0: begin
         addr = 5'hF ;
         cs_m =0 ;
         transcieve_m =1;
      end
      Offset__cal1: begin
         addr = 5'h10 ;
         cs_m =0 ;
         transcieve_m =1;
      end
      Offset__cal2: begin
         addr = 5'h11 ;
         cs_m =0 ;
         transcieve_m =1;
      end
      Offset__cal3: begin
         addr = 5'h12 ;
         cs_m =0 ;
         transcieve_m =1;
      end
      Gain_cal0: begin
         addr = 5'h1C ;
         cs_m =0 ;
         transcieve_m =1;
      end
      Gain_cal1: begin
         addr = 5'h1D ;
         cs_m =0 ;
         transcieve_m =1;
      end
      Gain_cal2: begin
         addr = 5'h1E ;
         cs_m =0 ;
         transcieve_m =1;
      end
      Gain_cal3: begin
         addr = 5'h1F ;
         cs_m =0 ;
         transcieve_m =1;
      end
      write_csrs7: begin
         addr = 5'hB;
         cs_m = 0 ;
         transcieve_m =1;
      end
      write_csrs6: begin
         addr = 5'hD;
         cs_m = 0 ;
         transcieve_m =1;
      end
      write_csrs5: begin
         addr = 5'hC;
         cs_m = 0 ;
         transcieve_m =1;
      end
      write_csrs4: begin
         addr = 5'hB;
         cs_m = 0 ;
         transcieve_m =1;
      end
      write_csrs0: begin
         addr = 5'h9;
         cs_m = 0 ;
         transcieve_m =1;
      end
      write_csrs1: begin
         addr = 5'h4;
         cs_m = 0 ;
         transcieve_m =1;
      end
      write_csrs2: begin
         addr = 5'hA;
         cs_m = 0 ;
         transcieve_m =1;
      end
      ST_Config4: begin
         addr = 5'h4 ;
         cs_m = 0 ;
         transcieve_m =1;
      end
      ST_Config3: begin
         addr = 5'h8 ;
         cs_m = 0 ;
         transcieve_m =1;
      end
      ST_Config1: begin
         addr = 5'h3 ;
         cs_m = 0 ;
         transcieve_m =1;
      end
      ST_Config2: begin
         addr = 5'h4 ;
         cs_m = 0 ;
         transcieve_m =1;
      end
      ST_Rest_2: begin
         addr = 5'h4;
         cs_m = 0 ;
         transcieve_m =1;
      end
      ST_Rest_4: begin
         addr = 5'h5;
         cs_m = 0 ;
         transcieve_m =1;
      end
      ST_Rest_1: begin
         addr = 5'h3;
         cs_m = 0 ;
         transcieve_m =1;
      end
      St_wait: begin
         addr = 5'h3;
         cs_m = 0 ;
      end
      ST_Rest_RS_1: begin
         addr = 5'h3;
         cs_m = 0 ;
         transcieve_m =1;
      end
      ST_Rest_RS_2: begin
         addr = 5'h4;
         cs_m = 0 ;
         transcieve_m =1;
      end
      st_GPIOA9: begin
         addr = 5'h13;
         cs_p = 0 ;
      end
      st_GPIOA10: begin
         addr = 5'h1B;
         cs_p = 0 ;
      end
      st_GPIOA11: begin
         addr = 5'h1A;
         cs_p = 0 ;
      end
      w_busy15: begin
         cs_p = 0 ;
         addr = 5'h13;
      end
      w_busy16: begin
         cs_p = 0 ;
         addr = 5'h1B;
      end
      w_busy17: begin
         cs_p = 0 ;
         addr = 5'h14;
      end
      ST_IODIRA0: begin
         addr = 5'h13;
         cs_p = 0 ;
         transcieve_p =1;
      end
      w_busy0: begin
         cs_p =0;
         addr = 5'h13;
      end
      ST_IODIRA1: begin
         addr = 5'h1A;
         cs_p = 0 ;
         transcieve_p =1;
      end
      w_busy1: begin
         cs_p =0;
         addr = 5'h1A;
      end
      ST_IODIRA2: begin
         addr = 5'h1A;
         cs_p = 0 ;
         transcieve_p =1;
      end
      w_busy2: begin
         addr = 5'h1A;
         cs_p =0;
      end
      w_busy5: begin
         addr = 5'h1A;
         cs_p =0;
      end
      st_IODIRB1: begin
         addr = 5'h14;
         cs_p = 0 ;
         transcieve_p =1;
      end
      st_IODIRB2: begin
         addr = 5'h1A;
         cs_p = 0 ;
         transcieve_p =1;
      end
      st_IODIRB: begin
         addr = 5'h13;
         cs_p = 0 ;
         transcieve_p =1;
      end
      w_busy3: begin
         cs_p =0;
         addr = 5'h13;
      end
      w_busy4: begin
         cs_p =0;
         addr = 5'h14;
      end
      w_busy7: begin
         cs_p =0;
         addr = 5'h15;
      end
      st_GPIOB2: begin
         addr = 5'h1A;
         cs_p = 0 ;
         transcieve_p =1;
      end
      st_GPIOB1: begin
         addr = 5'h15;
         cs_p = 0 ;
         transcieve_p =1;
      end
      w_busy8: begin
         cs_p = 0 ;
         addr = 5'h1A;
      end
      w_busy6: begin
         cs_p =0;
         addr = 5'h13;
      end
      st_GPIOB0: begin
         addr = 5'h13;
         cs_p = 0 ;
         transcieve_p =1;
      end
      st_GPPUA: begin
         addr = 5'h13;
         cs_p = 0 ;
         transcieve_p =1;
      end
      w_busy11: begin
         cs_p = 0 ;
         addr = 5'h18;
      end
      w_busy9: begin
         cs_p = 0 ;
         addr = 5'h13;
      end
      st_GPPUA2: begin
         addr = 5'h18;
         cs_p = 0 ;
         transcieve_p =1;
      end
      st_GPPUA1: begin
         addr = 5'h16;
         cs_p = 0 ;
         transcieve_p =1;
      end
      w_busy10: begin
         cs_p =0;
         addr = 5'h16;
      end
      st_GPPUB1: begin
         addr = 5'h17;
         cs_p = 0 ;
         transcieve_p =1;
      end
      w_busy13: begin
         cs_p = 0 ;
         addr = 5'h17;
      end
      w_busy12: begin
         cs_p = 0 ;
         addr = 5'h13;
      end
      st_GPPUB2: begin
         addr = 5'h19;
         cs_p = 0 ;
         transcieve_p =1;
      end
      w_busy14: begin
         cs_p = 0 ;
         addr = 5'h19;
      end
      st_GPPUB: begin
         addr = 5'h13;
         cs_p = 0 ;
         transcieve_p =1;
      end
      CS_high0: begin
         cs_p =1;
         transcieve_p =1;
      end
      CS_high1: begin
         cs_p =1;
         transcieve_p =1;
      end
      CS_high2: begin
         cs_p =1;
         transcieve_p =1;
      end
      CS_high3: begin
         cs_p =1;
         transcieve_p =1;
      end
      CS_high4: begin
         cs_p =1;
         transcieve_p =1;
      end
      CS_high5: begin
         cs_p =1;
         transcieve_p =1;
      end
      start2: begin
         start_init =1;
      end
      End_Select1: begin
         bus_en_done =1;
      end
      CS_high6: begin
         cs_p =1;
         transcieve_p =1;
      end
      CS_high11: begin
         cs_p =1;
         transcieve_p =1;
      end
      st_GPIOA12: begin
         addr = 5'h13;
         cs_p = 0 ;
         transcieve_p =1;
      end
      st_GPIOA13: begin
         addr = 5'h1B;
         cs_p = 0 ;
         transcieve_p =1;
      end
      st_GPIOA14: begin
         addr = 5'h14;
         cs_p = 0 ;
         transcieve_p =1;
      end
      w_busy18: begin
         cs_p = 0 ;
         addr = 5'h13;
      end
      w_busy19: begin
         cs_p = 0 ;
         addr = 5'h1B;
      end
      w_busy20: begin
         cs_p = 0 ;
         addr = 5'h14;
      end
      ST_IODIRA4: begin
         addr = 5'h13;
         cs_p = 0 ;
         transcieve_p =1;
      end
      ST_IODIRA5: begin
         addr = 5'h1A;
         cs_p = 0 ;
         transcieve_p =1;
      end
      ST_IODIRA6: begin
         addr = 5'h1A;
         cs_p = 0 ;
         transcieve_p =1;
      end
      w_busy21: begin
         cs_p = 0 ;
         addr = 5'h13;
      end
      w_busy22: begin
         cs_p = 0 ;
         addr = 5'h1A;
      end
      w_busy23: begin
         cs_p = 0 ;
         addr = 5'h1A;
      end
      w_busy24: begin
         cs_p = 1 ;
      end
      w_busy25: begin
         cs_p = 1 ;
      end
      w_busy26: begin
         cs_p = 1 ;
      end
      w_busy27: begin
         cs_p = 1 ;
      end
      w_busy28: begin
         cs_p = 1 ;
      end
      w_busy29: begin
         cs_p = 1 ;
      end
      w_busy30: begin
         cs_p = 1 ;
      end
      w_busy31: begin
         cs_p = 1 ;
      end
      CS_high7: begin
         cs_m =1;
         transcieve_m =1;
      end
      w_busy32: begin
         cs_m = 1 ;
      end
      ST_Init_0: begin
         addr = 5'h1;
         cs_m =0;
         transcieve_m =1;
      end
      ST_wait_0: begin
         addr = 5'h1;
         cs_m =0;
      end
      ST_Init_1: begin
         addr = 5'h1;
         cs_m =0;
         transcieve_m =1;
      end
      ST_wait_1: begin
         addr = 5'h1;
         cs_m =0;
      end
      ST_Init_2: begin
         addr = 5'h1;
         cs_m =0;
         transcieve_m =1;
      end
      ST_wait_2: begin
         addr = 5'h1;
         cs_m =0;
      end
      ST_Init_3: begin
         addr = 5'h1;
         cs_m =0;
         transcieve_m =1;
      end
      ST_wait_3: begin
         addr = 5'h1;
         cs_m =0;
      end
      ST_Init_4: begin
         addr = 5'h1;
         cs_m =0;
         transcieve_m =1;
      end
      ST_wait_4: begin
         addr = 5'h1;
         cs_m =0;
      end
      ST_Init_5: begin
         addr = 5'h1;
         cs_m =0;
         transcieve_m =1;
      end
      ST_wait_5: begin
         addr = 5'h1;
         cs_m =0;
      end
      ST_Init_6: begin
         addr = 5'h1;
         cs_m =0;
         transcieve_m =1;
      end
      ST_wait_6: begin
         addr = 5'h1;
         cs_m =0;
      end
      ST_Init_7: begin
         addr = 5'h1;
         cs_m =0;
         transcieve_m =1;
      end
      ST_wait_7: begin
         addr = 5'h1;
         cs_m =0;
      end
      ST_Init_8: begin
         addr = 5'h1;
         cs_m =0;
         transcieve_m =1;
      end
      ST_wait_8: begin
         addr = 5'h1;
         cs_m =0;
      end
      ST_Init_9: begin
         addr = 5'h1;
         cs_m =0;
         transcieve_m =1;
      end
      ST_wait_9: begin
         addr = 5'h1;
         cs_m =0;
      end
      ST_Init_10: begin
         addr = 5'h1;
         cs_m =0;
         transcieve_m =1;
      end
      ST_wait_10: begin
         addr = 5'h1;
         cs_m =0;
      end
      ST_Init_11: begin
         addr = 5'h1;
         cs_m =0;
         transcieve_m =1;
      end
      ST_wait_11: begin
         addr = 5'h1;
         cs_m =0;
      end
      ST_Init_12: begin
         addr = 5'h1;
         cs_m =0;
         transcieve_m =1;
      end
      ST_wait_12: begin
         addr = 5'h1;
         cs_m =0;
      end
      ST_Init_13: begin
         addr = 5'h1;
         cs_m =0;
         transcieve_m =1;
      end
      ST_wait_13: begin
         addr = 5'h1;
         cs_m =0;
      end
      ST_Init_14: begin
         addr = 5'h1;
         cs_m =0;
         transcieve_m =1;
      end
      ST_wait_14: begin
         addr = 5'h1;
         cs_m =0;
      end
      st_Init_2: begin
         addr = 5'h2;
         cs_m =0;
         transcieve_m =1;
      end
      ST_wait_15: begin
         addr = 5'h2;
         cs_m =0;
      end
      CS_high8: begin
         cs_m =1;
         transcieve_m =1;
      end
      w_busy33: begin
         cs_m = 1 ;
      end
      ST_Rest_3: begin
         addr = 5'h4;
         cs_m = 0 ;
         transcieve_m =1;
      end
      ST_Rest_RS_3: begin
         addr = 5'h4;
         cs_m = 0 ;
         transcieve_m =1;
      end
      ST_Rest_RS_4: begin
         addr = 5'h4;
         cs_m = 0 ;
         transcieve_m =1;
      end
      St_wait1: begin
         addr = 5'h4;
         cs_m = 0 ;
      end
      St_wait5: begin
         addr = 5'h4;
         cs_m = 0 ;
      end
      St_wait6: begin
         addr = 5'h5;
         cs_m = 0 ;
      end
      St_wait7: begin
         addr = 5'h3;
         cs_m = 0 ;
      end
      St_wait8: begin
         addr = 5'h4;
         cs_m = 0 ;
      end
      St_wait9: begin
         addr = 5'h4;
         cs_m = 0 ;
      end
      St_wait10: begin
         addr = 5'h4;
         cs_m = 0 ;
      end
      CS_high9: begin
         cs_m =1;
         transcieve_m =1;
      end
      w_busy34: begin
         cs_m = 1 ;
      end
      St_wait13: begin
         addr = 5'h4;
         cs_m = 0 ;
      end
      ST_Rest_RS_6: begin
         addr = 5'h4;
         cs_m = 0 ;
         transcieve_m =1;
      end
      ST_Rest_RS_7: begin
         addr = 5'h4;
         cs_m = 0 ;
         transcieve_m =1;
      end
      St_wait14: begin
         addr = 5'h4;
         cs_m = 0 ;
      end
      ST_Rest_RS_8: begin
         addr = 5'h4;
         cs_m = 0 ;
         transcieve_m =1;
      end
      St_wait15: begin
         addr = 5'h4;
         cs_m = 0 ;
      end
      St_wait16: begin
         addr = 5'h7;
         cs_m = 0 ;
      end
      CS_high10: begin
         cs_m =1;
         transcieve_m =1;
      end
      w_busy35: begin
         cs_m = 1 ;
      end
      CS_high12: begin
         cs_m =1;
         transcieve_m =1;
      end
      w_busy36: begin
         cs_m = 1 ;
      end
      CS_high13: begin
         cs_m =1;
         transcieve_m =1;
      end
      w_busy37: begin
         cs_m = 1 ;
      end
      w_busy38: begin
         cs_m = 1 ;
      end
      CS_high14: begin
         cs_m =1;
         transcieve_m =1;
      end
      CS_high15: begin
         cs_m =1;
         transcieve_m =1;
      end
      w_busy39: begin
         cs_m = 1 ;
      end
      St_wait17: begin
         addr = 5'h4;
         cs_m = 0 ;
      end
      St_wait18: begin
         addr = 5'h3;
         cs_m = 0 ;
      end
      St_wait19: begin
         addr = 5'h8;
         cs_m = 0 ;
      end
      St_wait20: begin
         addr = 5'h4;
         cs_m = 0 ;
      end
      St_wait32: begin
         addr = 5'hF;
         cs_m = 0 ;
      end
      St_wait33: begin
         addr = 5'h10;
         cs_m = 0 ;
      end
      St_wait34: begin
         addr = 5'h4;
         cs_m = 0 ;
      end
      ST_Config5: begin
         addr = 5'h4 ;
         cs_m = 0 ;
         transcieve_m =1;
      end
      ST_Config6: begin
         addr = 5'h4 ;
         cs_m = 0 ;
         transcieve_m =1;
      end
      St_wait35: begin
         addr = 5'h4;
         cs_m = 0 ;
      end
      ST_Config7: begin
         addr = 5'h8 ;
         cs_m = 0 ;
         transcieve_m =1;
      end
      St_wait36: begin
         addr = 5'h8;
         cs_m = 0 ;
      end
      ST_Config8: begin
         addr = 5'h4 ;
         cs_m = 0 ;
         transcieve_m =1;
      end
      St_wait37: begin
         addr = 5'h4;
         cs_m = 0 ;
      end
      ST_Config9: begin
         addr = 5'h8 ;
         cs_m = 0 ;
         transcieve_m =1;
      end
      St_wait38: begin
         addr = 5'h8;
         cs_m = 0 ;
      end
      ST_Config10: begin
         addr = 5'h4 ;
         cs_m = 0 ;
         transcieve_m =1;
      end
      St_wait39: begin
         addr = 5'h4;
         cs_m = 0 ;
      end
      St_wait40: begin
         addr = 5'h11;
         cs_m = 0 ;
      end
      ST_Config11: begin
         addr = 5'h4 ;
         cs_m = 0 ;
         transcieve_m =1;
      end
      St_wait41: begin
         addr = 5'h4;
         cs_m = 0 ;
      end
      ST_Config12: begin
         addr = 5'h8 ;
         cs_m = 0 ;
         transcieve_m =1;
      end
      St_wait42: begin
         addr = 5'h8;
         cs_m = 0 ;
      end
      ST_Config13: begin
         addr = 5'h4 ;
         cs_m = 0 ;
         transcieve_m =1;
      end
      St_wait43: begin
         addr = 5'h4;
         cs_m = 0 ;
      end
      St_wait44: begin
         addr = 5'h12;
         cs_m = 0 ;
      end
      ST_Config14: begin
         addr = 5'h4 ;
         cs_m = 0 ;
         transcieve_m =1;
      end
      St_wait45: begin
         addr = 5'h4;
         cs_m = 0 ;
      end
      ST_Config15: begin
         addr = 5'h8 ;
         cs_m = 0 ;
         transcieve_m =1;
      end
      St_wait46: begin
         addr = 5'h8;
         cs_m = 0 ;
      end
      ST_Config16: begin
         addr = 5'h4 ;
         cs_m = 0 ;
         transcieve_m =1;
      end
      St_wait47: begin
         addr = 5'h4;
         cs_m = 0 ;
      end
      St_wait25: begin
         addr = 5'h9;
         cs_m = 0 ;
      end
      St_wait26: begin
         addr = 5'h4;
         cs_m = 0 ;
      end
      St_wait27: begin
         addr = 5'hA;
         cs_m = 0 ;
      end
      St_wait28: begin
         addr = 5'hB;
         cs_m = 0 ;
      end
      St_wait29: begin
         addr = 5'hC;
         cs_m = 0 ;
      end
      St_wait30: begin
         addr = 5'hD;
         cs_m = 0 ;
      end
      St_wait31: begin
         addr = 5'hB;
         cs_m = 0 ;
      end
      ST_Read_reg2: begin
         addr = 5'h7;
         cs_m = 0 ;
         transcieve_m =1;
      end
      St_wait21: begin
         addr = 5'h4;
         cs_m = 0 ;
      end
      ST_Rest_RS_9: begin
         addr = 5'h4;
         cs_m = 0 ;
         transcieve_m =1;
      end
      ST_Rest_RS_10: begin
         addr = 5'h4;
         cs_m = 0 ;
         transcieve_m =1;
      end
      St_wait22: begin
         addr = 5'h4;
         cs_m = 0 ;
      end
      ST_Rest_RS_11: begin
         addr = 5'h4;
         cs_m = 0 ;
         transcieve_m =1;
      end
      St_wait23: begin
         addr = 5'h4;
         cs_m = 0 ;
      end
      St_wait24: begin
         addr = 5'h7;
         cs_m = 0 ;
      end
      ST_Config17: begin
         addr = 5'h4 ;
         cs_m = 0 ;
         transcieve_m =1;
      end
      St_wait48: begin
         addr = 5'h4;
         cs_m = 0 ;
      end
      ST_Config18: begin
         addr = 5'h8 ;
         cs_m = 0 ;
         transcieve_m =1;
      end
      St_wait49: begin
         addr = 5'h8;
         cs_m = 0 ;
      end
      St_wait50: begin
         addr = 5'h1C ;
         cs_m = 0 ;
      end
      St_wait51: begin
         addr = 5'h1D ;
         cs_m = 0 ;
      end
      ST_Config19: begin
         addr = 5'h4 ;
         cs_m = 0 ;
         transcieve_m =1;
      end
      St_wait52: begin
         addr = 5'h4;
         cs_m = 0 ;
      end
      ST_Config20: begin
         addr = 5'h8 ;
         cs_m = 0 ;
         transcieve_m =1;
      end
      St_wait53: begin
         addr = 5'h8;
         cs_m = 0 ;
      end
      St_wait54: begin
         addr = 5'h1E ;
         cs_m = 0 ;
      end
      ST_Config21: begin
         addr = 5'h4 ;
         cs_m = 0 ;
         transcieve_m =1;
      end
      St_wait55: begin
         addr = 5'h4;
         cs_m = 0 ;
      end
      ST_Config22: begin
         addr = 5'h8 ;
         cs_m = 0 ;
         transcieve_m =1;
      end
      St_wait56: begin
         addr = 5'h8;
         cs_m = 0 ;
      end
      St_wait57: begin
         addr = 5'h1F ;
         cs_m = 0 ;
      end
      ST_Config23: begin
         addr = 5'h4 ;
         cs_m = 0 ;
         transcieve_m =1;
      end
      St_wait58: begin
         addr = 5'h4;
         cs_m = 0 ;
      end
      ST_Config24: begin
         addr = 5'h8 ;
         cs_m = 0 ;
         transcieve_m =1;
      end
      St_wait59: begin
         addr = 5'h8;
         cs_m = 0 ;
      end
      ST_CountRst: begin
         rst_mon_cnt =1;
      end
      ST_Start_Cnt: begin
         start_mon_cnt = 1;
      end
      ST_Read_reg3: begin
         addr = 5'h7;
         cs_m = 0 ;
         transcieve_m =1;
      end
      St_wait60: begin
         addr = 5'h4;
         cs_m = 0 ;
      end
      ST_Rest_RS_12: begin
         addr = 5'h4;
         cs_m = 0 ;
         transcieve_m =1;
      end
      ST_Rest_RS_13: begin
         addr = 5'h4;
         cs_m = 0 ;
         transcieve_m =1;
      end
      St_wait61: begin
         addr = 5'h4;
         cs_m = 0 ;
      end
      ST_Rest_RS_14: begin
         addr = 5'h4;
         cs_m = 0 ;
         transcieve_m =1;
      end
      St_wait62: begin
         addr = 5'h4;
         cs_m = 0 ;
      end
      St_wait63: begin
         addr = 5'h7;
         cs_m = 0 ;
      end
   endcase
end // Output Block

//-----------------------------------------------------------------
// Clocked Block for machine csm
//-----------------------------------------------------------------
always @(
   posedge clk
) 
begin : clocked_block_proc
   if (!rst) begin
      current_state <= reset;
      csm_timer <= 6'd0;
   end
   else if (timeoutrst) begin
      current_state <= reset;
      csm_timer <= 6'd0;
   end
   else if (abort) begin
      current_state <= reset;
      csm_timer <= 6'd0;
   end
   else 
   begin
      current_state <= next_state;
      csm_timer <= csm_next_timer;
   end
end // Clocked Block

//-----------------------------------------------------------------
// Wait state logic for machine csm
//-----------------------------------------------------------------
always @(
   csm_timer,
   csm_to_CS_low,
   csm_to_Read_Miso
)
begin : csm_wait_block_proc
   csm_timeout = (csm_timer == 6'd0);
   if (csm_to_CS_low == 1'b1) begin
      csm_next_timer = 6'd9;  //no cycles(10)-1=9
   end
   else if (csm_to_Read_Miso == 1'b1) begin
      csm_next_timer = 6'd39;  //no cycles(40)-1=39
   end
   else begin
      csm_next_timer = (csm_timeout)? 6'd0: (csm_timer - 6'd1);
   end
end // Wait State Block
// State-As-Output assignment
always @(current_state)
statedeb = current_state;

endmodule // bus_control_SM
