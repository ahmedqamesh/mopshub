//
// Module mopshub_lib.canakari_interface_mopshub.struct
//
// Created:
//          by - dcs.dcs (chipdev2.physik.uni-wuppertal.de)
//          at - 12:20:33 06/12/23
//
// Generated by Mentor Graphics' HDL Designer(TM) 2019.4 (Build 4)
//

`resetall
`timescale 1ns/10ps
module canakari_interface_mopshub( 
   // Port Declarations
   input   wire            abort, 
   input   wire    [4:0]   can_rec_select, 
   input   wire            clk,                 // posedge
   input   wire    [75:0]  data_tra_mes,        // complete CAN message to be written on the CAN bus 
   input   wire    [4:0]   data_tra_select, 
   input   wire            end_can_proc, 
   input   wire    [15:0]  general_init, 
   input   wire            init,                // start initialization 
   input   wire    [4:0]   n_buses, 
   input   wire    [4:0]   power_bus_cnt, 
   input   wire    [15:0]  prescaler_init, 
   input   wire            reset_irq_can,       // reset interrupt from Canakari
   input   wire            reset_irq_can_all, 
   input   wire            reset_irq_osc_can, 
   input   wire            reset_irq_rec_can, 
   input   wire            reset_irq_tra_can, 
   input   wire            rst,                 // synchronous low active
   input   wire            send_mes,            // start sending message 
   input   wire            start_read,          // start reading canakari registers 
   input   wire            start_trim_osc, 
   input   wire            start_write,         // start writing Canakari register 
   input   wire            timeoutrst,          // gobal timeout reset to get back the state machines in a known state
   output  wire    [4:0]   addr_can,            // addr given to the initialization block 
   output  wire    [4:0]   can_tra_select, 
   output  wire            cs_can,              // chip select signal for Canakari 
   output  wire            en_rec_reg, 
   output  wire            end_init,            // signal to bridge state machine to end initialization phase 
   output  wire            end_read,            // signal to end read phase 
   output  wire            end_trim_osc, 
   output  wire            end_write,           // signal to end write phase 
   output  wire            read_sig_can_n,      // low active signal to read data from one of the registers of Cankari 
   output  wire            reset_all_done, 
   output  wire            reset_irq_can_done, 
   output  wire            start_init, 
   output  wire    [7:0]   statedeb_can, 
   output  wire    [15:0]  write_can,           // data to be written to Canakari 
   output  wire            write_sig_can_n      // low active signal to write data into one of the registers of Canakari 
);


// Internal Declarations


// Local declarations

// Internal signal declarations
wire  [3:0] cmd;                    // This is a 4 bit concatenated command of signals coming from the state machine i.e initial,read,write
wire        cnt_osc_select;         // enable signal
wire        cnt_select;
wire  [4:0] data_tra_select_cnt;
reg         end_cnt;
wire        initi;                  // initial signal from interface state machine to interface block 
wire        reset_irq_can_active;   // request from bridge FSM
wire        reset_sig_can_all;
wire        reset_sig_can_n;
wire        rst_cnt;
wire        set_bus_id;
wire        start_cnt;
wire        tra_select;
wire        trim;


// Instances 
bit_counter bit_counter0( 
   .ext_rst    (rst_cnt), 
   .rst        (rst), 
   .data_out   (data_tra_select_cnt), 
   .clk        (clk), 
   .cnt_enable (start_cnt)
); 

buffer_tristate_busid buffer_tristate_busid0( 
   .clk          (clk), 
   .rst          (rst), 
   .data_tra_in0 (can_rec_select), 
   .data_tra_in1 (data_tra_select), 
   .data_tra_in2 (data_tra_select_cnt), 
   .data_tra_in3 (power_bus_cnt), 
   .buffer_en0   (reset_irq_rec_can), 
   .buffer_en1   (tra_select), 
   .buffer_en2   (cnt_select), 
   .buffer_en3   (cnt_osc_select), 
   .data_tra_out (can_tra_select)
); 

can_interface can_interface0( 
   .clk            (clk), 
   .rst            (rst), 
   .addr           (addr_can), 
   .prescaler_init (prescaler_init), 
   .general_init   (general_init), 
   .initi          (initi), 
   .write          (write_sig_can_n), 
   .reset_can      (reset_sig_can_n), 
   .trim           (trim), 
   .data_tra_mes   (data_tra_mes), 
   .cmd            (cmd), 
   .write_can      (write_can)
); 

can_interface_SM interface_SM0( 
   .abort              (abort), 
   .clk                (clk), 
   .end_can_proc       (end_can_proc), 
   .end_cnt            (end_cnt), 
   .init               (init), 
   .reset_irq_can      (reset_irq_can_active), 
   .reset_irq_can_all  (reset_irq_can_all), 
   .rst                (rst), 
   .send_mes           (send_mes), 
   .start_osc_trim     (start_trim_osc), 
   .start_read         (start_read), 
   .start_write        (start_write), 
   .timeoutrst         (timeoutrst), 
   .addr               (addr_can), 
   .cs_can             (cs_can), 
   .en_rec_reg         (en_rec_reg), 
   .end_init           (end_init), 
   .end_osc_trim       (end_trim_osc), 
   .end_read           (end_read), 
   .end_write          (end_write), 
   .initi              (initi), 
   .read               (read_sig_can_n), 
   .reset_all_done     (reset_all_done), 
   .reset_irq_can_done (reset_irq_can_done), 
   .reset_sig_can      (reset_sig_can_n), 
   .reset_sig_can_all  (reset_sig_can_all), 
   .rst_cnt            (rst_cnt), 
   .set_bus_id         (set_bus_id), 
   .start_cnt          (start_cnt), 
   .start_init         (start_init), 
   .statedeb           (statedeb_can), 
   .trim               (trim), 
   .write              (write_sig_can_n)
); 

// HDL Embedded Text Block 2 Counter_signal
assign tra_select     = (set_bus_id || reset_irq_tra_can ); 
assign cnt_select     = (init   || reset_sig_can_all);
assign cnt_osc_select = (start_trim_osc ||reset_irq_osc_can);
assign reset_irq_can_active = (reset_irq_can ||reset_irq_osc_can);
































// HDL Embedded Text Block 3 trigger_signal2
 // Counter end_cnt over the Clock signal
initial end_cnt =1'b0;
always @(posedge clk)
begin
  if (!rst) end_cnt <= 0;
  else 
    case(data_tra_select_cnt)
     n_buses: end_cnt <= 1;
     default: end_cnt <= 0;
    endcase
end






















endmodule // canakari_interface_mopshub

