//
// Module mopshub_lib.bridge_controller.struct
//
// Created:
//          by - dcs.dcs (chipdev2.physik.uni-wuppertal.de)
//          at - 17:46:54 08/06/21
//
// Generated by Mentor Graphics' HDL Designer(TM) 2019.4 (Build 4)
//

`resetall
`timescale 1ns/10ps
module bridge_controller #(
   // synopsys template
   parameter max_cnt_size = 5,
   parameter n_buses      = 5'b11111
)
( 
   // Port Declarations
   input   wire            buffer_en, 
   input   wire    [4:0]   can_rec_select, 
   input   wire            clk, 
   input   wire    [75:0]  data_tra_uplink, 
   input   wire            end_cnt_dbg, 
   input   wire            end_read_elink, 
   input   wire            end_write_elink, 
   input   wire            endwait, 
   input   wire            irq_can_rec, 
   input   wire            irq_can_tra, 
   input   wire            irq_elink, 
   input   wire    [15:0]  read_can, 
   input   wire            rst, 
   output  wire    [4:0]   addr_can, 
   output  wire    [4:0]   can_tra_select, 
   output  wire    [75:0]  data_rec_uplink, 
   output  wire            enable_cs, 
   output  wire            end_can_proc, 
   output  wire            irq_can_ack, 
   output  wire            priority_sig, 
   output  wire            read_sig_can_n, 
   output  wire            rst_elink_cnt, 
   output  wire            send_mes_can_done, 
   output  wire            send_mes_elink, 
   output  wire            sign_on_sig, 
   output  wire            start_init,         // to initialize the CAN node (cankari)
   output  wire            start_read_elink, 
   output  wire            start_write_elink, 
   output  wire    [15:0]  write_can, 
   output  wire            write_sig_can_n
);


// Internal Declarations


// Local declarations

// Internal signal declarations
wire         abort_mes;           // Signals other state machines to come to a known statte 
wire         bus_comp;
wire         can_bus_match;
wire  [15:0] data_init;           // Ouput data to be written to the registers
wire  [75:0] data_tra_mes;        // complete CAN message to be written on the CAN bus 
wire  [4:0]  data_tra_select;
wire         en_rec_reg;
wire         end_init;            // signal to bridge state machine to end initialization phase 
wire         end_read;            // signal to end read phase 
wire         end_write;           // signal to end write phase 
wire         entimeout;
wire         reset_irq_can;       // reset interrupt from Canakari
wire         reset_irq_can_all;
wire         start_read;          // start reading canakari registers 
wire         start_write;         // start writing Canakari register 
wire  [4:0]  statedeb;
wire  [5:0]  statedebcan;
wire         timeoutrst;


// Instances 
can_elink_bridge_SM can_elink_bridge_SM0( 
   .can_bus_match     (can_bus_match), 
   .clk               (clk), 
   .end_init          (end_init), 
   .end_read_can      (end_read), 
   .end_read_elink    (end_read_elink), 
   .end_write_can     (end_write), 
   .end_write_elink   (end_write_elink), 
   .endwait           (endwait), 
   .irq_can_rec       (irq_can_rec), 
   .irq_can_tra       (irq_can_tra), 
   .irq_elink         (irq_elink), 
   .priority_sig      (priority_sig), 
   .rst               (rst), 
   .timeoutrst        (timeoutrst), 
   .abort_mes         (abort_mes), 
   .can_bus_comp      (bus_comp), 
   .end_can_proc      (end_can_proc), 
   .entimeout         (entimeout), 
   .irq_can_ack       (irq_can_ack), 
   .reset_irq_can     (reset_irq_can), 
   .reset_irq_can_all (reset_irq_can_all), 
   .rst_elink_cnt     (rst_elink_cnt), 
   .send_mes_can      (send_mes_can_done), 
   .send_mes_elink    (send_mes_elink), 
   .sign_on_sig       (sign_on_sig), 
   .start_init        (start_init), 
   .start_read_can    (start_read), 
   .start_read_elink  (start_read_elink), 
   .start_write_can   (start_write), 
   .start_write_elink (start_write_elink), 
   .statedeb          (statedeb)
); 

canakari_interface #(max_cnt_size,n_buses) canakari_interface0( 
   .abort             (abort_mes), 
   .bus_comp          (bus_comp), 
   .can_rec_select    (can_rec_select), 
   .clk               (clk), 
   .data_init         (data_init), 
   .data_tra_mes      (data_tra_mes), 
   .data_tra_select   (data_tra_select), 
   .end_cnt_dbg       (end_cnt_dbg), 
   .init              (start_init), 
   .read_can          (read_can), 
   .reset_irq_can     (reset_irq_can), 
   .reset_irq_can_all (reset_irq_can_all), 
   .rst               (rst), 
   .send_mes          (send_mes_can_done), 
   .start_read        (start_read), 
   .start_write       (start_write), 
   .timeoutrst        (timeoutrst), 
   .addr_can          (addr_can), 
   .bus_match         (can_bus_match), 
   .can_tra_select    (can_tra_select), 
   .cs_can            (enable_cs), 
   .en_rec_reg        (en_rec_reg), 
   .end_init          (end_init), 
   .end_read          (end_read), 
   .end_write         (end_write), 
   .read_sig_can_n    (read_sig_can_n), 
   .statedebcan       (statedebcan), 
   .write_can         (write_can), 
   .write_sig_can_n   (write_sig_can_n)
); 

initialize_block initialize_block0( 
   .addr      (addr_can), 
   .data_init (data_init)
); 

rec_data_buf rec_data_buf0( 
   .clk            (clk), 
   .data_rec_in    (read_can), 
   .can_rec_select (can_rec_select), 
   .buffer_en      (en_rec_reg), 
   .rst            (rst), 
   .addr           (addr_can), 
   .data_rec_out   (data_rec_uplink)
); 

timout_rst timout_rst0( 
   .clk        (clk), 
   .entimeout  (entimeout), 
   .rst        (rst), 
   .timeoutrst (timeoutrst)
); 

tra_data_buf tra_data_buf0( 
   .clk             (clk), 
   .data_tra_in     (data_tra_uplink), 
   .buffer_en       (buffer_en), 
   .rst             (rst), 
   .priority_sig    (priority_sig), 
   .data_tra_select (data_tra_select), 
   .data_tra_out    (data_tra_mes)
); 


endmodule // bridge_controller

