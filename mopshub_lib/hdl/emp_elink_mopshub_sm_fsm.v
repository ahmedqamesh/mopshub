//
// Module mopshub_lib.emp_elink_mopshub_sm.fsm
//
// Created:
//          by - dcs.dcs (chipdev2.physik.uni-wuppertal.de)
//          at - 10:02:30 03/23/23
//
// Generated by Mentor Graphics' HDL Designer(TM) 2019.4 (Build 4)
//
`resetall
`timescale 1ns/10ps
module emp_elink_mopshub_sm( 
   // Port Declarations
   input   wire            clk, 
   input   wire            intr_done, 
   input   wire            rst, 
   input   wire            s_axi_arready, 
   input   wire            s_axi_bvalid, 
   input   wire            s_axi_rvalid, 
   input   wire            s_axi_wready, 
   input   wire            start_write_memory, 
   output  reg     [7:0]   s_axi_araddr_command, 
   output  reg             s_axi_arvalid, 
   output  reg     [7:0]   s_axi_awaddr_command, 
   output  reg             s_axi_awvalid, 
   output  reg             s_axi_bready, 
   output  reg             s_axi_rready, 
   output  reg     [31:0]  s_axi_wdata, 
   output  reg     [3:0]   s_axi_wstrb, 
   output  reg             s_axi_wvalid
);


// Internal Declarations


// Module Declarations
reg [2:0] count_reg;  

// State encoding
parameter 
          rst_state      = 7'd0,
          DONE           = 7'd1,
          rst_cnt6       = 7'd2,
          addr_write4    = 7'd3,
          rst_cnt11      = 7'd4,
          valid_write18  = 7'd5,
          rst_cnt10      = 7'd6,
          valid_write14  = 7'd7,
          rst_cnt12      = 7'd8,
          command_down1  = 7'd9,
          rst_cnt13      = 7'd10,
          valid_write17  = 7'd11,
          rst_cnt14      = 7'd12,
          valid_write20  = 7'd13,
          rst_cnt15      = 7'd14,
          uplink_storage = 7'd15,
          rst_cnt16      = 7'd16,
          command_down0  = 7'd17,
          Reset          = 7'd18,
          rst_cnt22      = 7'd19,
          Reset1         = 7'd20,
          rst_cnt23      = 7'd21,
          Reset2         = 7'd22,
          rst_cnt24      = 7'd23,
          Reset3         = 7'd24,
          rst_cnt25      = 7'd25,
          intr_enable    = 7'd26,
          rst_cnt26      = 7'd27,
          Wait_intr      = 7'd28,
          Wait_intr1     = 7'd29,
          intr_enable1   = 7'd30,
          rst_cnt27      = 7'd31,
          intr_enable2   = 7'd32,
          rst_cnt28      = 7'd33,
          Wait_intr2     = 7'd34,
          intr_enable3   = 7'd35,
          rst_cnt29      = 7'd36,
          Wait_intr3     = 7'd37,
          data_write31   = 7'd38,
          rst_cnt30      = 7'd39,
          valid_write35  = 7'd40,
          rst_cnt37      = 7'd41,
          rst_cnt7       = 7'd42,
          addr_write5    = 7'd43,
          data_write35   = 7'd44,
          rst_cnt31      = 7'd45,
          valid_write36  = 7'd46,
          rst_cnt39      = 7'd47,
          rst_cnt9       = 7'd48,
          addr_write6    = 7'd49,
          data_write39   = 7'd50,
          rst_cnt40      = 7'd51,
          valid_write37  = 7'd52,
          rst_cnt44      = 7'd53,
          rst_cnt17      = 7'd54,
          addr_write7    = 7'd55,
          data_write43   = 7'd56,
          rst_cnt45      = 7'd57,
          valid_write38  = 7'd58,
          rst_cnt49      = 7'd59,
          valid_write33  = 7'd60,
          rst_cnt32      = 7'd61,
          valid_write15  = 7'd62,
          valid_write34  = 7'd63,
          rst_cnt33      = 7'd64,
          valid_write16  = 7'd65,
          valid_write39  = 7'd66,
          rst_cnt34      = 7'd67,
          rst_cnt20      = 7'd68,
          valid_write21  = 7'd69,
          valid_write40  = 7'd70,
          rst_cnt35      = 7'd71,
          rst_cnt21      = 7'd72,
          rst_cnt18      = 7'd73;

reg [6:0] current_state, next_state;

// Wait State Signals
reg [1:0] csm_timer;
reg [1:0] csm_next_timer;
reg       csm_timeout;
reg       csm_to_rst_cnt10;
reg       csm_to_rst_cnt20;
reg       csm_to_rst_cnt21;
reg       csm_to_rst_cnt18;

//-----------------------------------------------------------------
// Next State Block for machine csm
//-----------------------------------------------------------------
always @(
   csm_timeout, 
   current_state, 
   intr_done, 
   s_axi_arready, 
   s_axi_bvalid, 
   s_axi_rvalid, 
   s_axi_wready, 
   start_write_memory
)
begin : next_state_block_proc
   // Default assignments to Wait State entry flags
   csm_to_rst_cnt10 = 1'b0;
   csm_to_rst_cnt20 = 1'b0;
   csm_to_rst_cnt21 = 1'b0;
   csm_to_rst_cnt18 = 1'b0;
   case (current_state) 
      rst_state: begin
         if (start_write_memory ==1)
            next_state = addr_write4;
         else
            next_state = rst_state;
      end
      DONE: begin
         next_state = rst_state;
      end
      rst_cnt6: begin
         if (s_axi_bvalid ==0)
            next_state = data_write31;
         else
            next_state = rst_cnt6;
      end
      addr_write4: begin
         if (s_axi_wready ==1)
            next_state = rst_cnt6;
         else
            next_state = addr_write4;
      end
      rst_cnt11: begin
         if (s_axi_bvalid ==0)
            next_state = intr_enable1;
         else
            next_state = rst_cnt11;
      end
      valid_write18: begin
         if (s_axi_wready ==1)
            next_state = rst_cnt11;
         else
            next_state = valid_write18;
      end
      rst_cnt10: begin
         if (csm_timeout && (s_axi_rvalid ==0))
            next_state = valid_write34;
         else
            next_state = rst_cnt10;
      end
      valid_write14: begin
         if (s_axi_arready ==1) begin
            next_state = rst_cnt10;
            csm_to_rst_cnt10 = 1'b1;
         end
         else
            next_state = valid_write14;
      end
      rst_cnt12: begin
         if (s_axi_bvalid ==0)
            next_state = intr_enable3;
         else
            next_state = rst_cnt12;
      end
      command_down1: begin
         if (s_axi_wready ==1)
            next_state = rst_cnt12;
         else
            next_state = command_down1;
      end
      rst_cnt13: begin
         if (s_axi_bvalid ==0)
            next_state = uplink_storage;
         else
            next_state = rst_cnt13;
      end
      valid_write17: begin
         if (s_axi_wready ==1)
            next_state = rst_cnt13;
         else
            next_state = valid_write17;
      end
      rst_cnt14: begin
         if (s_axi_bvalid ==0)
            next_state = valid_write18;
         else
            next_state = rst_cnt14;
      end
      valid_write20: begin
         if (s_axi_wready ==1)
            next_state = rst_cnt14;
         else
            next_state = valid_write20;
      end
      rst_cnt15: begin
         if (s_axi_bvalid ==0)
            next_state = intr_enable;
         else
            next_state = rst_cnt15;
      end
      uplink_storage: begin
         if (s_axi_wready ==1)
            next_state = rst_cnt15;
         else
            next_state = uplink_storage;
      end
      rst_cnt16: begin
         if (s_axi_bvalid ==0)
            next_state = intr_enable2;
         else
            next_state = rst_cnt16;
      end
      command_down0: begin
         if (s_axi_wready ==1)
            next_state = rst_cnt16;
         else
            next_state = command_down0;
      end
      Reset: begin
         if (s_axi_wready ==1)
            next_state = rst_cnt22;
         else
            next_state = Reset;
      end
      rst_cnt22: begin
         if (s_axi_bvalid ==0)
            next_state = command_down0;
         else
            next_state = rst_cnt22;
      end
      Reset1: begin
         if (s_axi_wready ==1)
            next_state = rst_cnt23;
         else
            next_state = Reset1;
      end
      rst_cnt23: begin
         if (s_axi_bvalid ==0)
            next_state = valid_write20;
         else
            next_state = rst_cnt23;
      end
      Reset2: begin
         if (s_axi_wready ==1)
            next_state = rst_cnt24;
         else
            next_state = Reset2;
      end
      rst_cnt24: begin
         if (s_axi_bvalid ==0)
            next_state = command_down1;
         else
            next_state = rst_cnt24;
      end
      Reset3: begin
         if (s_axi_wready ==1)
            next_state = rst_cnt25;
         else
            next_state = Reset3;
      end
      rst_cnt25: begin
         if (s_axi_bvalid ==0)
            next_state = DONE;
         else
            next_state = rst_cnt25;
      end
      intr_enable: begin
         if (s_axi_wready ==1)
            next_state = rst_cnt26;
         else
            next_state = intr_enable;
      end
      rst_cnt26: begin
         if (s_axi_bvalid ==0)
            next_state = Wait_intr;
         else
            next_state = rst_cnt26;
      end
      Wait_intr: begin
         if (intr_done ==1)
            next_state = Reset;
         else
            next_state = Wait_intr;
      end
      Wait_intr1: begin
         if (intr_done ==1)
            next_state = Reset2;
         else
            next_state = Wait_intr1;
      end
      intr_enable1: begin
         if (s_axi_wready ==1)
            next_state = rst_cnt27;
         else
            next_state = intr_enable1;
      end
      rst_cnt27: begin
         if (s_axi_bvalid ==0)
            next_state = Wait_intr1;
         else
            next_state = rst_cnt27;
      end
      intr_enable2: begin
         if (s_axi_wready ==1)
            next_state = rst_cnt28;
         else
            next_state = intr_enable2;
      end
      rst_cnt28: begin
         if (s_axi_bvalid ==0)
            next_state = Wait_intr2;
         else
            next_state = rst_cnt28;
      end
      Wait_intr2: begin
         if (intr_done ==1)
            next_state = Reset1;
         else
            next_state = Wait_intr2;
      end
      intr_enable3: begin
         if (s_axi_wready ==1)
            next_state = rst_cnt29;
         else
            next_state = intr_enable3;
      end
      rst_cnt29: begin
         if (s_axi_bvalid ==0)
            next_state = Wait_intr3;
         else
            next_state = rst_cnt29;
      end
      Wait_intr3: begin
         if (intr_done ==1)
            next_state = Reset3;
         else
            next_state = Wait_intr3;
      end
      data_write31: begin
         if (s_axi_wready ==1)
            next_state = rst_cnt30;
         else
            next_state = data_write31;
      end
      rst_cnt30: begin
         if (s_axi_bvalid ==0)
            next_state = valid_write35;
         else
            next_state = rst_cnt30;
      end
      valid_write35: begin
         if (s_axi_wready ==1)
            next_state = rst_cnt37;
         else
            next_state = valid_write35;
      end
      rst_cnt37: begin
         if (s_axi_bvalid ==0)
            next_state = addr_write5;
         else
            next_state = rst_cnt37;
      end
      rst_cnt7: begin
         if (s_axi_bvalid ==0)
            next_state = data_write35;
         else
            next_state = rst_cnt7;
      end
      addr_write5: begin
         if (s_axi_wready ==1)
            next_state = rst_cnt7;
         else
            next_state = addr_write5;
      end
      data_write35: begin
         if (s_axi_wready ==1)
            next_state = rst_cnt31;
         else
            next_state = data_write35;
      end
      rst_cnt31: begin
         if (s_axi_bvalid ==0)
            next_state = valid_write36;
         else
            next_state = rst_cnt31;
      end
      valid_write36: begin
         if (s_axi_wready ==1)
            next_state = rst_cnt39;
         else
            next_state = valid_write36;
      end
      rst_cnt39: begin
         if (s_axi_bvalid ==0)
            next_state = addr_write6;
         else
            next_state = rst_cnt39;
      end
      rst_cnt9: begin
         if (s_axi_bvalid ==0)
            next_state = data_write39;
         else
            next_state = rst_cnt9;
      end
      addr_write6: begin
         if (s_axi_wready ==1)
            next_state = rst_cnt9;
         else
            next_state = addr_write6;
      end
      data_write39: begin
         if (s_axi_wready ==1)
            next_state = rst_cnt40;
         else
            next_state = data_write39;
      end
      rst_cnt40: begin
         if (s_axi_bvalid ==0)
            next_state = valid_write37;
         else
            next_state = rst_cnt40;
      end
      valid_write37: begin
         if (s_axi_wready ==1)
            next_state = rst_cnt44;
         else
            next_state = valid_write37;
      end
      rst_cnt44: begin
         if (s_axi_bvalid ==0)
            next_state = addr_write7;
         else
            next_state = rst_cnt44;
      end
      rst_cnt17: begin
         if (s_axi_bvalid ==0)
            next_state = data_write43;
         else
            next_state = rst_cnt17;
      end
      addr_write7: begin
         if (s_axi_wready ==1)
            next_state = rst_cnt17;
         else
            next_state = addr_write7;
      end
      data_write43: begin
         if (s_axi_wready ==1)
            next_state = rst_cnt45;
         else
            next_state = data_write43;
      end
      rst_cnt45: begin
         if (s_axi_bvalid ==0)
            next_state = valid_write38;
         else
            next_state = rst_cnt45;
      end
      valid_write38: begin
         if (s_axi_wready ==1)
            next_state = rst_cnt49;
         else
            next_state = valid_write38;
      end
      rst_cnt49: begin
         if (s_axi_bvalid ==0)
            next_state = valid_write33;
         else
            next_state = rst_cnt49;
      end
      valid_write33: begin
         if (s_axi_wready ==1)
            next_state = rst_cnt32;
         else
            next_state = valid_write33;
      end
      rst_cnt32: begin
         if (s_axi_bvalid ==0)
            next_state = valid_write14;
         else
            next_state = rst_cnt32;
      end
      valid_write15: begin
         if (s_axi_arready ==1) begin
            next_state = rst_cnt21;
            csm_to_rst_cnt21 = 1'b1;
         end
         else
            next_state = valid_write15;
      end
      valid_write34: begin
         if (s_axi_wready ==1)
            next_state = rst_cnt33;
         else
            next_state = valid_write34;
      end
      rst_cnt33: begin
         if (s_axi_bvalid ==0)
            next_state = valid_write15;
         else
            next_state = rst_cnt33;
      end
      valid_write16: begin
         if (s_axi_arready ==1) begin
            next_state = rst_cnt18;
            csm_to_rst_cnt18 = 1'b1;
         end
         else
            next_state = valid_write16;
      end
      valid_write39: begin
         if (s_axi_wready ==1)
            next_state = rst_cnt34;
         else
            next_state = valid_write39;
      end
      rst_cnt34: begin
         if (s_axi_bvalid ==0)
            next_state = valid_write16;
         else
            next_state = rst_cnt34;
      end
      rst_cnt20: begin
         if (csm_timeout && (s_axi_rvalid ==0))
            next_state = valid_write17;
         else
            next_state = rst_cnt20;
      end
      valid_write21: begin
         if (s_axi_arready ==1) begin
            next_state = rst_cnt20;
            csm_to_rst_cnt20 = 1'b1;
         end
         else
            next_state = valid_write21;
      end
      valid_write40: begin
         if (s_axi_wready ==1)
            next_state = rst_cnt35;
         else
            next_state = valid_write40;
      end
      rst_cnt35: begin
         if (s_axi_bvalid ==0)
            next_state = valid_write21;
         else
            next_state = rst_cnt35;
      end
      rst_cnt21: begin
         if (csm_timeout && (s_axi_rvalid ==0))
            next_state = valid_write39;
         else
            next_state = rst_cnt21;
      end
      rst_cnt18: begin
         if (csm_timeout && (s_axi_rvalid ==0))
            next_state = valid_write40;
         else
            next_state = rst_cnt18;
      end
      default: 
         next_state = rst_state;
   endcase
end // Next State Block

//-----------------------------------------------------------------
// Output Block for machine csm
//-----------------------------------------------------------------
always @(
   current_state
)
begin : output_block_proc
   // Default Assignment
   s_axi_araddr_command = 8'b0;
   s_axi_arvalid = 1'b0;
   s_axi_awaddr_command = 8'b0;
   s_axi_awvalid = 1'b0;
   s_axi_bready = 1'b0;
   s_axi_rready = 1'b0;
   s_axi_wdata = 32'b0;
   s_axi_wstrb = 4'b001;
   s_axi_wvalid = 1'b0;

   // Combined Actions
   case (current_state) 
      rst_cnt6: begin
         s_axi_bready=1'b1;
      end
      addr_write4: begin
         s_axi_awaddr_command=8'h0C;
         s_axi_wdata =32'h0;
         s_axi_wstrb=4'b001;
         s_axi_wvalid=1'b1;
         s_axi_awvalid=1'b1;
      end
      rst_cnt11: begin
         s_axi_bready=1'b1;
      end
      valid_write18: begin
         s_axi_awaddr_command=8'h04;
         s_axi_wdata =32'b00010;
         s_axi_wstrb=4'b001;
         s_axi_wvalid=1'b1;
         s_axi_awvalid=1'b1;
      end
      rst_cnt10: begin
         s_axi_rready=1'b1;
      end
      valid_write14: begin
         s_axi_araddr_command=8'h14;
         s_axi_arvalid=1'b1;
      end
      rst_cnt12: begin
         s_axi_bready=1'b1;
      end
      command_down1: begin
         s_axi_awaddr_command=8'h04;
         s_axi_wdata =32'b00100;
         s_axi_wstrb=4'b001;
         s_axi_wvalid=1'b1;
         s_axi_awvalid=1'b1;
      end
      rst_cnt13: begin
         s_axi_bready=1'b1;
      end
      valid_write17: begin
         s_axi_awaddr_command=8'h018;
         s_axi_wdata =32'h000;
         s_axi_wstrb=4'b001;
         s_axi_wvalid=1'b1;
         s_axi_awvalid=1'b1;
      end
      rst_cnt14: begin
         s_axi_bready=1'b1;
      end
      valid_write20: begin
         s_axi_awaddr_command=8'h018;
         s_axi_wdata =32'h001;
         s_axi_wstrb=4'b001;
         s_axi_wvalid=1'b1;
         s_axi_awvalid=1'b1;
      end
      rst_cnt15: begin
         s_axi_bready=1'b1;
      end
      uplink_storage: begin
         s_axi_awaddr_command=8'h04;
         s_axi_wdata =32'b00010;
         s_axi_wstrb=4'b001;
         s_axi_wvalid=1'b1;
         s_axi_awvalid=1'b1;
      end
      rst_cnt16: begin
         s_axi_bready=1'b1;
      end
      command_down0: begin
         s_axi_awaddr_command=8'h04;
         s_axi_wdata =32'b00100;
         s_axi_wstrb=4'b001;
         s_axi_wvalid=1'b1;
         s_axi_awvalid=1'b1;
      end
      Reset: begin
         s_axi_awaddr_command=8'h04;
         s_axi_wdata =32'b01000;
         s_axi_wstrb=4'b001;
         s_axi_wvalid=1'b1;
         s_axi_awvalid=1'b1;
      end
      rst_cnt22: begin
         s_axi_bready=1'b1;
      end
      Reset1: begin
         s_axi_awaddr_command=8'h04;
         s_axi_wdata =32'b01000;
         s_axi_wstrb=4'b001;
         s_axi_wvalid=1'b1;
         s_axi_awvalid=1'b1;
      end
      rst_cnt23: begin
         s_axi_bready=1'b1;
      end
      Reset2: begin
         s_axi_awaddr_command=8'h04;
         s_axi_wdata =32'b01000;
         s_axi_wstrb=4'b001;
         s_axi_wvalid=1'b1;
         s_axi_awvalid=1'b1;
      end
      rst_cnt24: begin
         s_axi_bready=1'b1;
      end
      Reset3: begin
         s_axi_awaddr_command=8'h04;
         s_axi_wdata =32'b01000;
         s_axi_wstrb=4'b001;
         s_axi_wvalid=1'b1;
         s_axi_awvalid=1'b1;
      end
      rst_cnt25: begin
         s_axi_bready=1'b1;
      end
      intr_enable: begin
         s_axi_awaddr_command=8'h1C;
         s_axi_wdata =32'b00001;
         s_axi_wstrb=4'b001;
         s_axi_wvalid=1'b1;
         s_axi_awvalid=1'b1;
      end
      rst_cnt26: begin
         s_axi_bready=1'b1;
      end
      intr_enable1: begin
         s_axi_awaddr_command=8'h1C;
         s_axi_wdata =32'b00001;
         s_axi_wstrb=4'b001;
         s_axi_wvalid=1'b1;
         s_axi_awvalid=1'b1;
      end
      rst_cnt27: begin
         s_axi_bready=1'b1;
      end
      intr_enable2: begin
         s_axi_awaddr_command=8'h1C;
         s_axi_wdata =32'b00001;
         s_axi_wstrb=4'b001;
         s_axi_wvalid=1'b1;
         s_axi_awvalid=1'b1;
      end
      rst_cnt28: begin
         s_axi_bready=1'b1;
      end
      intr_enable3: begin
         s_axi_awaddr_command=8'h1C;
         s_axi_wdata =32'b00001;
         s_axi_wstrb=4'b001;
         s_axi_wvalid=1'b1;
         s_axi_awvalid=1'b1;
      end
      rst_cnt29: begin
         s_axi_bready=1'b1;
      end
      data_write31: begin
         s_axi_awaddr_command=8'h010;
         s_axi_wdata =32'hDEADDEAD;
         s_axi_wstrb=4'b1111;
         s_axi_wvalid=1'b1;
         s_axi_awvalid=1'b1;
      end
      rst_cnt30: begin
         s_axi_bready=1'b1;
      end
      valid_write35: begin
         s_axi_awaddr_command=8'h04;
         s_axi_wdata =32'b00001;
         s_axi_wstrb=4'b001;
         s_axi_wvalid=1'b1;
         s_axi_awvalid=1'b1;
      end
      rst_cnt37: begin
         s_axi_bready=1'b1;
      end
      rst_cnt7: begin
         s_axi_bready=1'b1;
      end
      addr_write5: begin
         s_axi_awaddr_command=8'h0C;
         s_axi_wdata =32'h1;
         s_axi_wstrb=4'b001;
         s_axi_wvalid=1'b1;
         s_axi_awvalid=1'b1;
      end
      data_write35: begin
         s_axi_awaddr_command=8'h010;
         s_axi_wdata =32'hAAAABBBB;
         s_axi_wstrb=4'b1111;
         s_axi_wvalid=1'b1;
         s_axi_awvalid=1'b1;
      end
      rst_cnt31: begin
         s_axi_bready=1'b1;
      end
      valid_write36: begin
         s_axi_awaddr_command=8'h04;
         s_axi_wdata =32'b00001;
         s_axi_wstrb=4'b001;
         s_axi_wvalid=1'b1;
         s_axi_awvalid=1'b1;
      end
      rst_cnt39: begin
         s_axi_bready=1'b1;
      end
      rst_cnt9: begin
         s_axi_bready=1'b1;
      end
      addr_write6: begin
         s_axi_awaddr_command=8'h0C;
         s_axi_wdata =32'h2;
         s_axi_wstrb=4'b001;
         s_axi_wvalid=1'b1;
         s_axi_awvalid=1'b1;
      end
      data_write39: begin
         s_axi_awaddr_command=8'h010;
         s_axi_wdata =32'hCCCCDDDD;
         s_axi_wstrb=4'b1111;
         s_axi_wvalid=1'b1;
         s_axi_awvalid=1'b1;
      end
      rst_cnt40: begin
         s_axi_bready=1'b1;
      end
      valid_write37: begin
         s_axi_awaddr_command=8'h04;
         s_axi_wdata =32'b00001;
         s_axi_wstrb=4'b001;
         s_axi_wvalid=1'b1;
         s_axi_awvalid=1'b1;
      end
      rst_cnt44: begin
         s_axi_bready=1'b1;
      end
      rst_cnt17: begin
         s_axi_bready=1'b1;
      end
      addr_write7: begin
         s_axi_awaddr_command=8'h0C;
         s_axi_wdata =32'h3;
         s_axi_wstrb=4'b001;
         s_axi_wvalid=1'b1;
         s_axi_awvalid=1'b1;
      end
      data_write43: begin
         s_axi_awaddr_command=8'h010;
         s_axi_wdata =32'hEEEEFFFF;
         s_axi_wstrb=4'b1111;
         s_axi_wvalid=1'b1;
         s_axi_awvalid=1'b1;
      end
      rst_cnt45: begin
         s_axi_bready=1'b1;
      end
      valid_write38: begin
         s_axi_awaddr_command=8'h04;
         s_axi_wdata =32'b00001;
         s_axi_wstrb=4'b001;
         s_axi_wvalid=1'b1;
         s_axi_awvalid=1'b1;
      end
      rst_cnt49: begin
         s_axi_bready=1'b1;
      end
      valid_write33: begin
         s_axi_awaddr_command=8'h0C;
         s_axi_wdata =32'h0;
         s_axi_wstrb=4'b001;
         s_axi_wvalid=1'b1;
         s_axi_awvalid=1'b1;
      end
      rst_cnt32: begin
         s_axi_bready=1'b1;
      end
      valid_write15: begin
         s_axi_araddr_command=8'h14;
         s_axi_arvalid=1'b1;
      end
      valid_write34: begin
         s_axi_awaddr_command=8'h0C;
         s_axi_wdata =32'h1;
         s_axi_wstrb=4'b001;
         s_axi_wvalid=1'b1;
         s_axi_awvalid=1'b1;
      end
      rst_cnt33: begin
         s_axi_bready=1'b1;
      end
      valid_write16: begin
         s_axi_araddr_command=8'h14;
         s_axi_arvalid=1'b1;
      end
      valid_write39: begin
         s_axi_awaddr_command=8'h0C;
         s_axi_wdata =32'h2;
         s_axi_wstrb=4'b001;
         s_axi_wvalid=1'b1;
         s_axi_awvalid=1'b1;
      end
      rst_cnt34: begin
         s_axi_bready=1'b1;
      end
      rst_cnt20: begin
         s_axi_rready=1'b1;
      end
      valid_write21: begin
         s_axi_araddr_command=8'h14;
         s_axi_arvalid=1'b1;
      end
      valid_write40: begin
         s_axi_awaddr_command=8'h0C;
         s_axi_wdata =32'h3;
         s_axi_wstrb=4'b001;
         s_axi_wvalid=1'b1;
         s_axi_awvalid=1'b1;
      end
      rst_cnt35: begin
         s_axi_bready=1'b1;
      end
      rst_cnt21: begin
         s_axi_rready=1'b1;
      end
      rst_cnt18: begin
         s_axi_rready=1'b1;
      end
   endcase
end // Output Block

//-----------------------------------------------------------------
// Clocked Block for machine csm
//-----------------------------------------------------------------
always @(
   posedge clk
) 
begin : clocked_block_proc
   if (!rst) begin
      current_state <= rst_state;
      csm_timer <= 2'd0;
   end
   else 
   begin
      current_state <= next_state;
      csm_timer <= csm_next_timer;
      // Default Assignment To Internals
      count_reg <= 3'b0;
   end
end // Clocked Block

//-----------------------------------------------------------------
// Wait state logic for machine csm
//-----------------------------------------------------------------
always @(
   csm_timer,
   csm_to_rst_cnt10,
   csm_to_rst_cnt20,
   csm_to_rst_cnt21,
   csm_to_rst_cnt18
)
begin : csm_wait_block_proc
   csm_timeout = (csm_timer == 2'd0);
   if (csm_to_rst_cnt10 == 1'b1) begin
      csm_next_timer = 2'd1;  //no cycles(2)-1=1
   end
   else if (csm_to_rst_cnt20 == 1'b1) begin
      csm_next_timer = 2'd1;  //no cycles(2)-1=1
   end
   else if (csm_to_rst_cnt21 == 1'b1) begin
      csm_next_timer = 2'd2;  //no cycles(3)-1=2
   end
   else if (csm_to_rst_cnt18 == 1'b1) begin
      csm_next_timer = 2'd1;  //no cycles(2)-1=1
   end
   else begin
      csm_next_timer = (csm_timeout)? 2'd0: (csm_timer - 2'd1);
   end
end // Wait State Block
endmodule // emp_elink_mopshub_sm
