//
// Module mopshub_lib.data_gen_elink_SM.fsm
//
// Created:
//          by - dcs.dcs (chipdev2.physik.uni-wuppertal.de)
//          at - 17:36:44 08/17/21
//
// Generated by Mentor Graphics' HDL Designer(TM) 2019.4 (Build 4)
//
`resetall
`timescale 1ns/10ps
module data_gen_elink_SM( 
   // Port Declarations
   // Port Declarations
   // Port Declarations
   // Port Declarations
   // Port Declarations
   // Port Declarations
   // Port Declarations
   input   wire           clk,                // write FIFO clk
   input   wire           cnt_done, 
   input   wire           loop_en, 
   input   wire           rst,                // should be used through VIO
   input   wire           tx_fifo_pfull_gen,  // pfull from Tx FIFO
   output  reg            done,               // dbg
   output  reg            start_read_elink, 
   output  reg     [2:0]  state_o
);


// Internal Declarations


// Module Declarations

// State encoding
parameter 
          ST_WR         = 3'd0,
          ST_RESET      = 3'd1,
          ST_WAIT_0     = 3'd2,
          ST_DONE       = 3'd3,
          ST_SWITCH     = 3'd4,
          ST_Select_Sig = 3'd5;

reg [2:0] current_state, next_state;

//-----------------------------------------------------------------
// Next State Block for machine csm
//-----------------------------------------------------------------
always @(
   cnt_done, 
   current_state, 
   loop_en, 
   tx_fifo_pfull_gen
)
begin : next_state_block_proc
   case (current_state) 
      ST_WR: begin
         if (tx_fifo_pfull_gen ==0)
            next_state = ST_WAIT_0;
         else
            next_state = ST_WR;
      end
      ST_RESET: begin
         next_state = ST_WR;
      end
      ST_WAIT_0: begin
         next_state = ST_Select_Sig;
      end
      ST_DONE: begin
         if (loop_en == 1)
            next_state = ST_RESET;
         else
            next_state = ST_DONE;
      end
      ST_SWITCH: begin
         next_state = ST_DONE;
      end
      ST_Select_Sig: begin
         if (cnt_done == 1)
            next_state = ST_SWITCH;
         else
            next_state = ST_WAIT_0;
      end
      default: 
         next_state = ST_RESET;
   endcase
end // Next State Block

//-----------------------------------------------------------------
// Output Block for machine csm
//-----------------------------------------------------------------
always @(
   current_state
)
begin : output_block_proc
   // Default Assignment
   done = 0;
   start_read_elink = 0;
   state_o = 3'b0;

   // Combined Actions
   case (current_state) 
      ST_WR: begin
         state_o  = 3'b010;
         start_read_elink =1;
      end
      ST_RESET: begin
         state_o  = 3'b000;
         done =0;
         start_read_elink = 0;
      end
      ST_WAIT_0: begin
         state_o     = 3'b011;
      end
      ST_DONE: begin
         state_o = 3'b110;
         done =1;
      end
      ST_SWITCH: begin
         state_o     = 3'b101;
      end
      ST_Select_Sig: begin
         state_o = 3'b100;
      end
   endcase
end // Output Block

//-----------------------------------------------------------------
// Clocked Block for machine csm
//-----------------------------------------------------------------
always @(
   posedge clk, 
   negedge rst
) 
begin : clocked_block_proc
   if (!rst) begin
      current_state <= ST_RESET;
   end
   else 
   begin
      current_state <= next_state;
   end
end // Clocked Block

endmodule // data_gen_elink_SM
