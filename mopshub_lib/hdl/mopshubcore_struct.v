//
// Module mopshub_lib.mopshubCore.struct
//
// Created:
//          by - dcs.dcs (chipdev2.physik.uni-wuppertal.de)
//          at - 13:20:30 07/07/21
//
// Generated by Mentor Graphics' HDL Designer(TM) 2019.4 (Build 4)
//

`resetall
`timescale 1ns/10ps
module mopshubCore #(
   // synopsys template
   parameter max_cnt_size = 5,
   parameter n_buses      = 5'b11111
)
( 
   // Port Declarations
   input   wire            clk, 
   input   wire            rst, 
   output  wire    [75:0]  data_rec_uplink, 
   input   wire    [75:0]  data_tra_uplink, 
   input   wire            end_read_elink, 
   input   wire            end_write_elink, 
   input   wire            irq_elink, 
   output  wire            start_read_elink, 
   output  wire            start_write_elink, 
   output  wire            send_mes_elink, 
   output  wire            sign_on_sig, 
   input   wire            endwait, 
   input   wire            buffer_en, 
   output  wire            send_mes_can_done, 
   input   wire            rx, 
   output  wire            tx, 
   output  wire    [4:0]   can_tra_select, 
   input   wire    [4:0]   can_rec_select, 
   output  wire            end_can_proc, 
   output  wire            priority_sig, 
   input   wire            end_cnt_dbg
);


// Internal Declarations


// Local declarations

// Internal signal declarations
wire  [4:0]  addr_can;
wire  [15:0] write_can;
wire         write_sig_can_n;
wire         read_sig_can_n;
wire         irqsucrec;
wire         enable_cs;
wire  [15:0] read_can;
wire         irqsuctra;
wire  [7:0]  Kd;
wire  [7:0]  Ki;
wire  [7:0]  Kp;
wire         en_osc_trim;


// Instances 
can2 can0( 
   .clock             (clk), 
   .reset             (rst), 
   .address           (addr_can), 
   .readdata          (read_can), 
   .writedata         (write_can), 
   .cs                (enable_cs), 
   .read_n            (read_sig_can_n), 
   .write_n           (write_sig_can_n), 
   .irq               (), 
   .irqstatus         (), 
   .irqsuctra         (irqsuctra), 
   .irqsucrec         (irqsucrec), 
   .rx                (rx), 
   .tx                (tx), 
   .statedeb          (), 
   .Prescale_EN_debug (), 
   .bitst             (), 
   .en_osc_trim       (en_osc_trim), 
   .Kd                (Kd), 
   .Kp                (Kp), 
   .Ki                (Ki), 
   .ftrim             (), 
   .ready_osc         ()
); 

bridgeController #(max_cnt_size,n_buses) bridgeController0( 
   .buffer_en         (buffer_en), 
   .can_rec_select    (can_rec_select), 
   .clk               (clk), 
   .data_tra_uplink   (data_tra_uplink), 
   .end_cnt_dbg       (end_cnt_dbg), 
   .end_read_elink    (end_read_elink), 
   .end_write_elink   (end_write_elink), 
   .endwait           (endwait), 
   .irq_can_rec       (irqsucrec), 
   .irq_can_tra       (irqsuctra), 
   .irq_elink         (irq_elink), 
   .read_can          (read_can), 
   .rst               (rst), 
   .addr_can          (addr_can), 
   .can_tra_select    (can_tra_select), 
   .data_rec_uplink   (data_rec_uplink), 
   .enable_cs         (enable_cs), 
   .end_can_proc      (end_can_proc), 
   .priority_sig      (priority_sig), 
   .read_sig_can_n    (read_sig_can_n), 
   .send_mes_can_done (send_mes_can_done), 
   .send_mes_elink    (send_mes_elink), 
   .sign_on_sig       (sign_on_sig), 
   .start_read_elink  (start_read_elink), 
   .start_write_elink (start_write_elink), 
   .write_can         (write_can), 
   .write_sig_can_n   (write_sig_can_n)
); 

// HDL Embedded Text Block 3 eb3
assign Kd =8'd0;
assign Ki =8'd0;
assign Kp =8'd0;
assign en_osc_trim =1'b0;

endmodule // mopshubCore

