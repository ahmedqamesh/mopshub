//
// Module mopshub_lib.enc8b10b_wrap.struct
//
// Created:
//          by - dcs.dcs (chipdev2.physik.uni-wuppertal.de)
//          at - 16:08:06 03/12/21
//
// Generated by Mentor Graphics' HDL Designer(TM) 2019.4 (Build 4)
//

`resetall
`timescale 1ns/10ps
module enc8b10b_wrap( 
   // Port Declarations
   input   wire           clk, 
   input   wire           rst, 
   input   wire    [1:0]  dataCode, 
   input   wire    [7:0]  dataIN, 
   input   wire           dataINrdy, 
   output  wire           encDataOutrdy, 
   output  wire    [9:0]  encDataOut
);


// Internal Declarations


// Local declarations

// Internal signal declarations
reg   [7:0] dataIN_s;
wire  [7:0] byte;
reg   [1:0] dataCode_s           = 1;
wire        Kchar_eop;
wire        Kchar_sop;
wire        Kchar_comma;
// --enaFall : in std_logic ;
// --SBYTECLK : in std_logic ;	-- Master synchronous send byte clock
reg         isk;                        // -- Control (K) input(active high)
reg         rst_state            = 1;
wire        encoder_rst;
wire        enc_ena_s;
wire        dataINrdy_s;
reg         enc_ena              = 1;
reg         encoder_rst_delayed  = 1;
reg         encoder_rst_clk1     = 1;
reg         encDataOutrdy_r;


// Instances 
enc_8b10b_init U_0( 
   .AI    (byte[0]), 
   .AO    (encDataOut[0]), 
   .BI    (byte[1]), 
   .BO    (encDataOut[1]), 
   .CI    (byte[2]), 
   .CO    (encDataOut[2]), 
   .DI    (byte[3]), 
   .DO    (encDataOut[3]), 
   .EI    (byte[4]), 
   .EO    (encDataOut[4]), 
   .FI    (byte[5]), 
   .FO    (encDataOut[6]), 
   .GI    (byte[6]), 
   .GO    (encDataOut[7]), 
   .HI    (byte[7]), 
   .HO    (encDataOut[8]), 
   .IO    (encDataOut[5]), 
   .JO    (encDataOut[9]), 
   .KI    (isk), 
   .RESET (encoder_rst), 
   .clk   (clk), 
   .ena   (enc_ena_s)
); 

// -------------------------------------------------------------------------------------------
// -- data code cases
// -- 00"data, 01"eop, 10"sop, 11"comma
// -------------------------------------------------------------------------------------------
// 
mux4_Nbit #(8) INbitMUX( 
   .data0    (dataIN_s), 
   .data1    (Kchar_eop), 
   .data2    (Kchar_sop), 
   .data3    (Kchar_comma), 
   .sel      (dataCode_s), 
   .data_out (byte)
); 
// output Trig signal will enable reading from fifo (rd_en=1)
// 
//  ### Please start your Verilog code here ###

// HDL Embedded Text Block 1 in_reg
// in_reg 1                                        
always @(posedge clk) //read from memory
  begin    
    if(dataINrdy_s == 1)
      begin
    		  dataIN_s    <= dataIN;
    		  dataCode_s  <= dataCode;
    		  isk         <= (dataCode[1] | dataCode[0]);
      end
  end

// HDL Embedded Text Block 2 enc_rst_sig
// eb1 2         
assign encoder_rst = (rst_state |rst);                               
// HDL Embedded Text Block 3 eb1
// eb1 3 
assign dataINrdy_s = dataINrdy & (!encoder_rst);                                       
// HDL Embedded Text Block 4 rst_state
// rst_state 4    
always @(posedge clk) 
  begin    
    rst_state <=rst;
  end                                 

// HDL Embedded Text Block 5 enc_enable
// eb2 5
assign  enc_ena_s = enc_ena | encoder_rst_delayed;                               
// HDL Embedded Text Block 6 encoder_rst
// encoder_rst 6  
always @(negedge clk) 
  begin    
    enc_ena <= dataINrdy_s | encoder_rst;
    encoder_rst_clk1 <= encoder_rst;
    encoder_rst_delayed <= encoder_rst_clk1;
  end                                 
                                      
// HDL Embedded Text Block 7 rdy_out
// rdy_out 7                                        
always @(posedge clk) 
  begin    
    encDataOutrdy_r <= dataINrdy_s & (! encoder_rst);
  end                                 
      
// HDL Embedded Text Block 8 enc_doutrdy
// enc_doutrdy 8  
assign  encDataOutrdy = encDataOutrdy_r;                                     

endmodule // enc8b10b_wrap

