//
// Module mopshub_lib.FIFO_to_Elink.struct
//
// Created:
//          by - dcs.dcs (chipdev2.physik.uni-wuppertal.de)
//          at - 13:34:50 03/05/21
//
// Generated by Mentor Graphics' HDL Designer(TM) 2019.4 (Build 4)
//

`resetall
`timescale 1ns/10ps
module FIFO_to_Elink #(
   // synopsys template
   // synopsys template
// synopsys template
// synopsys template
   parameter OutputDataRate = 80,
   parameter elinkEncoding  = 2'b01   //01-8b10b encoding
   //01-8b10b encoding
)
( 
   // Port Declarations
   input   wire            efifoWclk, 
   input   wire            clk_40, 
   input   wire            clk_80, 
   input   wire            clk_160, 
   input   wire            rst, 
   input   wire            efifoDin, 
   input   wire    [17:0]  efifoWe, 
   output  wire            efifoPfull, 
   output  wire            DATA1bitOUT, 
   output  wire    [2:0]   elink2bit, 
   input   wire            fifo_flush
);


// Internal Declarations


// Local declarations

// Internal signal declarations
wire        bitCount1;
reg   [1:0] dout2bit;           //  @ 40MHz
wire        dout2bit_r;
reg         doutRdy;
reg   [9:0] efifoDout;          // 10-bit data in
reg         efifoRE;
wire        empty;
//---
wire        full;
reg         reverse_tx   = 0;
wire        swap_output  = 0;   // when '1', the output bits will be swapped


// Instances 
EPROC_OUT U_1( 
   .bitCLK           (clk_40), 
   .bitCLKx4         (clk_160), 
   .rst              (rst), 
   .swap_outbits     (swap_output), 
   .getDataTrig      (efifoRE), 
   .EDATA_OUT        (dout2bit), 
   .fhCR_REVERSE_10B (reverse_tx), 
   .DATA_IN          (efifoDout), 
   .DATA_RDY         (doutRdy)
); 

fifoTXelink_wrap U_0( 
   .rd_clk    (clk_160), 
   .fifoFLUSH (fifo_flush), 
   .din       (efifoDin), 
   .rd_en     (efifoRE), 
   .rst       (rst), 
   .wr_clk    (efifoWclk), 
   .wr_en     (efifoWe), 
   .dout      (efifoDout), 
   .doutRdy   (doutRdy), 
   .empty     (empty), 
   .full      (full), 
   .prog_full (efifoPfull)
); 

`ifdef OutputDataRate == 80
   // HDL Embedded Text Block 1 eb1
   // eb1 1                                        
   always @(posedge clk80)
   begin
           bitCount1 <= ! bitCount1;
   end
   // HDL Embedded Text Block 2 eb2
   // eb2 2                                        
   always @(posedge clk80)
   begin 
     if(bitCount1 == 0)
       dout2bit_r <= dout2bit[1];
   end
   // HDL Embedded Text Block 3 eb3
   // eb3 3                                        
   always @(posedge clk80)//serialized output
   begin 
     if(bitCount1 == 0)
       DATA1bitOUT <= dout2bit[0]; 
     else
       DATA1bitOUT <= dout2bit_r;
   end
   
   // HDL Embedded Text Block 4 eb4
   // eb4 4 
   //2 bits @ clk40, can interface 2-bit of GBT frame                                       
   assign elink2bit = dout2bit; //2 bits @ clk40, can interface 2-bit of GBT frame
   
   
`else
   // HDL Embedded Text Block 5 eb5
   // eb5 5                                        
   assign DATA1bitOUT = 1'b0; //serialized output
   assign elink2bit = 2'b0; // 2 bits @ clk40, can interface 2-bit of GBT frame
`endif


endmodule // FIFO_to_Elink

