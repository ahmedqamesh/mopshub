//
// Module mopshub_lib.elink_proc_in_dec8b10b.struct
//
// Created:
//          by - dcs.dcs (chipdev2.physik.uni-wuppertal.de)
//          at - 12:24:49 10/04/21
//
// Generated by Mentor Graphics' HDL Designer(TM) 2019.4 (Build 4)
//

`resetall
`timescale 1ns/10ps
module elink_proc_in_dec8b10b #(
   // synopsys template
   parameter generate_mopshub = 0
)
( 
   // Port Declarations
   input   wire    [1:0]  DATA_IN, 
   input   wire           clk, 
   input   wire           swap_rx_bits, 
   input   wire           reverse_stream_10b, 
   output  wire    [1:0]  ISK, 
   input   wire           rst, 
   output  wire    [7:0]  dec8b_data, 
   output  wire           dec8b_rdy
);


// Internal Declarations


// Local declarations

// Internal signal declarations
wire         BUSY;
reg          align_select         = 0;
reg   [4:0]  alignment_sreg       = 5'b0;
// Port Declarations
wire  [9:0]  bitstream_align0;               //2 words of 10bit
wire  [9:0]  bitstream_align1;
wire  [11:0] bitstream_in;
wire         code_err;
wire  [1:0]  comma_valid_bits;
wire         comma_valid_bits_or;
wire         disp_err;
reg   [9:0]  word10b              = 10'b0;
wire         word10b_rdy;


// Instances 
bitstream_deserializer bitstream_deserializer0( 
   .clk            (clk), 
   .data_2bit_in   (DATA_IN), 
   .rst            (rst), 
   .swap_rx_bits   (swap_rx_bits), 
   .data_12bit_out (bitstream_in)
); 

dec_8b10b_wrap #(0) dec_8b10b_wrap0( 
   .clk            (clk), 
   .datain_valid   (word10b_rdy), 
   .enc10b_data_in (word10b), 
   .rst            (rst), 
   .ISK            (ISK), 
   .busy           (BUSY), 
   .code_err       (code_err), 
   .dec8b_data_out (dec8b_data), 
   .dec8b_rdy      (dec8b_rdy), 
   .disp_err       (disp_err)
); 

sync_detector #(generate_mopshub) sync_detector0( 
   .bitstream_align0   (bitstream_align0), 
   .comma_valid_bits   (comma_valid_bits), 
   .bitstream_in       (bitstream_in), 
   .clk                (clk), 
   .reverse_stream_10b (reverse_stream_10b), 
   .rst                (rst), 
   .bitstream_align1   (bitstream_align1)
); 

// HDL Embedded Text Block 7 align_select
// eb1 1
//check if there are valid bits
assign comma_valid_bits_or =  (comma_valid_bits[1] | comma_valid_bits[0]);


always@(posedge clk)
if (!rst)
begin
  align_select <=0;
  alignment_sreg <=5'b0; //alignment selector state
end
else 
begin
  if(comma_valid_bits_or ==1) 
  begin
    align_select <= (!comma_valid_bits[0]) & comma_valid_bits[1];
    alignment_sreg <= 5'b10000; 
  end 
  else
  begin
    alignment_sreg <= {alignment_sreg[0],alignment_sreg[4:1]};//
  end 
end


























// HDL Embedded Text Block 8 alignment_word10b
// Prepare_8b10b_data                                     
//-------------------------------------------------------------------------------------------
//--clock2
//-- alignment selected
//-------------------------------------------------------------------------------------------
assign word10b_rdy = alignment_sreg[4];
always@(posedge clk)
if (!rst)
  begin
    word10b <=10'b0;
  end
else
    case (align_select)
        1'b0 :begin //when bit0 word got comma => align to bitstream_align_array0
          word10b <= bitstream_align0;
          end
        1'b1 :begin //when bit1 word got comma => align to bitstream_align_array1
          word10b <= bitstream_align1;
          end     
    endcase

































endmodule // elink_proc_in_dec8b10b

