//
// Module mopshub_lib.fifoTXelink_wrap.struct
//
// Created:
//          by - dcs.dcs (chipdev2.physik.uni-wuppertal.de)
//          at - 19:28:45 03/08/21
//
// Generated by Mentor Graphics' HDL Designer(TM) 2019.4 (Build 4)
//

`resetall
`timescale 1ns/10ps
module fifoTXelink_wrap #(
  // synopsys template
  // synopsys template
  // FIFO parameters
  parameter DATA_IN_WIDTH        = 10,
  parameter Byte_OUT_WIDTH       = 10
  )
  ( 
  // Port Declarations
  // Port Declarations
  // Port Declarations
  input   wire    [DATA_IN_WIDTH-1:0]         din,        //DATA = 2bits +16bits
  input   wire                                fifoFLUSH,  // x-link wrapper signal
  input   wire                                rd_clk, 
  input   wire                                rd_en,      // 1 clk trigger feeded from the EPROC_Out block
  // Port Declarations
  input   wire                                rst, 
  input   wire                                wr_clk, 
  input   wire                                wr_en, 
  
  output  wire    [Byte_OUT_WIDTH-1:0]        dout, 
  output  wire                                doutRdy, 
  output  wire                                empty_efifo, 
  output  wire                                full_efifo, 
  output  wire                                prog_full
  );
  
  // Internal Declarations
  // Local declarations
  
  // Internal signal declarations
  reg   [Byte_OUT_WIDTH-1:0]       dout_r = {2'b11, 8'b0};
  reg                              doutRdy_r = 0;
  reg                              OE;
  reg                              byte_cnt; 
  reg                              wr_en_r       = 0;
  reg                              rst_state     = 0;
  reg   [DATA_IN_WIDTH-1:0]        din_r = {2'b11, 8'b0};   // The default input has commas (2'b11) as a wordcode
  reg   [1:0]                      byte0_code_r;//= 2'b11;
  reg   [1:0]                      byte1_code_r;//=2'b11;  
  
  
  wire  [Byte_OUT_WIDTH-1:0]       byte0;//= {2'b11, 16'b0};
  wire  [Byte_OUT_WIDTH-1:0]       byte1;//= {2'b11, 16'b0}; 
  wire   [1:0]                     byte0_code;
  wire   [1:0]                     byte1_code;
  wire  [DATA_IN_WIDTH-1:0]        dout10bit;
  wire  [DATA_IN_WIDTH-1:0]        dout10bit_s;
  wire                             prog_full_s;
  wire  [1:0]                      word8_code;
  wire                             rd_en_s;   //enable reading from FIFO
  wire                             almost_full; //  this signal indicates that only one more write can be performed before the FIFO is full.
  
  // Instances 
  //  -------------------------------------------------------------------------------------------
  //  -- Instantiate FIFO - ip
  //  -------------------------------------------------------------------------------------------
  fh_epath_fifo2K_18bit_wide #(10)DRAM_2K_18bit( 
  .dout        (dout10bit), 
  .full        (full_efifo), 
  .empty       (empty_efifo), 
  .prog_full   (prog_full_s), 
  .almost_full (almost_full), 
  .rst         (fifoFLUSH),
  .din         (din_r), //will appear after one clk of din 
  .wr_en       (wr_en_r), 
  .rd_en       (rd_en_s), 
  .rd_clk      (rd_clk), 
  .wr_clk      (wr_clk)
  ); 
  
  assign doutRdy = doutRdy_r;
  assign dout =dout10bit;
  assign prog_full = (prog_full_s & OE); // Take the signal out of the FIFO
  ////-------------------------------------------------------------------------------------------
  ////-- write pipeline
  ////-------------------------------------------------------------------------------------------
  always @ (posedge wr_clk)
  if (rst)
    begin
      wr_en_r <= 0;
      din_r   <= 0;
    end 
  else  
    begin
      wr_en_r <= wr_en;
      din_r   <= din;
    end  
  ////-------------------------------------------------------------------------------------------
  ////-- re pulse [Reading Data]
  ////-------------------------------------------------------------------------------------------
  always @ (posedge rd_clk, posedge rst)
  begin
    if (rst)
    doutRdy_r <=0;
    else if (rd_en==1)//-- 1 clk trigger
    begin       
      doutRdy_r<=rd_en;
    end
    else
    begin
      doutRdy_r <=rd_en;
    end
  end
  
  //Never read from an Empty FIFO
   assign rd_en_s = rd_en &(!empty_efifo);//-- only when  empty_efifo = 0 // FIFO will read with the next rd_clk
  assign word8_code = dout10bit[9:8];
  
  ////Assigning the word8_code
  always @ (word8_code)
  begin
    if(empty_efifo == 1)//The FIFO is empty
    begin
      byte0_code_r =2'b11; //Idle mode sends only Comma
      byte1_code_r =2'b11;
    end
    else
    if(word8_code == 2'b10)//start of message
    begin
      byte0_code_r =2'b11; //Comma
      byte1_code_r =2'b10; //start of message
    end
    else if (word8_code == 2'b01)//end of message
    begin
      byte0_code_r =2'b01; //end of message
      byte1_code_r =2'b11; //Comma
    end
    else//00 data       
    begin
      byte0_code_r = 2'b00; 
      byte1_code_r = 2'b00; 
    end    
  end  
  assign byte0_code = byte0_code_r;
  assign byte1_code = byte1_code_r;
  //// HDL Embedded Text Block 11 eb11
  always @ (posedge rd_clk)
  if (rst)
  begin
    rst_state <= 0;
    OE <=0;
  end
  else
  begin
    rst_state <= (rst | fifoFLUSH);
    OE <= !rst_state;
  end 
endmodule // fifoTXelink_wrap
// fifoTXelink_wrap

