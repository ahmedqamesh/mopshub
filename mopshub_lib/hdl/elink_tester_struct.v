//
// Module mopshub_lib.elink_tester.struct
//
// Created:
//          by - dcs.dcs (chipdev2.physik.uni-wuppertal.de)
//          at - 10:00:36 07/11/23
//
// Generated by Mentor Graphics' HDL Designer(TM) 2019.4 (Build 4)
//

`resetall
`timescale 1ns/10ps
module elink_tester( 
   // Port Declarations
   input   wire      clk, 
   input   wire      clk_elink, 
   input   wire      clk_rx, 
   input   wire      clk_tx, 
   input   wire      dbg_elink, 
   input   wire      reset, 
   input   wire      rx_elink_n, 
   input   wire      rx_elink_p, 
   output  wire      irq_elink_dbg, 
   output  wire      tx_elink_n, 
   output  wire      tx_elink_p
);


// Internal Declarations


// Local declarations

// Internal signal declarations
reg   [9:0] COMMAn;
reg   [9:0] COMMAp;
reg   [7:0] Kchar_comma;
reg   [7:0] Kchar_eop;
reg   [7:0] Kchar_sop;
wire  [9:0] data_10bit_in_dbg;
wire  [9:0] fifo_din;
wire  [9:0] fifo_dout;
wire        fifo_flush;
wire        fifo_full;
wire        fifo_rd_en;
wire        fifo_wr_en;
wire        rdy_dbg;
wire        rst;
wire  [1:0] rx_elink2bit;
wire        rx_fifo_empty;
wire        test_can_core      = 1'b0;
wire        tx_efifo_full;
wire  [1:0] tx_elink2bit;
wire        tx_fifo_empty;
wire        word10b_rdy;


// Instances 
//  Instances
// 
elink_data_gen_sm elink_data_gen_dbg_0( 
   .clk               (clk), 
   .rst               (rst), 
   .irq_elink_tra     (), 
   .state_o           (), 
   .start_read_elink  (), 
   .end_read_elink    (), 
   .cnt_done          (), 
   .buffer_en         (), 
   .data_tra_in       (), 
   .rst_cnt           (), 
   .counter_gen_en    (), 
   .test_can_core     (test_can_core), 
   .data_10bit_in_dbg (data_10bit_in_dbg), 
   .rdy_dbg           (rdy_dbg), 
   .irq_elink_dbg     (irq_elink_dbg)
); 

elink_to_fifo elink_to_fifo0( 
   .fifo_flush     (fifo_flush), 
   .fifo_full      (fifo_full), 
   .fifo_dout      (fifo_dout), 
   .clk            (clk), 
   .fifo_rd_en     (fifo_rd_en), 
   .data_2bit_in   (rx_elink2bit), 
   .rst            (rst), 
   .rx_fifo_empty  (rx_fifo_empty), 
   .dec10b_Out     (), 
   .dec10b_out_rdy (), 
   .COMMAn         (COMMAn), 
   .COMMAp         (COMMAp), 
   .Kchar_comma    (Kchar_comma), 
   .Kchar_eop      (Kchar_eop), 
   .Kchar_sop      (Kchar_sop), 
   .word10b_rdy    (word10b_rdy), 
   .clk_elink      (clk_elink)
); 

fifo_to_elink fifo_to_elink0( 
   .fifo_wr_en            (fifo_wr_en), 
   .clk                   (clk), 
   .fifo_din              (fifo_din), 
   .fifo_flush            (fifo_flush), 
   .data_2bit_out         (tx_elink2bit), 
   .efifo_empty           (tx_fifo_empty), 
   .efifo_full            (tx_efifo_full), 
   .rst                   (rst), 
   .Kchar_comma           (Kchar_comma), 
   .Kchar_sop             (Kchar_sop), 
   .Kchar_eop             (Kchar_eop), 
   .data_10bit_in_dbg     (data_10bit_in_dbg), 
   .COMMAn                (COMMAn), 
   .COMMAp                (COMMAp), 
   .data_rdy_10bit_in_dbg (rdy_dbg), 
   .dbg_elink             (dbg_elink), 
   .clk_elink             (clk_elink)
); 

ip_select_io_ddr_wrapper ip_select_io_ddr_wrapper0( 
   .clk_rx       (clk_rx), 
   .clk_tx       (clk_tx), 
   .reset        (reset), 
   .rx_elink_n   (rx_elink_n), 
   .rx_elink_p   (rx_elink_p), 
   .rx_elink2bit (rx_elink2bit), 
   .tx_elink2bit (tx_elink2bit), 
   .tx_elink_n   (tx_elink_n), 
   .tx_elink_p   (tx_elink_p)
); 

// HDL Embedded Text Block 12 K_Code1
// Wire_assign 1                     
assign    fifo_flush = 1'b0;    // Upon receiving a reset message on the CANbus. FSM goes into a known state
//assign    dbg_elink  = 1'b1;
assign    fifo_din   = 10'b0;
assign    fifo_wr_en = 1'b0;
assign    fifo_rd_en = 1'b0;
assign    rst = !reset;
initial Kchar_comma = 8'b10111100;//K28.5  BC
initial Kchar_eop = 8'b11011100;// K28.6 DC
initial Kchar_sop = 8'b00111100;// K28.1 3C
initial COMMAn = 10'b1100000101;
initial COMMAp = 10'b0011111010;







































































































































endmodule // elink_tester

