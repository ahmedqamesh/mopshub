//
// Module mopshub_lib.tb_mopshub_top_level.struct
//
// Created:
//          by - dcs.dcs (chipdev2.physik.uni-wuppertal.de)
//          at - 12:02:26 07/07/21
//
// Generated by Mentor Graphics' HDL Designer(TM) 2019.4 (Build 4)
//

`resetall
`timescale 1ns/10ps
module tb_mopshub_top_level #(
   // synopsys template
   parameter DATA_WIDTH   = 76,
   parameter max_cnt_size = 5
)
( 
   // Port Declarations
   output  wire    [4:0]   can_tra_select, 
   output  reg             clk                 = 0, 
   output  wire    [75:0]  data_rec_uplink, 
   output  wire            done, 
   output  wire            enable_cs, 
   output  wire            end_can_proc, 
   output  wire            irq_can_rec, 
   output  wire            irq_can_tra, 
   output  wire            priority_sig, 
   output  wire    [15:0]  read_can, 
   output  reg             rst                 = 0, 
   output  wire            send_mes_elink, 
   output  wire            start_write_elink, 
   output  wire            tx, 
   output  wire    [15:0]  write_can
);


// Internal Declarations


// Local declarations

// Internal signal declarations
wire                   buffer_en;
reg   [4:0]            can_rec_select     = 0;
wire  [DATA_WIDTH-1:0] data_tra_uplink;
wire                   end_read_elink;
wire                   end_write_elink    = 0;
reg                    endwait            = 0;
wire                   irq_elink;
reg                    loop_en            = 0;
wire                   rx;
wire                   send_mes_can_done;
wire                   sign_on_sig;
wire                   start_read_elink;
reg                    startsmreg         = 1'b0;
wire                   txdec;
wire                   txgen;
wire                   txmops;


// Instances 
CANbus_decoder mopshubCore0( 
   .clk          (clk), 
   .rst          (rst), 
   .rx           (rx), 
   .data_rec_out (data_rec_uplink), 
   .tx           (txdec)
); 

data_generator data_generator0( 
   .done              (done), 
   .rst               (rst), 
   .irq_elink         (irq_elink), 
   .payload           (data_tra_uplink), 
   .clk               (clk), 
   .end_read_elink    (end_read_elink), 
   .buffer_en         (buffer_en), 
   .txgen             (), 
   .loop_en           (loop_en), 
   .sign_on_sig       (sign_on_sig), 
   .start_read_elink  (start_read_elink), 
   .send_mes_can_done (send_mes_can_done)
); 

mopshubCore #(max_cnt_size,5'b11111) mopshubCore5( 
   .clk               (clk), 
   .rst               (), 
   .data_rec_uplink   (), 
   .data_tra_uplink   (data_tra_uplink), 
   .end_read_elink    (end_read_elink), 
   .end_write_elink   (end_write_elink), 
   .irq_elink         (irq_elink), 
   .start_read_elink  (start_read_elink), 
   .start_write_elink (start_write_elink), 
   .send_mes_elink    (send_mes_elink), 
   .sign_on_sig       (sign_on_sig), 
   .endwait           (endwait), 
   .buffer_en         (buffer_en), 
   .send_mes_can_done (send_mes_can_done), 
   .rx                (), 
   .tx                (), 
   .can_tra_select    (can_tra_select), 
   .can_rec_select    (can_rec_select), 
   .end_can_proc      (end_can_proc), 
   .priority_sig      (priority_sig), 
   .end_cnt_dbg       ()
); 

tb_test_top tb_test_top0( 
   .bus_data (data_rec_uplink), 
   .clk      (clk), 
   .rst      (rst), 
   .rx       (rx), 
   .startsm  (startsmreg), 
   .txdec    (txdec), 
   .txgen    (txgen), 
   .txmops   (txmops)
); 

// HDL Embedded Text Block 1 Initialization
// eb1 1 
initial begin 
forever #10 clk = ~clk;
end
initial 
begin
  genrst;
  //irq_can_tra = 0;
  //#300 rst = !rst;
  loop_en= 0;
  //loop_en = !loop_en;
end                                       

/////******* Reset Generator task--low active ****/////
task genrst;
  begin
    rst = 1'b0;
    @(negedge clk)
    rst = 1'b0;
    #200
    rst = 1'b1;
  end 
endtask





// HDL Embedded Text Block 3 assigning1
assign rx =  ~(rst ^ (txdec & txgen & txmops));
assign tx = txdec | txmops;
assign irq_can_tra = mopshubCore0.irqsuctra;
assign irq_can_rec = mopshubCore0.irqsucrec;
//assign enable_cs   = mopshubCore0.enable_cs;
assign write_can   = mopshubCore0.write_can;
assign read_can    = mopshubCore0.read_can;

initial 

begin
genrst; 
#200000
startsmreg <= 1'b1;
#50
startsmreg <= 1'b0;
end



















endmodule // tb_mopshub_top_level

