//
// Module mopshub_lib.EMCI_Emulator.struct
//
// Created:
//          by - dcs.dcs (chipdev2.physik.uni-wuppertal.de)
//          at - 14:21:10 08/20/21
//
// Generated by Mentor Graphics' HDL Designer(TM) 2019.4 (Build 4)
//

`resetall
`timescale 1ns/10ps
module EMCI_Emulator #(
   // synopsys template
   parameter GENERATE_FEI4B = 0,
   parameter Kchar_eop      = 8'b11011100,  // K28.6
   parameter Kchar_sop      = 8'b00111100   // K28.1
)
( 
   // Port Declarations
   input   wire            bitCLK, 
   input   wire    [1:0]   rx_elink2bit, 
   input   wire            bitCLKx2, 
   input   wire            swap_tx_bits, 
   input   wire            bitCLKx4, 
   input   wire            reverse_stream_10b_tx, 
   input   wire            reverse_stream_10b_rx, 
   input   wire            rst, 
   input   wire            wr_elink_en, 
   output  wire    [1:0]   tx_elink2bit, 
   input   wire    [9:0]   data_mopshub_10bit, 
   input   wire            irq_elink_rec, 
   input   wire    [75:0]  gen_edata_tra
);


// Internal Declarations


// Local declarations

// Internal signal declarations
wire         reset;
wire         fifo_empty;
wire  [9:0]  fifo_dout;
wire         elink_data_rdy;
wire  [9:0]  dec8b_Out_dbg;
wire         dec8b_rdy_dbg;
wire  [75:0] data_tra_out;
reg   [75:0] data_tra_76bit_reg  = 76'b0;
wire         cs_elink;
wire         end_read_elink;                // request to bridge FSM 
wire  [4:0]  addr;                          // request to caninterface block
reg          fifo_data_sop       = 1'b0;
reg          fifo_data_eop       = 1'b0;
wire         irq_elink_tra;
wire         buffer_tra_en;
reg   [75:0] data_rec_76bit_reg  = 76'b0;


// Instances 
elink_interface_SM elink_interface_SM_emci( 
   .abort             (), 
   .clk               (bitCLK), 
   .elink_delim_dbg   (), 
   .fifo_data_eop     (fifo_data_eop), 
   .fifo_data_sop     (fifo_data_sop), 
   .fifo_elink_rdy    (elink_data_rdy), 
   .rst               (rst), 
   .start_write_elink (), 
   .timeoutrst        (), 
   .addr              (addr), 
   .buffer_rec_en     (), 
   .buffer_tra_en     (buffer_tra_en), 
   .cs_elink          (cs_elink), 
   .end_read_elink    (end_read_elink), 
   .end_write_elink   (), 
   .irq_elink_rec     (), 
   .irq_elink_tra     (irq_elink_tra), 
   .start_read_elink  (), 
   .statedeb          ()
); 

elink_to_fifo #(0,GENERATE_FEI4B) elink_to_fifo_emci( 
   .rx_elink1bit       (), 
   .bitCLKx2           (bitCLKx2), 
   .swap_tx_bits       (swap_tx_bits), 
   .bitCLK             (bitCLK), 
   .fifo_empty         (fifo_empty), 
   .fifo_flush         (reset), 
   .fifo_full          (), 
   .fifo_dout          (fifo_dout), 
   .rx_elink2bit       (rx_elink2bit), 
   .bitCLKx4           (bitCLKx4), 
   .reset              (reset), 
   .reverse_stream_10b (reverse_stream_10b_rx), 
   .fifo_rd_en         (cs_elink), 
   .fifo_wr_clk        (bitCLK), 
   .dec8b_Out_dbg      (dec8b_Out_dbg), 
   .dec8b_rdy_dbg      (dec8b_rdy_dbg), 
   .fifo_rd_clk        (bitCLK)
); 

fifo_to_elink fifo_to_elink_emci( 
   .fifo_wr_en   (wr_elink_en), 
   .bitCLKx2     (bitCLKx2), 
   .bitCLKx4     (bitCLKx4), 
   .rst          (reset), 
   .fifo_din     (data_mopshub_10bit), 
   .tx_elink1bit (), 
   .tx_elink2bit (tx_elink2bit), 
   .fifo_flush   (reset), 
   .reverse_tx   (reverse_stream_10b_tx), 
   .swap_output  (swap_tx_bits), 
   .bitCLK       (bitCLK), 
   .efifo_full   (), 
   .fifo_wr_clk  (bitCLK), 
   .fifo_rd_clk  (bitCLKx4)
); 

tra_elink_buf tra_elink_buf_emci( 
   .clk          (bitCLK), 
   .data_tra_in  (fifo_dout[7:0]), 
   .buffer_en    (buffer_tra_en), 
   .rst          (rst), 
   .addr         (addr), 
   .data_tra_out (data_tra_out)
); 

// HDL Embedded Text Block 5 FIFO_Write2

//Check FIFO output
assign elink_data_rdy = !fifo_empty;
always@(fifo_dout)
  begin
  if(fifo_dout == {2'b10,Kchar_sop})// 0x3c = 0011 1100 SOP (if 8b10b)
      begin
        fifo_data_sop = 1'b1;
        fifo_data_eop = 1'b0;
      end 
    else if(cs_elink && fifo_dout != {2'b10,Kchar_sop}&& fifo_dout != {2'b01,Kchar_eop})// data
      begin
        fifo_data_sop = 1'b0;
        fifo_data_eop = 1'b0;
      end   
    else if(fifo_dout == {2'b01,Kchar_eop})// 0xdc = 1101 1100 (if 8b10b)
      begin
       fifo_data_sop = 1'b0;
       fifo_data_eop = 1'b1;
      end
    else  
      begin
       fifo_data_sop = 1'b0;
       fifo_data_eop = 1'b0;
      end    
  end

















































































































// HDL Embedded Text Block 6 Data_rdy_signal
//Save data into a buffer
always@(posedge bitCLK)
begin 
  if (rst)
  begin
    data_tra_76bit_reg <= 75'b0;
  end
  if (irq_elink_tra)
  begin
    data_tra_76bit_reg <= data_tra_out; 
  end 
  else
  begin
   data_tra_76bit_reg <= data_tra_76bit_reg; 
  end
end  



always@(posedge bitCLK)
begin 
  if (rst)
  begin
    data_rec_76bit_reg <= 75'b0;
  end
  if (irq_elink_rec)
  begin
    data_rec_76bit_reg  <= gen_edata_tra ; 
  end 
  else
  begin
   data_rec_76bit_reg  <= data_rec_76bit_reg ; 
  end
end  




















































































































// HDL Embedded Text Block 8 reset
assign reset = !rst;  




































































































































endmodule // EMCI_Emulator

