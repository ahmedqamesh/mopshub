//
// Module mopshub_lib.EMCI_Emulator.struct
//
// Created:
//          by - dcs.dcs (chipdev2.physik.uni-wuppertal.de)
//          at - 13:30:48 04/13/21
//
// Generated by Mentor Graphics' HDL Designer(TM) 2018.1 (Build 12)
//

`resetall
`timescale 1ns/10ps
module EMCI_Emulator( 
   // Port Declarations
   input   wire           bitCLK, 
   input   wire           data_10b_en, 
   input   wire    [9:0]  data_10b_in, 
   input   wire           rst, 
   output  wire    [9:0]  enc10bit_out_dbg, 
   input   wire    [1:0]  EDATA_2bit, 
   input   wire           bitCLKx2, 
   input   wire           DATA1bitIN, 
   input   wire           swap_input, 
   input   wire           efifoRe, 
   input   wire           bitCLKx4, 
   input   wire           reverse_rx, 
   output  wire    [9:0]  efifoDout, 
   output  wire           efifoEmpty, 
   output  wire           efifoFull, 
   input   wire           datain_valid, 
   output  wire    [7:0]  HGFEDCBA, 
   output  wire    [1:0]  ISK
);


// Internal Declarations


// Local declarations

// Internal signal declarations
wire  [9:0] enc10bit_out;
reg   [9:0] datain_enc10bit;
reg   [9:0] enc10bit_r;
wire        inp_request_trig;
reg         send_out_trig;
reg   [2:0] send_count;
wire  [9:0] dout_dbg;
wire        wr_en_dbg;
wire  [9:0] din_dbg;
wire  [9:0] din_fifo_dbg;
wire        wr_en_fifo_dbg;
wire        BUSY;
wire        code_err;
wire        disp_err;


// Instances 
Elink_to_FIFO U_0( 
   .DATA1bitIN     (DATA1bitIN), 
   .bitCLKx2       (bitCLKx2), 
   .efifoRe        (efifoRe), 
   .swap_input     (swap_input), 
   .bitCLK         (bitCLK), 
   .efifoRclk      (bitCLK), 
   .efifoEmpty     (efifoEmpty), 
   .fifo_flush     (rst), 
   .efifoFull      (efifoFull), 
   .efifoDout      (efifoDout), 
   .elink2bit      (EDATA_2bit), 
   .wr_en_dbg      (wr_en_dbg), 
   .dout_dbg       (dout_dbg), 
   .bitCLKx4       (bitCLKx4), 
   .reverse_rx     (reverse_rx), 
   .din_dbg        (din_dbg), 
   .din_fifo_dbg   (din_fifo_dbg), 
   .wr_en_fifo_dbg (wr_en_fifo_dbg), 
   .rst            (rst)
); 

dec_8b10b_wrap U_3( 
   .ABCDEIFGHJ_IN (datain_enc10bit), 
   .RBYTECLK      (bitCLK), 
   .datain_valid  (datain_valid), 
   .reset         (rst), 
   .BUSY          (BUSY), 
   .HGFEDCBA      (HGFEDCBA), 
   .ISK           (ISK), 
   .code_err      (code_err), 
   .disp_err      (disp_err)
); 

demux8_Nbit U_1( 
   .sel          (send_count), 
   .EDATA_2bit   (EDATA_2bit), 
   .enc10bit_out (enc10bit_out)
); 

triger_counter #(3'b100,3'b011) U_2( 
   .rst          (rst), 
   .bitCLK       (bitCLK), 
   .request_trig (inp_request_trig)
); 

// HDL Embedded Text Block 2 eb2
always@(posedge bitCLK)
if (rst)
 datain_enc10bit <= 0;
else
begin
if (data_10b_en ==1)
 datain_enc10bit <= data_10b_in;
else
  datain_enc10bit <= enc10bit_out_dbg;     
end



// HDL Embedded Text Block 3 eb3
// HDL Embedded Text Block 2 eb2
// eb2 2      
always @(posedge bitCLK)
  begin
   if (rst)
      enc10bit_r <= 10'b0;
   else if (send_out_trig  == 1)
      begin
        enc10bit_r <= {enc10bit_out[0],enc10bit_out[1],enc10bit_out[2],enc10bit_out[3],enc10bit_out[4],enc10bit_out[5],enc10bit_out[6],enc10bit_out[7],enc10bit_out[8],enc10bit_out[9]};                                  
      end
  end
// HDL Embedded Text Block 4 eb4
// HDL Embedded Text Block 3 eb3
// eb3 3
assign   enc10bit_out_dbg =  enc10bit_r;


// HDL Embedded Text Block 5 eb5
always @(posedge bitCLK)
if (rst)
  send_out_trig <=0;
else
  begin
    send_out_trig <= inp_request_trig; //send_out_trig will be used later when sending out 2bits @bitCLK
  end

// HDL Embedded Text Block 7 eb7
// HDL Embedded Text Block 6 bitcounter
// eb6 6      
// Counter over the select signal
always @(posedge bitCLK)
  begin
     if (send_out_trig == 1)
        send_count <= 3'b0; 
     else  
      send_count <= send_count + 1'b1;
  end

endmodule // EMCI_Emulator

