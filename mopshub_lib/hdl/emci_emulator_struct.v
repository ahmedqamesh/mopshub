//
// Module mopshub_lib.EMCI_Emulator.struct
//
// Created:
//          by - dcs.dcs (chipdev2.physik.uni-wuppertal.de)
//          at - 17:04:20 08/11/21
//
// Generated by Mentor Graphics' HDL Designer(TM) 2019.4 (Build 4)
//

`resetall
`timescale 1ns/10ps
module EMCI_Emulator #(
   // synopsys template
   parameter GENERATE_FEI4B = 0,
   parameter Kchar_eop      = 8'b11011100,  // K28.6
   parameter Kchar_sop      = 8'b00111100   // K28.1
)
( 
   // Port Declarations
   input   wire           bitCLK, 
   input   wire           data_10b_en, 
   input   wire    [9:0]  data_10b_in, 
   input   wire           reset, 
   output  wire    [9:0]  enc10bit_out_dbg, 
   input   wire    [1:0]  tx_elink2bit, 
   input   wire           bitCLKx2, 
   input   wire           DATA1bitIN, 
   input   wire           swap_tx_bits, 
   input   wire           bitCLKx4, 
   input   wire           reverse_stream_10b, 
   output  wire           fifo_empty, 
   output  wire           fifo_full, 
   output  wire    [7:0]  HGFEDCBA, 
   output  wire    [1:0]  ISK, 
   output  wire    [9:0]  fifo_dout, 
   input   wire           fifo_rd_en, 
   input   wire           rst
);


// Internal Declarations


// Local declarations

// Internal signal declarations
wire  [9:0] enc10bit_out;
reg   [9:0] datain_enc10bit;
reg   [9:0] enc10bit_r;
wire        inp_request_trig;
reg         send_out_trig;
reg   [2:0] send_count;
wire  [9:0] dout_dbg;
wire  [9:0] din_fifo_dbg;
wire        wr_en_fifo_dbg;
wire        datain_valid      = 1'b1;
wire        BUSY;
wire        code_err;
wire        disp_err;
wire        data_rdy;
wire  [9:0] dec8b_Out;
wire        read_elink;
wire  [4:0] addr;                       // request to caninterface block
wire        cs_elink;
reg         dout_flag;
reg         buffer_en;


// Instances 
dec_8b10b_wrap dec_8b10b_wrap_emci( 
   .ABCDEIFGHJ_IN (datain_enc10bit), 
   .RBYTECLK      (bitCLK), 
   .datain_valid  (datain_valid), 
   .reset         (reset), 
   .BUSY          (BUSY), 
   .HGFEDCBA      (HGFEDCBA), 
   .ISK           (ISK), 
   .code_err      (code_err), 
   .disp_err      (disp_err)
); 

demux8_Nbit U_1( 
   .sel          (send_count), 
   .EDATA_2bit   (tx_elink2bit), 
   .enc10bit_out (enc10bit_out)
); 

elink_to_fifo #(0,GENERATE_FEI4B) elink_to_fifo_emci( 
   .DATA1bitIN         (DATA1bitIN), 
   .bitCLKx2           (bitCLKx2), 
   .swap_tx_bits       (swap_tx_bits), 
   .bitCLK             (bitCLK), 
   .efifoEmpty         (fifo_empty), 
   .fifo_flush         (reset), 
   .efifoFull          (fifo_full), 
   .fifo_dout          (fifo_dout), 
   .rx_elink2bit       (tx_elink2bit), 
   .dout_dbg           (dout_dbg), 
   .bitCLKx4           (bitCLKx4), 
   .din_fifo_dbg       (din_fifo_dbg), 
   .wr_en_fifo_dbg     (wr_en_fifo_dbg), 
   .reset              (reset), 
   .reverse_stream_10b (reverse_stream_10b), 
   .fifo_rd_en         (fifo_rd_en), 
   .fifo_wr_clk        (bitCLK), 
   .dec8b_Out          (dec8b_Out), 
   .data_rdy           (data_rdy)
); 

rec_elink_buf rec_elink_buf_emci( 
   .clk          (bitCLK), 
   .data_rec_in  (), 
   .buffer_en    (), 
   .rst          (rst), 
   .addr         (), 
   .data_rec_out ()
); 

triger_counter #(3'b100,3'b011) triger_counter_emci( 
   .rst          (reset), 
   .bitCLK       (bitCLK), 
   .request_trig (inp_request_trig)
); 

// HDL Embedded Text Block 2 eb2
always@(posedge bitCLK)
if (reset)
datain_enc10bit <= 0;
else
begin
  if (data_10b_en ==1)
  datain_enc10bit <= data_10b_in;
  else
  datain_enc10bit <= enc10bit_out_dbg;     
end





// HDL Embedded Text Block 3 eb3
// HDL Embedded Text Block 2 eb2
// eb2 2      
assign   enc10bit_out_dbg =  enc10bit_r;
always @(posedge bitCLK)
  begin
   if (reset)
      enc10bit_r <= 10'b0;
   else if (send_out_trig  == 1)
      begin
        enc10bit_r <= {enc10bit_out[0],enc10bit_out[1],enc10bit_out[2],enc10bit_out[3],enc10bit_out[4],enc10bit_out[5],enc10bit_out[6],enc10bit_out[7],enc10bit_out[8],enc10bit_out[9]};                                  
      end
  end

always @(posedge bitCLK)
  begin
     if (send_out_trig == 1)
        send_count <= 3'b0; 
     else  
      send_count <= send_count + 1'b1;
  end



// HDL Embedded Text Block 4 FIFO_Write1

assign read_elink = !fifo_empty; 
always@(fifo_dout)
  begin  
    if(read_elink == 1 && fifo_dout == {2'b00,Kchar_sop})// 0x3c = 0011 1100 SOP (if 8b10b)
      begin
        dout_flag = 1'b0; //SOP detected. raise the flag, write everything
        buffer_en = 1'b1;
      end   
   
    else if( read_elink == 1&& fifo_dout != {2'b00,Kchar_sop}&& fifo_dout != {2'b00,Kchar_eop})// data
      begin
        dout_flag = 1'b1;
      end   
    else if( read_elink == 1 && fifo_dout == {2'b00,Kchar_eop})// 0xdc = 1101 1100 (if 8b10b)
      begin
        dout_flag = 1'b0; //EOP detected. drop the flag
      end 
    else
      begin
        dout_flag = 1'b0;
      end 
  end
//
//always@(posedge bitCLK)
//  begin 
//if (reset)
//      begin
//        buffer_en <= 1'b0;
//      end   
//  
//  else if()
//      begin
//        buffer_en <= 1'b1;
//      end 
//  else    
//      begin
//        buffer_en <= buffer_en;
//      end     
//  end
//












































// HDL Embedded Text Block 5 eb5
always @(posedge bitCLK)
if (rst)
  send_out_trig <=0;
else
  begin
  send_out_trig <= inp_request_trig; //send_out_trig will be used later when sending out 2bits @bitCLK
  end








endmodule // EMCI_Emulator

