//
// Module mopshub_lib.EMCI_Emulator.struct
//
// Created:
//          by - dcs.dcs (chipdev2.physik.uni-wuppertal.de)
//          at - 21:09:34 08/23/21
//
// Generated by Mentor Graphics' HDL Designer(TM) 2019.4 (Build 4)
//

`resetall
`timescale 1ns/10ps
module EMCI_Emulator #(
   // synopsys template
   parameter GENERATE_FEI4B = 0,
   parameter Kchar_eop      = 8'b11011100,  // K28.6
   parameter Kchar_sop      = 8'b00111100   // K28.1
)
( 
   // Port Declarations
   input   wire            bitCLK, 
   input   wire    [1:0]   rx_elink2bit, 
   input   wire            bitCLKx2, 
   input   wire            swap_tx_bits, 
   input   wire            bitCLKx4, 
   input   wire            reverse_stream_10b_tx, 
   input   wire            reverse_stream_10b_rx, 
   input   wire            rst, 
   output  wire    [1:0]   tx_elink2bit, 
   input   wire            start_write_elink, 
   input   wire    [75:0]  data_rec_in, 
   input   wire            elink_delim_dbg
);


// Internal Declarations


// Local declarations

// Internal signal declarations
wire         reset;
wire         fifo_empty;
wire         elink_data_rdy;
wire  [9:0]  dec8b_Out_dbg;
wire         dec8b_rdy_dbg;
wire  [75:0] data_tra_out;
reg   [75:0] data_tra_76bit_reg  = 76'b0;
wire         end_read_elink;                // request to bridge FSM 
reg          fifo_data_sop       = 1'b0;
reg          fifo_data_eop       = 1'b0;
wire         irq_elink_tra;
wire         buffer_tra_en;
reg   [75:0] data_rec_76bit_reg  = 76'b0;
wire         start_read_elink;
wire         end_write_elink;               // request to bridge FSM
wire  [7:0]  data_rec_8bitout;
wire  [1:0]  data_rec_delimiter;
wire  [9:0]  data_rec_10bitout;
wire         cs_eread;
wire         cs_ewrite;
wire         irq_elink_rec;
wire  [75:0] gen_edata_tra;
wire         buffer_rec_en;
wire  [4:0]  addr_write;                    // request to caninterface block
wire  [4:0]  addr_read;                     // request to caninterface block
reg          fifo_data_packet;
wire  [9:0]  data_tra_8bitin;


// Instances 
elink_interface_rec_SM elink_interface_rec_SM_emci( 
   .abort             (), 
   .clk               (bitCLK), 
   .elink_delim_dbg   (elink_delim_dbg), 
   .rst               (rst), 
   .start_write_elink (start_write_elink), 
   .timeoutrst        (), 
   .addr_write        (addr_write), 
   .buffer_rec_en     (buffer_rec_en), 
   .cs_ewrite         (cs_ewrite), 
   .end_write_elink   (end_write_elink), 
   .irq_elink_rec     (irq_elink_rec), 
   .statedeb          ()
); 

elink_interface_tra_SM elink_interface_tra_SM_emci( 
   .abort            (), 
   .clk              (bitCLK), 
   .elink_delim_dbg  (elink_delim_dbg), 
   .fifo_data_eop    (fifo_data_eop), 
   .fifo_data_sop    (fifo_data_sop), 
   .fifo_elink_rdy   (elink_data_rdy), 
   .fifo_packet_rdy  (fifo_data_packet), 
   .rst              (rst), 
   .timeoutrst       (), 
   .addr_read        (addr_read), 
   .buffer_tra_en    (buffer_tra_en), 
   .cs_eread         (cs_eread), 
   .end_read_elink   (end_read_elink), 
   .irq_elink_tra    (irq_elink_tra), 
   .start_read_elink (start_read_elink), 
   .statedeb         ()
); 

elink_to_fifo #(0,GENERATE_FEI4B) elink_to_fifo_emci( 
   .rx_elink1bit       (), 
   .bitCLKx2           (bitCLKx2), 
   .swap_tx_bits       (swap_tx_bits), 
   .bitCLK             (bitCLK), 
   .fifo_empty         (fifo_empty), 
   .fifo_flush         (reset), 
   .fifo_full          (), 
   .fifo_dout          (data_tra_8bitin), 
   .rx_elink2bit       (rx_elink2bit), 
   .bitCLKx4           (bitCLKx4), 
   .reset              (reset), 
   .reverse_stream_10b (reverse_stream_10b_rx), 
   .fifo_rd_en         (cs_eread), 
   .fifo_wr_clk        (bitCLK), 
   .dec8b_Out_dbg      (dec8b_Out_dbg), 
   .dec8b_rdy_dbg      (dec8b_rdy_dbg), 
   .fifo_rd_clk        (bitCLK)
); 

fifo_to_elink fifo_to_elink_emci( 
   .fifo_wr_en   (cs_ewrite), 
   .bitCLKx2     (bitCLKx2), 
   .bitCLKx4     (bitCLKx4), 
   .rst          (reset), 
   .fifo_din     (data_rec_10bitout), 
   .tx_elink1bit (), 
   .tx_elink2bit (tx_elink2bit), 
   .fifo_flush   (reset), 
   .reverse_tx   (reverse_stream_10b_tx), 
   .swap_rx_bits (swap_tx_bits), 
   .bitCLK       (bitCLK), 
   .efifo_full   (), 
   .fifo_wr_clk  (bitCLK), 
   .fifo_rd_clk  (bitCLKx4)
); 

rec_elink_buf rec_elink_buf_emci( 
   .data_rec_in        (data_rec_in), 
   .addr               (addr_write), 
   .data_rec_8bitout   (data_rec_8bitout), 
   .data_rec_delimiter (data_rec_delimiter)
); 

tra_elink_buf rec_elink_buf_decoder( 
   .clk             (bitCLK), 
   .data_tra_8bitin (data_rec_8bitout), 
   .buffer_en       (buffer_rec_en), 
   .rst             (rst), 
   .addr            (addr_write), 
   .data_tra_out    (gen_edata_tra)
); 

tra_elink_buf tra_elink_buf_emci( 
   .clk             (bitCLK), 
   .data_tra_8bitin (data_tra_8bitin[7:0]), 
   .buffer_en       (buffer_tra_en), 
   .rst             (rst), 
   .addr            (addr_read), 
   .data_tra_out    (data_tra_out)
); 

// HDL Embedded Text Block 5 FIFO_read

//Check FIFO output
assign elink_data_rdy = !fifo_empty;
always@(data_tra_8bitin)
  begin
  if(data_tra_8bitin == {2'b10,Kchar_sop})// 0x3c = 0011 1100 SOP (if 8b10b)
      begin
        fifo_data_sop = 1'b1;
        fifo_data_eop = 1'b0;
        fifo_data_packet =1'b0;
      end 
    else if(cs_eread && data_tra_8bitin != {2'b10,Kchar_sop}&& data_tra_8bitin != {2'b01,Kchar_eop})// data
      begin
        fifo_data_sop = 1'b0;
        fifo_data_eop = 1'b0;
        fifo_data_packet = 1'b1;
      end   
    else if(data_tra_8bitin == {2'b01,Kchar_eop})// 0xdc = 1101 1100 (if 8b10b)
      begin
       fifo_data_sop = 1'b0;
       fifo_data_eop = 1'b1;
       fifo_data_packet =1'b0;
      end
    else  
      begin
       fifo_data_sop = 1'b0;
       fifo_data_eop = 1'b0;
       fifo_data_packet =1'b0;
      end    
  end




























































































































// HDL Embedded Text Block 6 Data_rdy_signal
//Save data into a buffer
always@(posedge bitCLK)
begin 
  if (rst)
  begin
    data_tra_76bit_reg <= 75'b0;
  end
  if (irq_elink_tra)
  begin
    data_tra_76bit_reg <= data_tra_out; 
  end 
  else
  begin
   data_tra_76bit_reg <= data_tra_76bit_reg; 
  end
end  



always@(posedge bitCLK)
begin 
  if (rst)
  begin
    data_rec_76bit_reg <= 75'b0;
  end
  if (irq_elink_rec)
  begin
    data_rec_76bit_reg  <= data_rec_in ; 
  end 
  else
  begin
   data_rec_76bit_reg  <= data_rec_76bit_reg ; 
  end
end  

























































































































// HDL Embedded Text Block 8 reset
assign reset = !rst;  



































































































































// HDL Embedded Text Block 9 FIFO_write
assign data_rec_10bitout ={data_rec_delimiter,data_rec_8bitout}; 







































































































































endmodule // EMCI_Emulator

