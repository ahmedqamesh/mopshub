//
// Module mopshub_lib.elink_to_fifo.struct
//
// Created:
//          by - dcs.dcs (chipdev2.physik.uni-wuppertal.de)
//          at - 19:00:30 08/19/21
//
// Generated by Mentor Graphics' HDL Designer(TM) 2019.4 (Build 4)
//

`resetall
`timescale 1ns/10ps
module elink_to_fifo #(
   // synopsys template
   parameter serialized_input = 0,
   parameter GENERATE_FEI4B   = 0
)
( 
   // Port Declarations
   input   wire           DATA1bitIN, 
   input   wire           bitCLKx2, 
   input   wire           swap_tx_bits, 
   input   wire           bitCLK, 
   output  wire           fifo_empty, 
   input   wire           fifo_flush, 
   output  wire           fifo_full, 
   output  wire    [9:0]  fifo_dout, 
   input   wire    [1:0]  rx_elink2bit, 
   input   wire           bitCLKx4, 
   input   wire           reset, 
   input   wire           reverse_stream_10b, 
   input   wire           fifo_rd_en, 
   input   wire           fifo_wr_clk, 
   output  wire    [9:0]  dec8b_Out_dbg, 
   output  wire           dec8b_rdy_dbg, 
   input   wire           fifo_rd_clk
);


// Internal Declarations


// Local declarations

// Internal signal declarations
reg  [1:0] DATA2bitIN  = 2'b0;
reg  [1:0] shreg2bit   = 2'b0;


// Instances 
elink_proc_in_dec8b10b #(GENERATE_FEI4B) elink_proc_in_dec8b10b0( 
   .DATA_IN            (DATA2bitIN), 
   .bitCLK             (bitCLK), 
   .bitCLKx4           (bitCLKx4), 
   .reset              (reset), 
   .swap_tx_bits       (swap_tx_bits), 
   .reverse_stream_10b (reverse_stream_10b), 
   .data_rdy           (dec8b_rdy_dbg), 
   .HGFEDCBA           (dec8b_Out_dbg[7:0]), 
   .ISK                (dec8b_Out_dbg[9:8])
); 

fifo_RXelink_wrap fifo_RXelink_wrap0( 
   .bitClk      (bitCLK), 
   .din         (dec8b_Out_dbg), 
   .din_rdy     (dec8b_rdy_dbg), 
   .fifo_rd_clk (fifo_rd_clk), 
   .fifo_wr_clk (fifo_wr_clk), 
   .flush_fifo  (fifo_flush), 
   .rd_en_fifo  (fifo_rd_en), 
   .reset       (reset), 
   .dout_fifo   (fifo_dout), 
   .empty_fifo  (fifo_empty), 
   .full_fifo   (fifo_full)
); 

// HDL Embedded Text Block 4 eb4
// Serialization
if (serialized_input == 0)begin:GBT_frame_case
  always@(posedge bitCLK)
  if (reset)
    begin
     DATA2bitIN <= 2'b0;
    end
  else
    begin
      if(swap_tx_bits)
      DATA2bitIN <= {rx_elink2bit[0],rx_elink2bit[1]}; 
      else
      DATA2bitIN <= rx_elink2bit;
    end 
  end
else begin:actual_elink_case
  always@(posedge bitCLKx2)
    if (reset)
       shreg2bit <= 2'b0;
    else
      shreg2bit <= {DATA1bitIN,shreg2bit[1]};
    
    
  always@(posedge bitCLK)
    if (reset)
      DATA2bitIN <= 2'b0;
  else
    begin
      if(swap_tx_bits)
        DATA2bitIN <= {shreg2bit[0],shreg2bit[1]}; 
      else
        DATA2bitIN <= shreg2bit;
    end  
end                                       
 














endmodule // elink_to_fifo

