//
// Module mopshub_lib.elink_to_fifo.struct
//
// Created:
//          by - dcs.dcs (chipdev2.physik.uni-wuppertal.de)
//          at - 15:02:00 09/27/21
//
// Generated by Mentor Graphics' HDL Designer(TM) 2019.4 (Build 4)
//

`resetall
`timescale 1ns/10ps
module elink_to_fifo #(
   // synopsys template
   parameter generate_mopshub = 0,
   parameter serialized_input = 1
)
( 
   // Port Declarations
   input   wire           rx_elink1bit, 
   input   wire           clk_80, 
   input   wire           swap_rx_bits, 
   input   wire           bitCLK, 
   output  wire           fifo_empty, 
   input   wire           fifo_flush, 
   output  wire           fifo_full, 
   output  wire    [9:0]  fifo_dout, 
   input   wire    [1:0]  rx_elink2bit, 
   input   wire           clk, 
   input   wire           reverse_rx, 
   input   wire           fifo_rd_en, 
   input   wire           fifo_wr_clk, 
   output  wire    [9:0]  dec10b_Out_dbg, 
   output  wire           dec10b_rdy_dbg, 
   input   wire           fifo_rd_clk, 
   input   wire           rst
);


// Internal Declarations


// Local declarations

// Internal signal declarations
reg  [1:0] data_2bit_in  = 2'b0;
reg  [1:0] din2bit_r     = 2'b0;


// Instances 
elink_proc_in_dec8b10b #(generate_mopshub) elink_proc_in_dec8b10b0( 
   .DATA_IN            (data_2bit_in), 
   .bitCLK             (bitCLK), 
   .clk                (clk), 
   .swap_rx_bits       (swap_rx_bits), 
   .reverse_stream_10b (reverse_rx), 
   .data_rdy           (dec10b_rdy_dbg), 
   .HGFEDCBA           (dec10b_Out_dbg[7:0]), 
   .ISK                (dec10b_Out_dbg[9:8]), 
   .rst                (rst)
); 

fifo_RXelink_wrap fifo_RXelink_wrap0( 
   .clk         (clk), 
   .din         (dec10b_Out_dbg), 
   .din_rdy     (dec10b_rdy_dbg), 
   .fifo_rd_clk (fifo_rd_clk), 
   .fifo_wr_clk (fifo_wr_clk), 
   .flush_fifo  (fifo_flush), 
   .rd_en_fifo  (fifo_rd_en), 
   .rst         (rst), 
   .dout_fifo   (fifo_dout), 
   .empty_fifo  (fifo_empty), 
   .full_fifo   (fifo_full)
); 

// HDL Embedded Text Block 4 eb4
// Serialization
if (serialized_input == 0)begin:GBT_frame_case
  always@(posedge clk)
  if (!rst)
    begin
     data_2bit_in <= 2'b0;
    end
  else
    begin
      if(swap_rx_bits)
      data_2bit_in <= {rx_elink2bit[0],rx_elink2bit[1]}; 
      else
      data_2bit_in <= rx_elink2bit;
    end 
  end
else begin:Elink_frame_case
  always@(posedge clk_80 )
    if (!rst)
       din2bit_r <= 2'b0;
    else
      din2bit_r <= {rx_elink1bit,din2bit_r[1]};

///swap the 2bits  
  always@(posedge clk)
    if (!rst)
      data_2bit_in <= 2'b0;
  else
    begin
      if(swap_rx_bits)
        data_2bit_in <= din2bit_r;
      else
        data_2bit_in <= {din2bit_r[0],din2bit_r[1]};
    end      

end                                       
 





























endmodule // elink_to_fifo

