//
// Module mopshub_lib.Elink_to_FIFO.struct
//
// Created:
//          by - dcs.dcs (chipdev2.physik.uni-wuppertal.de)
//          at - 16:54:37 04/04/21
//
// Generated by Mentor Graphics' HDL Designer(TM) 2018.1 (Build 12)
//

`resetall
`timescale 1ns/10ps
module Elink_to_FIFO #(
   // synopsys template
   parameter serialized_input = 1
)
( 
   // Port Declarations
   input   wire           DATA1bitIN, 
   input   wire           bitCLKx2, 
   output  wire    [9:0]  din_dbg, 
   input   wire           efifoRe, 
   input   wire           swap_input, 
   output  reg            wrEn_dbg, 
   input   wire           bitCLK, 
   input   wire           efifoRclk, 
   output  wire           efifoEmpty, 
   input   wire           fifo_flush, 
   output  wire           efifoFull, 
   output  wire    [9:0]  efifoDout, 
   input   wire    [1:0]  elink2bit, 
   output  wire    [9:0]  dout_dbg
);


// Internal Declarations


// Local declarations

// Internal signal declarations
wire        DATA_RDY;
wire        busyOut;
wire  [9:0] DATA_OUT;
wire        code_err;
reg   [1:0] dataIn_r         = 0;
wire        datain_valid;
wire  [9:0] dec8bOut;
reg   [9:0] din_efw;
wire        disp_err;
reg         drdy_efw;
wire        rst;
reg   [1:0] shreg2bit        = 0;
reg   [1:0] DATA2bitIN       = 0;
wire  [1:0] dataIn_s;
reg         datain_valid_r   = 0;
wire  [7:0] HGFEDCBA;
wire  [1:0] ISK;


// Instances 
EPROC_IN2_DEC8b10b U_2( 
   .bitCLK         (bitCLK), 
   .edataIN        (dataIn_s), 
   .rst            (rst), 
   .swap_inputbits (swap_input), 
   .DATA_OUT       (DATA_OUT), 
   .DATA_RDY       (DATA_RDY)
); 

dec_8b10b_wrap U_0( 
   .ABCDEIFGHJ_IN (DATA_OUT), 
   .RBYTECLK      (bitCLK), 
   .datain_valid  (datain_valid), 
   .reset         (rst), 
   .BUSY          (busyOut), 
   .HGFEDCBA      (HGFEDCBA), 
   .ISK           (ISK), 
   .code_err      (code_err), 
   .disp_err      (disp_err)
); 

elinkRXfifo_wrap U_1( 
   .bitClk       (bitCLK), 
   .rst          (rst), 
   .flush_fifo   (fifo_flush), 
   .din          (din_efw), 
   .din_rdy      (drdy_efw), 
   .rd_clk_elink (efifoRclk), 
   .rd_en_elink  (efifoRe), 
   .empty_elink  (efifoEmpty), 
   .full_elink   (efifoFull), 
   .dout_elink   (efifoDout)
); 

// HDL Embedded Text Block 1 eb1
// eb1 1
assign dout_dbg = DATA_OUT;                                      
always@(posedge bitCLK)
if (rst)
  begin
    drdy_efw <= 0;
    din_efw  <= 10'b0;
    wrEn_dbg <= 0;
    //din_dbg  <= 10'b0;
  end
else
  begin
    drdy_efw <= DATA_RDY;
    din_efw  <= dec8bOut;
    wrEn_dbg <= DATA_RDY;
    //din_dbg  <= dec8bOut;
  end  










// HDL Embedded Text Block 2 eb2
// eb2 2     
always@(swap_input, DATA2bitIN)
if (swap_input)//No swap equal to 0
   dataIn_r = DATA2bitIN;
else
   dataIn_r = {DATA2bitIN[0],DATA2bitIN[1]} ;                                   
                              





// HDL Embedded Text Block 3 eb3
// eb1 1                                        
//always@(posedge bitCLKx2)
//if (rst)
//  begin
//   shreg2bit <= 2'b0;
//  end
//else
//  begin
//  shreg2bit <= {DATA1bitIN,shreg2bit[1]};
//  end  
//
//
//




// HDL Embedded Text Block 4 eb4
// eb1 1                                        
//always@(posedge bitCLK)
//if (rst)
//  begin
//   DATA2bitIN <= 2'b0;
//  end
//else
//  begin
//  DATA2bitIN <= shreg2bit;
//  end  





// HDL Embedded Text Block 5 eb5
// eb1 1 
assign  datain_valid = datain_valid_r;                                      
always@(posedge bitCLK)
if (rst)
  begin
   DATA2bitIN <= 2'b0;
   datain_valid_r <=1'b0;
  end
else
  begin
  DATA2bitIN <= elink2bit;
  datain_valid_r <=1'b1;
  end  









// HDL Embedded Text Block 6 eb6
// eb2 2     
assign dataIn_s = dataIn_r;

// HDL Embedded Text Block 7 eb7
// eb1 1
assign dec8bOut[7:0] = HGFEDCBA ; 
assign dec8bOut[9:8] = ISK; 
assign din_dbg = dec8bOut  ;                                    











endmodule // Elink_to_FIFO

