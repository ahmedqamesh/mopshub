//
// Module mopshub_lib.ethernet_core.struct
//
// Created:
//          by - dcs.dcs (chipdev2.physik.uni-wuppertal.de)
//          at - 14:41:12 12/14/23
//
// Generated by Mentor Graphics' HDL Designer(TM) 2019.4 (Build 4)
//

`resetall
`timescale 1ns/10ps
module ethernet_core( 
   // Port Declarations
   // Port Declarations
   input   wire            clk125,                 // Ethernet domain clock(125MHz)
   input   wire    [75:0]  data_rec_uplink,        // received data buffer from elink
   input   wire    [75:0]  data_tra_downlink,      // trasmit data buffer from elink
   input   wire    [3:0]   dip_sw,                 // mac_addr control
   input   wire            gmii_rx_dv,             // GMII received control signal to MAC.
   input   wire            gmii_rx_er,             // GMII received control signal to MAC.
   input   wire    [7:0]   gmii_rxd,               // GMII received data to MAC
   input   wire            mmcm_locked,            // GMII signal for stable output
   input   wire            resetdone,              // GMII signal for complete reset sequence
   output  wire            clk_ipb,                // IPbus domain clock (31MHz)
   output  wire    [4:0]   configuration_vector,   // GMII configuration signal
   output  wire    [75:0]  data_rec_elink_dbg,     // received data buffer from IPbus
   output  wire            gmii_tx_en,             // GMII transmit control signal from MAC
   output  wire            gmii_tx_er,             // GMII transmit control signal from MAC
   output  wire    [7:0]   gmii_txd,               //  GMII Transmit data from MAC.
   output  wire            led,                    // status LED signal
   output  wire            rst_eth,                // ethernet startup reset
   output  wire            sfp_enable,             // enable SFP signal
   output  wire            start_write_elink_dbg,  // fifo status port flag from IPbus
   input   wire            clk,                    // system clock (40MHz)
   input   wire            rst,                    // reset
   input   wire            irq_elink_dbg_in,       // control the write operation from ethernet fifo
   input   wire            start_read_eth_fifo,    // control the read operation from ethernet fifo
   input   wire            sysclk_n,               // free-running clock (125MHz)
   input   wire            sysclk_p                // free-running clock (125MHz)
);

// Internal Declarations


// Local declarations

// Internal signal declarations
// Internal Declarations


// Local declarations

// Internal signal declarations
wire         start_write_elink_fifo_dbg;
wire         rst_fifo;
wire  [75:0] data_rec_ethernet;
wire         eth_locked;
wire  [7:0]  leds;
wire  [7:0]  mac_rx_data;                  // -- AXI4 style MAC signals
wire         mac_rx_error;
wire         mac_rx_last;
wire         mac_rx_valid;
wire  [7:0]  mac_tx_data;
wire         mac_tx_error;
wire         mac_tx_last;
wire         mac_tx_ready;
wire         mac_tx_valid;
wire  [0:0]  tx_axis_mac_tuser;
wire         wena_w_fifo;
wire  [75:0] data_tra_downlink_ffout;
wire         start_read_elink_dbg;
reg          irq_elink_dbg_fifo;
wire         fifo_flush_dbg;
wire         tx_fifo_empty;
wire         fifo_full;
wire         rx_fifo_empty;
wire         irq_tra_sig;


// Instances 
//  Instances
// 
ethernet_emac_wrapper ethernet_emac_wrapper0( 
   .clk125             (clk125), 
   .eth_locked         (eth_locked), 
   .rst_eth            (rst_eth), 
   .rx_axis_mac_tdata  (mac_rx_data), 
   .rx_axis_mac_tvalid (mac_rx_valid), 
   .rx_axis_mac_tlast  (mac_rx_last), 
   .rx_axis_mac_tuser  (mac_rx_error), 
   .tx_axis_mac_tdata  (mac_tx_data), 
   .tx_axis_mac_tvalid (mac_tx_valid), 
   .tx_axis_mac_tlast  (mac_tx_last), 
   .tx_axis_mac_tuser  (tx_axis_mac_tuser), 
   .tx_axis_mac_tready (mac_tx_ready), 
   .gmii_txd           (gmii_txd), 
   .gmii_tx_en         (gmii_tx_en), 
   .gmii_tx_er         (gmii_tx_er), 
   .gmii_rxd           (gmii_rxd), 
   .gmii_rx_dv         (gmii_rx_dv), 
   .gmii_rx_er         (gmii_rx_er)
); 

ethernet_ipbus ethernet_ipbus0( 
   .rst_eth               (rst_eth), 
   .eth_locked            (eth_locked), 
   .mac_rx_data           (mac_rx_data), 
   .mac_rx_valid          (mac_rx_valid), 
   .mac_rx_last           (mac_rx_last), 
   .mac_rx_error          (mac_rx_error), 
   .mac_tx_data           (mac_tx_data), 
   .mac_tx_valid          (mac_tx_valid), 
   .mac_tx_last           (mac_tx_last), 
   .mac_tx_error          (mac_tx_error), 
   .mac_tx_ready          (mac_tx_ready), 
   .clk125                (clk125), 
   .sysclk_p              (sysclk_p), 
   .sysclk_n              (sysclk_n), 
   .clk_ipb_o             (clk_ipb), 
   .start_write_elink_dbg (start_write_elink_fifo_dbg), 
   .start_read_elink_dbg  (start_read_elink_dbg), 
   .fifo_flush_dbg        (fifo_flush_dbg), 
   .irq_tra_sig           (irq_tra_sig), 
   .data_tra_downlink     (data_tra_downlink_ffout), 
   .data_rec_uplink       (data_rec_uplink), 
   .data_rec_ethernet     (data_rec_ethernet), 
   .leds                  (leds), 
   .dip_sw                (dip_sw)
); 

fifo_async #(76,15,"False") fifo_async0( 
   .wclk      (clk), 
   .wrst_n    (rst_fifo), 
   .winc      (irq_elink_dbg_in), 
   .wdata     (data_tra_downlink), 
   .wfull     (), 
   .awfull    (), 
   .rclk      (clk_ipb), 
   .rrst_n    (rst_fifo), 
   .rinc      (start_read_elink_dbg), 
   .dout_fifo (data_tra_downlink_ffout), 
   .rempty    (rx_fifo_empty), 
   .arempty   ()
); 

fifo_async #(76,15) fifo_async1( 
   .wclk      (clk_ipb), 
   .wrst_n    (rst_fifo), 
   .winc      (wena_w_fifo), 
   .wdata     (data_rec_ethernet), 
   .wfull     (fifo_full), 
   .awfull    (), 
   .rclk      (clk), 
   .rrst_n    (rst_fifo), 
   .rinc      (start_read_eth_fifo), 
   .dout_fifo (data_rec_elink_dbg), 
   .rempty    (tx_fifo_empty), 
   .arempty   ()
); 

// HDL Embedded Text Block 1 eb1
// HDL Embedded Text Block 2 eb2
assign sfp_enable = 1'b1;
assign configuration_vector =  5'b10000;
assign eth_locked = resetdone && mmcm_locked;
assign tx_axis_mac_tuser = mac_tx_error;
// HDL Embedded Text Block 4 eb4
 
//assign  debug_mode =1'b0;
initial irq_elink_dbg_fifo           = 1'b0;
assign led    = leds[0];
assign wena_w_fifo    = start_write_elink_fifo_dbg && !fifo_full;
assign rst_fifo = (rst && !fifo_flush_dbg);
////New Async FIFO
assign start_write_elink_dbg = !tx_fifo_empty;
assign irq_tra_sig  = !rx_fifo_empty;















































































endmodule // ethernet_core
// ethernet_core
