//
// Module mopshub_lib.mopshub_core_diff_ports.struct
//
// Created:
//          by - dcs.dcs (chipdev2.physik.uni-wuppertal.de)
//          at - 14:21:05 01/10/22
//
// Generated by Mentor Graphics' HDL Designer(TM) 2019.4 (Build 4)
//

`resetall
`timescale 1ns/10ps
module mopshub_core_diff_ports #(
   // synopsys template
   parameter n_buses              = 5'b111,
   parameter Kchar_eop            = 8'b11011100,  // K28.6
   parameter Kchar_sop            = 8'b00111100,  // K28.1
   parameter generate_mopshub     = 1'b1,
   parameter seialize_data_stream = 1'b0
)
( 
   // Port Declarations
   input   wire           clk, 
   input   wire           clk_100, 
   input   wire           clk_80, 
   input   wire    [1:0]  data_2bit_in, 
   input   wire           end_cnt_dbg, 
   input   wire           locked, 
   input   wire           osc_auto_trim_mopshub, 
   input   wire           reset, 
   input   wire           rx0, 
   input   wire           rx1, 
   input   wire           rx2, 
   input   wire           rx3, 
   input   wire           rx4, 
   input   wire           rx5, 
   input   wire           rx6, 
   input   wire           rx7, 
   output  wire           can_rec_dbg, 
   output  wire           can_tra_dbg, 
   output  wire           clk_100out_n, 
   output  wire           clk_100out_p, 
   output  wire           irq_elink_rec_dbg, 
   output  wire           irq_elink_tra_dbg, 
   output  wire           led, 
   output  wire           rx_data_rdy, 
   output  wire           tx0, 
   output  wire           tx1, 
   output  wire           tx2, 
   output  wire           tx3, 
   output  wire           tx4, 
   output  wire           tx5, 
   output  wire           tx6, 
   output  wire           tx7, 
   output  wire           tx_data_rdy, 
   output  wire           tx_fifo_full_rdy
);


// Internal Declarations


// Local declarations

// Internal signal declarations
wire         abort                = 1'b0;                                        // Upon receiving a reset message on the CANbus. FSM goes into a known state
wire  [4:0]  addr_read;                                                          // request to caninterface block
wire  [4:0]  addr_write;                                                         // request to caninterface block
wire         buffer_elink_en;
wire         buffer_en;
wire         buffer_tra_en;
wire  [4:0]  can_rec_select;
wire  [4:0]  can_tra_select;
wire         cnt_done             = 1'b0;
wire         counter_gen_en;
wire         cs_eread;
wire         cs_ewrite;
wire  [9:0]  data_rec_10bitout;
wire  [7:0]  data_rec_8bitout;
wire  [1:0]  data_rec_delimiter;
wire  [75:0] data_rec_in          = {5'h0C,7'h1,16'h0, 16'h0,8'h1,8'h0,16'h0};
wire  [75:0] data_rec_uplink;
wire  [9:0]  data_tra_10bitin;
wire  [75:0] data_tra_in_2;
wire  [75:0] data_tra_out;
wire         done_trim_osc;
wire         enc_stream           = 1'b1;
wire         end_init;
wire         end_read_elink;
wire         end_read_elink2;
wire         end_trim_bus;
wire         end_write_elink;
wire         end_write_elink2     = 1'b0;
reg          fifo_data_eop        = 1'b0;
reg          fifo_data_packet;
reg          fifo_data_sop        = 1'b0;
wire         fifo_empty;
wire         fifo_flush;
wire         full_fifo;
wire         irq_can_rec_dbg;
wire         irq_can_tra_dbg;
wire         irq_elink_rec        = 0;
wire         irq_elink_tra;
wire         irq_elink_tra2;
wire  [4:0]  power_bus_cnt;
wire         power_bus_en;
wire         power_bus_en_sig;
wire         rst;
wire         rst_cnt;
wire         rst_mops_dbg;
wire         rx_data_rdy_in       = 0;
wire         rx_edata_rdy;
wire         rx_fifo_full;
wire         rx_fifo_full_rdy;
wire         sign_on_sig;
wire         start_init;
wire         start_read_elink;
wire         start_read_elink2;
wire         start_trim_ack;
wire         start_write_elink;
wire         start_write_elink2;
wire  [2:0]  state_o;
wire  [6:0]  statedeb_tra;
wire         test_can_core        = 1'b0;
wire         timeoutrst           = 1'b0;                                        // timeout reset signal to the state machine in case bridge controller is not respoding for a specified time
wire         tx_data_rdy_in       = 0;
wire         tx_fifo_full_rdy_in  = 0;
wire         wait_sign_in         = 1'b0;


// Instances 
buffer_rec_elink buffer_rec_elink000( 
   .data_rec_in        (data_rec_in), 
   .addr               (addr_write), 
   .data_rec_8bitout   (data_rec_8bitout[7:0]), 
   .data_rec_delimiter (data_rec_delimiter)
); 

buffer_tra_elink tra_elink_buf0( 
   .clk             (clk), 
   .data_tra_8bitin (data_tra_10bitin[7:0]), 
   .buffer_en       (buffer_elink_en), 
   .rst             (rst), 
   .addr            (addr_read), 
   .data_tra_out    (data_tra_out)
); 

elink_data_gen_SM elink_data_gen_SM0( 
   .clk               (clk), 
   .reset             (reset), 
   .irq_elink_tra     (irq_elink_tra2), 
   .state_o           (state_o), 
   .start_read_elink  (start_read_elink2), 
   .end_read_elink    (end_read_elink2), 
   .cnt_done          (cnt_done), 
   .buffer_en         (buffer_en), 
   .data_tra_in       (data_tra_in_2), 
   .rst_cnt           (rst_cnt), 
   .counter_gen_en    (counter_gen_en), 
   .start_write_elink (start_write_elink), 
   .end_write_elink   (end_write_elink), 
   .test_can_core     (test_can_core)
); 

elink_interface_rec_SM elink_interface_rec_SM0( 
   .abort             (), 
   .clk               (clk), 
   .rst               (rst), 
   .start_write_elink (start_write_elink), 
   .timeoutrst        (), 
   .addr_write        (addr_write), 
   .buffer_rec_en     (), 
   .cs_ewrite         (cs_ewrite), 
   .end_write_elink   (end_write_elink), 
   .irq_elink_rec     (), 
   .statedeb          ()
); 

elink_interface_tra_SM elink_interface_tra_SM0( 
   .abort            (abort), 
   .clk              (clk), 
   .fifo_data_eop    (fifo_data_eop), 
   .fifo_data_sop    (fifo_data_sop), 
   .fifo_elink_rdy   (rx_edata_rdy), 
   .fifo_packet_rdy  (fifo_data_packet), 
   .rst              (rst), 
   .start_read_elink (start_read_elink), 
   .timeoutrst       (timeoutrst), 
   .addr_read        (addr_read), 
   .buffer_elink_en  (buffer_elink_en), 
   .buffer_tra_en    (buffer_tra_en), 
   .cs_eread         (cs_eread), 
   .end_read_elink   (end_read_elink), 
   .irq_elink_tra    (irq_elink_tra), 
   .statedeb         (statedeb_tra)
); 

elink_to_fifo #(generate_mopshub) elink_to_fifo0( 
   .fifo_empty     (), 
   .fifo_flush     (fifo_flush), 
   .fifo_full      (rx_fifo_full), 
   .fifo_dout      (), 
   .clk            (clk), 
   .fifo_rd_en     (), 
   .dec10b_Out_dbg (), 
   .data_2bit_in   (data_2bit_in), 
   .dec10b_rdy_dbg (), 
   .rst            (rst), 
   .enc_stream     (enc_stream)
); 

fifo_RXelink_wrap fifo_RXelink_wra1( 
   .clk        (clk), 
   .din        (data_rec_10bitout), 
   .din_rdy    (cs_ewrite), 
   .flush_fifo (fifo_flush), 
   .rd_en_fifo (cs_eread), 
   .dout_fifo  (data_tra_10bitin), 
   .empty_fifo (fifo_empty), 
   .full_fifo  (full_fifo)
); 

fifo_RXelink_wrap fifo_RXelink_wra2( 
   .clk        (), 
   .din        (), 
   .din_rdy    (), 
   .flush_fifo (), 
   .rd_en_fifo (), 
   .dout_fifo  (), 
   .empty_fifo (), 
   .full_fifo  ()
); 

mopshub_core #(n_buses) mopshub_core0( 
   .buffer_en             (buffer_tra_en), 
   .clk                   (clk), 
   .data_tra_downlink     (data_tra_out), 
   .end_cnt_dbg           (end_cnt_dbg), 
   .end_read_elink        (end_read_elink), 
   .end_write_elink       (end_write_elink2), 
   .irq_elink_tra         (irq_elink_tra), 
   .osc_auto_trim_mopshub (osc_auto_trim_mopshub), 
   .rst                   (rst), 
   .rx0                   (rx0), 
   .rx1                   (rx1), 
   .rx2                   (rx2), 
   .rx3                   (rx3), 
   .rx4                   (rx4), 
   .rx5                   (rx5), 
   .rx6                   (rx6), 
   .rx7                   (rx7), 
   .wait_sign_in          (wait_sign_in), 
   .can_rec_select        (can_rec_select), 
   .can_tra_select        (can_tra_select), 
   .data_rec_uplink       (data_rec_uplink), 
   .done_trim_osc_all     (done_trim_osc), 
   .end_init              (end_init), 
   .end_trim_bus          (end_trim_bus), 
   .irq_can_rec           (irq_can_rec_dbg), 
   .irq_can_tra           (irq_can_tra_dbg), 
   .power_bus_cnt         (power_bus_cnt), 
   .power_bus_en          (power_bus_en_sig), 
   .rst_mops_dbg          (rst_mops_dbg), 
   .sign_on_sig           (sign_on_sig), 
   .start_init            (start_init), 
   .start_read_elink      (start_read_elink), 
   .start_trim_ack        (start_trim_ack), 
   .start_write_elink     (start_write_elink2), 
   .tx0                   (tx0), 
   .tx1                   (tx1), 
   .tx2                   (tx2), 
   .tx3                   (tx3), 
   .tx4                   (tx4), 
   .tx5                   (tx5), 
   .tx6                   (tx6), 
   .tx7                   (tx7)
); 

output_diff_buff_clk U_0( 
   .clk_in    (clk_100), 
   .locked    (locked), 
   .clk_out_p (clk_100out_p), 
   .clk_out_n (clk_100out_n)
); 

top_led_for_synth top_led_for_synth0( 
   .clk                 (clk), 
   .irq_can_rec_dbg     (irq_can_rec_dbg), 
   .irq_can_tra_dbg     (irq_can_tra_dbg), 
   .irq_elink_rec       (irq_elink_rec), 
   .irq_elink_tra       (irq_elink_tra), 
   .reset               (reset), 
   .rx_data_rdy_in      (rx_data_rdy_in), 
   .rx_fifo_full_rdy_in (rx_fifo_full), 
   .tx_data_rdy_in      (tx_data_rdy_in), 
   .tx_fifo_full_rdy_in (tx_fifo_full_rdy_in), 
   .can_rec_dbg         (can_rec_dbg), 
   .can_tra_dbg         (can_tra_dbg), 
   .irq_elink_rec_dbg   (irq_elink_rec_dbg), 
   .irq_elink_tra_dbg   (irq_elink_tra_dbg), 
   .rx_data_rdy         (rx_data_rdy), 
   .rx_fifo_full_rdy    (rx_fifo_full_rdy), 
   .tx_data_rdy         (tx_data_rdy), 
   .tx_fifo_full_rdy    (tx_fifo_full_rdy)
); 

top_led_test top_led_test( 
   .reset (reset), 
   .clk   (clk), 
   .led   (led)
); 

// HDL Embedded Text Block 2 eb2
// eb1 1   
assign rst = !reset;   
assign power_bus_en = power_bus_en_sig & rst;                                 
// HDL Embedded Text Block 7 FIFO_read2

//Check FIFO output
assign rx_edata_rdy = !fifo_empty;
always@(*)//data_tra_10bitin or cs_eread)
  begin
  if(data_tra_10bitin == {2'b10,Kchar_sop})// 0x3c = 0011 1100 SOP (if 8b10b)
      begin
        fifo_data_sop = 1'b1;
        fifo_data_eop = 1'b0;
        fifo_data_packet =1'b0;
      end 
    else if(cs_eread && data_tra_10bitin != {2'b10,Kchar_sop}&& data_tra_10bitin != {2'b01,Kchar_eop} && data_tra_10bitin[9:8] == 2'b00)// data
      begin
        fifo_data_sop = 1'b0;
        fifo_data_eop = 1'b0;
        fifo_data_packet = 1'b1;
      end   
    else if(data_tra_10bitin == {2'b01,Kchar_eop})// 0xdc = 1101 1100 (if 8b10b)
      begin
       fifo_data_sop = 1'b0;
       fifo_data_eop = 1'b1;
       fifo_data_packet =1'b0;
      end
    else  
      begin
       fifo_data_sop = 1'b0;
       fifo_data_eop = 1'b0;
       fifo_data_packet =1'b0;
      end    
  end








































































































































// HDL Embedded Text Block 10 FIFO_write1
assign data_rec_10bitout ={data_rec_delimiter,data_rec_8bitout}; 












































































































































// HDL Embedded Text Block 11 FIFO_write2
assign fifo_flush = !rst;  













































































































































endmodule // mopshub_core_diff_ports

