//
// Module mopshub_lib.mopshub_top.struct
//
// Created:
//          by - dcs.dcs (chipdev2.physik.uni-wuppertal.de)
//          at - 22:29:35 07/22/21
//
// Generated by Mentor Graphics' HDL Designer(TM) 2019.4 (Build 4)
//

`resetall
`timescale 1ns/10ps
module mopshub_top #(
   // synopsys template
   parameter max_cnt_size = 5,
   parameter n_buses      = 5'b11111
)
( 
   // Port Declarations
   input   wire            buffer_en, 
   input   wire    [4:0]   can_rec_select, 
   input   wire            clk, 
   input   wire    [75:0]  data_tra_uplink, 
   input   wire            end_cnt_dbg, 
   input   wire            end_read_elink, 
   input   wire            end_write_elink, 
   input   wire            endwait, 
   input   wire            irq_elink, 
   input   wire            rst, 
   input   wire            rx0, 
   output  wire    [75:0]  data_rec_uplink, 
   output  wire            priority_sig, 
   output  wire            send_mes_can_done, 
   output  wire            send_mes_elink, 
   output  wire            sign_on_sig, 
   output  wire            start_init, 
   output  wire            start_read_elink, 
   output  wire            start_write_elink, 
   output  wire            tx0
);


// Internal Declarations


// Local declarations

// Internal signal declarations
wire  [4:0]  addr_can;
wire  [4:0]  can_tra_select;
wire  [4:0]  count_bus_dbg;
wire         enable_cs;
wire         end_can_proc;
wire         init_bus_select;
wire         irq_can_rec;
wire         irq_can_tra;
wire  [15:0] read_can;
wire         read_sig_can_n;
wire         rx1;
wire         rx2;
wire         rx3;
wire         rx4;
wire         rx5;
wire         rx6;
wire         rx7;
wire         tx1;
wire         tx2;
wire         tx3;
wire         tx4;
wire         tx5;
wire         tx6;
wire         tx7;
wire  [15:0] write_can;
wire         write_sig_can_n;


// Instances 
canakari_top canakari_top0( 
   .clk             (clk), 
   .rst             (rst), 
   .address         (addr_can), 
   .bus_tra_select  (can_tra_select), 
   .writedata       (write_can), 
   .write_n_sig     (write_sig_can_n), 
   .irq_can_tra     (irq_can_tra), 
   .irq_can_rec     (irq_can_rec), 
   .rx0             (rx0), 
   .rx2             (rx2), 
   .rx3             (rx3), 
   .rx4             (rx4), 
   .rx5             (rx5), 
   .rx6             (rx6), 
   .rx7             (rx7), 
   .tx0             (tx0), 
   .tx1             (tx1), 
   .tx2             (tx2), 
   .tx3             (tx3), 
   .tx4             (tx4), 
   .tx5             (tx5), 
   .tx6             (tx6), 
   .tx7             (tx7), 
   .rx1             (rx1), 
   .bus_rec_select  (), 
   .choose_bus_end  (end_can_proc), 
   .genrst          (), 
   .endwait         (), 
   .init_bus_select (init_bus_select), 
   .restirq         (), 
   .read_n_sig      (read_sig_can_n), 
   .enable_cs_sig   (enable_cs), 
   .readdata        (read_can), 
   .count_bus_dbg   (count_bus_dbg)
); 

mopshub_core #(max_cnt_size,n_buses) mopshub_core0( 
   .clk               (clk), 
   .rst               (rst), 
   .data_rec_uplink   (data_rec_uplink), 
   .data_tra_uplink   (data_tra_uplink), 
   .end_read_elink    (end_read_elink), 
   .end_write_elink   (end_write_elink), 
   .irq_elink         (irq_elink), 
   .start_read_elink  (start_read_elink), 
   .start_write_elink (start_write_elink), 
   .send_mes_elink    (send_mes_elink), 
   .sign_on_sig       (sign_on_sig), 
   .endwait           (endwait), 
   .buffer_en         (buffer_en), 
   .send_mes_can_done (send_mes_can_done), 
   .can_tra_select    (can_tra_select), 
   .can_rec_select    (can_rec_select), 
   .end_can_proc      (end_can_proc), 
   .priority_sig      (priority_sig), 
   .end_cnt_dbg       (end_cnt_dbg), 
   .address           (addr_can), 
   .write_can         (write_can), 
   .write_sig_can_n   (write_sig_can_n), 
   .read_can          (read_can), 
   .read_sig_can_n    (read_sig_can_n), 
   .enable_cs         (enable_cs), 
   .irq_can_tra       (irq_can_tra), 
   .irq_can_rec       (irq_can_rec), 
   .start_init        (start_init)
); 


endmodule // mopshub_top

