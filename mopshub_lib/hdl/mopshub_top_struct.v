//
// Module mopshub_lib.mopshub_top.struct
//
// Created:
//          by - dcs.dcs (chipdev2.physik.uni-wuppertal.de)
//          at - 10:41:56 07/01/22
//
// Generated by Mentor Graphics' HDL Designer(TM) 2019.4 (Build 4)
//

`resetall
`timescale 1ns/10ps
module mopshub_top( 
   // Port Declarations
   input   wire           clk, 
   input   wire    [9:0]  data_10bit_in_dbg, 
   input   wire           dbg_elink, 
   input   wire           dbg_spi, 
   input   wire           endwait_all, 
   input   wire           miso_c, 
   input   wire           miso_m, 
   input   wire    [4:0]  n_buses, 
   input   wire           osc_auto_trim_mopshub, 
   input   wire           rdy_dbg, 
   input   wire           rst, 
   input   wire           rx0, 
   input   wire           rx1, 
   input   wire           rx10, 
   input   wire           rx11, 
   input   wire           rx12, 
   input   wire           rx13, 
   input   wire           rx14, 
   input   wire           rx15, 
   input   wire           rx16, 
   input   wire           rx17, 
   input   wire           rx18, 
   input   wire           rx19, 
   input   wire           rx2, 
   input   wire           rx20, 
   input   wire           rx21, 
   input   wire           rx22, 
   input   wire           rx23, 
   input   wire           rx24, 
   input   wire           rx25, 
   input   wire           rx26, 
   input   wire           rx27, 
   input   wire           rx28, 
   input   wire           rx29, 
   input   wire           rx3, 
   input   wire           rx30, 
   input   wire           rx31, 
   input   wire           rx4, 
   input   wire           rx5, 
   input   wire           rx6, 
   input   wire           rx7, 
   input   wire           rx8, 
   input   wire           rx9, 
   input   wire    [1:0]  rx_elink2bit, 
   output  wire           cs_active_c, 
   output  wire           cs_active_m, 
   output  wire           irq_can_rec, 
   output  wire           irq_can_tra, 
   output  wire           irq_elink_rec, 
   output  wire           irq_elink_tra, 
   output  wire    [4:0]  mon_bus_cnt, 
   output  wire           mosi_c, 
   output  wire           mosi_m, 
   output  wire    [4:0]  power_bus_cnt, 
   output  wire           rst_bus, 
   output  wire           rx_data_rdy, 
   output  wire           rx_fifo_full, 
   output  wire           sck_c, 
   output  wire           sck_m, 
   output  wire           tx0, 
   output  wire           tx1, 
   output  wire           tx10, 
   output  wire           tx11, 
   output  wire           tx12, 
   output  wire           tx13, 
   output  wire           tx14, 
   output  wire           tx15, 
   output  wire           tx16, 
   output  wire           tx17, 
   output  wire           tx18, 
   output  wire           tx19, 
   output  wire           tx2, 
   output  wire           tx20, 
   output  wire           tx21, 
   output  wire           tx22, 
   output  wire           tx23, 
   output  wire           tx24, 
   output  wire           tx25, 
   output  wire           tx26, 
   output  wire           tx27, 
   output  wire           tx28, 
   output  wire           tx29, 
   output  wire           tx3, 
   output  wire           tx30, 
   output  wire           tx31, 
   output  wire           tx4, 
   output  wire           tx5, 
   output  wire           tx6, 
   output  wire           tx7, 
   output  wire           tx8, 
   output  wire           tx9, 
   output  wire           tx_data_rdy, 
   output  wire           tx_efifo_full, 
   output  wire    [1:0]  tx_elink2bit
);


// Internal Declarations


// Local declarations

// Internal signal declarations
reg          abort;
wire         buffer_en;
wire         busy_c;
wire         busy_m;
wire  [4:0]  can_rec_select;
wire  [4:0]  can_tra_select;
reg          cnt_done;
wire  [7:0]  data_init;
wire  [31:0] data_rec_spi;
wire  [75:0] data_rec_uplink;
wire  [75:0] data_tra_downlink;
wire  [7:0]  data_tra_spi;
wire  [7:0]  data_tra_spi_out       = 8'b0;
reg          end_cnt;
wire         end_init;
wire         end_mon_cnt;
wire         end_mon_init;
wire         end_osc_cnt;
wire         end_power_init;
wire         end_read_elink;
wire         end_read_miso;
wire         end_spi_proc;
wire         end_trim_bus;
wire         end_write_elink;
wire         end_write_elink_spi;
reg          endwait_all2;                    // Upon receiving a reset message on the CANbus. FSM goes into a known state
wire         entimeout;
wire         ext_counter_gen;
wire         irq_spi_tra;
wire         main_timeoutrst;
wire         power_bus_en;
wire         power_bus_en_done;
wire         rst_mon_cnt;
wire         rst_osc_cnt;
wire         sign_on_sig;
wire         spi_cs;
wire  [7:0]  spi_id;
wire         spi_read_mode;
wire  [7:0]  spi_tra_mon_reg;
wire  [7:0]  spi_tra_mon_select;
wire         start_cnt;
wire         start_init;
wire         start_init_spi;
wire         start_mon_cnt;
wire         start_mon_init;
wire         start_osc_cnt;
wire         start_power_init;
wire         start_power_off;
wire         start_power_on;
wire         start_read_elink;
wire         start_read_elink_can;
wire         start_read_elink_spi;
wire         start_read_miso;
reg          start_read_mon;
wire         start_read_power;
wire         start_trim_ack;
wire         start_write_elink;
wire         start_write_elink_spi;
wire  [8:0]  statedeb;                        // State debug signal 
wire         transcieve_m;
wire         transcieve_p;


// Instances 
bus_control_SM SPI_control_SM( 
   .abort                 (abort), 
   .busy_m                (busy_m), 
   .busy_p                (busy_c), 
   .clk                   (clk), 
   .cnt_done              (cnt_done), 
   .end_cnt               (end_cnt), 
   .end_mon_cnt           (end_mon_cnt), 
   .end_read_elink        (end_read_elink), 
   .end_read_miso         (end_read_miso), 
   .end_write_elink_spi   (end_write_elink_spi), 
   .irq_spi_tra           (irq_spi_tra), 
   .rst                   (rst), 
   .start_bus_init        (power_bus_en), 
   .start_mon_init        (start_mon_init), 
   .start_power_off       (start_power_off), 
   .start_power_on        (start_power_on), 
   .start_read_mon        (start_read_mon), 
   .start_read_power      (start_read_power), 
   .timeoutrst            (main_timeoutrst), 
   .bus_en_done           (power_bus_en_done), 
   .cs_m                  (cs_active_m), 
   .cs_p                  (cs_active_c), 
   .data_init             (data_init), 
   .end_spi_proc          (end_spi_proc), 
   .entimeout             (entimeout), 
   .mon_en_done           (end_mon_init), 
   .read_spi_mode         (spi_read_mode), 
   .rst_mon_cnt           (rst_mon_cnt), 
   .spi_cs                (spi_cs), 
   .start_cnt             (start_cnt), 
   .start_init            (start_init_spi), 
   .start_mon_cnt         (start_mon_cnt), 
   .start_read_elink      (start_read_elink_spi), 
   .start_read_miso       (start_read_miso), 
   .start_write_elink_spi (start_write_elink_spi), 
   .statedeb              (statedeb), 
   .transcieve_m          (transcieve_m), 
   .transcieve_p          (transcieve_p)
); 

control_bus control_bus0( 
   .clk                  (clk), 
   .data_init            (data_init), 
   .data_tra_spi_out     (data_tra_spi_out), 
   .miso                 (miso_c), 
   .n_buses              (n_buses), 
   .rst                  (rst), 
   .rst_osc_cnt          (rst_osc_cnt), 
   .start_osc_cnt        (start_osc_cnt), 
   .start_power_init     (start_power_init), 
   .transceive           (transcieve_p), 
   .end_osc_cnt          (end_osc_cnt), 
   .mosi                 (mosi_c), 
   .power_bus_cnt_active (power_bus_cnt), 
   .sck                  (sck_c), 
   .w_Master_TX_Ready    (busy_c)
); 

elink_core elink_core0( 
   .clk                   (clk), 
   .rst                   (rst), 
   .rx_fifo_full          (rx_fifo_full), 
   .data_rec_uplink       (data_rec_uplink), 
   .start_write_elink     (start_write_elink), 
   .tx_efifo_full         (tx_efifo_full), 
   .irq_elink_rec         (irq_elink_rec), 
   .irq_elink_tra         (irq_elink_tra), 
   .end_write_elink       (end_write_elink), 
   .start_read_elink      (start_read_elink), 
   .end_read_elink        (end_read_elink), 
   .data_2bit_in          (rx_elink2bit), 
   .data_2bit_out         (tx_elink2bit), 
   .fifo_flush            (endwait_all2), 
   .tx_data_rdy           (tx_data_rdy), 
   .rx_data_rdy           (rx_data_rdy), 
   .data_tra_out          (data_tra_downlink), 
   .buffer_tra_en         (buffer_en), 
   .data_tra_mon_spi      (data_tra_spi), 
   .irq_spi_tra           (irq_spi_tra), 
   .data_rec_spi_in       (data_rec_spi), 
   .end_write_elink_spi   (end_write_elink_spi), 
   .start_write_elink_spi (start_write_elink_spi), 
   .timeoutrst            (main_timeoutrst), 
   .spi_tra_mon_reg       (spi_tra_mon_reg), 
   .abort                 (abort), 
   .data_10bit_in_dbg     (data_10bit_in_dbg), 
   .dbg_elink             (dbg_elink), 
   .rdy_dbg               (rdy_dbg), 
   .spi_id                (spi_id), 
   .spi_tra_mon_select    (spi_tra_mon_select), 
   .spi_read_mode         (spi_read_mode), 
   .dbg_spi               (dbg_spi)
); 

monitor_bus monitor_pp30( 
   .clk                (clk), 
   .data_init          (data_init), 
   .data_tra_spi_out   (data_tra_spi), 
   .miso               (miso_m), 
   .n_buses            (n_buses), 
   .rst                (rst), 
   .rst_mon_cnt        (rst_mon_cnt), 
   .spi_id             (spi_id), 
   .spi_reg            (spi_tra_mon_reg), 
   .spi_select         (spi_tra_mon_select), 
   .start_mon_cnt      (start_mon_cnt), 
   .start_mon_init     (start_mon_init), 
   .start_read_miso    (start_read_miso), 
   .transceive         (transcieve_m), 
   .data_rec_spi_in    (data_rec_spi), 
   .end_mon_cnt        (end_mon_cnt), 
   .end_read_miso      (end_read_miso), 
   .mon_bus_cnt_active (mon_bus_cnt), 
   .mosi               (mosi_m), 
   .sck                (sck_m), 
   .w_Master_TX_Ready  (busy_m)
); 

mopshub_core mopshub_core0( 
   .buffer_en             (buffer_en), 
   .clk                   (clk), 
   .data_tra_downlink     (data_tra_downlink), 
   .end_mon_init          (end_mon_init), 
   .end_osc_cnt           (end_osc_cnt), 
   .end_read_elink        (end_read_elink), 
   .end_write_elink       (end_write_elink), 
   .endwait_all           (endwait_all), 
   .irq_elink_tra         (irq_elink_tra), 
   .n_buses               (n_buses), 
   .osc_auto_trim_mopshub (osc_auto_trim_mopshub), 
   .power_bus_cnt         (power_bus_cnt), 
   .power_bus_en_done     (power_bus_en_done), 
   .rst                   (rst), 
   .rx0                   (rx0), 
   .rx1                   (rx1), 
   .rx10                  (rx10), 
   .rx11                  (rx11), 
   .rx12                  (rx12), 
   .rx13                  (rx13), 
   .rx14                  (rx14), 
   .rx15                  (rx15), 
   .rx16                  (rx16), 
   .rx17                  (rx17), 
   .rx18                  (rx18), 
   .rx19                  (rx19), 
   .rx2                   (rx2), 
   .rx20                  (rx20), 
   .rx21                  (rx21), 
   .rx22                  (rx22), 
   .rx23                  (rx23), 
   .rx24                  (rx24), 
   .rx25                  (rx25), 
   .rx26                  (rx26), 
   .rx27                  (rx27), 
   .rx28                  (rx28), 
   .rx29                  (rx29), 
   .rx3                   (rx3), 
   .rx30                  (rx30), 
   .rx31                  (rx31), 
   .rx4                   (rx4), 
   .rx5                   (rx5), 
   .rx6                   (rx6), 
   .rx7                   (rx7), 
   .rx8                   (rx8), 
   .rx9                   (rx9), 
   .can_rec_select        (can_rec_select), 
   .can_tra_select        (can_tra_select), 
   .data_rec_uplink       (data_rec_uplink), 
   .end_init              (end_init), 
   .end_power_init        (end_power_init), 
   .end_trim_bus          (end_trim_bus), 
   .ext_counter_gen       (ext_counter_gen), 
   .irq_can_rec           (irq_can_rec), 
   .irq_can_tra           (irq_can_tra), 
   .main_timeoutrst       (main_timeoutrst), 
   .power_bus_en          (power_bus_en), 
   .rst_bus               (rst_bus), 
   .rst_osc_cnt           (rst_osc_cnt), 
   .sign_on_sig           (sign_on_sig), 
   .start_init            (start_init), 
   .start_mon_init        (start_mon_init), 
   .start_osc_cnt         (start_osc_cnt), 
   .start_power_init      (start_power_init), 
   .start_read_elink      (start_read_elink_can), 
   .start_trim_ack        (start_trim_ack), 
   .start_write_elink     (start_write_elink), 
   .tx0                   (tx0), 
   .tx1                   (tx1), 
   .tx10                  (tx10), 
   .tx11                  (tx11), 
   .tx12                  (tx12), 
   .tx13                  (tx13), 
   .tx14                  (tx14), 
   .tx15                  (tx15), 
   .tx16                  (tx16), 
   .tx17                  (tx17), 
   .tx18                  (tx18), 
   .tx19                  (tx19), 
   .tx2                   (tx2), 
   .tx20                  (tx20), 
   .tx21                  (tx21), 
   .tx22                  (tx22), 
   .tx23                  (tx23), 
   .tx24                  (tx24), 
   .tx25                  (tx25), 
   .tx26                  (tx26), 
   .tx27                  (tx27), 
   .tx28                  (tx28), 
   .tx29                  (tx29), 
   .tx3                   (tx3), 
   .tx30                  (tx30), 
   .tx31                  (tx31), 
   .tx4                   (tx4), 
   .tx5                   (tx5), 
   .tx6                   (tx6), 
   .tx7                   (tx7), 
   .tx8                   (tx8), 
   .tx9                   (tx9)
); 

// HDL Embedded Text Block 1 reg_assign
// Wire_assign 1                     
  //to be changed later
assign start_read_power = 1'b0;
assign start_power_on   = 1'b0;
assign start_power_off  = 1'b0;
initial 
  begin
  start_read_mon         = 1'b0;
  endwait_all2           = 1'b0;    // Upon receiving a reset message on the CANbus. FSM goes into a known state
  end_cnt                = 1'b0;
  cnt_done               = 1'b0;
  abort                  = 1'b0;
  end
                     













// HDL Embedded Text Block 9 eb7

assign start_read_elink = (start_read_elink_spi || start_read_elink_can);  














































endmodule // mopshub_top

