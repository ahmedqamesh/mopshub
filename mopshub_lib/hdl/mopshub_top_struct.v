//
// Module mopshub_lib.mopshub_top.struct
//
// Created:
//          by - dcs.dcs (chipdev2.physik.uni-wuppertal.de)
//          at - 19:56:05 08/06/21
//
// Generated by Mentor Graphics' HDL Designer(TM) 2019.4 (Build 4)
//

`resetall
`timescale 1ns/10ps
module mopshub_top #(
   // synopsys template
   parameter max_cnt_size = 5,
   parameter n_buses      = 5'b11111
)
( 
   // Port Declarations
   input   wire            buffer_en, 
   input   wire            clk, 
   input   wire    [75:0]  data_tra_uplink, 
   input   wire            end_cnt_dbg, 
   input   wire            end_read_elink, 
   input   wire            endwait, 
   input   wire            irq_elink, 
   input   wire            rst, 
   input   wire            rx0, 
   input   wire            rx1, 
   output  wire    [75:0]  data_rec_uplink, 
   output  wire    [9:0]   data_uplink_out,    // [17:0]
   output  wire            irq_can_ack, 
   output  wire            priority_sig, 
   output  wire            send_mes_can_done, 
   output  wire            send_mes_elink, 
   output  wire            sign_on_sig, 
   output  wire            start_init, 
   output  wire            start_read_elink, 
   output  wire            tx0, 
   output  wire            tx1, 
   output  wire            tx_elink1bit, 
   output  wire    [1:0]   tx_elink2bit
);


// Internal Declarations


// Local declarations

// Internal signal declarations
wire  [4:0]  addr_can;
wire         bitCLKx2;
wire         bitCLKx4;
wire  [4:0]  can_rec_select;
wire  [4:0]  can_tra_select;
reg   [10:0] data_uplink_out_reg;           // [17:0]
wire         enable_cs;
wire         end_choose_bus;
wire         end_write_elink_trig;
wire         entimeout;
wire         irq_can_rec;
wire         irq_can_tra;
wire  [15:0] read_can;
wire         read_sig_can_n;
wire         rec_fifo_wr_enable;
reg          rec_fifo_wr_enable_reg  = 0;
wire         reset;
wire         rst_elink_cnt;
wire         rx2;
wire         rx3;
wire         rx4;
wire         rx5;
wire         rx6;
wire         rx7;
wire  [4:0]  sel_cnt;
wire         start_write_elink;
wire         timeoutrst;
wire         tx2;
wire         tx3;
wire         tx4;
wire         tx5;
wire         tx6;
wire         tx7;
wire  [15:0] write_can;
wire         write_sig_can_n;


// Instances 
bit_counter bit_counter_Elink( 
   .ext_rst    (), 
   .rst        (rst), 
   .data_out   (sel_cnt), 
   .clk        (clk), 
   .cnt_enable (start_write_elink)
); 

bridge_controller #(max_cnt_size,n_buses) bridge_controller0( 
   .buffer_en         (buffer_en), 
   .can_rec_select    (can_rec_select), 
   .clk               (clk), 
   .data_tra_uplink   (data_tra_uplink), 
   .end_cnt_dbg       (end_cnt_dbg), 
   .end_read_elink    (end_read_elink), 
   .end_write_elink   (end_write_elink_trig), 
   .endwait           (endwait), 
   .irq_can_rec       (irq_can_rec), 
   .irq_can_tra       (irq_can_tra), 
   .irq_elink         (irq_elink), 
   .read_can          (read_can), 
   .rst               (rst), 
   .addr_can          (addr_can), 
   .can_tra_select    (can_tra_select), 
   .data_rec_uplink   (data_rec_uplink), 
   .enable_cs         (enable_cs), 
   .end_can_proc      (end_choose_bus), 
   .irq_can_ack       (irq_can_ack), 
   .priority_sig      (priority_sig), 
   .read_sig_can_n    (read_sig_can_n), 
   .rst_elink_cnt     (rst_elink_cnt), 
   .send_mes_can_done (send_mes_can_done), 
   .send_mes_elink    (send_mes_elink), 
   .sign_on_sig       (sign_on_sig), 
   .start_init        (start_init), 
   .start_read_elink  (start_read_elink), 
   .start_write_elink (start_write_elink), 
   .write_can         (write_can), 
   .write_sig_can_n   (write_sig_can_n)
); 

canakari_top canakari_top0( 
   .clk            (clk), 
   .rst            (rst), 
   .address        (addr_can), 
   .bus_tra_select (can_tra_select), 
   .writedata      (write_can), 
   .write_n_sig    (write_sig_can_n), 
   .irq_can_tra    (irq_can_tra), 
   .irq_can_rec    (irq_can_rec), 
   .rx2            (rx2), 
   .rx3            (rx3), 
   .rx4            (rx4), 
   .rx5            (rx5), 
   .rx6            (rx6), 
   .rx7            (rx7), 
   .tx1            (tx1), 
   .tx2            (tx2), 
   .tx3            (tx3), 
   .tx4            (tx4), 
   .tx5            (tx5), 
   .tx6            (tx6), 
   .tx7            (tx7), 
   .rx1            (rx1), 
   .bus_rec_select (can_rec_select), 
   .endwait        (endwait), 
   .read_n_sig     (read_sig_can_n), 
   .enable_cs_sig  (enable_cs), 
   .readdata       (read_can), 
   .rx0            (rx0), 
   .tx0            (tx0), 
   .entimeout      (entimeout), 
   .timeoutrst     (timeoutrst)
); 

clock_divider #(28'd2)
clock_divider2( 
   .clock_in  (clk), 
   .clock_out (bitCLKx2)
); 

clock_divider #(28'd4)
clock_divider4( 
   .clock_in  (clk), 
   .clock_out (bitCLKx4)
); 

elink_core elink_core0( 
   .rx_fifo_data_out   (), 
   .rx_fifo_empty      (), 
   .rx_fifo_full       (), 
   .rx_elink           (), 
   .tx_elink2bit       (tx_elink2bit), 
   .elink2bit          (), 
   .bitCLK             (clk), 
   .bitCLKx2           (bitCLKx2), 
   .bitCLKx4           (bitCLKx4), 
   .efifoRclk          (), 
   .rx_fifo_rd_enable  (), 
   .fifo_flush         (reset), 
   .rst                (reset), 
   .efifoPfull         (), 
   .tx_elink1bit       (tx_elink1bit), 
   .rec_fifo_din       (data_uplink_out), 
   .rec_fifo_wr_enable (rec_fifo_wr_enable)
); 

// HDL Embedded Text Block 4 data_loader3
// data_loader 1
//sel din process
assign end_write_elink_trig = (sel_cnt == 5'b101) ? 1:0; 
assign data_uplink_out = data_uplink_out_reg;
assign reset = !rst;
assign rec_fifo_wr_enable = rec_fifo_wr_enable_reg;
always @(posedge clk)
  if(!rst)
  begin
    data_uplink_out_reg <= {2'b11,8'h00};
    rec_fifo_wr_enable_reg <=0;
  end  
 else
// begin 
//    case (sel_cnt)
//        5'b00 : begin 
//                 data_uplink_out_reg  <= {2'b10,16'b0};
//                end
//        5'b01 : begin 
//                data_uplink_out_reg  <= {2'b00,data_rec_uplink[74:58]};
//                end
//        5'b10 : begin 
//                data_uplink_out_reg  <= {2'b00,data_rec_uplink[57:41]};
//                end
//        5'b011 : begin 
//                data_uplink_out_reg  <= {2'b00,data_rec_uplink[40:24]};
//                end
//        5'b100 : begin 
//                data_uplink_out_reg  <= {2'b00,data_rec_uplink[23:7]};
//                end
//        5'b101 : begin 
//                 data_uplink_out_reg  <= {2'b00,data_rec_uplink[6:0],11'b0};
//                end 
//        5'b110 : begin 
//                 data_uplink_out_reg  <= {2'b01,16'h0};
//                end 
//        default: begin
//                 data_uplink_out_reg <= {2'b11,16'h00}; 
//                end  
//    endcase
//end                                            
 begin 
    case (sel_cnt)
        5'b00 : begin 
                 data_uplink_out_reg  <= {2'b10,8'b0};
                 rec_fifo_wr_enable_reg <=1;
                end
        5'b01 : begin 
                data_uplink_out_reg  <= {2'b00,8'hDE};
                rec_fifo_wr_enable_reg <=1;
                end
        5'b10 : begin 
                data_uplink_out_reg  <= {2'b00,8'hAD};
                rec_fifo_wr_enable_reg <=1;
                end
        5'b011 : begin 
                data_uplink_out_reg  <= {2'b00,8'hBE};
                rec_fifo_wr_enable_reg <=1;
                end
        5'b100 : begin 
                data_uplink_out_reg  <= {2'b00,8'hEF};
                rec_fifo_wr_enable_reg <=1;
                end
        5'b101 : begin 
                 data_uplink_out_reg  <= {2'b01,8'h00};
                rec_fifo_wr_enable_reg <=1; 
                end 
        default: begin
                 data_uplink_out_reg <= {2'b11,16'h00}; 
                 rec_fifo_wr_enable_reg <=0;
                end  
    endcase
end 























endmodule // mopshub_top

