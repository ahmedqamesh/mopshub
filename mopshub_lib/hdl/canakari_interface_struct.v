//
// Module mopshub_lib.canakari_interface.struct
//
// Created:
//          by - dcs.dcs (chipdev2.physik.uni-wuppertal.de)
//          at - 18:16:01 01/12/22
//
// Generated by Mentor Graphics' HDL Designer(TM) 2019.4 (Build 4)
//

`resetall
`timescale 1ns/10ps
module canakari_interface #(
   // synopsys template
   parameter n_buses = 5'b11111
)
( 
   // Port Declarations
   input   wire            abort, 
   input   wire    [4:0]   can_rec_select, 
   input   wire            clk,                 // posedge
   input   wire    [75:0]  data_tra_mes,        // complete CAN message to be written on the CAN bus 
   input   wire    [4:0]   data_tra_select, 
   input   wire            end_can_proc, 
   input   wire            end_cnt_dbg, 
   input   wire            init,                // start initialization 
   input   wire            reset_irq_can,       // reset interrupt from Canakari
   input   wire            reset_irq_can_all, 
   input   wire            reset_irq_osc_can, 
   input   wire            reset_irq_rec_can, 
   input   wire            reset_irq_tra_can, 
   input   wire            rst,                 // synchronous low active
   input   wire            rst_cnt_osc, 
   input   wire            send_mes,            // start sending message 
   input   wire            start_cnt_osc, 
   input   wire            start_read,          // start reading canakari registers 
   input   wire            start_trim_osc, 
   input   wire            start_write,         // start writing Canakari register 
   input   wire            timeoutrst,          // gobal timeout reset to get back the state machines in a known state
   output  wire    [4:0]   addr_can,            // addr given to the initialization block 
   output  wire            bus_match, 
   output  wire    [4:0]   can_tra_select, 
   output  wire            cs_can,              // chip select signal for Canakari 
   output  wire            en_rec_reg, 
   output  reg             end_cnt, 
   output  wire            end_init,            // signal to bridge state machine to end initialization phase 
   output  wire            end_read,            // signal to end read phase 
   output  wire            end_trim_osc, 
   output  wire            end_write,           // signal to end write phase 
   output  wire            read_sig_can_n,      // low active signal to read data from one of the registers of Cankari 
   output  wire            reset_irq_rec_done, 
   output  wire            reset_irq_tra_done, 
   output  wire    [5:0]   statedebcan, 
   output  wire    [15:0]  write_can,           // data to be written to Canakari 
   output  wire            write_sig_can_n      // low active signal to write data into one of the registers of Canakari 
);

//tmrg default triplicate
//tmrg tmr_error false 
// Internal Declarations


// Local declarations

// Internal signal declarations
wire  [3:0]  cmd;                   // This is a 4 bit concatenated command of signals coming from the state machine i.e initial,read,write
wire         cnt_enable;
wire         cnt_select;
wire  [15:0] data_init;
wire  [4:0]  data_tra_select_cnt;
wire         ext_rst;
wire         initi;                 // initial signal from interface state machine to interface block 
wire         reset_sig_can_all;
wire         reset_sig_can_n;
wire         rst_cnt;
wire         set_bus_id;
wire         start_cnt;
wire         tra_select;
wire         trim;


// Instances 
bit_counter bit_counter0( 
   .ext_rst    (ext_rst), 
   .rst        (rst), 
   .data_out   (data_tra_select_cnt), 
   .clk        (clk), 
   .cnt_enable (cnt_enable)
); 

buffer_tristate_busid buffer_tristate_busid0( 
   .clk          (clk), 
   .data_tra_in0 (can_rec_select), 
   .data_tra_in1 (data_tra_select), 
   .data_tra_in2 (data_tra_select_cnt), 
   .buffer_en0   (reset_irq_rec_can), 
   .buffer_en1   (tra_select), 
   .buffer_en2   (cnt_select), 
   .rst          (rst), 
   .data_tra_out (can_tra_select)
); 

bus_comp bus_comp0( 
   .can_rec_select (can_rec_select), 
   .can_tra_select (can_tra_select), 
   .bus_match      (bus_match)
); 

can_interface can_interface0( 
   .addr         (addr_can), 
   .data_init    (data_init), 
   .initi        (initi), 
   .write        (write_sig_can_n), 
   .reset_can    (reset_sig_can_n), 
   .trim         (trim), 
   .data_tra_mes (data_tra_mes), 
   .cmd          (cmd), 
   .write_can    (write_can)
); 

can_interface_SM interface_SM0( 
   .abort              (abort), 
   .clk                (clk), 
   .end_can_proc       (end_can_proc), 
   .end_cnt            (end_cnt), 
   .end_cnt_dbg        (end_cnt_dbg), 
   .init               (init), 
   .reset_irq_can      (reset_irq_can), 
   .reset_irq_can_all  (reset_irq_can_all), 
   .rst                (rst), 
   .send_mes           (send_mes), 
   .start_osc_trim     (start_trim_osc), 
   .start_read         (start_read), 
   .start_write        (start_write), 
   .timeoutrst         (timeoutrst), 
   .addr               (addr_can), 
   .cs_can             (cs_can), 
   .en_rec_reg         (en_rec_reg), 
   .end_init           (end_init), 
   .end_osc_trim       (end_trim_osc), 
   .end_read           (end_read), 
   .end_write          (end_write), 
   .initi              (initi), 
   .read               (read_sig_can_n), 
   .reset_irq_rec_done (reset_irq_rec_done), 
   .reset_irq_tra_done (reset_irq_tra_done), 
   .reset_sig_can      (reset_sig_can_n), 
   .reset_sig_can_all  (reset_sig_can_all), 
   .rst_cnt            (rst_cnt), 
   .set_bus_id         (set_bus_id), 
   .start_cnt          (start_cnt), 
   .statedeb           (statedebcan), 
   .trim               (trim), 
   .write              (write_sig_can_n)
); 

initialize_block initialize_block0( 
   .addr      (addr_can), 
   .data_init (data_init)
); 

// HDL Embedded Text Block 1 trigger_signal
// eb1 1                             
 // Counter over the Clock signal
  always @(posedge clk)
  begin
    if (!rst)
    end_cnt <= 0;
    else 
    begin
      case(data_tra_select_cnt)
       n_buses:begin
          end_cnt <= 1;
        end
      default:begin
          end_cnt <= 0;
        end
      endcase
  end
end











// HDL Embedded Text Block 2 Counter_signal
assign cnt_enable = (start_cnt_osc || start_cnt);
assign ext_rst    = (rst_cnt_osc || rst_cnt);
assign cnt_select = (init || reset_sig_can_all || start_trim_osc ||reset_irq_osc_can);
assign tra_select = (start_write || set_bus_id || reset_irq_tra_can ||reset_irq_tra_done);























endmodule // canakari_interface

