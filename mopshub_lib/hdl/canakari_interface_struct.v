//
// Module mopshub_lib.canakari_interface.struct
//
// Created:
//          by - dcs.dcs (chipdev2.physik.uni-wuppertal.de)
//          at - 10:55:35 07/07/21
//
// Generated by Mentor Graphics' HDL Designer(TM) 2019.4 (Build 4)
//

`resetall
`timescale 1ns/10ps
module canakari_interface #(
   // synopsys template
   parameter max_cnt_size = 5,
   parameter n_buses      = 5'b11111
)
( 
   // Port Declarations
   input   wire            abort, 
   input   wire            bus_comp, 
   input   wire    [4:0]   can_rec_select, 
   input   wire            clk,                // posedge
   input   wire    [15:0]  data_init,          // Initialization data for canakari registers coming from the initialization block 
   input   wire    [75:0]  data_tra_mes,       // complete CAN message to be written on the CAN bus 
   input   wire            end_cnt_dbg, 
   input   wire            init,               // start initialization 
   input   wire    [15:0]  read_can,           // data read from Canakari
   input   wire            reset_irq_can,      // reset interrupt from Canakari
   input   wire            reset_irq_can_all, 
   input   wire            rst,                // synchronous low active
   input   wire            send_mes,           // start sending message 
   input   wire            start_read,         // start reading canakari registers 
   input   wire            start_write,        // start writing Canakari register 
   input   wire            timeoutrst,         // gobal timeout reset to get back the state machines in a known state
   output  wire    [4:0]   addr_can,           // addr given to the initialization block 
   output  wire            bus_match, 
   output  wire    [4:0]   can_tra_select, 
   output  wire            cs_can,             // chip select signal for Canakari 
   output  wire            en_rec_reg, 
   output  wire            end_init,           // signal to bridge state machine to end initialization phase 
   output  wire            end_read,           // signal to end read phase 
   output  wire            end_write,          // signal to end write phase 
   output  wire            read_sig_can_n,     // low active signal to read data from one of the registers of Cankari 
   output  wire    [5:0]   statedebcan, 
   output  wire    [15:0]  write_can,          // data to be written to Canakari 
   output  wire            write_sig_can_n     // low active signal to write data into one of the registers of Canakari 
);

//tmrg default triplicate
//tmrg tmr_error false 
// Internal Declarations


// Local declarations

// Internal signal declarations
wire  [4:0] can_rec_comp;
wire  [4:0] can_tra_comp;
wire  [4:0] can_tra_select_cnt;
wire        initi;                // initial signal from interface state machine to interface block 
reg         out_request_trig;
wire        rst_cnt;
wire        start_cnt;


// Instances 
bit_counter #(max_cnt_size) bit_counter0( 
   .data_out (can_tra_select_cnt), 
   .enable   (start_cnt), 
   .clk      (clk), 
   .rst      (rst), 
   .ext_rst  (rst_cnt)
); 

bus_comp bus_comp0( 
   .can_rec_select (can_rec_comp), 
   .can_tra_select (can_tra_comp), 
   .bus_match      (bus_match)
); 

can_interface can_interface0( 
   .clock              (clk), 
   .rst                (rst), 
   .addr               (addr_can), 
   .data_init          (data_init), 
   .initi              (initi), 
   .read               (read_sig_can_n), 
   .write              (write_sig_can_n), 
   .bus_comp           (bus_comp), 
   .read_can           (read_can), 
   .data_tra_mes       (data_tra_mes), 
   .can_rec_select     (can_rec_select), 
   .can_tra_select_cnt (can_tra_select_cnt), 
   .write_can          (write_can), 
   .can_tra_select     (can_tra_select), 
   .can_tra_comp       (can_tra_comp), 
   .can_rec_comp       (can_rec_comp)
); 

interface_SM interface_SM0( 
   .abort             (abort), 
   .clk               (clk), 
   .end_cnt           (out_request_trig), 
   .end_cnt_dbg       (end_cnt_dbg), 
   .init              (init), 
   .reset_irq_can     (reset_irq_can), 
   .reset_irq_can_all (reset_irq_can_all), 
   .rst               (rst), 
   .send_mes          (send_mes), 
   .start_read        (start_read), 
   .start_write       (start_write), 
   .timeoutrst        (timeoutrst), 
   .addr              (addr_can), 
   .cs_can            (cs_can), 
   .en_rec_reg        (en_rec_reg), 
   .end_init          (end_init), 
   .end_read          (end_read), 
   .end_write         (end_write), 
   .initi             (initi), 
   .read              (read_sig_can_n), 
   .rst_cnt           (rst_cnt), 
   .start_cnt         (start_cnt), 
   .statedeb          (statedebcan), 
   .write             (write_sig_can_n)
); 

// HDL Embedded Text Block 1 trigger_signal
// eb1 1                             
 // Counter over the Clock signal
  always @(negedge clk)
  begin
    if (!rst)
    out_request_trig <= 0;
    else 
    begin
      case(can_tra_select_cnt)
       n_buses:begin
          out_request_trig <= 1;
        end
      default:begin
          out_request_trig <= 0;
        end
      endcase
  end
end







endmodule // canakari_interface

