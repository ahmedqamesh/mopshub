//
// Module mopshub_lib.canakari_interface.struct
//
// Created:
//          by - dcs.dcs (chipdev2.physik.uni-wuppertal.de)
//          at - 14:58:15 06/23/21
//
// Generated by Mentor Graphics' HDL Designer(TM) 2019.4 (Build 4)
//

`resetall
`timescale 1ns/10ps
module canakari_interface( 
   // Port Declarations
   input   wire            abort, 
   input   wire    [4:0]   can_rec_select, 
   input   wire            clk,                  // posedge
   input   wire    [15:0]  data_init,            // Initialization data for canakari registers coming from the initialization block 
   input   wire    [75:0]  data_tra_mes,         // complete CAN message to be written on the CAN bus 
   input   wire    [4:0]   data_tra_select_sig, 
   input   wire            init,                 // start initialization 
   input   wire    [15:0]  read_can,             // data read from Canakari
   input   wire            reset_irq_can,        // reset interrupt from Canakari
   input   wire            rst,                  // synchronous low active
   input   wire            send_mes,             // start sending message 
   input   wire            start_read,           // start reading canakari registers 
   input   wire            start_write,          // start writing Canakari register 
   input   wire            timeoutrst,           // gobal timeout reset to get back the state machines in a known state
   output  wire    [4:0]   addr_can,             // addr given to the initialization block 
   output  wire    [4:0]   can_tra_select, 
   output  wire            cs_can,               // chip select signal for Canakari 
   output  wire            en_rec_reg, 
   output  wire            end_init,             // signal to bridge state machine to end initialization phase 
   output  wire            end_read,             // signal to end read phase 
   output  wire            end_write,            // signal to end write phase 
   output  wire            read_sig_can_n,       // low active signal to read data from one of the registers of Cankari 
   output  wire    [5:0]   statedebcan, 
   output  wire    [15:0]  write_can,            // data to be written to Canakari 
   output  wire            write_sig_can_n       // low active signal to write data into one of the registers of Canakari 
);

//tmrg default triplicate
//tmrg tmr_error false 
// Internal Declarations


// Local declarations

// Internal signal declarations
wire        initi;        // initial signal from interface state machine to interface block 
wire  [4:0] select_sig;


// Instances 
caninterface canakari_RW_interface( 
   .clock              (clk), 
   .rst                (rst), 
   .addr               (addr_can), 
   .data_init          (data_init), 
   .initi              (initi), 
   .read               (read_sig_can_n), 
   .write              (write_sig_can_n), 
   .read_can           (read_can), 
   .data_tra_mes       (data_tra_mes), 
   .can_rec_select     (can_rec_select), 
   .can_tra_select_sig (select_sig), 
   .write_can          (write_can), 
   .can_tra_select     (can_tra_select)
); 

interface_SM canakari_RW_SM( 
   .abort              (abort), 
   .clk                (clk), 
   .data_tra_select    (data_tra_select_sig), 
   .init               (init), 
   .reset_irq_can      (reset_irq_can), 
   .rst                (rst), 
   .send_mes           (send_mes), 
   .start_read         (start_read), 
   .start_write        (start_write), 
   .timeoutrst         (timeoutrst), 
   .addr               (addr_can), 
   .can_tra_select_sig (select_sig), 
   .cs_can             (cs_can), 
   .en_rec_reg         (en_rec_reg), 
   .end_init           (end_init), 
   .end_read           (end_read), 
   .end_write          (end_write), 
   .initi              (initi), 
   .read               (read_sig_can_n), 
   .statedeb           (statedebcan), 
   .write              (write_sig_can_n)
); 


endmodule // canakari_interface

