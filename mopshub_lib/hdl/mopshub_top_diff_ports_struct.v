//
// Module mopshub_lib.mopshub_top_diff_ports.struct
//
// Created:
//          by - dcs.dcs (chipdev2.physik.uni-wuppertal.de)
//          at - 10:06:21 08/16/22
//
// Generated by Mentor Graphics' HDL Designer(TM) 2019.4 (Build 4)
//

`resetall
`timescale 1ns/10ps
module mopshub_top_diff_ports( 
   // Port Declarations
   input   wire           clk, 
   input   wire           clk_80, 
   input   wire           dbg_elink, 
   input   wire           endwait_all, 
   input   wire           locked, 
   input   wire           miso_c, 
   input   wire           miso_m, 
   input   wire           osc_auto_trim_mopshub, 
   input   wire           reset, 
   input   wire           rx0, 
   input   wire           rx1, 
   input   wire           rx10, 
   input   wire           rx11, 
   input   wire           rx12, 
   input   wire           rx13, 
   input   wire           rx14, 
   input   wire           rx15, 
   input   wire           rx2, 
   input   wire           rx3, 
   input   wire           rx4, 
   input   wire           rx5, 
   input   wire           rx6, 
   input   wire           rx7, 
   input   wire           rx8, 
   input   wire           rx9, 
   input   wire    [1:0]  rx_elink2bit, 
   output  wire           clk_out_n, 
   output  wire           clk_out_p, 
   output  wire           irq_can_rec, 
   output  wire           irq_can_tra, 
   output  wire           irq_elink_dbg, 
   output  wire           irq_elink_rec, 
   output  wire           irq_elink_tra, 
   output  wire           led, 
   output  wire           mosi_c, 
   output  wire           mosi_m, 
   output  wire           rx_data_rdy, 
   output  wire           sck_c, 
   output  wire           sck_m, 
   output  wire           tx0, 
   output  wire           tx1, 
   output  wire           tx10, 
   output  wire           tx11, 
   output  wire           tx12, 
   output  wire           tx13, 
   output  wire           tx14, 
   output  wire           tx15, 
   output  wire           tx2, 
   output  wire           tx3, 
   output  wire           tx4, 
   output  wire           tx5, 
   output  wire           tx6, 
   output  wire           tx7, 
   output  wire           tx8, 
   output  wire           tx9, 
   output  wire           tx_data_rdy, 
   output  wire    [1:0]  tx_elink2bit
);


// Internal Declarations


// Local declarations

// Internal signal declarations
wire        clk_40;
wire        cs_active_c;
wire        cs_active_m;
wire  [9:0] data_10bit_in_dbg;
wire        dbg_spi                  = 1'b0;
wire        enable_cnt               = 1'b1;       // pfull from Tx FIFO
wire        irq_can_rec_in;
wire        irq_can_tra_in;
wire        irq_elink_dbg_in;
wire        irq_elink_dbg_in_active;
wire        irq_elink_rec_in;
wire        irq_elink_tra_in;
wire  [4:0] mon_bus_cnt;
wire  [4:0] n_buses                  = 5'b00111;
wire  [4:0] power_bus_cnt;
wire        rdy_dbg;
wire        rst;
wire        rst_bus;
wire        rx_data_rdy_in;
wire        rx_fifo_full_in;
wire        rx_fifo_full_rdy;
wire  [3:0] state_o;
wire        test_can_core            = 1'b0;
wire        tx_data_rdy_in;
wire        tx_efifo_full_in;
wire        tx_fifo_full_rdy;


// Instances 
elink_data_gen_SM elink_data_gen_dbg( 
   .clk               (clk), 
   .rst               (rst), 
   .irq_elink_tra     (), 
   .state_o           (state_o), 
   .start_read_elink  (), 
   .end_read_elink    (), 
   .cnt_done          (), 
   .buffer_en         (), 
   .data_tra_in       (), 
   .rst_cnt           (), 
   .counter_gen_en    (), 
   .test_can_core     (test_can_core), 
   .data_10bit_in_dbg (data_10bit_in_dbg), 
   .rdy_dbg           (rdy_dbg), 
   .irq_elink_dbg     (irq_elink_dbg_in)
); 

mopshub_top mopshub_top_0( 
   .clk                   (clk), 
   .data_10bit_in_dbg     (data_10bit_in_dbg), 
   .dbg_elink             (dbg_elink), 
   .dbg_spi               (dbg_spi), 
   .endwait_all           (endwait_all), 
   .miso_c                (miso_c), 
   .miso_m                (miso_m), 
   .n_buses               (n_buses), 
   .osc_auto_trim_mopshub (osc_auto_trim_mopshub), 
   .rdy_dbg               (rdy_dbg), 
   .rst                   (rst), 
   .rx0                   (rx0), 
   .rx1                   (rx1), 
   .rx10                  (rx10), 
   .rx11                  (rx11), 
   .rx12                  (rx12), 
   .rx13                  (rx13), 
   .rx14                  (rx14), 
   .rx15                  (rx15), 
   .rx2                   (rx2), 
   .rx3                   (rx3), 
   .rx4                   (rx4), 
   .rx5                   (rx5), 
   .rx6                   (rx6), 
   .rx7                   (rx7), 
   .rx8                   (rx8), 
   .rx9                   (rx9), 
   .rx_elink2bit          (rx_elink2bit), 
   .cs_active_c           (cs_active_c), 
   .cs_active_m           (cs_active_m), 
   .irq_can_rec           (irq_can_rec_in), 
   .irq_can_tra           (irq_can_tra_in), 
   .irq_elink_rec         (irq_elink_rec_in), 
   .irq_elink_tra         (irq_elink_tra_in), 
   .mon_bus_cnt           (mon_bus_cnt), 
   .mosi_c                (mosi_c), 
   .mosi_m                (mosi_m), 
   .power_bus_cnt         (power_bus_cnt), 
   .rst_bus               (rst_bus), 
   .rx_data_rdy           (rx_data_rdy_in), 
   .rx_fifo_full          (rx_fifo_full_in), 
   .sck_c                 (sck_c), 
   .sck_m                 (sck_m), 
   .tx0                   (tx0), 
   .tx1                   (tx1), 
   .tx10                  (tx10), 
   .tx11                  (tx11), 
   .tx12                  (tx12), 
   .tx13                  (tx13), 
   .tx14                  (tx14), 
   .tx15                  (tx15), 
   .tx2                   (tx2), 
   .tx3                   (tx3), 
   .tx4                   (tx4), 
   .tx5                   (tx5), 
   .tx6                   (tx6), 
   .tx7                   (tx7), 
   .tx8                   (tx8), 
   .tx9                   (tx9), 
   .tx_data_rdy           (tx_data_rdy_in), 
   .tx_efifo_full         (tx_efifo_full_in), 
   .tx_elink2bit          (tx_elink2bit)
); 

output_diff_buff_clk output_diff_buff_clk0( 
   .clk_in    (clk_80), 
   .locked    (locked), 
   .clk_out_p (clk_out_p), 
   .clk_out_n (clk_out_n)
); 

top_led_enable_SM top_led_enable_SM5( 
   .clk_in     (clk_40), 
   .enable_cnt (enable_cnt), 
   .rst        (rst), 
   .led        (led)
); 

top_led_for_synth top_led_for_synth0( 
   .clk                  (clk), 
   .irq_can_rec_in       (irq_can_rec_in), 
   .irq_can_tra_in       (irq_can_tra_in), 
   .irq_elink_dbg_in     (irq_elink_dbg_in_active), 
   .irq_elink_rec_in     (irq_elink_rec_in), 
   .irq_elink_tra_in     (irq_elink_tra_in), 
   .rst                  (rst), 
   .rx_data_rdy_in       (rx_data_rdy_in), 
   .rx_fifo_full_rdy_in  (rx_fifo_full_in), 
   .tx_data_rdy_in       (tx_data_rdy_in), 
   .tx_fifo_full_rdy_in  (tx_efifo_full_in), 
   .irq_can_rec_out      (irq_can_rec), 
   .irq_can_tra_out      (irq_can_tra), 
   .irq_elink_dbg_out    (irq_elink_dbg), 
   .irq_elink_rec_out    (irq_elink_rec), 
   .irq_elink_tra_out    (irq_elink_tra), 
   .rx_data_rdy_out      (rx_data_rdy), 
   .rx_fifo_full_rdy_out (tx_data_rdy), 
   .tx_data_rdy_out      (rx_fifo_full_rdy), 
   .tx_fifo_full_rdy_out (tx_fifo_full_rdy)
); 

// HDL Embedded Text Block 1 eb1
// eb1 1                                        
assign rst = !reset;                                 










// HDL Embedded Text Block 2 eb2
// eb1 1                                        
assign irq_elink_dbg_in_active = dbg_elink && irq_elink_dbg_in;                                   









endmodule // mopshub_top_diff_ports

