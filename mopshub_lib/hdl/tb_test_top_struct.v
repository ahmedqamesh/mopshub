//
// Module mopshub_lib.tb_test_top.struct
//
// Created:
//          by - dcs.dcs (chipdev2.physik.uni-wuppertal.de)
//          at - 12:57:24 07/07/21
//
// Generated by Mentor Graphics' HDL Designer(TM) 2019.4 (Build 4)
//

`resetall
`timescale 1ns/10ps
module tb_test_top( 
   // Port Declarations
   input   wire    [75:0]  bus_data, 
   input   wire            clk,       // write FIFO clk
   input   wire            rst, 
   input   wire            rx, 
   input   wire            startsm, 
   input   wire            txdec, 
   output  wire            txgen, 
   output  wire            txmops
);


// Internal Declarations


// Local declarations

// Internal signal declarations
wire         adc_clk;
wire  [11:0] adc_data;
wire         adc_eoc;
wire         adc_reset;
wire  [39:0] adc_select;
wire         adc_soc;
wire  [5:0]  adc_trim;
wire         allch;
wire  [6:0]  can_nodeid;
wire         ch;
wire         clk_low;                       // write FIFO clk
wire         clk_osc;                       // write FIFO clk
wire  [10:0] customcanid;                   // ID to be sent in a custom message
wire         custommsg;
wire  [63:0] data;
wire  [3:0]  dlc;
wire         doneranwire;
wire         finranmes;
wire  [5:0]  ftrim_osc;
wire  [5:0]  ftrim_pads;
reg   [5:0]  ftrim_pads_reg  = 6'b111100;
wire  [10:0] id              = 11'h601;
wire  [23:0] indexsubindex;                 // Value of index should be LSByte first 
wire         indic_sign_in;
wire         nextran;
wire         osc_auto_trim;
wire         osc_reset_n;
wire  [31:0] out;
wire         random1000;
wire         read;                          // Prepare SDO read request
wire         readadc;
wire         ready_osc;
wire         reqmsg;                        // Indicates a sent request to the testbench
wire         request;
reg   [75:0] requestreg      = 75'h0;
wire         respmsg;                       // Indicates a reponse from the MOPS chip 
wire         response;
reg   [75:0] responsereg     = 75'h0;
wire         rstchip;                       // This should trigger a reset request to the chip 
wire         sendran;
reg   [75:0] sign_in         = 75'h0;
wire         start;                         // To start Driver /generator
wire         stop;                          // This indicates end of SM to the testbench 
wire  [31:0] taildata;                      // Data which must be written to the chip 
wire         write;


// Instances 
adcdumdata adcdumdata0( 
   .clk        (clk), 
   .rst        (rst), 
   .soc        (adc_soc), 
   .eoc        (adc_eoc), 
   .dataout    (adc_data), 
   .adc_select (adc_select)
); 

mops_osc mops_osc0( 
   .ftrim (ftrim_osc), 
   .reset (rst), 
   .clk   (clk_osc)
); 

clk_div U_0( 
   .clk     (clk), 
   .rst     (rst), 
   .clk_low (clk_low)
); 

verilog_sys_conv U_1( 
   .clk (clk), 
   .in  (ch), 
   .out (out)
); 

top_level top_level_mops0( 
   .clk           (clk_osc), 
   .rst_n         (rst), 
   .osc_reset_n   (osc_reset_n), 
   .can_rx        (rx), 
   .can_tx        (txmops), 
   .can_nodeid    (can_nodeid), 
   .adc_clk       (adc_clk), 
   .adc_reset     (adc_reset), 
   .adc_trim      (adc_trim), 
   .adc_select    (adc_select), 
   .adc_soc       (adc_soc), 
   .adc_eoc       (adc_eoc), 
   .adc_data      (adc_data), 
   .osc_auto_trim (osc_auto_trim), 
   .ftrim_pads    (ftrim_pads), 
   .ftrim_osc     (ftrim_osc), 
   .ready_osc     (ready_osc)
); 

canframegen canframegen0( 
   .clk           (clk), 
   .clk_low       (clk_low), 
   .rst_n         (rst), 
   .start         (start), 
   .read          (read), 
   .write         (write), 
   .random1000    (random1000), 
   .indexsubindex (indexsubindex), 
   .rstchip       (rstchip), 
   .readadc       (readadc), 
   .allch         (allch), 
   .ch            (out), 
   .custommsg     (custommsg), 
   .dlc           (dlc), 
   .data          (data), 
   .id            (id), 
   .txgen         (txgen), 
   .doneranwire   (doneranwire), 
   .finranmes     (finranmes), 
   .sendran       (sendran), 
   .nextran       (nextran), 
   .taildata      (taildata), 
   .customcanid   (customcanid)
); 

tbSM tbSM0( 
   .clk           (clk), 
   .doneran       (doneranwire), 
   .finranmes     (finranmes), 
   .osc_auto_trim (osc_auto_trim), 
   .rst           (rst), 
   .startsm       (startsm), 
   .trimming_done (ready_osc), 
   .txdec         (txdec), 
   .allch         (allch), 
   .ch            (ch), 
   .customcanid   (customcanid), 
   .custommsg     (custommsg), 
   .data          (data), 
   .indexsubindex (indexsubindex), 
   .indic_sign_in (indic_sign_in), 
   .nextran       (nextran), 
   .random1000    (random1000), 
   .read          (read), 
   .readadc       (readadc), 
   .reqmsg        (reqmsg), 
   .respmsg       (respmsg), 
   .rstchip       (rstchip), 
   .sendran       (sendran), 
   .start         (start), 
   .stop          (stop), 
   .taildata      (taildata), 
   .write         (write)
); 

// HDL Embedded Text Block 6 mops_assign1
// eb1 2 
assign ftrim_pads = ftrim_pads_reg;  
assign osc_auto_trim =1'b1;
assign can_nodeid = 7'b0000001; 


// HDL Embedded Text Block 7 mops_assign2
// oscillator debug signals
real time_new, time_old, freq;
always@(posedge clk_osc)
begin
 time_old=time_new;
 time_new=$realtime();
 if(time_old!=time_new)
  freq=1e3/(time_new-time_old);
end
// HDL Embedded Text Block 9 Initialization4
/******* This prints bus activity ******///
assign request = requestreg;
assign response = responsereg;
assign dlc = 4'h8;

always@(posedge clk or negedge rst)
if (!rst)
  begin
    requestreg <= 0;
    responsereg <= 0;
    sign_in    <= 0;
  end
else 
begin
  if(indic_sign_in)
    begin 
      sign_in <= bus_data;
      $strobeh("\t Sign-in message %h ",sign_in);
    end 
  else if (respmsg |nextran )
    begin
      responsereg <= bus_data;
      $strobeh("\t Request %h \t Response %h",request,response);
    end
  else if (reqmsg)
    begin
      requestreg <= bus_data;  
    end 
end












endmodule // tb_test_top

