//
// Module mopshub_lib.fifo_TXelink_wrap.struct
//
// Created:
//          by - dcs.dcs (chipdev2.physik.uni-wuppertal.de)
//          at - 21:24:24 08/30/21
//
// Generated by Mentor Graphics' HDL Designer(TM) 2019.4 (Build 4)
//

`resetall
`timescale 1ns/10ps
module fifo_TXelink_wrap #(
   // synopsys template
   // synopsys template
// synopsys template
// synopsys template
// synopsys template
// FIFO parameters
   parameter DATA_IN_WIDTH  = 10,
   parameter Byte_OUT_WIDTH = 10
)
( 
   // Port Declarations
   // Port Declarations
   // Port Declarations
   // Port Declarations
   // Port Declarations
   // Port Declarations
   input   wire    [DATA_IN_WIDTH-1:0]   din,             //DATA = 2bits +16bits
   input   wire                          flush_fifo, 
   input   wire                          rd_clk, 
   input   wire                          rd_en,           // 1 clk trigger feeded from the EPROC_Out block
   // Port Declarations
   input   wire                          rst, 
   input   wire                          wr_en, 
   output  wire    [Byte_OUT_WIDTH-1:0]  dout_efifo, 
   output  wire                          dout_rdy_efifo, 
   output  wire                          empty_efifo, 
   output  wire                          full_efifo, 
   output  wire                          prog_full, 
   input   wire                          wr_clk
);

// Internal Declarations
  // Local declarations
  
  // Internal signal declarations
// Internal Declarations


// Local declarations
reg [Byte_OUT_WIDTH-1:0] dout_r = {2'b11, 8'b0}; 

reg byte_cnt; 

wire [Byte_OUT_WIDTH-1:0] byte0; //= {2'b11, 16'b0};

wire [Byte_OUT_WIDTH-1:0] byte1; //= {2'b11, 16'b0};

wire [DATA_IN_WIDTH-1:0] dout10bit_s; 


// Internal signal declarations
reg         dout_rdy_efifo_r  = 0;
reg         OE;
reg         rst_state         = 0;
wire  [9:0] dout10bit;
wire        prog_full_s;
wire        rd_en_s;                 //enable reading from FIFO
wire        almost_full;             //  this signal indicates that only one more write can be performed before the FIFO is full.


// Instances 
fifo_upstream #(10) fifo_upstream0( 
   .dout        (dout10bit), 
   .full        (full_efifo), 
   .empty       (empty_efifo), 
   .prog_full   (prog_full_s), 
   .almost_full (almost_full), 
   .din         (din), 
   .wr_en       (wr_en), 
   .rd_en       (rd_en_s), 
   .rd_clk      (rd_clk), 
   .wr_clk      (wr_clk), 
   .rst         (flush_fifo)
); 

// HDL Embedded Text Block 1 eb1
assign prog_full = (prog_full_s & OE); // Take the signal out of the FIFO
assign dout_efifo =dout10bit;
//Never read from an Empty FIFO






// HDL Embedded Text Block 3 eb3
////-------------------------------------------------------------------------------------------
  ////-- re pulse [Reading Data]
  ////-------------------------------------------------------------------------------------------
assign rd_en_s = rd_en &(!empty_efifo);//-- only when  empty_efifo = 0 // FIFO will read with the next rd_clk
assign dout_rdy_efifo = dout_rdy_efifo_r;
  always @ (posedge rd_clk)
  begin
    if (rst)
    dout_rdy_efifo_r <=0;
    else if (rd_en==1)//-- 1 clk trigger
    begin       
      dout_rdy_efifo_r<= 1'b1;
    end
    else
    begin
      dout_rdy_efifo_r <=1'b0;
    end
  end













// HDL Embedded Text Block 7 eb7
//// HDL Embedded Text Block 11 eb11
  always @ (posedge rd_clk)
  if (rst)
  begin
    rst_state <= 0;
    OE <=0;
  end
  else
  begin
    rst_state <= (rst | flush_fifo);
    OE <= !rst_state;
  end


endmodule // fifo_TXelink_wrap
// fifoTXelink_wrap
// fifoTXelink_wrap
