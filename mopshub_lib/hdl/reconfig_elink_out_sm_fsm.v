//
// Module mopshub_lib.reconfig_elink_out_sm.fsm
//
// Created:
//          by - dcs.dcs (chipdev2.physik.uni-wuppertal.de)
//          at - 11:33:40 06/13/23
//
// Generated by Mentor Graphics' HDL Designer(TM) 2019.4 (Build 4)
//
`resetall
`timescale 1ns/10ps
module reconfig_elink_out_sm #(
   // synopsys template
   parameter flag_byte = 8'h7E
)
( 
   // Port Declarations
   input   wire    [7:0]  Kchar_comma, 
   input   wire    [7:0]  Kchar_eop, 
   input   wire    [7:0]  Kchar_sop, 
   // Port Declarations
   // Port Declarations
   // Port Declarations
   // Port Declarations
   // Port Declarations
   // Port Declarations
   input   wire           clk,            // write FIFO clk
   input   wire    [7:0]  data_rx, 
   input   wire           new_data_rx,    // pfull from Tx FIFO
   input   wire           rst,            // should be used through VIO
   input   wire           timeoutrst, 
   output  wire    [7:0]  address, 
   output  reg            cs_ewrite, 
   output  wire    [7:0]  data, 
   output  wire           data_received, 
   output  wire    [7:0]  dlc_length, 
   output  reg     [9:0]  elink_data, 
   output  reg            entimeout, 
   output  reg            read_en, 
   output  reg     [2:0]  state_out
);


// Internal Declarations


// Module Declarations
reg [7:0] address_reg;  
reg [7:0] data_reg;  
reg [7:0] dlc_reg;  
reg drec;  

// State encoding
parameter 
          START_OF_FIELD   = 3'd0,
          DATA_LENGHT_CODE = 3'd1,
          END_OF_FIELD     = 3'd2,
          ADDRESS_FIELD    = 3'd3,
          DATA_FIELD       = 3'd4,
          DLC_shifter      = 3'd5,
          ST_waittoact     = 3'd6,
          ST_reset         = 3'd7;

reg [2:0] current_state, next_state;

//-----------------------------------------------------------------
// Next State Block for machine csm
//-----------------------------------------------------------------
always @(
   current_state, 
   data_rx, 
   dlc_reg, 
   new_data_rx, 
   rst
)
begin : next_state_block_proc
   case (current_state) 
      START_OF_FIELD: begin
         next_state = ADDRESS_FIELD;
      end
      DATA_LENGHT_CODE: begin
         if (new_data_rx)
            next_state = DATA_FIELD;
         else
            next_state = DATA_LENGHT_CODE;
      end
      END_OF_FIELD: begin
         if (data_rx == flag_byte)
            next_state = ST_waittoact;
         else
            next_state = END_OF_FIELD;
      end
      ADDRESS_FIELD: begin
         if (new_data_rx)
            next_state = DATA_LENGHT_CODE;
         else
            next_state = ADDRESS_FIELD;
      end
      DATA_FIELD: begin
         if (dlc_reg> 0 && new_data_rx)
            next_state = DLC_shifter;
         else if (dlc_reg==0 && new_data_rx)
            next_state = END_OF_FIELD;
         else
            next_state = DATA_FIELD;
      end
      DLC_shifter: begin
         next_state = DATA_FIELD;
      end
      ST_waittoact: begin
         if (data_rx == flag_byte && new_data_rx)
            next_state = START_OF_FIELD;
         else
            next_state = ST_waittoact;
      end
      ST_reset: begin
         if (rst ==1)
            next_state = ST_waittoact;
         else
            next_state = ST_reset;
      end
      default: 
         next_state = ST_reset;
   endcase
end // Next State Block

//-----------------------------------------------------------------
// Output Block for machine csm
//-----------------------------------------------------------------
always @(
   Kchar_comma, 
   Kchar_eop, 
   Kchar_sop, 
   current_state, 
   data_rx, 
   dlc_reg, 
   new_data_rx
)
begin : output_block_proc
   // Default Assignment
   cs_ewrite =  1'b0;
   elink_data = {2'b11,8'b10111100};
   entimeout = 1'b1;
   read_en = 1'b1;

   // Combined Actions
   case (current_state) 
      START_OF_FIELD: begin
         elink_data= {2'b10,Kchar_sop};
         cs_ewrite= 1'b1;
         read_en = 1'b0;
      end
      DATA_LENGHT_CODE: begin
         read_en = 1'b0;
         if (new_data_rx) begin
            elink_data= {2'b00,data_rx};
            cs_ewrite= 1'b1;
         end
      end
      END_OF_FIELD: begin
         elink_data= {2'b01,Kchar_eop};
         cs_ewrite= 1'b1;
         read_en = 1'b0;
      end
      ADDRESS_FIELD: begin
         read_en = 1'b0;
         if (new_data_rx) begin
            elink_data= {2'b00,8'h10};
            cs_ewrite= 1'b1;
         end
      end
      DATA_FIELD: begin
         cs_ewrite= 1'b0;
         read_en = 1'b0;
         if (dlc_reg> 0 && new_data_rx) begin
            elink_data= {2'b00,data_rx};
            cs_ewrite= 1'b1;
         end
         else if (dlc_reg==0 && new_data_rx) begin
            elink_data<= {2'b01,Kchar_eop};
            cs_ewrite<= 1'b1;
         end
      end
      DLC_shifter: begin
         read_en = 1'b0;
      end
      ST_waittoact: begin
         elink_data <= {2'b11,Kchar_comma};
         cs_ewrite <= 1'b0;
         entimeout = 0 ;
      end
   endcase
end // Output Block

//-----------------------------------------------------------------
// Clocked Block for machine csm
//-----------------------------------------------------------------
always @(
   posedge clk, 
   negedge rst
) 
begin : clocked_block_proc
   if (!rst) begin
      current_state <= ST_reset;
   end
   else 
   begin
      if (timeoutrst) begin
         current_state <= ST_reset;
      end
      else 
      begin
         current_state <= next_state;

         // Combined Actions
         case (current_state) 
            DATA_LENGHT_CODE: begin
               if (new_data_rx)
                  dlc_reg <= data_rx;
            end
            ADDRESS_FIELD: begin
               if (new_data_rx)
                  address_reg <= data_rx;
            end
            DATA_FIELD: begin
               drec <= 0;
               if (dlc_reg> 0 && new_data_rx) begin
                  data_reg <= data_rx;
                  drec <= 1'b1;
               end
            end
            DLC_shifter: begin
               data_reg <= data_rx;
               dlc_reg <= dlc_reg - 1;
               drec <= 0;
            end
         endcase
      end
   end
end // Clocked Block

// State-As-Output assignment
always @(current_state)
state_out = current_state;

// Concurrent Statements
assign data_received = drec;
assign address = address_reg;
assign data = data_reg;
assign dlc_length = dlc_reg;
endmodule // reconfig_elink_out_sm
