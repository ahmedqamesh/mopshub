//
// Module mopshub_lib.spi_control_SM.fsm
//
// Created:
//          by - dcs.dcs (chipdev2.physik.uni-wuppertal.de)
//          at - 11:42:01 04/12/23
//
// Generated by Mentor Graphics' HDL Designer(TM) 2019.4 (Build 4)
//
`resetall
`timescale 1ns/10ps
module spi_control_SM( 
   // Port Declarations
   input   wire           abort,                  // Upon receiving a reset message on the CANbus. FSM goes into a known state
   input   wire           busy_m, 
   input   wire           busy_p, 
   input   wire           clk,                    // posedge
   input   wire           end_mon_cnt, 
   input   wire           end_read_elink,         // this signal goes high when CANopen block has finshed writing transmit message buffer register 
   input   wire           end_write_elink_spi, 
   input   wire           irq_spi_mon_tra, 
   input   wire           rst,                    // synchronous low active
   input   wire    [7:0]  spi_tra_mon_reg, 
   input   wire           start_bus_init,         // initialize request from bridge FSM of bridge controller 
   input   wire           start_mon_init, 
   input   wire           start_power_off, 
   input   wire           start_power_on, 
   input   wire           start_read_power, 
   input   wire           timeoutrst,             // timeout reset signal to the state machine in case bridge controller is not respoding for a specified time
   output  reg     [4:0]  addr_write, 
   output  reg            bus_en_done,            // indication to bridge FSM when initialization is finished 
   output  reg            cs_m, 
   output  reg            cs_p, 
   output  reg     [7:0]  data_init,              // request to caninterface block
   output  reg            entimeout, 
   output  reg            mon_en_done, 
   output  reg            read_spi_mode, 
   output  reg            rst_mon_cnt, 
   output  reg            spi_power_mode, 
   output  reg            start_init_spi, 
   output  reg            start_mon_cnt, 
   output  reg            start_read_elink,       // signal to read transmit message buffer register 
   output  reg            start_write_elink_spi, 
   output  reg     [8:0]  statedeb,               // State debug signal 
   output  reg            transcieve_m, 
   output  reg            transcieve_p
);


// Internal Declarations


// Module Declarations

// State encoding
parameter 
          waittoact       = 8'd0,
          reset           = 8'd1,
          start           = 8'd2,
          endinit1        = 8'd3,
          start1          = 8'd4,
          st_GPIOA        = 8'd5,
          st_GPIOA1       = 8'd6,
          st_GPIOA2       = 8'd7,
          End_Select      = 8'd8,
          read_elink_mes1 = 8'd9,
          Done            = 8'd10,
          write_elink     = 8'd11,
          Offset_cal0     = 8'd12,
          Offset__cal1    = 8'd13,
          Offset__cal2    = 8'd14,
          Offset__cal3    = 8'd15,
          Gain_cal0       = 8'd16,
          Gain_cal1       = 8'd17,
          Gain_cal2       = 8'd18,
          Gain_cal3       = 8'd19,
          write_csrs7     = 8'd20,
          write_csrs6     = 8'd21,
          write_csrs5     = 8'd22,
          write_csrs4     = 8'd23,
          write_csrs0     = 8'd24,
          write_csrs1     = 8'd25,
          write_csrs2     = 8'd26,
          ST_Config4      = 8'd27,
          ST_Config3      = 8'd28,
          ST_Config1      = 8'd29,
          ST_Config2      = 8'd30,
          ST_Rest_2       = 8'd31,
          ST_Rest_4       = 8'd32,
          ST_Rest_1       = 8'd33,
          St_wait         = 8'd34,
          ST_Rest_RS_1    = 8'd35,
          ST_Rest_RS_2    = 8'd36,
          st_GPIOA9       = 8'd37,
          st_GPIOA10      = 8'd38,
          st_GPIOA11      = 8'd39,
          w_busy15        = 8'd40,
          w_busy16        = 8'd41,
          w_busy17        = 8'd42,
          ST_IODIRA0      = 8'd43,
          w_busy0         = 8'd44,
          ST_IODIRA1      = 8'd45,
          w_busy1         = 8'd46,
          ST_IODIRA2      = 8'd47,
          w_busy2         = 8'd48,
          w_busy5         = 8'd49,
          st_IODIRB1      = 8'd50,
          st_IODIRB2      = 8'd51,
          st_IODIRB       = 8'd52,
          w_busy3         = 8'd53,
          w_busy4         = 8'd54,
          w_busy7         = 8'd55,
          st_GPIOB2       = 8'd56,
          st_GPIOB1       = 8'd57,
          w_busy8         = 8'd58,
          w_busy6         = 8'd59,
          st_GPIOB0       = 8'd60,
          st_GPPUA        = 8'd61,
          w_busy11        = 8'd62,
          w_busy9         = 8'd63,
          st_GPPUA2       = 8'd64,
          st_GPPUA1       = 8'd65,
          w_busy10        = 8'd66,
          st_GPPUB1       = 8'd67,
          w_busy13        = 8'd68,
          w_busy12        = 8'd69,
          st_GPPUB2       = 8'd70,
          w_busy14        = 8'd71,
          st_GPPUB        = 8'd72,
          CS_high0        = 8'd73,
          CS_high1        = 8'd74,
          CS_high2        = 8'd75,
          CS_high3        = 8'd76,
          CS_high4        = 8'd77,
          CS_high5        = 8'd78,
          w_busy26        = 8'd79,
          w_busy27        = 8'd80,
          w_busy28        = 8'd81,
          w_busy29        = 8'd82,
          w_busy30        = 8'd83,
          w_busy31        = 8'd84,
          ST_Init_0       = 8'd85,
          ST_wait_0       = 8'd86,
          ST_Init_1       = 8'd87,
          ST_wait_1       = 8'd88,
          ST_Init_2       = 8'd89,
          ST_wait_2       = 8'd90,
          ST_Init_3       = 8'd91,
          ST_wait_3       = 8'd92,
          ST_Init_4       = 8'd93,
          ST_wait_4       = 8'd94,
          ST_Init_5       = 8'd95,
          ST_wait_5       = 8'd96,
          ST_Init_6       = 8'd97,
          ST_wait_6       = 8'd98,
          ST_Init_7       = 8'd99,
          ST_wait_7       = 8'd100,
          ST_Init_8       = 8'd101,
          ST_wait_8       = 8'd102,
          ST_Init_9       = 8'd103,
          ST_wait_9       = 8'd104,
          ST_Init_10      = 8'd105,
          ST_wait_10      = 8'd106,
          ST_Init_11      = 8'd107,
          ST_wait_11      = 8'd108,
          ST_Init_12      = 8'd109,
          ST_wait_12      = 8'd110,
          ST_Init_13      = 8'd111,
          ST_wait_13      = 8'd112,
          ST_Init_14      = 8'd113,
          ST_wait_14      = 8'd114,
          st_Init_2       = 8'd115,
          ST_wait_15      = 8'd116,
          ST_Rest_3       = 8'd117,
          ST_Rest_RS_3    = 8'd118,
          ST_Rest_RS_4    = 8'd119,
          St_wait1        = 8'd120,
          St_wait5        = 8'd121,
          St_wait6        = 8'd122,
          St_wait7        = 8'd123,
          St_wait8        = 8'd124,
          St_wait9        = 8'd125,
          St_wait10       = 8'd126,
          St_wait17       = 8'd127,
          St_wait18       = 8'd128,
          St_wait19       = 8'd129,
          St_wait20       = 8'd130,
          St_wait32       = 8'd131,
          St_wait33       = 8'd132,
          St_wait34       = 8'd133,
          ST_Config5      = 8'd134,
          ST_Config6      = 8'd135,
          St_wait35       = 8'd136,
          ST_Config7      = 8'd137,
          St_wait36       = 8'd138,
          ST_Config8      = 8'd139,
          St_wait37       = 8'd140,
          ST_Config9      = 8'd141,
          St_wait38       = 8'd142,
          ST_Config10     = 8'd143,
          St_wait39       = 8'd144,
          St_wait40       = 8'd145,
          ST_Config11     = 8'd146,
          St_wait41       = 8'd147,
          ST_Config12     = 8'd148,
          St_wait42       = 8'd149,
          ST_Config13     = 8'd150,
          St_wait43       = 8'd151,
          St_wait44       = 8'd152,
          ST_Config14     = 8'd153,
          St_wait45       = 8'd154,
          ST_Config15     = 8'd155,
          St_wait46       = 8'd156,
          ST_Config16     = 8'd157,
          St_wait47       = 8'd158,
          St_wait25       = 8'd159,
          St_wait26       = 8'd160,
          St_wait27       = 8'd161,
          St_wait28       = 8'd162,
          St_wait29       = 8'd163,
          St_wait30       = 8'd164,
          St_wait31       = 8'd165,
          ST_Config17     = 8'd166,
          St_wait48       = 8'd167,
          ST_Config18     = 8'd168,
          St_wait49       = 8'd169,
          St_wait50       = 8'd170,
          St_wait51       = 8'd171,
          ST_Config19     = 8'd172,
          St_wait52       = 8'd173,
          ST_Config20     = 8'd174,
          St_wait53       = 8'd175,
          St_wait54       = 8'd176,
          ST_Config21     = 8'd177,
          St_wait55       = 8'd178,
          ST_Config22     = 8'd179,
          St_wait56       = 8'd180,
          St_wait57       = 8'd181,
          ST_Config23     = 8'd182,
          St_wait58       = 8'd183,
          ST_Config24     = 8'd184,
          St_wait59       = 8'd185,
          Break_Loop      = 8'd186,
          ST_CountRst     = 8'd187,
          ST_Start_Cnt    = 8'd188,
          CS_high16       = 8'd189,
          w_busy43        = 8'd190,
          st_GPIOA15      = 8'd191,
          st_GPIOA16      = 8'd192,
          st_GPIOA17      = 8'd193,
          w_busy40        = 8'd194,
          w_busy41        = 8'd195,
          w_busy42        = 8'd196,
          CS_high6        = 8'd197,
          w_busy44        = 8'd198,
          CS_high17       = 8'd199,
          w_busy48        = 8'd200,
          st_GPIOA12      = 8'd201,
          st_GPIOA13      = 8'd202,
          st_GPIOA14      = 8'd203,
          w_busy18        = 8'd204,
          w_busy19        = 8'd205,
          w_busy20        = 8'd206,
          st_GPIOA18      = 8'd207,
          st_GPIOA19      = 8'd208,
          st_GPIOA20      = 8'd209,
          w_busy45        = 8'd210,
          w_busy46        = 8'd211,
          w_busy47        = 8'd212,
          CS_high11       = 8'd213,
          w_busy49        = 8'd214,
          CS_high18       = 8'd215,
          w_busy53        = 8'd216,
          st_GPIOA21      = 8'd217,
          st_GPIOA22      = 8'd218,
          st_GPIOA23      = 8'd219,
          w_busy21        = 8'd220,
          w_busy22        = 8'd221,
          w_busy23        = 8'd222,
          st_GPIOA24      = 8'd223,
          st_GPIOA25      = 8'd224,
          st_GPIOA26      = 8'd225,
          w_busy50        = 8'd226,
          w_busy51        = 8'd227,
          w_busy52        = 8'd228,
          s0              = 8'd229,
          s1              = 8'd230,
          End_Select1     = 8'd231,
          ST_Read_reg4    = 8'd232,
          Start_reading   = 8'd233,
          St_wait64       = 8'd234,
          ST_Rest_RS_16   = 8'd235,
          ST_Rest_RS_17   = 8'd236,
          St_wait66       = 8'd237,
          ST_Rest_RS_18   = 8'd238,
          St_wait67       = 8'd239,
          w_busy55        = 8'd240,
          St_wait68       = 8'd241,
          ST_Rest_RS_19   = 8'd242,
          w_busy57        = 8'd243,
          w_busy58        = 8'd244,
          w_busy59        = 8'd245,
          w_busy60        = 8'd246,
          s2              = 8'd247,
          s3              = 8'd248,
          s4              = 8'd249,
          s5              = 8'd250,
          s6              = 8'd251,
          s7              = 8'd252;

reg [7:0] current_state, next_state;

// Wait State Signals
reg [3:0] csm_timer;
reg [3:0] csm_next_timer;
reg       csm_timeout;
reg       csm_to_w_busy55;
reg       csm_to_w_busy57;
reg       csm_to_w_busy58;
reg       csm_to_w_busy59;
reg       csm_to_w_busy60;
reg       csm_to_s2;
reg       csm_to_s3;
reg       csm_to_s4;
reg       csm_to_s5;
reg       csm_to_s6;
reg       csm_to_s7;

//-----------------------------------------------------------------
// Next State Block for machine csm
//-----------------------------------------------------------------
always @(
   busy_m, 
   busy_p, 
   csm_timeout, 
   current_state, 
   end_mon_cnt, 
   end_read_elink, 
   end_write_elink_spi, 
   irq_spi_mon_tra, 
   rst, 
   start_bus_init, 
   start_mon_init, 
   start_power_off, 
   start_power_on, 
   start_read_power
)
begin : next_state_block_proc
   // Default assignments to Wait State entry flags
   csm_to_w_busy55 = 1'b0;
   csm_to_w_busy57 = 1'b0;
   csm_to_w_busy58 = 1'b0;
   csm_to_w_busy59 = 1'b0;
   csm_to_w_busy60 = 1'b0;
   csm_to_s2 = 1'b0;
   csm_to_s3 = 1'b0;
   csm_to_s4 = 1'b0;
   csm_to_s5 = 1'b0;
   csm_to_s6 = 1'b0;
   csm_to_s7 = 1'b0;
   case (current_state) 
      waittoact: begin
         if (start_bus_init  == 1)
            next_state = start;
         else if (start_mon_init ==1)
            next_state = start1;
         else if (start_power_on ==1)
            next_state = s0;
         else if (start_power_off ==1)
            next_state = s1;
         else if (irq_spi_mon_tra ==1)
            next_state = read_elink_mes1;
         else if (start_read_power ==1)
            next_state = st_GPIOA9;
         else
            next_state = waittoact;
      end
      reset: begin
         if (rst == 1)
            next_state = waittoact;
         else
            next_state = reset;
      end
      start: begin
         next_state = ST_IODIRA0;
      end
      endinit1: begin
         next_state = waittoact;
      end
      start1: begin
         next_state = ST_Init_0;
      end
      st_GPIOA: begin
         next_state = w_busy15;
      end
      st_GPIOA1: begin
         next_state = w_busy16;
      end
      st_GPIOA2: begin
         next_state = w_busy17;
      end
      End_Select: begin
         next_state = waittoact;
      end
      read_elink_mes1: begin
         if (end_read_elink == 1)
            next_state = ST_Read_reg4;
         else
            next_state = read_elink_mes1;
      end
      Done: begin
         next_state = waittoact;
      end
      write_elink: begin
         if (end_write_elink_spi ==1)
            next_state = Done;
         else
            next_state = write_elink;
      end
      Offset_cal0: begin
         next_state = St_wait32;
      end
      Offset__cal1: begin
         next_state = St_wait33;
      end
      Offset__cal2: begin
         next_state = St_wait40;
      end
      Offset__cal3: begin
         next_state = St_wait44;
      end
      Gain_cal0: begin
         next_state = St_wait50;
      end
      Gain_cal1: begin
         next_state = St_wait51;
      end
      Gain_cal2: begin
         next_state = St_wait54;
      end
      Gain_cal3: begin
         next_state = St_wait57;
      end
      write_csrs7: begin
         next_state = St_wait31;
      end
      write_csrs6: begin
         next_state = St_wait30;
      end
      write_csrs5: begin
         next_state = St_wait29;
      end
      write_csrs4: begin
         next_state = St_wait28;
      end
      write_csrs0: begin
         next_state = St_wait25;
      end
      write_csrs1: begin
         next_state = St_wait26;
      end
      write_csrs2: begin
         next_state = St_wait27;
      end
      ST_Config4: begin
         next_state = St_wait20;
      end
      ST_Config3: begin
         next_state = St_wait19;
      end
      ST_Config1: begin
         next_state = St_wait18;
      end
      ST_Config2: begin
         next_state = St_wait17;
      end
      ST_Rest_2: begin
         next_state = St_wait1;
      end
      ST_Rest_4: begin
         next_state = St_wait6;
      end
      ST_Rest_1: begin
         next_state = St_wait;
      end
      St_wait: begin
         if (busy_m==1)
            next_state = ST_Rest_2;
         else
            next_state = St_wait;
      end
      ST_Rest_RS_1: begin
         next_state = St_wait7;
      end
      ST_Rest_RS_2: begin
         next_state = St_wait8;
      end
      st_GPIOA9: begin
         next_state = st_GPIOA10;
      end
      st_GPIOA10: begin
         next_state = st_GPIOA11;
      end
      st_GPIOA11: begin
         next_state = waittoact;
      end
      w_busy15: begin
         if (busy_p==1)
            next_state = st_GPIOA1;
         else
            next_state = w_busy15;
      end
      w_busy16: begin
         if (busy_p==1)
            next_state = st_GPIOA2;
         else
            next_state = w_busy16;
      end
      w_busy17: begin
         if (busy_p==1)
            next_state = CS_high5;
         else
            next_state = w_busy17;
      end
      ST_IODIRA0: begin
         next_state = w_busy0;
      end
      w_busy0: begin
         if (busy_p==1)
            next_state = ST_IODIRA1;
         else
            next_state = w_busy0;
      end
      ST_IODIRA1: begin
         next_state = w_busy1;
      end
      w_busy1: begin
         if (busy_p==1)
            next_state = ST_IODIRA2;
         else
            next_state = w_busy1;
      end
      ST_IODIRA2: begin
         next_state = w_busy2;
      end
      w_busy2: begin
         if (busy_p==1)
            next_state = CS_high0;
         else
            next_state = w_busy2;
      end
      w_busy5: begin
         if (busy_p==1)
            next_state = CS_high1;
         else
            next_state = w_busy5;
      end
      st_IODIRB1: begin
         next_state = w_busy4;
      end
      st_IODIRB2: begin
         next_state = w_busy5;
      end
      st_IODIRB: begin
         next_state = w_busy3;
      end
      w_busy3: begin
         if (busy_p==1)
            next_state = st_IODIRB1;
         else
            next_state = w_busy3;
      end
      w_busy4: begin
         if (busy_p==1)
            next_state = st_IODIRB2;
         else
            next_state = w_busy4;
      end
      w_busy7: begin
         if (busy_p==1)
            next_state = st_GPIOB2;
         else
            next_state = w_busy7;
      end
      st_GPIOB2: begin
         next_state = w_busy8;
      end
      st_GPIOB1: begin
         next_state = w_busy7;
      end
      w_busy8: begin
         if (busy_p==1)
            next_state = CS_high2;
         else
            next_state = w_busy8;
      end
      w_busy6: begin
         if (busy_p==1)
            next_state = st_GPIOB1;
         else
            next_state = w_busy6;
      end
      st_GPIOB0: begin
         next_state = w_busy6;
      end
      st_GPPUA: begin
         next_state = w_busy9;
      end
      w_busy11: begin
         if (busy_p==1)
            next_state = st_GPPUA2;
         else
            next_state = w_busy11;
      end
      w_busy9: begin
         if (busy_p==1)
            next_state = st_GPPUA1;
         else
            next_state = w_busy9;
      end
      st_GPPUA2: begin
         next_state = w_busy10;
      end
      st_GPPUA1: begin
         next_state = w_busy11;
      end
      w_busy10: begin
         if (busy_p==1)
            next_state = CS_high3;
         else
            next_state = w_busy10;
      end
      st_GPPUB1: begin
         next_state = w_busy13;
      end
      w_busy13: begin
         if (busy_p==1)
            next_state = st_GPPUB2;
         else
            next_state = w_busy13;
      end
      w_busy12: begin
         if (busy_p==1)
            next_state = st_GPPUB1;
         else
            next_state = w_busy12;
      end
      st_GPPUB2: begin
         next_state = w_busy14;
      end
      w_busy14: begin
         if (busy_p==1)
            next_state = CS_high4;
         else
            next_state = w_busy14;
      end
      st_GPPUB: begin
         next_state = w_busy12;
      end
      CS_high0: begin
         next_state = w_busy26;
      end
      CS_high1: begin
         next_state = w_busy27;
      end
      CS_high2: begin
         next_state = w_busy28;
      end
      CS_high3: begin
         next_state = w_busy29;
      end
      CS_high4: begin
         next_state = w_busy30;
      end
      CS_high5: begin
         next_state = w_busy31;
      end
      w_busy26: begin
         if (busy_p==1)
            next_state = st_IODIRB;
         else
            next_state = w_busy26;
      end
      w_busy27: begin
         if (busy_p==1)
            next_state = st_GPIOB0;
         else
            next_state = w_busy27;
      end
      w_busy28: begin
         if (busy_p==1)
            next_state = st_GPPUA;
         else
            next_state = w_busy28;
      end
      w_busy29: begin
         if (busy_p==1)
            next_state = st_GPPUB;
         else
            next_state = w_busy29;
      end
      w_busy30: begin
         if (busy_p==1)
            next_state = st_GPIOA;
         else
            next_state = w_busy30;
      end
      w_busy31: begin
         if (busy_p==1)
            next_state = st_GPIOA15;
         else
            next_state = w_busy31;
      end
      ST_Init_0: begin
         next_state = ST_wait_0;
      end
      ST_wait_0: begin
         if (busy_m==1)
            next_state = ST_Init_1;
         else
            next_state = ST_wait_0;
      end
      ST_Init_1: begin
         next_state = ST_wait_1;
      end
      ST_wait_1: begin
         if (busy_m==1)
            next_state = ST_Init_2;
         else
            next_state = ST_wait_1;
      end
      ST_Init_2: begin
         next_state = ST_wait_2;
      end
      ST_wait_2: begin
         if (busy_m==1)
            next_state = ST_Init_3;
         else
            next_state = ST_wait_2;
      end
      ST_Init_3: begin
         next_state = ST_wait_3;
      end
      ST_wait_3: begin
         if (busy_m==1)
            next_state = ST_Init_4;
         else
            next_state = ST_wait_3;
      end
      ST_Init_4: begin
         next_state = ST_wait_4;
      end
      ST_wait_4: begin
         if (busy_m==1)
            next_state = ST_Init_5;
         else
            next_state = ST_wait_4;
      end
      ST_Init_5: begin
         next_state = ST_wait_5;
      end
      ST_wait_5: begin
         if (busy_m==1)
            next_state = ST_Init_6;
         else
            next_state = ST_wait_5;
      end
      ST_Init_6: begin
         next_state = ST_wait_6;
      end
      ST_wait_6: begin
         if (busy_m==1)
            next_state = ST_Init_7;
         else
            next_state = ST_wait_6;
      end
      ST_Init_7: begin
         next_state = ST_wait_7;
      end
      ST_wait_7: begin
         if (busy_m==1)
            next_state = ST_Init_8;
         else
            next_state = ST_wait_7;
      end
      ST_Init_8: begin
         next_state = ST_wait_8;
      end
      ST_wait_8: begin
         if (busy_m==1)
            next_state = ST_Init_9;
         else
            next_state = ST_wait_8;
      end
      ST_Init_9: begin
         next_state = ST_wait_9;
      end
      ST_wait_9: begin
         if (busy_m==1)
            next_state = ST_Init_10;
         else
            next_state = ST_wait_9;
      end
      ST_Init_10: begin
         next_state = ST_wait_10;
      end
      ST_wait_10: begin
         if (busy_m==1)
            next_state = ST_Init_11;
         else
            next_state = ST_wait_10;
      end
      ST_Init_11: begin
         next_state = ST_wait_11;
      end
      ST_wait_11: begin
         if (busy_m==1)
            next_state = ST_Init_12;
         else
            next_state = ST_wait_11;
      end
      ST_Init_12: begin
         next_state = ST_wait_12;
      end
      ST_wait_12: begin
         if (busy_m==1)
            next_state = ST_Init_13;
         else
            next_state = ST_wait_12;
      end
      ST_Init_13: begin
         next_state = ST_wait_13;
      end
      ST_wait_13: begin
         if (busy_m==1)
            next_state = ST_Init_14;
         else
            next_state = ST_wait_13;
      end
      ST_Init_14: begin
         next_state = ST_wait_14;
      end
      ST_wait_14: begin
         if (busy_m==1)
            next_state = st_Init_2;
         else
            next_state = ST_wait_14;
      end
      st_Init_2: begin
         next_state = ST_wait_15;
      end
      ST_wait_15: begin
         if (busy_m==1)
            next_state = ST_Rest_1;
         else
            next_state = ST_wait_15;
      end
      ST_Rest_3: begin
         next_state = St_wait5;
      end
      ST_Rest_RS_3: begin
         next_state = St_wait9;
      end
      ST_Rest_RS_4: begin
         next_state = St_wait10;
      end
      St_wait1: begin
         if (busy_m==1)
            next_state = ST_Rest_3;
         else
            next_state = St_wait1;
      end
      St_wait5: begin
         next_state = ST_Rest_4;
      end
      St_wait6: begin
         if (busy_m==1)
            next_state = ST_Rest_RS_1;
         else
            next_state = St_wait6;
      end
      St_wait7: begin
         if (busy_m==1)
            next_state = ST_Rest_RS_2;
         else
            next_state = St_wait7;
      end
      St_wait8: begin
         if (busy_m==1)
            next_state = ST_Rest_RS_3;
         else
            next_state = St_wait8;
      end
      St_wait9: begin
         if (busy_m==1)
            next_state = ST_Rest_RS_4;
         else
            next_state = St_wait9;
      end
      St_wait10: begin
         if (busy_m==1)
            next_state = ST_Config1;
         else
            next_state = St_wait10;
      end
      St_wait17: begin
         if (busy_m==1)
            next_state = ST_Config3;
         else
            next_state = St_wait17;
      end
      St_wait18: begin
         if (busy_m==1)
            next_state = ST_Config2;
         else
            next_state = St_wait18;
      end
      St_wait19: begin
         if (busy_m==1)
            next_state = ST_Config4;
         else
            next_state = St_wait19;
      end
      St_wait20: begin
         if (busy_m==1)
            next_state = write_csrs0;
         else
            next_state = St_wait20;
      end
      St_wait32: begin
         if (busy_m==1)
            next_state = ST_Config5;
         else
            next_state = St_wait32;
      end
      St_wait33: begin
         if (busy_m==1)
            next_state = ST_Config8;
         else
            next_state = St_wait33;
      end
      St_wait34: begin
         if (busy_m==1) begin
            next_state = s2;
            csm_to_s2 = 1'b1;
         end
         else
            next_state = St_wait34;
      end
      ST_Config5: begin
         next_state = St_wait35;
      end
      ST_Config6: begin
         next_state = St_wait34;
      end
      St_wait35: begin
         if (busy_m==1)
            next_state = ST_Config7;
         else
            next_state = St_wait35;
      end
      ST_Config7: begin
         next_state = St_wait36;
      end
      St_wait36: begin
         if (busy_m==1)
            next_state = ST_Config6;
         else
            next_state = St_wait36;
      end
      ST_Config8: begin
         next_state = St_wait37;
      end
      St_wait37: begin
         if (busy_m==1)
            next_state = ST_Config9;
         else
            next_state = St_wait37;
      end
      ST_Config9: begin
         next_state = St_wait38;
      end
      St_wait38: begin
         if (busy_m==1)
            next_state = ST_Config10;
         else
            next_state = St_wait38;
      end
      ST_Config10: begin
         next_state = St_wait39;
      end
      St_wait39: begin
         if (busy_m==1) begin
            next_state = s3;
            csm_to_s3 = 1'b1;
         end
         else
            next_state = St_wait39;
      end
      St_wait40: begin
         if (busy_m==1)
            next_state = ST_Config11;
         else
            next_state = St_wait40;
      end
      ST_Config11: begin
         next_state = St_wait41;
      end
      St_wait41: begin
         if (busy_m==1)
            next_state = ST_Config12;
         else
            next_state = St_wait41;
      end
      ST_Config12: begin
         next_state = St_wait42;
      end
      St_wait42: begin
         if (busy_m==1)
            next_state = ST_Config13;
         else
            next_state = St_wait42;
      end
      ST_Config13: begin
         next_state = St_wait43;
      end
      St_wait43: begin
         if (busy_m==1) begin
            next_state = s4;
            csm_to_s4 = 1'b1;
         end
         else
            next_state = St_wait43;
      end
      St_wait44: begin
         if (busy_m==1)
            next_state = ST_Config14;
         else
            next_state = St_wait44;
      end
      ST_Config14: begin
         next_state = St_wait45;
      end
      St_wait45: begin
         if (busy_m==1)
            next_state = ST_Config15;
         else
            next_state = St_wait45;
      end
      ST_Config15: begin
         next_state = St_wait46;
      end
      St_wait46: begin
         if (busy_m==1)
            next_state = ST_Config16;
         else
            next_state = St_wait46;
      end
      ST_Config16: begin
         next_state = St_wait47;
      end
      St_wait47: begin
         if (busy_m==1)
            next_state = Gain_cal0;
         else
            next_state = St_wait47;
      end
      St_wait25: begin
         if (busy_m==1)
            next_state = write_csrs1;
         else
            next_state = St_wait25;
      end
      St_wait26: begin
         if (busy_m==1)
            next_state = write_csrs2;
         else
            next_state = St_wait26;
      end
      St_wait27: begin
         if (busy_m==1)
            next_state = write_csrs4;
         else
            next_state = St_wait27;
      end
      St_wait28: begin
         if (busy_m==1)
            next_state = write_csrs5;
         else
            next_state = St_wait28;
      end
      St_wait29: begin
         if (busy_m==1)
            next_state = write_csrs6;
         else
            next_state = St_wait29;
      end
      St_wait30: begin
         if (busy_m==1)
            next_state = write_csrs7;
         else
            next_state = St_wait30;
      end
      St_wait31: begin
         if (busy_m==1)
            next_state = Offset_cal0;
         else
            next_state = St_wait31;
      end
      ST_Config17: begin
         next_state = St_wait48;
      end
      St_wait48: begin
         if (busy_m==1)
            next_state = ST_Config18;
         else
            next_state = St_wait48;
      end
      ST_Config18: begin
         next_state = St_wait49;
      end
      St_wait49: begin
         if (busy_m==1) begin
            next_state = s5;
            csm_to_s5 = 1'b1;
         end
         else
            next_state = St_wait49;
      end
      St_wait50: begin
         if (busy_m==1)
            next_state = ST_Config17;
         else
            next_state = St_wait50;
      end
      St_wait51: begin
         if (busy_m==1)
            next_state = ST_Config19;
         else
            next_state = St_wait51;
      end
      ST_Config19: begin
         next_state = St_wait52;
      end
      St_wait52: begin
         if (busy_m==1)
            next_state = ST_Config20;
         else
            next_state = St_wait52;
      end
      ST_Config20: begin
         next_state = St_wait53;
      end
      St_wait53: begin
         if (busy_m==1) begin
            next_state = s6;
            csm_to_s6 = 1'b1;
         end
         else
            next_state = St_wait53;
      end
      St_wait54: begin
         if (busy_m==1)
            next_state = ST_Config21;
         else
            next_state = St_wait54;
      end
      ST_Config21: begin
         next_state = St_wait55;
      end
      St_wait55: begin
         if (busy_m==1)
            next_state = ST_Config22;
         else
            next_state = St_wait55;
      end
      ST_Config22: begin
         next_state = St_wait56;
      end
      St_wait56: begin
         if (busy_m==1) begin
            next_state = s7;
            csm_to_s7 = 1'b1;
         end
         else
            next_state = St_wait56;
      end
      St_wait57: begin
         if (busy_m==1)
            next_state = ST_Config23;
         else
            next_state = St_wait57;
      end
      ST_Config23: begin
         next_state = St_wait58;
      end
      St_wait58: begin
         if (busy_m==1)
            next_state = ST_Config24;
         else
            next_state = St_wait58;
      end
      ST_Config24: begin
         next_state = St_wait59;
      end
      St_wait59: begin
         if (busy_m==1)
            next_state = Break_Loop;
         else
            next_state = St_wait59;
      end
      Break_Loop: begin
         if (end_mon_cnt)
            next_state = ST_CountRst;
         else
            next_state = ST_Start_Cnt;
      end
      ST_CountRst: begin
         next_state = endinit1;
      end
      ST_Start_Cnt: begin
         next_state = ST_Init_0;
      end
      CS_high16: begin
         next_state = w_busy43;
      end
      w_busy43: begin
         if (busy_p==1)
            next_state = End_Select;
         else
            next_state = w_busy43;
      end
      st_GPIOA15: begin
         next_state = w_busy40;
      end
      st_GPIOA16: begin
         next_state = w_busy41;
      end
      st_GPIOA17: begin
         next_state = w_busy42;
      end
      w_busy40: begin
         if (busy_p==1)
            next_state = st_GPIOA16;
         else
            next_state = w_busy40;
      end
      w_busy41: begin
         if (busy_p==1)
            next_state = st_GPIOA17;
         else
            next_state = w_busy41;
      end
      w_busy42: begin
         if (busy_p==1)
            next_state = CS_high16;
         else
            next_state = w_busy42;
      end
      CS_high6: begin
         next_state = w_busy44;
      end
      w_busy44: begin
         if (busy_p==1)
            next_state = st_GPIOA18;
         else
            next_state = w_busy44;
      end
      CS_high17: begin
         next_state = w_busy48;
      end
      w_busy48: begin
         if (busy_p==1)
            next_state = End_Select1;
         else
            next_state = w_busy48;
      end
      st_GPIOA12: begin
         next_state = w_busy18;
      end
      st_GPIOA13: begin
         next_state = w_busy19;
      end
      st_GPIOA14: begin
         next_state = w_busy20;
      end
      w_busy18: begin
         if (busy_p==1)
            next_state = st_GPIOA13;
         else
            next_state = w_busy18;
      end
      w_busy19: begin
         if (busy_p==1)
            next_state = st_GPIOA14;
         else
            next_state = w_busy19;
      end
      w_busy20: begin
         if (busy_p==1)
            next_state = CS_high6;
         else
            next_state = w_busy20;
      end
      st_GPIOA18: begin
         next_state = w_busy45;
      end
      st_GPIOA19: begin
         next_state = w_busy46;
      end
      st_GPIOA20: begin
         next_state = w_busy47;
      end
      w_busy45: begin
         if (busy_p==1)
            next_state = st_GPIOA19;
         else
            next_state = w_busy45;
      end
      w_busy46: begin
         if (busy_p==1)
            next_state = st_GPIOA20;
         else
            next_state = w_busy46;
      end
      w_busy47: begin
         if (busy_p==1)
            next_state = CS_high17;
         else
            next_state = w_busy47;
      end
      CS_high11: begin
         next_state = w_busy49;
      end
      w_busy49: begin
         if (busy_p==1)
            next_state = st_GPIOA24;
         else
            next_state = w_busy49;
      end
      CS_high18: begin
         next_state = w_busy53;
      end
      w_busy53: begin
         if (busy_p==1)
            next_state = waittoact;
         else
            next_state = w_busy53;
      end
      st_GPIOA21: begin
         next_state = w_busy21;
      end
      st_GPIOA22: begin
         next_state = w_busy22;
      end
      st_GPIOA23: begin
         next_state = w_busy23;
      end
      w_busy21: begin
         if (busy_p==1)
            next_state = st_GPIOA22;
         else
            next_state = w_busy21;
      end
      w_busy22: begin
         if (busy_p==1)
            next_state = st_GPIOA23;
         else
            next_state = w_busy22;
      end
      w_busy23: begin
         if (busy_p==1)
            next_state = CS_high11;
         else
            next_state = w_busy23;
      end
      st_GPIOA24: begin
         next_state = w_busy50;
      end
      st_GPIOA25: begin
         next_state = w_busy51;
      end
      st_GPIOA26: begin
         next_state = w_busy52;
      end
      w_busy50: begin
         if (busy_p==1)
            next_state = st_GPIOA25;
         else
            next_state = w_busy50;
      end
      w_busy51: begin
         if (busy_p==1)
            next_state = st_GPIOA26;
         else
            next_state = w_busy51;
      end
      w_busy52: begin
         if (busy_p==1)
            next_state = CS_high18;
         else
            next_state = w_busy52;
      end
      s0: begin
         next_state = st_GPIOA12;
      end
      s1: begin
         next_state = st_GPIOA21;
      end
      End_Select1: begin
         next_state = waittoact;
      end
      ST_Read_reg4: begin
         next_state = Start_reading;
      end
      Start_reading: begin
         if (busy_m==1) begin
            next_state = w_busy57;
            csm_to_w_busy57 = 1'b1;
         end
         else
            next_state = Start_reading;
      end
      St_wait64: begin
         if (busy_m==1) begin
            next_state = w_busy58;
            csm_to_w_busy58 = 1'b1;
         end
         else
            next_state = St_wait64;
      end
      ST_Rest_RS_16: begin
         next_state = St_wait64;
      end
      ST_Rest_RS_17: begin
         next_state = St_wait66;
      end
      St_wait66: begin
         if (busy_m==1) begin
            next_state = w_busy59;
            csm_to_w_busy59 = 1'b1;
         end
         else
            next_state = St_wait66;
      end
      ST_Rest_RS_18: begin
         next_state = St_wait67;
      end
      St_wait67: begin
         if (busy_m==1) begin
            next_state = w_busy60;
            csm_to_w_busy60 = 1'b1;
         end
         else
            next_state = St_wait67;
      end
      w_busy55: begin
         if (csm_timeout)
            next_state = write_elink;
         else
            next_state = w_busy55;
      end
      St_wait68: begin
         if (busy_m==1) begin
            next_state = w_busy55;
            csm_to_w_busy55 = 1'b1;
         end
         else
            next_state = St_wait68;
      end
      ST_Rest_RS_19: begin
         next_state = St_wait68;
      end
      w_busy57: begin
         if (csm_timeout)
            next_state = ST_Rest_RS_16;
         else
            next_state = w_busy57;
      end
      w_busy58: begin
         if (csm_timeout)
            next_state = ST_Rest_RS_17;
         else
            next_state = w_busy58;
      end
      w_busy59: begin
         if (csm_timeout)
            next_state = ST_Rest_RS_18;
         else
            next_state = w_busy59;
      end
      w_busy60: begin
         if (csm_timeout)
            next_state = ST_Rest_RS_19;
         else
            next_state = w_busy60;
      end
      s2: begin
         if (csm_timeout)
            next_state = Offset__cal1;
         else
            next_state = s2;
      end
      s3: begin
         if (csm_timeout)
            next_state = Offset__cal2;
         else
            next_state = s3;
      end
      s4: begin
         if (csm_timeout)
            next_state = Offset__cal3;
         else
            next_state = s4;
      end
      s5: begin
         if (csm_timeout)
            next_state = Gain_cal1;
         else
            next_state = s5;
      end
      s6: begin
         if (csm_timeout)
            next_state = Gain_cal2;
         else
            next_state = s6;
      end
      s7: begin
         if (csm_timeout)
            next_state = Gain_cal3;
         else
            next_state = s7;
      end
      default: 
         next_state = reset;
   endcase
end // Next State Block

//-----------------------------------------------------------------
// Output Block for machine csm
//-----------------------------------------------------------------
always @(
   current_state, 
   spi_tra_mon_reg
)
begin : output_block_proc
   // Default Assignment
   addr_write = 6'b0;
   bus_en_done = 0;
   cs_m = 1;
   cs_p = 1;
   data_init = 8'b0;
   entimeout = 1;
   mon_en_done = 0;
   read_spi_mode = 0;
   rst_mon_cnt = 0;
   spi_power_mode = 0;
   start_init_spi = 0;
   start_mon_cnt = 0;
   start_read_elink = 0;
   start_write_elink_spi = 0;
   transcieve_m = 0;
   transcieve_p = 0;

   // Combined Actions
   case (current_state) 
      waittoact: begin
         entimeout =0;
      end
      reset: begin
         read_spi_mode =0;
         spi_power_mode =0;
      end
      start: begin
         start_init_spi =1;
      end
      endinit1: begin
         mon_en_done=1;
      end
      start1: begin
         start_init_spi =1;
      end
      st_GPIOA: begin
         data_init =8'h40;
         cs_p = 0 ;
         transcieve_p =1;
      end
      st_GPIOA1: begin
         data_init =8'h12;
         cs_p = 0 ;
         transcieve_p =1;
      end
      st_GPIOA2: begin
         data_init =8'h01;
         cs_p = 0 ;
         transcieve_p =1;
      end
      End_Select: begin
         bus_en_done =1;
      end
      read_elink_mes1: begin
         start_read_elink = 1 ;
         read_spi_mode =1;
      end
      Done: begin
         read_spi_mode =1;
      end
      write_elink: begin
         start_write_elink_spi =1;
         read_spi_mode =1;
      end
      Offset_cal0: begin
         data_init = 8'h81;
         cs_m =0 ;
         transcieve_m =1;
      end
      Offset__cal1: begin
         data_init = 8'h89;
         cs_m =0 ;
         transcieve_m =1;
      end
      Offset__cal2: begin
         data_init = 8'h91;
         cs_m =0 ;
         transcieve_m =1;
      end
      Offset__cal3: begin
         data_init = 8'h99;
         cs_m =0 ;
         transcieve_m =1;
      end
      Gain_cal0: begin
         data_init = 8'h82;
         cs_m =0 ;
         transcieve_m =1;
      end
      Gain_cal1: begin
         data_init = 8'h8A;
         cs_m =0 ;
         transcieve_m =1;
      end
      Gain_cal2: begin
         data_init = 8'h92;
         cs_m =0 ;
         transcieve_m =1;
      end
      Gain_cal3: begin
         data_init = 8'h9A;
         cs_m =0 ;
         transcieve_m =1;
      end
      write_csrs7: begin
         data_init = 8'h8B;
         cs_m = 0 ;
         transcieve_m =1;
      end
      write_csrs6: begin
         data_init = 8'hB1;
         cs_m = 0 ;
         transcieve_m =1;
      end
      write_csrs5: begin
         data_init = 8'h10;
         cs_m = 0 ;
         transcieve_m =1;
      end
      write_csrs4: begin
         data_init = 8'h8B;
         cs_m = 0 ;
         transcieve_m =1;
      end
      write_csrs0: begin
         data_init = 8'h05;
         cs_m = 0 ;
         transcieve_m =1;
      end
      write_csrs1: begin
         data_init = 8'h00;
         cs_m = 0 ;
         transcieve_m =1;
      end
      write_csrs2: begin
         data_init = 8'hB0;
         cs_m = 0 ;
         transcieve_m =1;
      end
      ST_Config4: begin
         data_init = 8'h00;
         cs_m = 0 ;
         transcieve_m =1;
      end
      ST_Config3: begin
         data_init = 8'h30;
         cs_m = 0 ;
         transcieve_m =1;
      end
      ST_Config1: begin
         data_init = 8'h03;
         cs_m = 0 ;
         transcieve_m =1;
      end
      ST_Config2: begin
         data_init = 8'h00;
         cs_m = 0 ;
         transcieve_m =1;
      end
      ST_Rest_2: begin
         data_init = 8'h00;
         cs_m = 0 ;
         transcieve_m =1;
      end
      ST_Rest_4: begin
         data_init = 8'h80;
         cs_m = 0 ;
         transcieve_m =1;
      end
      ST_Rest_1: begin
         data_init = 8'h03;
         cs_m = 0 ;
         transcieve_m =1;
      end
      St_wait: begin
         data_init = 8'h03;
         cs_m = 0 ;
      end
      ST_Rest_RS_1: begin
         data_init = 8'h03;
         cs_m = 0 ;
         transcieve_m =1;
      end
      ST_Rest_RS_2: begin
         data_init = 8'h00;
         cs_m = 0 ;
         transcieve_m =1;
      end
      st_GPIOA9: begin
         data_init = 8'h40;
         cs_p = 0 ;
      end
      st_GPIOA10: begin
         data_init = 8'h12;
         cs_p = 0 ;
      end
      st_GPIOA11: begin
         data_init = 8'h00;
         cs_p = 0 ;
      end
      w_busy15: begin
         data_init =8'h40;
         cs_p = 0 ;
      end
      w_busy16: begin
         data_init =8'h12;
         cs_p = 0 ;
      end
      w_busy17: begin
         data_init =8'h01;
         cs_p = 0 ;
      end
      ST_IODIRA0: begin
         data_init =8'h40; 
         cs_p = 0 ;
         transcieve_p =1;
      end
      w_busy0: begin
         data_init =8'h40; 
         cs_p =0;
      end
      ST_IODIRA1: begin
         data_init =8'h00; 
         cs_p = 0 ;
         transcieve_p =1;
      end
      w_busy1: begin
         cs_p =0;
         data_init =8'h00;
      end
      ST_IODIRA2: begin
         data_init =8'h00; 
         cs_p = 0 ;
         transcieve_p =1;
      end
      w_busy2: begin
         data_init =8'h00; 
         cs_p =0;
      end
      w_busy5: begin
         data_init =8'h00; 
         cs_p =0;
      end
      st_IODIRB1: begin
         data_init =8'h01;
         cs_p = 0 ;
         transcieve_p =1;
      end
      st_IODIRB2: begin
         data_init =8'h00; 
         cs_p = 0 ;
         transcieve_p =1;
      end
      st_IODIRB: begin
         data_init =8'h40;
         cs_p = 0 ;
         transcieve_p =1;
      end
      w_busy3: begin
         data_init =8'h40;
         cs_p =0;
      end
      w_busy4: begin
         data_init =8'h01;
         cs_p =0;
      end
      w_busy7: begin
         data_init =8'h13;
         cs_p =0;
      end
      st_GPIOB2: begin
         data_init =8'h00;
         cs_p = 0 ;
         transcieve_p =1;
      end
      st_GPIOB1: begin
         data_init =8'h13;
         cs_p = 0 ;
         transcieve_p =1;
      end
      w_busy8: begin
         data_init =8'h00;
         cs_p = 0 ;
      end
      w_busy6: begin
         data_init =8'h40;
         cs_p =0;
      end
      st_GPIOB0: begin
         data_init =8'h40;
         cs_p = 0 ;
         transcieve_p =1;
      end
      st_GPPUA: begin
         data_init =8'h40;
         cs_p = 0 ;
         transcieve_p =1;
      end
      w_busy11: begin
         data_init =8'h0C;
         cs_p = 0 ;
      end
      w_busy9: begin
         cs_p = 0 ;
         data_init =8'h40;
      end
      st_GPPUA2: begin
         data_init =8'hFE;
         cs_p = 0 ;
         transcieve_p =1;
      end
      st_GPPUA1: begin
         data_init =8'h0C;
         cs_p = 0 ;
         transcieve_p =1;
      end
      w_busy10: begin
         data_init =8'hFE;
         cs_p =0;
      end
      st_GPPUB1: begin
         data_init =8'h0D;
         cs_p = 0 ;
         transcieve_p =1;
      end
      w_busy13: begin
         data_init =8'h0D;
         cs_p = 0 ;
      end
      w_busy12: begin
         data_init =8'h40;
         cs_p = 0 ;
      end
      st_GPPUB2: begin
         data_init =8'hFF;
         cs_p = 0 ;
         transcieve_p =1;
      end
      w_busy14: begin
         data_init =8'hFF;
         cs_p = 0 ;
      end
      st_GPPUB: begin
         data_init =8'h40;
         cs_p = 0 ;
         transcieve_p =1;
      end
      CS_high0: begin
         cs_p =1;
         transcieve_p =1;
      end
      CS_high1: begin
         cs_p =1;
         transcieve_p =1;
      end
      CS_high2: begin
         cs_p =1;
         transcieve_p =1;
      end
      CS_high3: begin
         cs_p =1;
         transcieve_p =1;
      end
      CS_high4: begin
         cs_p =1;
         transcieve_p =1;
      end
      CS_high5: begin
         cs_p =1;
         transcieve_p =1;
      end
      w_busy26: begin
         cs_p = 1 ;
      end
      w_busy27: begin
         cs_p = 1 ;
      end
      w_busy28: begin
         cs_p = 1 ;
      end
      w_busy29: begin
         cs_p = 1 ;
      end
      w_busy30: begin
         cs_p = 1 ;
      end
      w_busy31: begin
         cs_p = 1 ;
      end
      ST_Init_0: begin
         data_init = 8'hFF;
         cs_m =0;
         transcieve_m =1;
      end
      ST_wait_0: begin
         data_init = 8'hFF;
         cs_m =0;
      end
      ST_Init_1: begin
         data_init = 8'hFF;
         cs_m =0;
         transcieve_m =1;
      end
      ST_wait_1: begin
         data_init = 8'hFF;
         cs_m =0;
      end
      ST_Init_2: begin
         data_init = 8'hFF;
         cs_m =0;
         transcieve_m =1;
      end
      ST_wait_2: begin
         data_init = 8'hFF;
         cs_m =0;
      end
      ST_Init_3: begin
         data_init = 8'hFF;
         cs_m =0;
         transcieve_m =1;
      end
      ST_wait_3: begin
         data_init = 8'hFF;
         cs_m =0;
      end
      ST_Init_4: begin
         data_init = 8'hFF;
         cs_m =0;
         transcieve_m =1;
      end
      ST_wait_4: begin
         data_init = 8'hFF;
         cs_m =0;
      end
      ST_Init_5: begin
         data_init = 8'hFF;
         cs_m =0;
         transcieve_m =1;
      end
      ST_wait_5: begin
         data_init = 8'hFF;
         cs_m =0;
      end
      ST_Init_6: begin
         data_init = 8'hFF;
         cs_m =0;
         transcieve_m =1;
      end
      ST_wait_6: begin
         data_init = 8'hFF;
         cs_m =0;
      end
      ST_Init_7: begin
         data_init = 8'hFF;
         cs_m =0;
         transcieve_m =1;
      end
      ST_wait_7: begin
         data_init = 8'hFF;
         cs_m =0;
      end
      ST_Init_8: begin
         data_init = 8'hFF;
         cs_m =0;
         transcieve_m =1;
      end
      ST_wait_8: begin
         data_init = 8'hFF;
         cs_m =0;
      end
      ST_Init_9: begin
         data_init = 8'hFF;
         cs_m =0;
         transcieve_m =1;
      end
      ST_wait_9: begin
         data_init = 8'hFF;
         cs_m =0;
      end
      ST_Init_10: begin
         data_init = 8'hFF;
         cs_m =0;
         transcieve_m =1;
      end
      ST_wait_10: begin
         data_init = 8'hFF;
         cs_m =0;
      end
      ST_Init_11: begin
         data_init = 8'hFF;
         cs_m =0;
         transcieve_m =1;
      end
      ST_wait_11: begin
         data_init = 8'hFF;
         cs_m =0;
      end
      ST_Init_12: begin
         data_init = 8'hFF;
         cs_m =0;
         transcieve_m =1;
      end
      ST_wait_12: begin
         data_init = 8'hFF;
         cs_m =0;
      end
      ST_Init_13: begin
         data_init = 8'hFF;
         cs_m =0;
         transcieve_m =1;
      end
      ST_wait_13: begin
         data_init = 8'hFF;
         cs_m =0;
      end
      ST_Init_14: begin
         data_init = 8'hFF;
         cs_m =0;
         transcieve_m =1;
      end
      ST_wait_14: begin
         data_init = 8'hFF;
         cs_m =0;
      end
      st_Init_2: begin
         data_init = 8'hFE;
         cs_m =0;
         transcieve_m =1;
      end
      ST_wait_15: begin
         data_init = 8'hFE;
         cs_m =0;
      end
      ST_Rest_3: begin
         data_init = 8'h00;
         cs_m = 0 ;
         transcieve_m =1;
      end
      ST_Rest_RS_3: begin
         data_init = 8'h00;
         cs_m = 0 ;
         transcieve_m =1;
      end
      ST_Rest_RS_4: begin
         data_init = 8'h00;
         cs_m = 0 ;
         transcieve_m =1;
      end
      St_wait1: begin
         data_init = 8'h00;
         cs_m = 0 ;
      end
      St_wait5: begin
         data_init = 8'h00;
         cs_m = 0 ;
      end
      St_wait6: begin
         data_init = 8'h80;
         cs_m = 0 ;
      end
      St_wait7: begin
         data_init = 8'h03;
         cs_m = 0 ;
      end
      St_wait8: begin
         data_init = 8'h00;
         cs_m = 0 ;
      end
      St_wait9: begin
         data_init = 8'h00;
         cs_m = 0 ;
      end
      St_wait10: begin
         data_init = 8'h00;
         cs_m = 0 ;
      end
      St_wait17: begin
         data_init = 8'h00;
         cs_m = 0 ;
      end
      St_wait18: begin
         data_init = 8'h03;
         cs_m = 0 ;
      end
      St_wait19: begin
         data_init = 8'h30;
         cs_m = 0 ;
      end
      St_wait20: begin
         data_init = 8'h00;
         cs_m = 0 ;
      end
      St_wait32: begin
         data_init = 8'h81;
         cs_m = 0 ;
      end
      St_wait33: begin
         data_init = 8'h89;
         cs_m = 0 ;
      end
      St_wait34: begin
         data_init = 8'h00;
         cs_m = 0 ;
      end
      ST_Config5: begin
         data_init = 8'h00;
         cs_m = 0 ;
         transcieve_m =1;
      end
      ST_Config6: begin
         data_init = 8'h00;
         cs_m = 0 ;
         transcieve_m =1;
      end
      St_wait35: begin
         data_init = 8'h00;
         cs_m = 0 ;
      end
      ST_Config7: begin
         data_init = 8'h30;
         cs_m = 0 ;
         transcieve_m =1;
      end
      St_wait36: begin
         data_init = 8'h30;
         cs_m = 0 ;
      end
      ST_Config8: begin
         data_init = 8'h00;
         cs_m = 0 ;
         transcieve_m =1;
      end
      St_wait37: begin
         data_init = 8'h00;
         cs_m = 0 ;
      end
      ST_Config9: begin
         data_init = 8'h30;
         cs_m = 0 ;
         transcieve_m =1;
      end
      St_wait38: begin
         data_init = 8'h30;
         cs_m = 0 ;
      end
      ST_Config10: begin
         data_init = 8'h00;
         cs_m = 0 ;
         transcieve_m =1;
      end
      St_wait39: begin
         data_init = 8'h00;
         cs_m = 0 ;
      end
      St_wait40: begin
         data_init = 8'h91;
         cs_m = 0 ;
      end
      ST_Config11: begin
         data_init = 8'h00;
         cs_m = 0 ;
         transcieve_m =1;
      end
      St_wait41: begin
         data_init = 8'h00;
         cs_m = 0 ;
      end
      ST_Config12: begin
         data_init = 8'h30;
         cs_m = 0 ;
         transcieve_m =1;
      end
      St_wait42: begin
         data_init = 8'h30;
         cs_m = 0 ;
      end
      ST_Config13: begin
         data_init = 8'h00;
         cs_m = 0 ;
         transcieve_m =1;
      end
      St_wait43: begin
         data_init = 8'h00;
         cs_m = 0 ;
      end
      St_wait44: begin
         data_init = 8'h99;
         cs_m = 0 ;
      end
      ST_Config14: begin
         data_init = 8'h00;
         cs_m = 0 ;
         transcieve_m =1;
      end
      St_wait45: begin
         data_init = 8'h00;
         cs_m = 0 ;
      end
      ST_Config15: begin
         data_init = 8'h30;
         cs_m = 0 ;
         transcieve_m =1;
      end
      St_wait46: begin
         data_init = 8'h30;
         cs_m = 0 ;
      end
      ST_Config16: begin
         data_init = 8'h00;
         cs_m = 0 ;
         transcieve_m =1;
      end
      St_wait47: begin
         data_init = 8'h00;
         cs_m = 0 ;
      end
      St_wait25: begin
         data_init = 8'h05;
         cs_m = 0 ;
      end
      St_wait26: begin
         data_init = 8'h00;
         cs_m = 0 ;
      end
      St_wait27: begin
         data_init = 8'hB0;
         cs_m = 0 ;
      end
      St_wait28: begin
         data_init = 8'h8B;
         cs_m = 0 ;
      end
      St_wait29: begin
         data_init = 8'h10;
         cs_m = 0 ;
      end
      St_wait30: begin
         data_init = 8'hB1;
         cs_m = 0 ;
      end
      St_wait31: begin
         data_init = 8'h8B;
         cs_m = 0 ;
      end
      ST_Config17: begin
         data_init = 8'h00;
         cs_m = 0 ;
         transcieve_m =1;
      end
      St_wait48: begin
         data_init = 8'h00;
         cs_m = 0 ;
      end
      ST_Config18: begin
         data_init = 8'h30;
         cs_m = 0 ;
         transcieve_m =1;
      end
      St_wait49: begin
         data_init = 8'h30;
         cs_m = 0 ;
      end
      St_wait50: begin
         data_init = 8'h82;
         cs_m = 0 ;
      end
      St_wait51: begin
         data_init = 8'h8A;
         cs_m = 0 ;
      end
      ST_Config19: begin
         data_init = 8'h00;
         cs_m = 0 ;
         transcieve_m =1;
      end
      St_wait52: begin
         data_init = 8'h00;
         cs_m = 0 ;
      end
      ST_Config20: begin
         data_init = 8'h30;
         cs_m = 0 ;
         transcieve_m =1;
      end
      St_wait53: begin
         data_init = 8'h30;
         cs_m = 0 ;
      end
      St_wait54: begin
         data_init = 8'h92;
         cs_m = 0 ;
      end
      ST_Config21: begin
         data_init = 8'h00;
         cs_m = 0 ;
         transcieve_m =1;
      end
      St_wait55: begin
         data_init = 8'h00;
         cs_m = 0 ;
      end
      ST_Config22: begin
         data_init = 8'h30;
         cs_m = 0 ;
         transcieve_m =1;
      end
      St_wait56: begin
         data_init = 8'h30;
         cs_m = 0 ;
      end
      St_wait57: begin
         data_init = 8'h9A;
         cs_m = 0 ;
      end
      ST_Config23: begin
         data_init = 8'h00;
         cs_m = 0 ;
         transcieve_m =1;
      end
      St_wait58: begin
         data_init = 8'h00;
         cs_m = 0 ;
      end
      ST_Config24: begin
         data_init = 8'h30;
         cs_m = 0 ;
         transcieve_m =1;
      end
      St_wait59: begin
         data_init = 8'h30;
         cs_m = 0 ;
      end
      ST_CountRst: begin
         rst_mon_cnt =1;
      end
      ST_Start_Cnt: begin
         start_mon_cnt = 1;
      end
      CS_high16: begin
         cs_p =1;
         transcieve_p =1;
      end
      w_busy43: begin
         cs_p = 1 ;
      end
      st_GPIOA15: begin
         data_init =8'h40;
         cs_p = 0 ;
         transcieve_p =1;
      end
      st_GPIOA16: begin
         data_init =8'h09;
         cs_p = 0 ;
         transcieve_p =1;
      end
      st_GPIOA17: begin
         data_init =8'h01;
         cs_p = 0 ;
         transcieve_p =1;
      end
      w_busy40: begin
         data_init =8'h40;
         cs_p = 0 ;
      end
      w_busy41: begin
         data_init =8'h09;
         cs_p = 0 ;
      end
      w_busy42: begin
         data_init =8'h01;
         cs_p = 0 ;
      end
      CS_high6: begin
         cs_p =1;
         transcieve_p =1;
         spi_power_mode =1;
      end
      w_busy44: begin
         cs_p = 1 ;
         spi_power_mode =1;
      end
      CS_high17: begin
         cs_p =1;
         transcieve_p =1;
         spi_power_mode =1;
      end
      w_busy48: begin
         cs_p = 1 ;
         spi_power_mode =1;
      end
      st_GPIOA12: begin
         data_init =8'h40;
         cs_p = 0 ;
         transcieve_p =1;
         spi_power_mode =1;
      end
      st_GPIOA13: begin
         data_init =8'h12;
         cs_p = 0 ;
         transcieve_p =1;
         spi_power_mode =1;
      end
      st_GPIOA14: begin
         data_init =8'h01;
         cs_p = 0 ;
         transcieve_p =1;
         spi_power_mode =1;
      end
      w_busy18: begin
         data_init =8'h40;
         spi_power_mode =1;
         cs_p = 0 ;
      end
      w_busy19: begin
         data_init =8'h12;
         spi_power_mode =1;
         cs_p = 0 ;
      end
      w_busy20: begin
         data_init =8'h01;
         spi_power_mode =1;
         cs_p = 0 ;
      end
      st_GPIOA18: begin
         data_init =8'h40;
         cs_p = 0 ;
         transcieve_p =1;
         spi_power_mode =1;
      end
      st_GPIOA19: begin
         data_init =8'h09;
         cs_p = 0 ;
         transcieve_p =1;
         spi_power_mode =1;
      end
      st_GPIOA20: begin
         data_init =8'h01;
         cs_p = 0 ;
         transcieve_p =1;
         spi_power_mode =1;
      end
      w_busy45: begin
         data_init =8'h40;
         cs_p = 0 ;
         spi_power_mode =1;
      end
      w_busy46: begin
         data_init =8'h09;
         cs_p = 0 ;
         spi_power_mode =1;
      end
      w_busy47: begin
         data_init =8'h01;
         cs_p = 0 ;
         spi_power_mode =1;
      end
      CS_high11: begin
         cs_p =1;
         transcieve_p =1;
         spi_power_mode =1;
      end
      w_busy49: begin
         cs_p = 1 ;
         spi_power_mode =1;
      end
      CS_high18: begin
         cs_p =1;
         transcieve_p =1;
         spi_power_mode =1;
      end
      w_busy53: begin
         cs_p = 1 ;
         spi_power_mode =1;
      end
      st_GPIOA21: begin
         data_init =8'h40;
         cs_p = 0 ;
         transcieve_p =1;
         spi_power_mode =1;
      end
      st_GPIOA22: begin
         data_init =8'h12;
         cs_p = 0 ;
         transcieve_p =1;
         spi_power_mode =1;
      end
      st_GPIOA23: begin
         data_init =8'h00;
         cs_p = 0 ;
         transcieve_p =1;
         spi_power_mode =1;
      end
      w_busy21: begin
         data_init =8'h40;
         cs_p = 0 ;
         spi_power_mode =1;
      end
      w_busy22: begin
         data_init =8'h12;
         cs_p = 0 ;
         spi_power_mode =1;
      end
      w_busy23: begin
         data_init =8'h00;
         cs_p = 0 ;
         spi_power_mode =1;
      end
      st_GPIOA24: begin
         data_init =8'h40;
         cs_p = 0 ;
         transcieve_p =1;
         spi_power_mode =1;
      end
      st_GPIOA25: begin
         data_init =8'h09;
         cs_p = 0 ;
         transcieve_p =1;
         spi_power_mode =1;
      end
      st_GPIOA26: begin
         data_init =8'h00;
         cs_p = 0 ;
         transcieve_p =1;
         spi_power_mode =1;
      end
      w_busy50: begin
         data_init =8'h40;
         cs_p = 0 ;
         spi_power_mode =1;
      end
      w_busy51: begin
         data_init =8'h09;
         cs_p = 0 ;
         spi_power_mode =1;
      end
      w_busy52: begin
         data_init =8'h00;
         cs_p = 0 ;
         spi_power_mode =1;
      end
      s0: begin
         start_read_elink =1;
         spi_power_mode =1;
      end
      s1: begin
         start_read_elink =1;
         spi_power_mode =1;
      end
      End_Select1: begin
         bus_en_done =1;
         spi_power_mode =1;
      end
      ST_Read_reg4: begin
         cs_m = 0 ;
         transcieve_m =1;
         read_spi_mode =1;
         addr_write =5'h3;
         data_init  = spi_tra_mon_reg;
      end
      Start_reading: begin
         cs_m = 0 ;
         addr_write =5'h3;
         read_spi_mode =1;
         data_init  = spi_tra_mon_reg;
      end
      St_wait64: begin
         data_init  = 8'h0;
         addr_write =5'h4;
         cs_m = 0 ;
         read_spi_mode =1;
      end
      ST_Rest_RS_16: begin
         data_init = 8'h0;
         cs_m = 0 ;
         addr_write =5'h4;
         transcieve_m =1;
         read_spi_mode =1;
      end
      ST_Rest_RS_17: begin
         data_init  = 8'h0;
         addr_write =5'h5;
         cs_m = 0 ;
         transcieve_m =1;
         read_spi_mode =1;
      end
      St_wait66: begin
         data_init  = 8'h00;
         cs_m = 0 ;
         read_spi_mode =1;
         addr_write =5'h5;
      end
      ST_Rest_RS_18: begin
         data_init = 8'h00;
         cs_m = 0 ;
         transcieve_m =1;
         read_spi_mode =1;
         addr_write =5'h6;
      end
      St_wait67: begin
         data_init  = 8'h00;
         cs_m = 0 ;
         read_spi_mode =1;
         addr_write =5'h6;
      end
      w_busy55: begin
         cs_m = 0 ;
         read_spi_mode =1;
         addr_write =5'h7;
      end
      St_wait68: begin
         data_init  = 8'h00;
         cs_m = 0 ;
         read_spi_mode =1;
         addr_write =5'h7;
      end
      ST_Rest_RS_19: begin
         data_init = 8'h00;
         cs_m = 0 ;
         transcieve_m =1;
         read_spi_mode =1;
         addr_write =5'h7;
      end
      w_busy57: begin
         cs_m = 0 ;
         read_spi_mode =1;
         addr_write =5'h3;
         data_init  = spi_tra_mon_reg;
      end
      w_busy58: begin
         cs_m = 0 ;
         read_spi_mode =1;
         addr_write =5'h4;
      end
      w_busy59: begin
         cs_m = 0 ;
         read_spi_mode =1;
         addr_write =5'h5;
      end
      w_busy60: begin
         cs_m = 0 ;
         read_spi_mode =1;
         addr_write =5'h6;
      end
   endcase
end // Output Block

//-----------------------------------------------------------------
// Clocked Block for machine csm
//-----------------------------------------------------------------
always @(
   posedge clk
) 
begin : clocked_block_proc
   if (!rst) begin
      current_state <= reset;
      csm_timer <= 4'd0;
   end
   else if (timeoutrst) begin
      current_state <= reset;
      csm_timer <= 4'd0;
   end
   else if (abort) begin
      current_state <= reset;
      csm_timer <= 4'd0;
   end
   else 
   begin
      current_state <= next_state;
      csm_timer <= csm_next_timer;
   end
end // Clocked Block

//-----------------------------------------------------------------
// Wait state logic for machine csm
//-----------------------------------------------------------------
always @(
   csm_timer,
   csm_to_w_busy55,
   csm_to_w_busy57,
   csm_to_w_busy58,
   csm_to_w_busy59,
   csm_to_w_busy60,
   csm_to_s2,
   csm_to_s3,
   csm_to_s4,
   csm_to_s5,
   csm_to_s6,
   csm_to_s7
)
begin : csm_wait_block_proc
   csm_timeout = (csm_timer == 4'd0);
   if (csm_to_w_busy55 == 1'b1) begin
      csm_next_timer = 4'd9;  //no cycles(10)-1=9
   end
   else if (csm_to_w_busy57 == 1'b1) begin
      csm_next_timer = 4'd9;  //no cycles(10)-1=9
   end
   else if (csm_to_w_busy58 == 1'b1) begin
      csm_next_timer = 4'd9;  //no cycles(10)-1=9
   end
   else if (csm_to_w_busy59 == 1'b1) begin
      csm_next_timer = 4'd9;  //no cycles(10)-1=9
   end
   else if (csm_to_w_busy60 == 1'b1) begin
      csm_next_timer = 4'd9;  //no cycles(10)-1=9
   end
   else if (csm_to_s2 == 1'b1) begin
      csm_next_timer = 4'd9;  //no cycles(10)-1=9
   end
   else if (csm_to_s3 == 1'b1) begin
      csm_next_timer = 4'd9;  //no cycles(10)-1=9
   end
   else if (csm_to_s4 == 1'b1) begin
      csm_next_timer = 4'd9;  //no cycles(10)-1=9
   end
   else if (csm_to_s5 == 1'b1) begin
      csm_next_timer = 4'd9;  //no cycles(10)-1=9
   end
   else if (csm_to_s6 == 1'b1) begin
      csm_next_timer = 4'd9;  //no cycles(10)-1=9
   end
   else if (csm_to_s7 == 1'b1) begin
      csm_next_timer = 4'd9;  //no cycles(10)-1=9
   end
   else begin
      csm_next_timer = (csm_timeout)? 4'd0: (csm_timer - 4'd1);
   end
end // Wait State Block
// State-As-Output assignment
always @(current_state)
begin
   statedeb = 9'b0;
   statedeb[7:0] = current_state;
end

endmodule // spi_control_SM
