//
// Module mopshub_lib.spi_control_sm.fsm
//
// Created:
//          by - dcs.dcs (chipdev2.physik.uni-wuppertal.de)
//          at - 11:20:46 10/30/23
//
// Generated by Mentor Graphics' HDL Designer(TM) 2019.4 (Build 4)
//
`resetall
`timescale 1ns/10ps
module spi_control_sm( 
   // Port Declarations
   input   wire           abort,                  // Upon receiving a reset message on the CANbus. FSM goes into a known state
   input   wire           busy_m, 
   input   wire           busy_p, 
   input   wire           clk,                    // posedge
   input   wire           end_read_elink,         // this signal goes high when CANopen block has finshed writing transmit message buffer register 
   input   wire           end_write_elink_spi, 
   input   wire           miso_m, 
   input   wire    [4:0]  n_buses, 
   input   wire           rst,                    // synchronous low active
   input   wire           spi_rx_m_rec, 
   input   wire    [7:0]  spi_tra_mon_reg, 
   input   wire           start_bus_init,         // initialize request from bridge FSM of bridge controller 
   input   wire           start_mon_config, 
   input   wire           start_mon_init, 
   input   wire           start_mon_read, 
   input   wire           start_power_off, 
   input   wire           start_power_on, 
   input   wire           start_power_read, 
   input   wire           timeoutrst,             // timeout reset signal to the state machine in case bridge controller is not respoding for a specified time
   output  reg     [4:0]  addr_write, 
   output  reg            buffer_en, 
   output  reg            bus_en_done,            // indication to bridge FSM when initialization is finished 
   output  reg     [4:0]  can_bus_reg, 
   output  reg            cs_m, 
   output  reg            cs_p, 
   output  reg     [7:0]  data_init,              // request to caninterface block
   output  reg            entimeout, 
   output  reg            mon_en_done, 
   output  reg            read_spi_mode, 
   output  reg            spi_power_mode, 
   output  reg            start_init_spi, 
   output  reg            start_read_elink,       // signal to read transmit message buffer register 
   output  reg            start_write_elink_spi, 
   output  reg     [8:0]  statedeb,               // State debug signal 
   output  reg            transcieve_m, 
   output  reg            transcieve_p
);


// Internal Declarations


// Declare any pre-registered internal signals
reg [4:0] addr_write_cld;
reg [4:0] can_bus_reg_cld;

// Module Declarations
reg [4:0] error_count_reg;  

// State encoding
parameter 
          ST_waittoact    = 9'd0,
          ST_reset        = 9'd1,
          start           = 9'd2,
          endinit1        = 9'd3,
          start1          = 9'd4,
          st_GPIOA        = 9'd5,
          st_GPIOA1       = 9'd6,
          st_GPIOA2       = 9'd7,
          End_Select      = 9'd8,
          ST_read_elink   = 9'd9,
          Done            = 9'd10,
          write_elink     = 9'd11,
          Offset_cal0     = 9'd12,
          Offset__cal1    = 9'd13,
          Offset__cal2    = 9'd14,
          Offset__cal3    = 9'd15,
          Gain_cal0       = 9'd16,
          Gain_cal1       = 9'd17,
          Gain_cal2       = 9'd18,
          Gain_cal3       = 9'd19,
          write_csrs7     = 9'd20,
          write_csrs6     = 9'd21,
          write_csrs5     = 9'd22,
          write_csrs4     = 9'd23,
          write_csrs0     = 9'd24,
          write_csrs1     = 9'd25,
          write_csrs2     = 9'd26,
          ST_Config4      = 9'd27,
          ST_Config3      = 9'd28,
          ST_Config1      = 9'd29,
          ST_Config2      = 9'd30,
          ST_Rest_2       = 9'd31,
          ST_Rest_4       = 9'd32,
          ST_Rest_1       = 9'd33,
          St_wait         = 9'd34,
          ST_Rest_RS_1    = 9'd35,
          ST_Rest_RS_2    = 9'd36,
          st_GPIOA9       = 9'd37,
          st_GPIOA10      = 9'd38,
          st_GPIOA11      = 9'd39,
          w_busy15        = 9'd40,
          w_busy16        = 9'd41,
          w_busy17        = 9'd42,
          ST_IODIRA0      = 9'd43,
          w_busy0         = 9'd44,
          ST_IODIRA1      = 9'd45,
          w_busy1         = 9'd46,
          ST_IODIRA2      = 9'd47,
          w_busy2         = 9'd48,
          w_busy5         = 9'd49,
          st_IODIRB1      = 9'd50,
          st_IODIRB2      = 9'd51,
          st_IODIRB       = 9'd52,
          w_busy3         = 9'd53,
          w_busy4         = 9'd54,
          w_busy7         = 9'd55,
          st_GPIOB2       = 9'd56,
          st_GPIOB1       = 9'd57,
          w_busy8         = 9'd58,
          w_busy6         = 9'd59,
          st_GPIOB0       = 9'd60,
          st_GPPUA        = 9'd61,
          w_busy11        = 9'd62,
          w_busy9         = 9'd63,
          st_GPPUA2       = 9'd64,
          st_GPPUA1       = 9'd65,
          w_busy10        = 9'd66,
          st_GPPUB1       = 9'd67,
          w_busy13        = 9'd68,
          w_busy12        = 9'd69,
          st_GPPUB2       = 9'd70,
          w_busy14        = 9'd71,
          st_GPPUB        = 9'd72,
          CS_high0        = 9'd73,
          CS_high1        = 9'd74,
          CS_high2        = 9'd75,
          CS_high3        = 9'd76,
          CS_high4        = 9'd77,
          CS_high5        = 9'd78,
          w_busy26        = 9'd79,
          w_busy27        = 9'd80,
          w_busy28        = 9'd81,
          w_busy29        = 9'd82,
          w_busy30        = 9'd83,
          w_busy31        = 9'd84,
          ST_Init_0       = 9'd85,
          ST_wait_0       = 9'd86,
          ST_Init_1       = 9'd87,
          ST_wait_1       = 9'd88,
          ST_Init_incr    = 9'd89,
          st_Init_2       = 9'd90,
          ST_wait_15      = 9'd91,
          ST_Rest_sw      = 9'd92,
          ST_Rest_RS_3    = 9'd93,
          St_wait1        = 9'd94,
          St_wait6        = 9'd95,
          St_wait7        = 9'd96,
          St_Reset_Rs_sw  = 9'd97,
          St_wait17       = 9'd98,
          St_wait18       = 9'd99,
          St_wait19       = 9'd100,
          St_wait20       = 9'd101,
          St_wait32       = 9'd102,
          St_wait33       = 9'd103,
          St_wait34       = 9'd104,
          ST_Config5      = 9'd105,
          ST_Config6      = 9'd106,
          St_wait35       = 9'd107,
          ST_Config7      = 9'd108,
          St_wait36       = 9'd109,
          ST_Config8      = 9'd110,
          St_wait37       = 9'd111,
          ST_Config9      = 9'd112,
          St_wait38       = 9'd113,
          ST_Config10     = 9'd114,
          St_wait39       = 9'd115,
          St_wait40       = 9'd116,
          ST_Config11     = 9'd117,
          St_wait41       = 9'd118,
          ST_Config12     = 9'd119,
          St_wait42       = 9'd120,
          ST_Config13     = 9'd121,
          St_wait43       = 9'd122,
          St_wait44       = 9'd123,
          ST_Config14     = 9'd124,
          St_wait45       = 9'd125,
          ST_Config15     = 9'd126,
          St_wait46       = 9'd127,
          ST_Config16     = 9'd128,
          St_wait47       = 9'd129,
          St_wait25       = 9'd130,
          St_wait26       = 9'd131,
          St_wait27       = 9'd132,
          St_wait28       = 9'd133,
          St_wait29       = 9'd134,
          St_wait30       = 9'd135,
          St_wait31       = 9'd136,
          ST_Config17     = 9'd137,
          St_wait48       = 9'd138,
          ST_Config18     = 9'd139,
          St_wait49       = 9'd140,
          St_wait50       = 9'd141,
          St_wait51       = 9'd142,
          ST_Config19     = 9'd143,
          St_wait52       = 9'd144,
          ST_Config20     = 9'd145,
          St_wait53       = 9'd146,
          St_wait54       = 9'd147,
          ST_Config21     = 9'd148,
          St_wait55       = 9'd149,
          ST_Config22     = 9'd150,
          St_wait56       = 9'd151,
          St_wait57       = 9'd152,
          ST_Config23     = 9'd153,
          St_wait58       = 9'd154,
          ST_Config24     = 9'd155,
          St_wait59       = 9'd156,
          Break_Loop      = 9'd157,
          ST_CountRst     = 9'd158,
          ST_Start_Cnt    = 9'd159,
          CS_high16       = 9'd160,
          w_busy43        = 9'd161,
          st_GPIOA15      = 9'd162,
          st_GPIOA16      = 9'd163,
          st_GPIOA17      = 9'd164,
          w_busy40        = 9'd165,
          w_busy41        = 9'd166,
          w_busy42        = 9'd167,
          CS_high6        = 9'd168,
          w_busy44        = 9'd169,
          CS_high17       = 9'd170,
          w_busy48        = 9'd171,
          st_GPIOA12      = 9'd172,
          st_GPIOA13      = 9'd173,
          st_GPIOA14      = 9'd174,
          w_busy18        = 9'd175,
          w_busy19        = 9'd176,
          w_busy20        = 9'd177,
          st_GPIOA18      = 9'd178,
          st_GPIOA19      = 9'd179,
          st_GPIOA20      = 9'd180,
          w_busy45        = 9'd181,
          w_busy46        = 9'd182,
          w_busy47        = 9'd183,
          CS_high11       = 9'd184,
          w_busy49        = 9'd185,
          CS_high18       = 9'd186,
          w_busy53        = 9'd187,
          st_GPIOA21      = 9'd188,
          st_GPIOA22      = 9'd189,
          st_GPIOA23      = 9'd190,
          w_busy21        = 9'd191,
          w_busy22        = 9'd192,
          w_busy23        = 9'd193,
          st_GPIOA24      = 9'd194,
          st_GPIOA25      = 9'd195,
          st_GPIOA26      = 9'd196,
          w_busy50        = 9'd197,
          w_busy51        = 9'd198,
          w_busy52        = 9'd199,
          s0              = 9'd200,
          s1              = 9'd201,
          End_Select1     = 9'd202,
          ST_Read_reg3    = 9'd203,
          Start_reading   = 9'd204,
          St_wait64       = 9'd205,
          ST_Rest_RS_16   = 9'd206,
          s2              = 9'd207,
          s3              = 9'd208,
          s4              = 9'd209,
          s5              = 9'd210,
          s6              = 9'd211,
          s7              = 9'd212,
          Break_Loop1     = 9'd213,
          St_wait66       = 9'd214,
          St_wait67       = 9'd215,
          St_wait2        = 9'd216,
          End_Conf        = 9'd217,
          Offset_cal1     = 9'd218,
          Offset__cal4    = 9'd219,
          Offset__cal5    = 9'd220,
          Offset__cal6    = 9'd221,
          St_wait60       = 9'd222,
          St_wait61       = 9'd223,
          St_wait62       = 9'd224,
          ST_Config25     = 9'd225,
          ST_Config26     = 9'd226,
          St_wait63       = 9'd227,
          ST_Config27     = 9'd228,
          St_wait65       = 9'd229,
          ST_Config28     = 9'd230,
          St_wait68       = 9'd231,
          ST_Config29     = 9'd232,
          St_wait69       = 9'd233,
          ST_Config30     = 9'd234,
          St_wait70       = 9'd235,
          St_wait71       = 9'd236,
          ST_Config31     = 9'd237,
          St_wait72       = 9'd238,
          ST_Config32     = 9'd239,
          St_wait73       = 9'd240,
          ST_Config33     = 9'd241,
          St_wait74       = 9'd242,
          St_wait75       = 9'd243,
          ST_Config34     = 9'd244,
          St_wait76       = 9'd245,
          ST_Config35     = 9'd246,
          St_wait77       = 9'd247,
          ST_Config36     = 9'd248,
          St_wait78       = 9'd249,
          s8              = 9'd250,
          s9              = 9'd251,
          s10             = 9'd252,
          Gain_cal4       = 9'd253,
          Gain_cal5       = 9'd254,
          Gain_cal6       = 9'd255,
          Gain_cal7       = 9'd256,
          ST_Config37     = 9'd257,
          St_wait79       = 9'd258,
          ST_Config38     = 9'd259,
          St_wait80       = 9'd260,
          St_wait81       = 9'd261,
          St_wait82       = 9'd262,
          ST_Config39     = 9'd263,
          St_wait83       = 9'd264,
          ST_Config40     = 9'd265,
          St_wait84       = 9'd266,
          St_wait85       = 9'd267,
          ST_Config41     = 9'd268,
          St_wait86       = 9'd269,
          ST_Config42     = 9'd270,
          St_wait87       = 9'd271,
          St_wait88       = 9'd272,
          ST_Config43     = 9'd273,
          St_wait89       = 9'd274,
          ST_Config44     = 9'd275,
          St_wait90       = 9'd276,
          s11             = 9'd277,
          s12             = 9'd278,
          s13             = 9'd279,
          write_csrs8     = 9'd280,
          write_csrs9     = 9'd281,
          write_csrs10    = 9'd282,
          write_csrs11    = 9'd283,
          write_csrs3     = 9'd284,
          write_csrs12    = 9'd285,
          write_csrs13    = 9'd286,
          St_wait91       = 9'd287,
          St_wait92       = 9'd288,
          St_wait93       = 9'd289,
          St_wait94       = 9'd290,
          St_wait95       = 9'd291,
          St_wait96       = 9'd292,
          St_wait97       = 9'd293,
          ST_Config45     = 9'd294,
          ST_Config46     = 9'd295,
          ST_Config47     = 9'd296,
          ST_Config48     = 9'd297,
          St_wait21       = 9'd298,
          St_wait22       = 9'd299,
          St_wait23       = 9'd300,
          St_wait24       = 9'd301,
          ST_Rest_3       = 9'd302,
          ST_Rest_5       = 9'd303,
          ST_Rest_6       = 9'd304,
          St_wait3        = 9'd305,
          ST_Rest_RS_4    = 9'd306,
          ST_Rest_RS_5    = 9'd307,
          ST_Rest_sw1     = 9'd308,
          ST_Rest_RS_6    = 9'd309,
          St_wait4        = 9'd310,
          St_wait8        = 9'd311,
          St_wait9        = 9'd312,
          St_Reset_Rs_sw1 = 9'd313,
          St_wait5        = 9'd314,
          ST_Init_2       = 9'd315,
          ST_wait_2       = 9'd316,
          ST_Init_3       = 9'd317,
          ST_wait_3       = 9'd318,
          ST_Init_incr1   = 9'd319,
          st_Init_3       = 9'd320,
          ST_wait_16      = 9'd321,
          Done1           = 9'd322,
          write_elink1    = 9'd323,
          ST_Read_reg4    = 9'd324,
          Start_reading1  = 9'd325,
          St_wait98       = 9'd326,
          ST_Rest_RS_17   = 9'd327,
          Break_Loop3     = 9'd328,
          St_wait99       = 9'd329,
          St_wait100      = 9'd330,
          ST_read_elink1  = 9'd331,
          Done2           = 9'd332,
          write_elink2    = 9'd333,
          ST_Read_reg5    = 9'd334,
          Start_reading2  = 9'd335,
          St_wait101      = 9'd336,
          ST_Rest_RS_18   = 9'd337,
          Break_Loop4     = 9'd338,
          St_wait102      = 9'd339,
          St_wait103      = 9'd340,
          Rst_cnt         = 9'd341,
          Increment_cnt   = 9'd342;

reg [8:0] current_state, next_state;

// Wait State Signals
reg [3:0] csm_timer;
reg [3:0] csm_next_timer;
reg       csm_timeout;
reg       csm_to_s2;
reg       csm_to_s3;
reg       csm_to_s4;
reg       csm_to_s5;
reg       csm_to_s6;
reg       csm_to_s7;
reg       csm_to_s8;
reg       csm_to_s9;
reg       csm_to_s10;
reg       csm_to_s11;
reg       csm_to_s12;
reg       csm_to_s13;

//-----------------------------------------------------------------
// Next State Block for machine csm
//-----------------------------------------------------------------
always @(
   addr_write_cld, 
   busy_m, 
   busy_p, 
   can_bus_reg_cld, 
   csm_timeout, 
   current_state, 
   end_read_elink, 
   end_write_elink_spi, 
   error_count_reg, 
   n_buses, 
   rst, 
   spi_rx_m_rec, 
   start_bus_init, 
   start_mon_config, 
   start_mon_init, 
   start_mon_read, 
   start_power_off, 
   start_power_on, 
   start_power_read
)
begin : next_state_block_proc
   // Default assignments to Wait State entry flags
   csm_to_s2 = 1'b0;
   csm_to_s3 = 1'b0;
   csm_to_s4 = 1'b0;
   csm_to_s5 = 1'b0;
   csm_to_s6 = 1'b0;
   csm_to_s7 = 1'b0;
   csm_to_s8 = 1'b0;
   csm_to_s9 = 1'b0;
   csm_to_s10 = 1'b0;
   csm_to_s11 = 1'b0;
   csm_to_s12 = 1'b0;
   csm_to_s13 = 1'b0;
   case (current_state) 
      ST_waittoact: begin
         if (start_bus_init  == 1)
            next_state = start;
         else if (start_mon_init ==1)
            next_state = start1;
         else if (start_power_on ==1)
            next_state = s0;
         else if (start_power_off ==1)
            next_state = s1;
         else if (start_mon_read ==1)
            next_state = ST_read_elink;
         else if (start_power_read ==1)
            next_state = st_GPIOA9;
         else if (start_mon_config == 1)
            next_state = ST_read_elink1;
         else
            next_state = ST_waittoact;
      end
      ST_reset: begin
         if (rst == 1)
            next_state = ST_waittoact;
         else
            next_state = ST_reset;
      end
      start: begin
         next_state = ST_IODIRA0;
      end
      endinit1: begin
         next_state = ST_waittoact;
      end
      start1: begin
         next_state = ST_Init_0;
      end
      st_GPIOA: begin
         next_state = w_busy15;
      end
      st_GPIOA1: begin
         next_state = w_busy16;
      end
      st_GPIOA2: begin
         next_state = w_busy17;
      end
      End_Select: begin
         next_state = ST_waittoact;
      end
      ST_read_elink: begin
         if (end_read_elink == 1)
            next_state = ST_Read_reg3;
         else
            next_state = ST_read_elink;
      end
      Done: begin
         next_state = ST_waittoact;
      end
      write_elink: begin
         if (end_write_elink_spi ==1)
            next_state = Done;
         else
            next_state = write_elink;
      end
      Offset_cal0: begin
         next_state = St_wait32;
      end
      Offset__cal1: begin
         next_state = St_wait33;
      end
      Offset__cal2: begin
         next_state = St_wait40;
      end
      Offset__cal3: begin
         next_state = St_wait44;
      end
      Gain_cal0: begin
         next_state = St_wait50;
      end
      Gain_cal1: begin
         next_state = St_wait51;
      end
      Gain_cal2: begin
         next_state = St_wait54;
      end
      Gain_cal3: begin
         next_state = St_wait57;
      end
      write_csrs7: begin
         next_state = St_wait31;
      end
      write_csrs6: begin
         next_state = St_wait30;
      end
      write_csrs5: begin
         next_state = St_wait29;
      end
      write_csrs4: begin
         next_state = St_wait28;
      end
      write_csrs0: begin
         next_state = St_wait25;
      end
      write_csrs1: begin
         next_state = St_wait26;
      end
      write_csrs2: begin
         next_state = St_wait27;
      end
      ST_Config4: begin
         next_state = St_wait20;
      end
      ST_Config3: begin
         next_state = St_wait19;
      end
      ST_Config1: begin
         next_state = St_wait18;
      end
      ST_Config2: begin
         next_state = St_wait17;
      end
      ST_Rest_2: begin
         next_state = St_wait1;
      end
      ST_Rest_4: begin
         next_state = St_wait6;
      end
      ST_Rest_1: begin
         next_state = St_wait;
      end
      St_wait: begin
         if (busy_m==1)
            next_state = ST_Rest_2;
         else
            next_state = St_wait;
      end
      ST_Rest_RS_1: begin
         next_state = St_wait7;
      end
      ST_Rest_RS_2: begin
         next_state = St_wait2;
      end
      st_GPIOA9: begin
         next_state = st_GPIOA10;
      end
      st_GPIOA10: begin
         next_state = st_GPIOA11;
      end
      st_GPIOA11: begin
         next_state = ST_waittoact;
      end
      w_busy15: begin
         if (busy_p==1)
            next_state = st_GPIOA1;
         else
            next_state = w_busy15;
      end
      w_busy16: begin
         if (busy_p==1)
            next_state = st_GPIOA2;
         else
            next_state = w_busy16;
      end
      w_busy17: begin
         if (busy_p==1)
            next_state = CS_high5;
         else
            next_state = w_busy17;
      end
      ST_IODIRA0: begin
         next_state = w_busy0;
      end
      w_busy0: begin
         if (busy_p==1)
            next_state = ST_IODIRA1;
         else
            next_state = w_busy0;
      end
      ST_IODIRA1: begin
         next_state = w_busy1;
      end
      w_busy1: begin
         if (busy_p==1)
            next_state = ST_IODIRA2;
         else
            next_state = w_busy1;
      end
      ST_IODIRA2: begin
         next_state = w_busy2;
      end
      w_busy2: begin
         if (busy_p==1)
            next_state = CS_high0;
         else
            next_state = w_busy2;
      end
      w_busy5: begin
         if (busy_p==1)
            next_state = CS_high1;
         else
            next_state = w_busy5;
      end
      st_IODIRB1: begin
         next_state = w_busy4;
      end
      st_IODIRB2: begin
         next_state = w_busy5;
      end
      st_IODIRB: begin
         next_state = w_busy3;
      end
      w_busy3: begin
         if (busy_p==1)
            next_state = st_IODIRB1;
         else
            next_state = w_busy3;
      end
      w_busy4: begin
         if (busy_p==1)
            next_state = st_IODIRB2;
         else
            next_state = w_busy4;
      end
      w_busy7: begin
         if (busy_p==1)
            next_state = st_GPIOB2;
         else
            next_state = w_busy7;
      end
      st_GPIOB2: begin
         next_state = w_busy8;
      end
      st_GPIOB1: begin
         next_state = w_busy7;
      end
      w_busy8: begin
         if (busy_p==1)
            next_state = CS_high2;
         else
            next_state = w_busy8;
      end
      w_busy6: begin
         if (busy_p==1)
            next_state = st_GPIOB1;
         else
            next_state = w_busy6;
      end
      st_GPIOB0: begin
         next_state = w_busy6;
      end
      st_GPPUA: begin
         next_state = w_busy9;
      end
      w_busy11: begin
         if (busy_p==1)
            next_state = st_GPPUA2;
         else
            next_state = w_busy11;
      end
      w_busy9: begin
         if (busy_p==1)
            next_state = st_GPPUA1;
         else
            next_state = w_busy9;
      end
      st_GPPUA2: begin
         next_state = w_busy10;
      end
      st_GPPUA1: begin
         next_state = w_busy11;
      end
      w_busy10: begin
         if (busy_p==1)
            next_state = CS_high3;
         else
            next_state = w_busy10;
      end
      st_GPPUB1: begin
         next_state = w_busy13;
      end
      w_busy13: begin
         if (busy_p==1)
            next_state = st_GPPUB2;
         else
            next_state = w_busy13;
      end
      w_busy12: begin
         if (busy_p==1)
            next_state = st_GPPUB1;
         else
            next_state = w_busy12;
      end
      st_GPPUB2: begin
         next_state = w_busy14;
      end
      w_busy14: begin
         if (busy_p==1)
            next_state = CS_high4;
         else
            next_state = w_busy14;
      end
      st_GPPUB: begin
         next_state = w_busy12;
      end
      CS_high0: begin
         next_state = w_busy26;
      end
      CS_high1: begin
         next_state = w_busy27;
      end
      CS_high2: begin
         next_state = w_busy28;
      end
      CS_high3: begin
         next_state = w_busy29;
      end
      CS_high4: begin
         next_state = w_busy30;
      end
      CS_high5: begin
         next_state = w_busy31;
      end
      w_busy26: begin
         if (busy_p==1)
            next_state = st_IODIRB;
         else
            next_state = w_busy26;
      end
      w_busy27: begin
         if (busy_p==1)
            next_state = st_GPIOB0;
         else
            next_state = w_busy27;
      end
      w_busy28: begin
         if (busy_p==1)
            next_state = st_GPPUA;
         else
            next_state = w_busy28;
      end
      w_busy29: begin
         if (busy_p==1)
            next_state = st_GPPUB;
         else
            next_state = w_busy29;
      end
      w_busy30: begin
         if (busy_p==1)
            next_state = st_GPIOA;
         else
            next_state = w_busy30;
      end
      w_busy31: begin
         if (busy_p==1)
            next_state = st_GPIOA15;
         else
            next_state = w_busy31;
      end
      ST_Init_0: begin
         next_state = ST_wait_0;
      end
      ST_wait_0: begin
         if (busy_m==1)
            next_state = ST_Init_1;
         else
            next_state = ST_wait_0;
      end
      ST_Init_1: begin
         next_state = ST_wait_1;
      end
      ST_wait_1: begin
         if (busy_m==1)
            next_state = ST_Init_incr;
         else
            next_state = ST_wait_1;
      end
      ST_Init_incr: begin
         if (addr_write_cld ==5'd14)
            next_state = st_Init_2;
         else
            next_state = ST_Init_1;
      end
      st_Init_2: begin
         next_state = ST_wait_15;
      end
      ST_wait_15: begin
         if (busy_m==1)
            next_state = ST_Rest_1;
         else
            next_state = ST_wait_15;
      end
      ST_Rest_sw: begin
         if (addr_write_cld ==5'd2)
            next_state = ST_Rest_4;
         else
            next_state = ST_Rest_2;
      end
      ST_Rest_RS_3: begin
         next_state = ST_Config1;
      end
      St_wait1: begin
         if (busy_m==1)
            next_state = ST_Rest_sw;
         else
            next_state = St_wait1;
      end
      St_wait6: begin
         if (busy_m==1)
            next_state = ST_Rest_RS_1;
         else
            next_state = St_wait6;
      end
      St_wait7: begin
         if (busy_m==1)
            next_state = ST_Rest_RS_2;
         else
            next_state = St_wait7;
      end
      St_Reset_Rs_sw: begin
         if (addr_write_cld ==5'd3)
            next_state = ST_Rest_RS_3;
         else
            next_state = ST_Rest_RS_2;
      end
      St_wait17: begin
         if (busy_m==1)
            next_state = ST_Config3;
         else
            next_state = St_wait17;
      end
      St_wait18: begin
         if (busy_m==1)
            next_state = ST_Config2;
         else
            next_state = St_wait18;
      end
      St_wait19: begin
         if (busy_m==1)
            next_state = ST_Config4;
         else
            next_state = St_wait19;
      end
      St_wait20: begin
         if (busy_m==1)
            next_state = write_csrs0;
         else
            next_state = St_wait20;
      end
      St_wait32: begin
         if (busy_m==1)
            next_state = ST_Config5;
         else
            next_state = St_wait32;
      end
      St_wait33: begin
         if (busy_m==1)
            next_state = ST_Config8;
         else
            next_state = St_wait33;
      end
      St_wait34: begin
         if (busy_m==1) begin
            next_state = s2;
            csm_to_s2 = 1'b1;
         end
         else
            next_state = St_wait34;
      end
      ST_Config5: begin
         next_state = St_wait35;
      end
      ST_Config6: begin
         next_state = St_wait34;
      end
      St_wait35: begin
         if (busy_m==1)
            next_state = ST_Config7;
         else
            next_state = St_wait35;
      end
      ST_Config7: begin
         next_state = St_wait36;
      end
      St_wait36: begin
         if (busy_m==1)
            next_state = ST_Config6;
         else
            next_state = St_wait36;
      end
      ST_Config8: begin
         next_state = St_wait37;
      end
      St_wait37: begin
         if (busy_m==1)
            next_state = ST_Config9;
         else
            next_state = St_wait37;
      end
      ST_Config9: begin
         next_state = St_wait38;
      end
      St_wait38: begin
         if (busy_m==1)
            next_state = ST_Config10;
         else
            next_state = St_wait38;
      end
      ST_Config10: begin
         next_state = St_wait39;
      end
      St_wait39: begin
         if (busy_m==1) begin
            next_state = s3;
            csm_to_s3 = 1'b1;
         end
         else
            next_state = St_wait39;
      end
      St_wait40: begin
         if (busy_m==1)
            next_state = ST_Config11;
         else
            next_state = St_wait40;
      end
      ST_Config11: begin
         next_state = St_wait41;
      end
      St_wait41: begin
         if (busy_m==1)
            next_state = ST_Config12;
         else
            next_state = St_wait41;
      end
      ST_Config12: begin
         next_state = St_wait42;
      end
      St_wait42: begin
         if (busy_m==1)
            next_state = ST_Config13;
         else
            next_state = St_wait42;
      end
      ST_Config13: begin
         next_state = St_wait43;
      end
      St_wait43: begin
         if (busy_m==1) begin
            next_state = s4;
            csm_to_s4 = 1'b1;
         end
         else
            next_state = St_wait43;
      end
      St_wait44: begin
         if (busy_m==1)
            next_state = ST_Config14;
         else
            next_state = St_wait44;
      end
      ST_Config14: begin
         next_state = St_wait45;
      end
      St_wait45: begin
         if (busy_m==1)
            next_state = ST_Config15;
         else
            next_state = St_wait45;
      end
      ST_Config15: begin
         next_state = St_wait46;
      end
      St_wait46: begin
         if (busy_m==1)
            next_state = ST_Config16;
         else
            next_state = St_wait46;
      end
      ST_Config16: begin
         next_state = St_wait47;
      end
      St_wait47: begin
         if (busy_m==1)
            next_state = Gain_cal0;
         else
            next_state = St_wait47;
      end
      St_wait25: begin
         if (busy_m==1)
            next_state = write_csrs1;
         else
            next_state = St_wait25;
      end
      St_wait26: begin
         if (busy_m==1)
            next_state = write_csrs2;
         else
            next_state = St_wait26;
      end
      St_wait27: begin
         if (busy_m==1)
            next_state = write_csrs4;
         else
            next_state = St_wait27;
      end
      St_wait28: begin
         if (busy_m==1)
            next_state = write_csrs5;
         else
            next_state = St_wait28;
      end
      St_wait29: begin
         if (busy_m==1)
            next_state = write_csrs6;
         else
            next_state = St_wait29;
      end
      St_wait30: begin
         if (busy_m==1)
            next_state = write_csrs7;
         else
            next_state = St_wait30;
      end
      St_wait31: begin
         if (busy_m==1)
            next_state = Offset_cal0;
         else
            next_state = St_wait31;
      end
      ST_Config17: begin
         next_state = St_wait48;
      end
      St_wait48: begin
         if (busy_m==1)
            next_state = ST_Config18;
         else
            next_state = St_wait48;
      end
      ST_Config18: begin
         next_state = St_wait49;
      end
      St_wait49: begin
         if (busy_m==1) begin
            next_state = s5;
            csm_to_s5 = 1'b1;
         end
         else
            next_state = St_wait49;
      end
      St_wait50: begin
         if (busy_m==1)
            next_state = ST_Config17;
         else
            next_state = St_wait50;
      end
      St_wait51: begin
         if (busy_m==1)
            next_state = ST_Config19;
         else
            next_state = St_wait51;
      end
      ST_Config19: begin
         next_state = St_wait52;
      end
      St_wait52: begin
         if (busy_m==1)
            next_state = ST_Config20;
         else
            next_state = St_wait52;
      end
      ST_Config20: begin
         next_state = St_wait53;
      end
      St_wait53: begin
         if (busy_m==1) begin
            next_state = s6;
            csm_to_s6 = 1'b1;
         end
         else
            next_state = St_wait53;
      end
      St_wait54: begin
         if (busy_m==1)
            next_state = ST_Config21;
         else
            next_state = St_wait54;
      end
      ST_Config21: begin
         next_state = St_wait55;
      end
      St_wait55: begin
         if (busy_m==1)
            next_state = ST_Config22;
         else
            next_state = St_wait55;
      end
      ST_Config22: begin
         next_state = St_wait56;
      end
      St_wait56: begin
         if (busy_m==1) begin
            next_state = s7;
            csm_to_s7 = 1'b1;
         end
         else
            next_state = St_wait56;
      end
      St_wait57: begin
         if (busy_m==1)
            next_state = ST_Config23;
         else
            next_state = St_wait57;
      end
      ST_Config23: begin
         next_state = St_wait58;
      end
      St_wait58: begin
         if (busy_m==1)
            next_state = ST_Config24;
         else
            next_state = St_wait58;
      end
      ST_Config24: begin
         next_state = St_wait59;
      end
      St_wait59: begin
         if (busy_m==1)
            next_state = Break_Loop;
         else
            next_state = St_wait59;
      end
      Break_Loop: begin
         if (can_bus_reg_cld ==n_buses)
            next_state = ST_CountRst;
         else
            next_state = ST_Start_Cnt;
      end
      ST_CountRst: begin
         next_state = endinit1;
      end
      ST_Start_Cnt: begin
         next_state = ST_Init_0;
      end
      CS_high16: begin
         next_state = w_busy43;
      end
      w_busy43: begin
         if (busy_p==1)
            next_state = End_Select;
         else
            next_state = w_busy43;
      end
      st_GPIOA15: begin
         next_state = w_busy40;
      end
      st_GPIOA16: begin
         next_state = w_busy41;
      end
      st_GPIOA17: begin
         next_state = w_busy42;
      end
      w_busy40: begin
         if (busy_p==1)
            next_state = st_GPIOA16;
         else
            next_state = w_busy40;
      end
      w_busy41: begin
         if (busy_p==1)
            next_state = st_GPIOA17;
         else
            next_state = w_busy41;
      end
      w_busy42: begin
         if (busy_p==1)
            next_state = CS_high16;
         else
            next_state = w_busy42;
      end
      CS_high6: begin
         next_state = w_busy44;
      end
      w_busy44: begin
         if (busy_p==1)
            next_state = st_GPIOA18;
         else
            next_state = w_busy44;
      end
      CS_high17: begin
         next_state = w_busy48;
      end
      w_busy48: begin
         if (busy_p==1)
            next_state = End_Select1;
         else
            next_state = w_busy48;
      end
      st_GPIOA12: begin
         next_state = w_busy18;
      end
      st_GPIOA13: begin
         next_state = w_busy19;
      end
      st_GPIOA14: begin
         next_state = w_busy20;
      end
      w_busy18: begin
         if (busy_p==1)
            next_state = st_GPIOA13;
         else
            next_state = w_busy18;
      end
      w_busy19: begin
         if (busy_p==1)
            next_state = st_GPIOA14;
         else
            next_state = w_busy19;
      end
      w_busy20: begin
         if (busy_p==1)
            next_state = CS_high6;
         else
            next_state = w_busy20;
      end
      st_GPIOA18: begin
         next_state = w_busy45;
      end
      st_GPIOA19: begin
         next_state = w_busy46;
      end
      st_GPIOA20: begin
         next_state = w_busy47;
      end
      w_busy45: begin
         if (busy_p==1)
            next_state = st_GPIOA19;
         else
            next_state = w_busy45;
      end
      w_busy46: begin
         if (busy_p==1)
            next_state = st_GPIOA20;
         else
            next_state = w_busy46;
      end
      w_busy47: begin
         if (busy_p==1)
            next_state = CS_high17;
         else
            next_state = w_busy47;
      end
      CS_high11: begin
         next_state = w_busy49;
      end
      w_busy49: begin
         if (busy_p==1)
            next_state = st_GPIOA24;
         else
            next_state = w_busy49;
      end
      CS_high18: begin
         next_state = w_busy53;
      end
      w_busy53: begin
         if (busy_p==1)
            next_state = ST_waittoact;
         else
            next_state = w_busy53;
      end
      st_GPIOA21: begin
         next_state = w_busy21;
      end
      st_GPIOA22: begin
         next_state = w_busy22;
      end
      st_GPIOA23: begin
         next_state = w_busy23;
      end
      w_busy21: begin
         if (busy_p==1)
            next_state = st_GPIOA22;
         else
            next_state = w_busy21;
      end
      w_busy22: begin
         if (busy_p==1)
            next_state = st_GPIOA23;
         else
            next_state = w_busy22;
      end
      w_busy23: begin
         if (busy_p==1)
            next_state = CS_high11;
         else
            next_state = w_busy23;
      end
      st_GPIOA24: begin
         next_state = w_busy50;
      end
      st_GPIOA25: begin
         next_state = w_busy51;
      end
      st_GPIOA26: begin
         next_state = w_busy52;
      end
      w_busy50: begin
         if (busy_p==1)
            next_state = st_GPIOA25;
         else
            next_state = w_busy50;
      end
      w_busy51: begin
         if (busy_p==1)
            next_state = st_GPIOA26;
         else
            next_state = w_busy51;
      end
      w_busy52: begin
         if (busy_p==1)
            next_state = CS_high18;
         else
            next_state = w_busy52;
      end
      s0: begin
         next_state = st_GPIOA12;
      end
      s1: begin
         next_state = st_GPIOA21;
      end
      End_Select1: begin
         next_state = ST_waittoact;
      end
      ST_Read_reg3: begin
         next_state = Start_reading;
      end
      Start_reading: begin
         if (spi_rx_m_rec ==1'b1)
            next_state = St_wait67;
         else
            next_state = Start_reading;
      end
      St_wait64: begin
         if (busy_m==1)
            next_state = Break_Loop1;
         else
            next_state = St_wait64;
      end
      ST_Rest_RS_16: begin
         next_state = St_wait66;
      end
      s2: begin
         if (csm_timeout)
            next_state = Offset__cal1;
         else
            next_state = s2;
      end
      s3: begin
         if (csm_timeout)
            next_state = Offset__cal2;
         else
            next_state = s3;
      end
      s4: begin
         if (csm_timeout)
            next_state = Offset__cal3;
         else
            next_state = s4;
      end
      s5: begin
         if (csm_timeout)
            next_state = Gain_cal1;
         else
            next_state = s5;
      end
      s6: begin
         if (csm_timeout)
            next_state = Gain_cal2;
         else
            next_state = s6;
      end
      s7: begin
         if (csm_timeout)
            next_state = Gain_cal3;
         else
            next_state = s7;
      end
      Break_Loop1: begin
         if (addr_write_cld == 5'h6)
            next_state = write_elink;
         else
            next_state = ST_Rest_RS_16;
      end
      St_wait66: begin
         if (spi_rx_m_rec ==1'b1)
            next_state = St_wait64;
         else
            next_state = St_wait66;
      end
      St_wait67: begin
         if (busy_m==1)
            next_state = ST_Rest_RS_16;
         else
            next_state = St_wait67;
      end
      St_wait2: begin
         if (busy_m==1)
            next_state = St_Reset_Rs_sw;
         else
            next_state = St_wait2;
      end
      End_Conf: begin
         next_state = ST_waittoact;
      end
      Offset_cal1: begin
         next_state = St_wait60;
      end
      Offset__cal4: begin
         next_state = St_wait61;
      end
      Offset__cal5: begin
         next_state = St_wait71;
      end
      Offset__cal6: begin
         next_state = St_wait75;
      end
      St_wait60: begin
         if (busy_m==1)
            next_state = ST_Config25;
         else
            next_state = St_wait60;
      end
      St_wait61: begin
         if (busy_m==1)
            next_state = ST_Config28;
         else
            next_state = St_wait61;
      end
      St_wait62: begin
         if (busy_m==1) begin
            next_state = s8;
            csm_to_s8 = 1'b1;
         end
         else
            next_state = St_wait62;
      end
      ST_Config25: begin
         next_state = St_wait63;
      end
      ST_Config26: begin
         next_state = St_wait62;
      end
      St_wait63: begin
         if (busy_m==1)
            next_state = ST_Config27;
         else
            next_state = St_wait63;
      end
      ST_Config27: begin
         next_state = St_wait65;
      end
      St_wait65: begin
         if (busy_m==1)
            next_state = ST_Config26;
         else
            next_state = St_wait65;
      end
      ST_Config28: begin
         next_state = St_wait68;
      end
      St_wait68: begin
         if (busy_m==1)
            next_state = ST_Config29;
         else
            next_state = St_wait68;
      end
      ST_Config29: begin
         next_state = St_wait69;
      end
      St_wait69: begin
         if (busy_m==1)
            next_state = ST_Config30;
         else
            next_state = St_wait69;
      end
      ST_Config30: begin
         next_state = St_wait70;
      end
      St_wait70: begin
         if (busy_m==1) begin
            next_state = s9;
            csm_to_s9 = 1'b1;
         end
         else
            next_state = St_wait70;
      end
      St_wait71: begin
         if (busy_m==1)
            next_state = ST_Config31;
         else
            next_state = St_wait71;
      end
      ST_Config31: begin
         next_state = St_wait72;
      end
      St_wait72: begin
         if (busy_m==1)
            next_state = ST_Config32;
         else
            next_state = St_wait72;
      end
      ST_Config32: begin
         next_state = St_wait73;
      end
      St_wait73: begin
         if (busy_m==1)
            next_state = ST_Config33;
         else
            next_state = St_wait73;
      end
      ST_Config33: begin
         next_state = St_wait74;
      end
      St_wait74: begin
         if (busy_m==1) begin
            next_state = s10;
            csm_to_s10 = 1'b1;
         end
         else
            next_state = St_wait74;
      end
      St_wait75: begin
         if (busy_m==1)
            next_state = ST_Config34;
         else
            next_state = St_wait75;
      end
      ST_Config34: begin
         next_state = St_wait76;
      end
      St_wait76: begin
         if (busy_m==1)
            next_state = ST_Config35;
         else
            next_state = St_wait76;
      end
      ST_Config35: begin
         next_state = St_wait77;
      end
      St_wait77: begin
         if (busy_m==1)
            next_state = ST_Config36;
         else
            next_state = St_wait77;
      end
      ST_Config36: begin
         next_state = St_wait78;
      end
      St_wait78: begin
         if (busy_m==1)
            next_state = Gain_cal4;
         else
            next_state = St_wait78;
      end
      s8: begin
         if (csm_timeout)
            next_state = Offset__cal4;
         else
            next_state = s8;
      end
      s9: begin
         if (csm_timeout)
            next_state = Offset__cal5;
         else
            next_state = s9;
      end
      s10: begin
         if (csm_timeout)
            next_state = Offset__cal6;
         else
            next_state = s10;
      end
      Gain_cal4: begin
         next_state = St_wait81;
      end
      Gain_cal5: begin
         next_state = St_wait82;
      end
      Gain_cal6: begin
         next_state = St_wait85;
      end
      Gain_cal7: begin
         next_state = St_wait88;
      end
      ST_Config37: begin
         next_state = St_wait79;
      end
      St_wait79: begin
         if (busy_m==1)
            next_state = ST_Config38;
         else
            next_state = St_wait79;
      end
      ST_Config38: begin
         next_state = St_wait80;
      end
      St_wait80: begin
         if (busy_m==1) begin
            next_state = s11;
            csm_to_s11 = 1'b1;
         end
         else
            next_state = St_wait80;
      end
      St_wait81: begin
         if (busy_m==1)
            next_state = ST_Config37;
         else
            next_state = St_wait81;
      end
      St_wait82: begin
         if (busy_m==1)
            next_state = ST_Config39;
         else
            next_state = St_wait82;
      end
      ST_Config39: begin
         next_state = St_wait83;
      end
      St_wait83: begin
         if (busy_m==1)
            next_state = ST_Config40;
         else
            next_state = St_wait83;
      end
      ST_Config40: begin
         next_state = St_wait84;
      end
      St_wait84: begin
         if (busy_m==1) begin
            next_state = s12;
            csm_to_s12 = 1'b1;
         end
         else
            next_state = St_wait84;
      end
      St_wait85: begin
         if (busy_m==1)
            next_state = ST_Config41;
         else
            next_state = St_wait85;
      end
      ST_Config41: begin
         next_state = St_wait86;
      end
      St_wait86: begin
         if (busy_m==1)
            next_state = ST_Config42;
         else
            next_state = St_wait86;
      end
      ST_Config42: begin
         next_state = St_wait87;
      end
      St_wait87: begin
         if (busy_m==1) begin
            next_state = s13;
            csm_to_s13 = 1'b1;
         end
         else
            next_state = St_wait87;
      end
      St_wait88: begin
         if (busy_m==1)
            next_state = ST_Config43;
         else
            next_state = St_wait88;
      end
      ST_Config43: begin
         next_state = St_wait89;
      end
      St_wait89: begin
         if (busy_m==1)
            next_state = ST_Config44;
         else
            next_state = St_wait89;
      end
      ST_Config44: begin
         next_state = St_wait90;
      end
      St_wait90: begin
         if (busy_m==1)
            next_state = End_Conf;
         else
            next_state = St_wait90;
      end
      s11: begin
         if (csm_timeout)
            next_state = Gain_cal5;
         else
            next_state = s11;
      end
      s12: begin
         if (csm_timeout)
            next_state = Gain_cal6;
         else
            next_state = s12;
      end
      s13: begin
         if (csm_timeout)
            next_state = Gain_cal7;
         else
            next_state = s13;
      end
      write_csrs8: begin
         next_state = St_wait97;
      end
      write_csrs9: begin
         next_state = St_wait96;
      end
      write_csrs10: begin
         next_state = St_wait95;
      end
      write_csrs11: begin
         next_state = St_wait94;
      end
      write_csrs3: begin
         next_state = St_wait91;
      end
      write_csrs12: begin
         next_state = St_wait92;
      end
      write_csrs13: begin
         next_state = St_wait93;
      end
      St_wait91: begin
         if (busy_m==1)
            next_state = write_csrs12;
         else
            next_state = St_wait91;
      end
      St_wait92: begin
         if (busy_m==1)
            next_state = write_csrs13;
         else
            next_state = St_wait92;
      end
      St_wait93: begin
         if (busy_m==1)
            next_state = write_csrs11;
         else
            next_state = St_wait93;
      end
      St_wait94: begin
         if (busy_m==1)
            next_state = write_csrs10;
         else
            next_state = St_wait94;
      end
      St_wait95: begin
         if (busy_m==1)
            next_state = write_csrs9;
         else
            next_state = St_wait95;
      end
      St_wait96: begin
         if (busy_m==1)
            next_state = write_csrs8;
         else
            next_state = St_wait96;
      end
      St_wait97: begin
         if (busy_m==1)
            next_state = ST_Read_reg5;
         else
            next_state = St_wait97;
      end
      ST_Config45: begin
         next_state = St_wait24;
      end
      ST_Config46: begin
         next_state = St_wait23;
      end
      ST_Config47: begin
         next_state = St_wait22;
      end
      ST_Config48: begin
         next_state = St_wait21;
      end
      St_wait21: begin
         if (busy_m==1)
            next_state = ST_Config46;
         else
            next_state = St_wait21;
      end
      St_wait22: begin
         if (busy_m==1)
            next_state = ST_Config48;
         else
            next_state = St_wait22;
      end
      St_wait23: begin
         if (busy_m==1)
            next_state = ST_Config45;
         else
            next_state = St_wait23;
      end
      St_wait24: begin
         if (busy_m==1)
            next_state = ST_Read_reg4;
         else
            next_state = St_wait24;
      end
      ST_Rest_3: begin
         next_state = St_wait4;
      end
      ST_Rest_5: begin
         next_state = St_wait8;
      end
      ST_Rest_6: begin
         next_state = St_wait3;
      end
      St_wait3: begin
         if (busy_m==1)
            next_state = ST_Rest_3;
         else
            next_state = St_wait3;
      end
      ST_Rest_RS_4: begin
         next_state = St_wait9;
      end
      ST_Rest_RS_5: begin
         next_state = St_wait5;
      end
      ST_Rest_sw1: begin
         if (addr_write_cld ==5'd2)
            next_state = ST_Rest_5;
         else
            next_state = ST_Rest_3;
      end
      ST_Rest_RS_6: begin
         next_state = ST_Config47;
      end
      St_wait4: begin
         if (busy_m==1)
            next_state = ST_Rest_sw1;
         else
            next_state = St_wait4;
      end
      St_wait8: begin
         if (busy_m==1)
            next_state = ST_Rest_RS_4;
         else
            next_state = St_wait8;
      end
      St_wait9: begin
         if (busy_m==1)
            next_state = ST_Rest_RS_5;
         else
            next_state = St_wait9;
      end
      St_Reset_Rs_sw1: begin
         if (addr_write_cld ==5'd3)
            next_state = ST_Rest_RS_6;
         else
            next_state = ST_Rest_RS_5;
      end
      St_wait5: begin
         if (busy_m==1)
            next_state = St_Reset_Rs_sw1;
         else
            next_state = St_wait5;
      end
      ST_Init_2: begin
         next_state = ST_wait_2;
      end
      ST_wait_2: begin
         if (busy_m==1)
            next_state = ST_Init_3;
         else
            next_state = ST_wait_2;
      end
      ST_Init_3: begin
         next_state = ST_wait_3;
      end
      ST_wait_3: begin
         if (busy_m==1)
            next_state = ST_Init_incr1;
         else
            next_state = ST_wait_3;
      end
      ST_Init_incr1: begin
         if (addr_write_cld ==5'd14)
            next_state = st_Init_3;
         else
            next_state = ST_Init_3;
      end
      st_Init_3: begin
         next_state = ST_wait_16;
      end
      ST_wait_16: begin
         if (busy_m==1)
            next_state = ST_Rest_6;
         else
            next_state = ST_wait_16;
      end
      Done1: begin
         if (error_count_reg ==5'd4)
            next_state = Rst_cnt;
         else
            next_state = Increment_cnt;
      end
      write_elink1: begin
         if (end_write_elink_spi ==1)
            next_state = Done1;
         else
            next_state = write_elink1;
      end
      ST_Read_reg4: begin
         next_state = Start_reading1;
      end
      Start_reading1: begin
         if (spi_rx_m_rec ==1'b1)
            next_state = St_wait100;
         else
            next_state = Start_reading1;
      end
      St_wait98: begin
         if (busy_m==1)
            next_state = Break_Loop3;
         else
            next_state = St_wait98;
      end
      ST_Rest_RS_17: begin
         next_state = St_wait99;
      end
      Break_Loop3: begin
         if (addr_write_cld == 5'h3)
            next_state = write_elink1;
         else
            next_state = ST_Rest_RS_17;
      end
      St_wait99: begin
         if (spi_rx_m_rec ==1'b1)
            next_state = St_wait98;
         else
            next_state = St_wait99;
      end
      St_wait100: begin
         if (busy_m==1)
            next_state = ST_Rest_RS_17;
         else
            next_state = St_wait100;
      end
      ST_read_elink1: begin
         if (end_read_elink == 1)
            next_state = ST_Init_2;
         else
            next_state = ST_read_elink1;
      end
      Done2: begin
         next_state = Offset_cal1;
      end
      write_elink2: begin
         if (end_write_elink_spi ==1)
            next_state = Done2;
         else
            next_state = write_elink2;
      end
      ST_Read_reg5: begin
         next_state = Start_reading2;
      end
      Start_reading2: begin
         if (spi_rx_m_rec ==1'b1)
            next_state = St_wait103;
         else
            next_state = Start_reading2;
      end
      St_wait101: begin
         if (busy_m==1)
            next_state = Break_Loop4;
         else
            next_state = St_wait101;
      end
      ST_Rest_RS_18: begin
         next_state = St_wait102;
      end
      Break_Loop4: begin
         if (addr_write_cld == 5'd12)
            next_state = write_elink2;
         else
            next_state = ST_Rest_RS_18;
      end
      St_wait102: begin
         if (spi_rx_m_rec ==1'b1)
            next_state = St_wait101;
         else
            next_state = St_wait102;
      end
      St_wait103: begin
         if (busy_m==1)
            next_state = ST_Rest_RS_18;
         else
            next_state = St_wait103;
      end
      Rst_cnt: begin
         next_state = write_csrs3;
      end
      Increment_cnt: begin
         next_state = ST_Config47;
      end
      default: 
         next_state = ST_reset;
   endcase
end // Next State Block

//-----------------------------------------------------------------
// Output Block for machine csm
//-----------------------------------------------------------------
always @(
   current_state, 
   spi_tra_mon_reg
)
begin : output_block_proc
   // Default Assignment
   buffer_en = 1'b0;
   bus_en_done = 0;
   cs_m = 1;
   cs_p = 1;
   data_init = 8'b0;
   entimeout = 1;
   mon_en_done = 0;
   read_spi_mode = 0;
   spi_power_mode = 0;
   start_init_spi = 0;
   start_read_elink = 0;
   start_write_elink_spi = 0;
   transcieve_m = 0;
   transcieve_p = 0;

   // Combined Actions
   case (current_state) 
      ST_waittoact: begin
         entimeout =0;
      end
      ST_reset: begin
         read_spi_mode =0;
         spi_power_mode =0;
      end
      start: begin
         start_init_spi =1;
      end
      endinit1: begin
         mon_en_done=1;
      end
      start1: begin
         start_init_spi =1;
      end
      st_GPIOA: begin
         data_init =8'h40;
         cs_p = 0 ;
         transcieve_p =1;
      end
      st_GPIOA1: begin
         data_init =8'h12;
         cs_p = 0 ;
         transcieve_p =1;
      end
      st_GPIOA2: begin
         data_init =8'h01;
         cs_p = 0 ;
         transcieve_p =1;
      end
      End_Select: begin
         bus_en_done =1;
      end
      ST_read_elink: begin
         start_read_elink = 1 ;
         read_spi_mode =1;
      end
      Done: begin
         read_spi_mode =1;
      end
      write_elink: begin
         start_write_elink_spi =1;
         read_spi_mode =1;
      end
      Offset_cal0: begin
         data_init = 8'h81;
         cs_m =0 ;
         transcieve_m =1;
      end
      Offset__cal1: begin
         data_init = 8'h89;
         cs_m =0 ;
         transcieve_m =1;
      end
      Offset__cal2: begin
         data_init = 8'h91;
         cs_m =0 ;
         transcieve_m =1;
      end
      Offset__cal3: begin
         data_init = 8'h99;
         cs_m =0 ;
         transcieve_m =1;
      end
      Gain_cal0: begin
         data_init = 8'h82;
         cs_m =0 ;
         transcieve_m =1;
      end
      Gain_cal1: begin
         data_init = 8'h8A;
         cs_m =0 ;
         transcieve_m =1;
      end
      Gain_cal2: begin
         data_init = 8'h92;
         cs_m =0 ;
         transcieve_m =1;
      end
      Gain_cal3: begin
         data_init = 8'h9A;
         cs_m =0 ;
         transcieve_m =1;
      end
      write_csrs7: begin
         data_init = 8'h8B;
         cs_m = 0 ;
         transcieve_m =1;
      end
      write_csrs6: begin
         data_init = 8'hB1;
         cs_m = 0 ;
         transcieve_m =1;
      end
      write_csrs5: begin
         data_init = 8'h10;
         cs_m = 0 ;
         transcieve_m =1;
      end
      write_csrs4: begin
         data_init = 8'h8B;
         cs_m = 0 ;
         transcieve_m =1;
      end
      write_csrs0: begin
         data_init = 8'h05;
         cs_m = 0 ;
         transcieve_m =1;
      end
      write_csrs1: begin
         data_init = 8'h00;
         cs_m = 0 ;
         transcieve_m =1;
      end
      write_csrs2: begin
         data_init = 8'hB0;
         cs_m = 0 ;
         transcieve_m =1;
      end
      ST_Config4: begin
         data_init = 8'h00;
         cs_m = 0 ;
         transcieve_m =1;
      end
      ST_Config3: begin
         data_init = 8'h30;
         cs_m = 0 ;
         transcieve_m =1;
      end
      ST_Config1: begin
         data_init = 8'h03;
         cs_m = 0 ;
         transcieve_m =1;
      end
      ST_Config2: begin
         data_init = 8'h00;
         cs_m = 0 ;
         transcieve_m =1;
      end
      ST_Rest_2: begin
         data_init = 8'h00;
         cs_m = 0 ;
         transcieve_m =1;
      end
      ST_Rest_4: begin
         data_init = 8'h80;
         cs_m = 0 ;
         transcieve_m =1;
      end
      ST_Rest_1: begin
         data_init = 8'h03;
         cs_m = 0 ;
         transcieve_m =1;
      end
      St_wait: begin
         data_init = 8'h03;
         cs_m = 0 ;
      end
      ST_Rest_RS_1: begin
         data_init = 8'h03;
         cs_m = 0 ;
         transcieve_m =1;
      end
      ST_Rest_RS_2: begin
         data_init = 8'h00;
         cs_m = 0 ;
         transcieve_m =1;
      end
      st_GPIOA9: begin
         data_init = 8'h40;
         cs_p = 0 ;
      end
      st_GPIOA10: begin
         data_init = 8'h12;
         cs_p = 0 ;
      end
      st_GPIOA11: begin
         data_init = 8'h00;
         cs_p = 0 ;
      end
      w_busy15: begin
         data_init =8'h40;
         cs_p = 0 ;
      end
      w_busy16: begin
         data_init =8'h12;
         cs_p = 0 ;
      end
      w_busy17: begin
         data_init =8'h01;
         cs_p = 0 ;
      end
      ST_IODIRA0: begin
         data_init =8'h40; 
         cs_p = 0 ;
         transcieve_p =1;
      end
      w_busy0: begin
         data_init =8'h40; 
         cs_p =0;
      end
      ST_IODIRA1: begin
         data_init =8'h00; 
         cs_p = 0 ;
         transcieve_p =1;
      end
      w_busy1: begin
         cs_p =0;
         data_init =8'h00;
      end
      ST_IODIRA2: begin
         data_init =8'h00; 
         cs_p = 0 ;
         transcieve_p =1;
      end
      w_busy2: begin
         data_init =8'h00; 
         cs_p =0;
      end
      w_busy5: begin
         data_init =8'h00; 
         cs_p =0;
      end
      st_IODIRB1: begin
         data_init =8'h01;
         cs_p = 0 ;
         transcieve_p =1;
      end
      st_IODIRB2: begin
         data_init =8'h00; 
         cs_p = 0 ;
         transcieve_p =1;
      end
      st_IODIRB: begin
         data_init =8'h40;
         cs_p = 0 ;
         transcieve_p =1;
      end
      w_busy3: begin
         data_init =8'h40;
         cs_p =0;
      end
      w_busy4: begin
         data_init =8'h01;
         cs_p =0;
      end
      w_busy7: begin
         data_init =8'h13;
         cs_p =0;
      end
      st_GPIOB2: begin
         data_init =8'h00;
         cs_p = 0 ;
         transcieve_p =1;
      end
      st_GPIOB1: begin
         data_init =8'h13;
         cs_p = 0 ;
         transcieve_p =1;
      end
      w_busy8: begin
         data_init =8'h00;
         cs_p = 0 ;
      end
      w_busy6: begin
         data_init =8'h40;
         cs_p =0;
      end
      st_GPIOB0: begin
         data_init =8'h40;
         cs_p = 0 ;
         transcieve_p =1;
      end
      st_GPPUA: begin
         data_init =8'h40;
         cs_p = 0 ;
         transcieve_p =1;
      end
      w_busy11: begin
         data_init =8'h0C;
         cs_p = 0 ;
      end
      w_busy9: begin
         cs_p = 0 ;
         data_init =8'h40;
      end
      st_GPPUA2: begin
         data_init =8'hFE;
         cs_p = 0 ;
         transcieve_p =1;
      end
      st_GPPUA1: begin
         data_init =8'h0C;
         cs_p = 0 ;
         transcieve_p =1;
      end
      w_busy10: begin
         data_init =8'hFE;
         cs_p =0;
      end
      st_GPPUB1: begin
         data_init =8'h0D;
         cs_p = 0 ;
         transcieve_p =1;
      end
      w_busy13: begin
         data_init =8'h0D;
         cs_p = 0 ;
      end
      w_busy12: begin
         data_init =8'h40;
         cs_p = 0 ;
      end
      st_GPPUB2: begin
         data_init =8'hFF;
         cs_p = 0 ;
         transcieve_p =1;
      end
      w_busy14: begin
         data_init =8'hFF;
         cs_p = 0 ;
      end
      st_GPPUB: begin
         data_init =8'h40;
         cs_p = 0 ;
         transcieve_p =1;
      end
      CS_high0: begin
         cs_p =1;
         transcieve_p =1;
      end
      CS_high1: begin
         cs_p =1;
         transcieve_p =1;
      end
      CS_high2: begin
         cs_p =1;
         transcieve_p =1;
      end
      CS_high3: begin
         cs_p =1;
         transcieve_p =1;
      end
      CS_high4: begin
         cs_p =1;
         transcieve_p =1;
      end
      CS_high5: begin
         cs_p =1;
         transcieve_p =1;
      end
      w_busy26: begin
         cs_p = 1 ;
      end
      w_busy27: begin
         cs_p = 1 ;
      end
      w_busy28: begin
         cs_p = 1 ;
      end
      w_busy29: begin
         cs_p = 1 ;
      end
      w_busy30: begin
         cs_p = 1 ;
      end
      w_busy31: begin
         cs_p = 1 ;
      end
      ST_Init_0: begin
         data_init = 8'hFF;
         cs_m =0;
         transcieve_m =1;
      end
      ST_wait_0: begin
         data_init = 8'hFF;
         cs_m =0;
      end
      ST_Init_1: begin
         data_init = 8'hFF;
         cs_m =0;
         transcieve_m =1;
      end
      ST_wait_1: begin
         data_init = 8'hFF;
         cs_m =0;
      end
      ST_Init_incr: begin
         data_init = 8'hFF;
         cs_m =0;
      end
      st_Init_2: begin
         data_init = 8'hFE;
         cs_m =0;
         transcieve_m =1;
      end
      ST_wait_15: begin
         data_init = 8'hFE;
         cs_m =0;
      end
      ST_Rest_sw: begin
         data_init = 8'h00;
         cs_m = 0 ;
      end
      ST_Rest_RS_3: begin
         data_init = 8'h00;
         cs_m = 0 ;
      end
      St_wait1: begin
         data_init = 8'h00;
         cs_m = 0 ;
      end
      St_wait6: begin
         data_init = 8'h80;
         cs_m = 0 ;
      end
      St_wait7: begin
         data_init = 8'h03;
         cs_m = 0 ;
      end
      St_Reset_Rs_sw: begin
         data_init = 8'h00;
         cs_m = 0 ;
      end
      St_wait17: begin
         data_init = 8'h00;
         cs_m = 0 ;
      end
      St_wait18: begin
         data_init = 8'h03;
         cs_m = 0 ;
      end
      St_wait19: begin
         data_init = 8'h30;
         cs_m = 0 ;
      end
      St_wait20: begin
         data_init = 8'h00;
         cs_m = 0 ;
      end
      St_wait32: begin
         data_init = 8'h81;
         cs_m = 0 ;
      end
      St_wait33: begin
         data_init = 8'h89;
         cs_m = 0 ;
      end
      St_wait34: begin
         data_init = 8'h00;
         cs_m = 0 ;
      end
      ST_Config5: begin
         data_init = 8'h00;
         cs_m = 0 ;
         transcieve_m =1;
      end
      ST_Config6: begin
         data_init = 8'h00;
         cs_m = 0 ;
         transcieve_m =1;
      end
      St_wait35: begin
         data_init = 8'h00;
         cs_m = 0 ;
      end
      ST_Config7: begin
         data_init = 8'h30;
         cs_m = 0 ;
         transcieve_m =1;
      end
      St_wait36: begin
         data_init = 8'h30;
         cs_m = 0 ;
      end
      ST_Config8: begin
         data_init = 8'h00;
         cs_m = 0 ;
         transcieve_m =1;
      end
      St_wait37: begin
         data_init = 8'h00;
         cs_m = 0 ;
      end
      ST_Config9: begin
         data_init = 8'h30;
         cs_m = 0 ;
         transcieve_m =1;
      end
      St_wait38: begin
         data_init = 8'h30;
         cs_m = 0 ;
      end
      ST_Config10: begin
         data_init = 8'h00;
         cs_m = 0 ;
         transcieve_m =1;
      end
      St_wait39: begin
         data_init = 8'h00;
         cs_m = 0 ;
      end
      St_wait40: begin
         data_init = 8'h91;
         cs_m = 0 ;
      end
      ST_Config11: begin
         data_init = 8'h00;
         cs_m = 0 ;
         transcieve_m =1;
      end
      St_wait41: begin
         data_init = 8'h00;
         cs_m = 0 ;
      end
      ST_Config12: begin
         data_init = 8'h30;
         cs_m = 0 ;
         transcieve_m =1;
      end
      St_wait42: begin
         data_init = 8'h30;
         cs_m = 0 ;
      end
      ST_Config13: begin
         data_init = 8'h00;
         cs_m = 0 ;
         transcieve_m =1;
      end
      St_wait43: begin
         data_init = 8'h00;
         cs_m = 0 ;
      end
      St_wait44: begin
         data_init = 8'h99;
         cs_m = 0 ;
      end
      ST_Config14: begin
         data_init = 8'h00;
         cs_m = 0 ;
         transcieve_m =1;
      end
      St_wait45: begin
         data_init = 8'h00;
         cs_m = 0 ;
      end
      ST_Config15: begin
         data_init = 8'h30;
         cs_m = 0 ;
         transcieve_m =1;
      end
      St_wait46: begin
         data_init = 8'h30;
         cs_m = 0 ;
      end
      ST_Config16: begin
         data_init = 8'h00;
         cs_m = 0 ;
         transcieve_m =1;
      end
      St_wait47: begin
         data_init = 8'h00;
         cs_m = 0 ;
      end
      St_wait25: begin
         data_init = 8'h05;
         cs_m = 0 ;
      end
      St_wait26: begin
         data_init = 8'h00;
         cs_m = 0 ;
      end
      St_wait27: begin
         data_init = 8'hB0;
         cs_m = 0 ;
      end
      St_wait28: begin
         data_init = 8'h8B;
         cs_m = 0 ;
      end
      St_wait29: begin
         data_init = 8'h10;
         cs_m = 0 ;
      end
      St_wait30: begin
         data_init = 8'hB1;
         cs_m = 0 ;
      end
      St_wait31: begin
         data_init = 8'h8B;
         cs_m = 0 ;
      end
      ST_Config17: begin
         data_init = 8'h00;
         cs_m = 0 ;
         transcieve_m =1;
      end
      St_wait48: begin
         data_init = 8'h00;
         cs_m = 0 ;
      end
      ST_Config18: begin
         data_init = 8'h30;
         cs_m = 0 ;
         transcieve_m =1;
      end
      St_wait49: begin
         data_init = 8'h30;
         cs_m = 0 ;
      end
      St_wait50: begin
         data_init = 8'h82;
         cs_m = 0 ;
      end
      St_wait51: begin
         data_init = 8'h8A;
         cs_m = 0 ;
      end
      ST_Config19: begin
         data_init = 8'h00;
         cs_m = 0 ;
         transcieve_m =1;
      end
      St_wait52: begin
         data_init = 8'h00;
         cs_m = 0 ;
      end
      ST_Config20: begin
         data_init = 8'h30;
         cs_m = 0 ;
         transcieve_m =1;
      end
      St_wait53: begin
         data_init = 8'h30;
         cs_m = 0 ;
      end
      St_wait54: begin
         data_init = 8'h92;
         cs_m = 0 ;
      end
      ST_Config21: begin
         data_init = 8'h00;
         cs_m = 0 ;
         transcieve_m =1;
      end
      St_wait55: begin
         data_init = 8'h00;
         cs_m = 0 ;
      end
      ST_Config22: begin
         data_init = 8'h30;
         cs_m = 0 ;
         transcieve_m =1;
      end
      St_wait56: begin
         data_init = 8'h30;
         cs_m = 0 ;
      end
      St_wait57: begin
         data_init = 8'h9A;
         cs_m = 0 ;
      end
      ST_Config23: begin
         data_init = 8'h00;
         cs_m = 0 ;
         transcieve_m =1;
      end
      St_wait58: begin
         data_init = 8'h00;
         cs_m = 0 ;
      end
      ST_Config24: begin
         data_init = 8'h30;
         cs_m = 0 ;
         transcieve_m =1;
      end
      St_wait59: begin
         data_init = 8'h30;
         cs_m = 0 ;
      end
      CS_high16: begin
         cs_p =1;
         transcieve_p =1;
      end
      w_busy43: begin
         cs_p = 1 ;
      end
      st_GPIOA15: begin
         data_init =8'h40;
         cs_p = 0 ;
         transcieve_p =1;
      end
      st_GPIOA16: begin
         data_init =8'h09;
         cs_p = 0 ;
         transcieve_p =1;
      end
      st_GPIOA17: begin
         data_init =8'h01;
         cs_p = 0 ;
         transcieve_p =1;
      end
      w_busy40: begin
         data_init =8'h40;
         cs_p = 0 ;
      end
      w_busy41: begin
         data_init =8'h09;
         cs_p = 0 ;
      end
      w_busy42: begin
         data_init =8'h01;
         cs_p = 0 ;
      end
      CS_high6: begin
         cs_p =1;
         transcieve_p =1;
         spi_power_mode =1;
      end
      w_busy44: begin
         cs_p = 1 ;
         spi_power_mode =1;
      end
      CS_high17: begin
         cs_p =1;
         transcieve_p =1;
         spi_power_mode =1;
      end
      w_busy48: begin
         cs_p = 1 ;
         spi_power_mode =1;
      end
      st_GPIOA12: begin
         data_init =8'h40;
         cs_p = 0 ;
         transcieve_p =1;
         spi_power_mode =1;
      end
      st_GPIOA13: begin
         data_init =8'h12;
         cs_p = 0 ;
         transcieve_p =1;
         spi_power_mode =1;
      end
      st_GPIOA14: begin
         data_init =8'h01;
         cs_p = 0 ;
         transcieve_p =1;
         spi_power_mode =1;
      end
      w_busy18: begin
         data_init =8'h40;
         spi_power_mode =1;
         cs_p = 0 ;
      end
      w_busy19: begin
         data_init =8'h12;
         spi_power_mode =1;
         cs_p = 0 ;
      end
      w_busy20: begin
         data_init =8'h01;
         spi_power_mode =1;
         cs_p = 0 ;
      end
      st_GPIOA18: begin
         data_init =8'h40;
         cs_p = 0 ;
         transcieve_p =1;
         spi_power_mode =1;
      end
      st_GPIOA19: begin
         data_init =8'h09;
         cs_p = 0 ;
         transcieve_p =1;
         spi_power_mode =1;
      end
      st_GPIOA20: begin
         data_init =8'h01;
         cs_p = 0 ;
         transcieve_p =1;
         spi_power_mode =1;
      end
      w_busy45: begin
         data_init =8'h40;
         cs_p = 0 ;
         spi_power_mode =1;
      end
      w_busy46: begin
         data_init =8'h09;
         cs_p = 0 ;
         spi_power_mode =1;
      end
      w_busy47: begin
         data_init =8'h01;
         cs_p = 0 ;
         spi_power_mode =1;
      end
      CS_high11: begin
         cs_p =1;
         transcieve_p =1;
         spi_power_mode =1;
      end
      w_busy49: begin
         cs_p = 1 ;
         spi_power_mode =1;
      end
      CS_high18: begin
         cs_p =1;
         transcieve_p =1;
         spi_power_mode =1;
      end
      w_busy53: begin
         cs_p = 1 ;
         spi_power_mode =1;
      end
      st_GPIOA21: begin
         data_init =8'h40;
         cs_p = 0 ;
         transcieve_p =1;
         spi_power_mode =1;
      end
      st_GPIOA22: begin
         data_init =8'h12;
         cs_p = 0 ;
         transcieve_p =1;
         spi_power_mode =1;
      end
      st_GPIOA23: begin
         data_init =8'h00;
         cs_p = 0 ;
         transcieve_p =1;
         spi_power_mode =1;
      end
      w_busy21: begin
         data_init =8'h40;
         cs_p = 0 ;
         spi_power_mode =1;
      end
      w_busy22: begin
         data_init =8'h12;
         cs_p = 0 ;
         spi_power_mode =1;
      end
      w_busy23: begin
         data_init =8'h00;
         cs_p = 0 ;
         spi_power_mode =1;
      end
      st_GPIOA24: begin
         data_init =8'h40;
         cs_p = 0 ;
         transcieve_p =1;
         spi_power_mode =1;
      end
      st_GPIOA25: begin
         data_init =8'h09;
         cs_p = 0 ;
         transcieve_p =1;
         spi_power_mode =1;
      end
      st_GPIOA26: begin
         data_init =8'h00;
         cs_p = 0 ;
         transcieve_p =1;
         spi_power_mode =1;
      end
      w_busy50: begin
         data_init =8'h40;
         cs_p = 0 ;
         spi_power_mode =1;
      end
      w_busy51: begin
         data_init =8'h09;
         cs_p = 0 ;
         spi_power_mode =1;
      end
      w_busy52: begin
         data_init =8'h00;
         cs_p = 0 ;
         spi_power_mode =1;
      end
      s0: begin
         start_read_elink =1;
         spi_power_mode =1;
      end
      s1: begin
         start_read_elink =1;
         spi_power_mode =1;
      end
      End_Select1: begin
         bus_en_done =1;
         spi_power_mode =1;
      end
      ST_Read_reg3: begin
         cs_m = 0 ;
         transcieve_m =1;
         read_spi_mode =1;
         data_init  = spi_tra_mon_reg;
      end
      Start_reading: begin
         cs_m = 0 ;
         read_spi_mode =1;
         data_init  = spi_tra_mon_reg;
      end
      St_wait64: begin
         cs_m = 0 ;
         read_spi_mode =1;
         buffer_en =1'b1;
         data_init = 8'b0;
      end
      ST_Rest_RS_16: begin
         cs_m = 0 ;
         transcieve_m =1;
         read_spi_mode =1;
         data_init = 8'h0;
      end
      Break_Loop1: begin
         cs_m = 0 ;
         read_spi_mode =1;
      end
      St_wait66: begin
         cs_m = 0 ;
         read_spi_mode =1;
         data_init = 8'b0;
      end
      St_wait67: begin
         cs_m = 0 ;
         read_spi_mode =1;
         buffer_en =1'b1;
         data_init  = spi_tra_mon_reg;
      end
      St_wait2: begin
         data_init = 8'h00;
         cs_m = 0 ;
      end
      Offset_cal1: begin
         data_init = 8'h81;
         cs_m =0 ;
         transcieve_m =1;
      end
      Offset__cal4: begin
         data_init = 8'h89;
         cs_m =0 ;
         transcieve_m =1;
      end
      Offset__cal5: begin
         data_init = 8'h91;
         cs_m =0 ;
         transcieve_m =1;
      end
      Offset__cal6: begin
         data_init = 8'h99;
         cs_m =0 ;
         transcieve_m =1;
      end
      St_wait60: begin
         data_init = 8'h81;
         cs_m = 0 ;
      end
      St_wait61: begin
         data_init = 8'h89;
         cs_m = 0 ;
      end
      St_wait62: begin
         data_init = 8'h00;
         cs_m = 0 ;
      end
      ST_Config25: begin
         data_init = 8'h00;
         cs_m = 0 ;
         transcieve_m =1;
      end
      ST_Config26: begin
         data_init = 8'h00;
         cs_m = 0 ;
         transcieve_m =1;
      end
      St_wait63: begin
         data_init = 8'h00;
         cs_m = 0 ;
      end
      ST_Config27: begin
         data_init = 8'h30;
         cs_m = 0 ;
         transcieve_m =1;
      end
      St_wait65: begin
         data_init = 8'h30;
         cs_m = 0 ;
      end
      ST_Config28: begin
         data_init = 8'h00;
         cs_m = 0 ;
         transcieve_m =1;
      end
      St_wait68: begin
         data_init = 8'h00;
         cs_m = 0 ;
      end
      ST_Config29: begin
         data_init = 8'h30;
         cs_m = 0 ;
         transcieve_m =1;
      end
      St_wait69: begin
         data_init = 8'h30;
         cs_m = 0 ;
      end
      ST_Config30: begin
         data_init = 8'h00;
         cs_m = 0 ;
         transcieve_m =1;
      end
      St_wait70: begin
         data_init = 8'h00;
         cs_m = 0 ;
      end
      St_wait71: begin
         data_init = 8'h91;
         cs_m = 0 ;
      end
      ST_Config31: begin
         data_init = 8'h00;
         cs_m = 0 ;
         transcieve_m =1;
      end
      St_wait72: begin
         data_init = 8'h00;
         cs_m = 0 ;
      end
      ST_Config32: begin
         data_init = 8'h30;
         cs_m = 0 ;
         transcieve_m =1;
      end
      St_wait73: begin
         data_init = 8'h30;
         cs_m = 0 ;
      end
      ST_Config33: begin
         data_init = 8'h00;
         cs_m = 0 ;
         transcieve_m =1;
      end
      St_wait74: begin
         data_init = 8'h00;
         cs_m = 0 ;
      end
      St_wait75: begin
         data_init = 8'h99;
         cs_m = 0 ;
      end
      ST_Config34: begin
         data_init = 8'h00;
         cs_m = 0 ;
         transcieve_m =1;
      end
      St_wait76: begin
         data_init = 8'h00;
         cs_m = 0 ;
      end
      ST_Config35: begin
         data_init = 8'h30;
         cs_m = 0 ;
         transcieve_m =1;
      end
      St_wait77: begin
         data_init = 8'h30;
         cs_m = 0 ;
      end
      ST_Config36: begin
         data_init = 8'h00;
         cs_m = 0 ;
         transcieve_m =1;
      end
      St_wait78: begin
         data_init = 8'h00;
         cs_m = 0 ;
      end
      Gain_cal4: begin
         data_init = 8'h82;
         cs_m =0 ;
         transcieve_m =1;
      end
      Gain_cal5: begin
         data_init = 8'h8A;
         cs_m =0 ;
         transcieve_m =1;
      end
      Gain_cal6: begin
         data_init = 8'h92;
         cs_m =0 ;
         transcieve_m =1;
      end
      Gain_cal7: begin
         data_init = 8'h9A;
         cs_m =0 ;
         transcieve_m =1;
      end
      ST_Config37: begin
         data_init = 8'h00;
         cs_m = 0 ;
         transcieve_m =1;
      end
      St_wait79: begin
         data_init = 8'h00;
         cs_m = 0 ;
      end
      ST_Config38: begin
         data_init = 8'h30;
         cs_m = 0 ;
         transcieve_m =1;
      end
      St_wait80: begin
         data_init = 8'h30;
         cs_m = 0 ;
      end
      St_wait81: begin
         data_init = 8'h82;
         cs_m = 0 ;
      end
      St_wait82: begin
         data_init = 8'h8A;
         cs_m = 0 ;
      end
      ST_Config39: begin
         data_init = 8'h00;
         cs_m = 0 ;
         transcieve_m =1;
      end
      St_wait83: begin
         data_init = 8'h00;
         cs_m = 0 ;
      end
      ST_Config40: begin
         data_init = 8'h30;
         cs_m = 0 ;
         transcieve_m =1;
      end
      St_wait84: begin
         data_init = 8'h30;
         cs_m = 0 ;
      end
      St_wait85: begin
         data_init = 8'h92;
         cs_m = 0 ;
      end
      ST_Config41: begin
         data_init = 8'h00;
         cs_m = 0 ;
         transcieve_m =1;
      end
      St_wait86: begin
         data_init = 8'h00;
         cs_m = 0 ;
      end
      ST_Config42: begin
         data_init = 8'h30;
         cs_m = 0 ;
         transcieve_m =1;
      end
      St_wait87: begin
         data_init = 8'h30;
         cs_m = 0 ;
      end
      St_wait88: begin
         data_init = 8'h9A;
         cs_m = 0 ;
      end
      ST_Config43: begin
         data_init = 8'h00;
         cs_m = 0 ;
         transcieve_m =1;
      end
      St_wait89: begin
         data_init = 8'h00;
         cs_m = 0 ;
      end
      ST_Config44: begin
         data_init = 8'h30;
         cs_m = 0 ;
         transcieve_m =1;
      end
      St_wait90: begin
         data_init = 8'h30;
         cs_m = 0 ;
      end
      write_csrs8: begin
         data_init = 8'h8B;
         cs_m = 0 ;
         transcieve_m =1;
      end
      write_csrs9: begin
         data_init = 8'hB1;
         cs_m = 0 ;
         transcieve_m =1;
      end
      write_csrs10: begin
         data_init = 8'h10;
         cs_m = 0 ;
         transcieve_m =1;
      end
      write_csrs11: begin
         data_init = 8'h8B;
         cs_m = 0 ;
         transcieve_m =1;
      end
      write_csrs3: begin
         data_init = 8'h05;
         cs_m = 0 ;
         transcieve_m =1;
      end
      write_csrs12: begin
         data_init = 8'h00;
         cs_m = 0 ;
         transcieve_m =1;
      end
      write_csrs13: begin
         data_init = 8'hB0;
         cs_m = 0 ;
         transcieve_m =1;
      end
      St_wait91: begin
         data_init = 8'h05;
         cs_m = 0 ;
      end
      St_wait92: begin
         data_init = 8'h00;
         cs_m = 0 ;
      end
      St_wait93: begin
         data_init = 8'hB0;
         cs_m = 0 ;
      end
      St_wait94: begin
         data_init = 8'h8B;
         cs_m = 0 ;
      end
      St_wait95: begin
         data_init = 8'h10;
         cs_m = 0 ;
      end
      St_wait96: begin
         data_init = 8'hB1;
         cs_m = 0 ;
      end
      St_wait97: begin
         data_init = 8'h8B;
         cs_m = 0 ;
      end
      ST_Config45: begin
         data_init = 8'h00;
         cs_m = 0 ;
         transcieve_m =1;
      end
      ST_Config46: begin
         data_init = 8'h30;
         cs_m = 0 ;
         transcieve_m =1;
      end
      ST_Config47: begin
         data_init = 8'h03;
         cs_m = 0 ;
         transcieve_m =1;
      end
      ST_Config48: begin
         data_init = 8'h00;
         cs_m = 0 ;
         transcieve_m =1;
      end
      St_wait21: begin
         data_init = 8'h00;
         cs_m = 0 ;
      end
      St_wait22: begin
         data_init = 8'h03;
         cs_m = 0 ;
      end
      St_wait23: begin
         data_init = 8'h30;
         cs_m = 0 ;
      end
      St_wait24: begin
         data_init = 8'h00;
         cs_m = 0 ;
      end
      ST_Rest_3: begin
         data_init = 8'h00;
         cs_m = 0 ;
         transcieve_m =1;
      end
      ST_Rest_5: begin
         data_init = 8'h80;
         cs_m = 0 ;
         transcieve_m =1;
      end
      ST_Rest_6: begin
         data_init = 8'h03;
         cs_m = 0 ;
         transcieve_m =1;
      end
      St_wait3: begin
         data_init = 8'h03;
         cs_m = 0 ;
      end
      ST_Rest_RS_4: begin
         data_init = 8'h03;
         cs_m = 0 ;
         transcieve_m =1;
      end
      ST_Rest_RS_5: begin
         data_init = 8'h00;
         cs_m = 0 ;
         transcieve_m =1;
      end
      ST_Rest_sw1: begin
         data_init = 8'h00;
         cs_m = 0 ;
      end
      ST_Rest_RS_6: begin
         data_init = 8'h00;
         cs_m = 0 ;
      end
      St_wait4: begin
         data_init = 8'h00;
         cs_m = 0 ;
      end
      St_wait8: begin
         data_init = 8'h80;
         cs_m = 0 ;
      end
      St_wait9: begin
         data_init = 8'h03;
         cs_m = 0 ;
      end
      St_Reset_Rs_sw1: begin
         data_init = 8'h00;
         cs_m = 0 ;
      end
      St_wait5: begin
         data_init = 8'h00;
         cs_m = 0 ;
      end
      ST_Init_2: begin
         data_init = 8'hFF;
         cs_m =0;
         transcieve_m =1;
      end
      ST_wait_2: begin
         data_init = 8'hFF;
         cs_m =0;
      end
      ST_Init_3: begin
         data_init = 8'hFF;
         cs_m =0;
         transcieve_m =1;
      end
      ST_wait_3: begin
         data_init = 8'hFF;
         cs_m =0;
      end
      ST_Init_incr1: begin
         data_init = 8'hFF;
         cs_m =0;
      end
      st_Init_3: begin
         data_init = 8'hFE;
         cs_m =0;
         transcieve_m =1;
      end
      ST_wait_16: begin
         data_init = 8'hFE;
         cs_m =0;
      end
      Done1: begin
         read_spi_mode =1;
      end
      write_elink1: begin
         start_write_elink_spi =1;
         read_spi_mode =1;
      end
      ST_Read_reg4: begin
         cs_m = 0 ;
         transcieve_m =1;
         read_spi_mode =1;
         data_init  = 8'h0B;
      end
      Start_reading1: begin
         cs_m = 0 ;
         read_spi_mode =1;
         data_init  = 8'h0B;
      end
      St_wait98: begin
         cs_m = 0 ;
         read_spi_mode =1;
         buffer_en =1'b1;
         data_init = 8'b0;
      end
      ST_Rest_RS_17: begin
         cs_m = 0 ;
         transcieve_m =1;
         read_spi_mode =1;
         data_init = 8'h0;
      end
      Break_Loop3: begin
         cs_m = 0 ;
         read_spi_mode =1;
      end
      St_wait99: begin
         cs_m = 0 ;
         read_spi_mode =1;
         data_init = 8'b0;
      end
      St_wait100: begin
         cs_m = 0 ;
         read_spi_mode =1;
         buffer_en =1'b1;
         data_init  = 8'h0B;
      end
      ST_read_elink1: begin
         start_read_elink = 1 ;
         read_spi_mode =1;
      end
      Done2: begin
         read_spi_mode =1;
      end
      write_elink2: begin
         start_write_elink_spi =1;
         read_spi_mode =1;
      end
      ST_Read_reg5: begin
         cs_m = 0 ;
         transcieve_m =1;
         read_spi_mode =1;
         data_init  = 8'h0D;
      end
      Start_reading2: begin
         cs_m = 0 ;
         read_spi_mode =1;
         data_init  = 8'h0D;
      end
      St_wait101: begin
         cs_m = 0 ;
         read_spi_mode =1;
         buffer_en =1'b1;
         data_init = 8'b0;
      end
      ST_Rest_RS_18: begin
         cs_m = 0 ;
         transcieve_m =1;
         read_spi_mode =1;
         data_init = 8'h0;
      end
      Break_Loop4: begin
         cs_m = 0 ;
         read_spi_mode =1;
      end
      St_wait102: begin
         cs_m = 0 ;
         read_spi_mode =1;
         data_init = 8'b0;
      end
      St_wait103: begin
         cs_m = 0 ;
         read_spi_mode =1;
         buffer_en =1'b1;
         data_init  = 8'h0D;
      end
   endcase
end // Output Block

//-----------------------------------------------------------------
// Clocked Block for machine csm
//-----------------------------------------------------------------
always @(
   posedge clk
) 
begin : clocked_block_proc
   if (!rst) begin
      current_state <= ST_reset;
      csm_timer <= 4'd0;
   end
   else if (timeoutrst) begin
      current_state <= ST_reset;
      csm_timer <= 4'd0;
   end
   else if (abort) begin
      current_state <= ST_reset;
      csm_timer <= 4'd0;
   end
   else 
   begin
      current_state <= next_state;
      csm_timer <= csm_next_timer;

      // Combined Actions
      case (current_state) 
         ST_reset: begin
            can_bus_reg_cld=1'b0;
            addr_write_cld =1'h0;
            error_count_reg = 1'h0;
         end
         write_elink: begin
            addr_write_cld =5'h0;
         end
         ST_Rest_2: begin
            addr_write_cld =addr_write_cld+1'h1;
         end
         ST_Rest_4: begin
            addr_write_cld  = 5'h0;
         end
         St_wait: begin
            addr_write_cld  = 5'h0;
         end
         ST_Rest_RS_2: begin
            addr_write_cld =addr_write_cld+1'h1;
         end
         ST_Init_1: begin
            addr_write_cld =addr_write_cld+1'h1;
         end
         st_Init_2: begin
            addr_write_cld =5'h0;
         end
         ST_Rest_RS_3: begin
            addr_write_cld  = 1'b0;
         end
         ST_CountRst: begin
            can_bus_reg_cld<=1'b0;
         end
         ST_Start_Cnt: begin
            can_bus_reg_cld<=can_bus_reg_cld +1;
         end
         ST_Read_reg3: begin
            addr_write_cld =5'h3;
         end
         Start_reading: begin
            addr_write_cld =5'h3;
         end
         ST_Rest_RS_16: begin
            addr_write_cld =addr_write_cld+1'h1;
         end
         St_wait67: begin
            addr_write_cld =5'h3;
         end
         ST_Rest_3: begin
            addr_write_cld =addr_write_cld+1'h1;
         end
         ST_Rest_5: begin
            addr_write_cld  = 5'h0;
         end
         St_wait3: begin
            addr_write_cld  = 5'h0;
         end
         ST_Rest_RS_5: begin
            addr_write_cld =addr_write_cld+1'h1;
         end
         ST_Rest_RS_6: begin
            addr_write_cld  = 1'b0;
         end
         ST_Init_3: begin
            addr_write_cld =addr_write_cld+1'h1;
         end
         st_Init_3: begin
            addr_write_cld =5'h0;
         end
         write_elink1: begin
            addr_write_cld =5'h0;
         end
         ST_Read_reg4: begin
            addr_write_cld =5'h3;
         end
         Start_reading1: begin
            addr_write_cld =5'h3;
         end
         ST_Rest_RS_17: begin
            addr_write_cld =addr_write_cld+1'h1;
         end
         St_wait100: begin
            addr_write_cld =5'h3;
         end
         write_elink2: begin
            addr_write_cld =5'h0;
         end
         ST_Read_reg5: begin
            addr_write_cld =5'h3;
         end
         Start_reading2: begin
            addr_write_cld =5'h3;
         end
         ST_Rest_RS_18: begin
            addr_write_cld =addr_write_cld+1'h1;
         end
         St_wait103: begin
            addr_write_cld =5'h3;
         end
         Rst_cnt: begin
            error_count_reg = 1'h0;
         end
         Increment_cnt: begin
            error_count_reg <= error_count_reg+ 1'h1;
         end
      endcase
   end
end // Clocked Block

//-----------------------------------------------------------------
// Wait state logic for machine csm
//-----------------------------------------------------------------
always @(
   csm_timer,
   csm_to_s2,
   csm_to_s3,
   csm_to_s4,
   csm_to_s5,
   csm_to_s6,
   csm_to_s7,
   csm_to_s8,
   csm_to_s9,
   csm_to_s10,
   csm_to_s11,
   csm_to_s12,
   csm_to_s13
)
begin : csm_wait_block_proc
   csm_timeout = (csm_timer == 4'd0);
   if (csm_to_s2 == 1'b1) begin
      csm_next_timer = 4'd9;  //no cycles(10)-1=9
   end
   else if (csm_to_s3 == 1'b1) begin
      csm_next_timer = 4'd9;  //no cycles(10)-1=9
   end
   else if (csm_to_s4 == 1'b1) begin
      csm_next_timer = 4'd9;  //no cycles(10)-1=9
   end
   else if (csm_to_s5 == 1'b1) begin
      csm_next_timer = 4'd9;  //no cycles(10)-1=9
   end
   else if (csm_to_s6 == 1'b1) begin
      csm_next_timer = 4'd9;  //no cycles(10)-1=9
   end
   else if (csm_to_s7 == 1'b1) begin
      csm_next_timer = 4'd9;  //no cycles(10)-1=9
   end
   else if (csm_to_s8 == 1'b1) begin
      csm_next_timer = 4'd9;  //no cycles(10)-1=9
   end
   else if (csm_to_s9 == 1'b1) begin
      csm_next_timer = 4'd9;  //no cycles(10)-1=9
   end
   else if (csm_to_s10 == 1'b1) begin
      csm_next_timer = 4'd9;  //no cycles(10)-1=9
   end
   else if (csm_to_s11 == 1'b1) begin
      csm_next_timer = 4'd9;  //no cycles(10)-1=9
   end
   else if (csm_to_s12 == 1'b1) begin
      csm_next_timer = 4'd9;  //no cycles(10)-1=9
   end
   else if (csm_to_s13 == 1'b1) begin
      csm_next_timer = 4'd9;  //no cycles(10)-1=9
   end
   else begin
      csm_next_timer = (csm_timeout)? 4'd0: (csm_timer - 4'd1);
   end
end // Wait State Block
// State-As-Output assignment
always @(current_state)
statedeb = current_state;

// Concurrent Statements
// Clocked output assignments
always @(
   addr_write_cld, 
   can_bus_reg_cld
)
begin : clocked_output_proc
   addr_write = addr_write_cld;
   can_bus_reg = can_bus_reg_cld;
end
endmodule // spi_control_sm
