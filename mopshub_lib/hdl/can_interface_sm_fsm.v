//
// Module mopshub_lib.can_interface_SM.fsm
//
// Created:
//          by - dcs.dcs (chipdev2.physik.uni-wuppertal.de)
//          at - 17:26:23 10/04/22
//
// Generated by Mentor Graphics' HDL Designer(TM) 2019.4 (Build 4)
//
`resetall
`timescale 1ns/10ps
module can_interface_SM( 
   // Port Declarations
   input   wire           abort,               // Upon receiving a reset message on the CANbus. FSM goes into a known state
   input   wire           clk,                 // posedge
   input   wire           end_can_proc, 
   input   wire           end_cnt, 
   input   wire           init,                // initialize request from bridge FSM of bridge controller 
   input   wire           reset_irq_can,       // request from bridge FSM
   input   wire           reset_irq_can_all,   // request from bridge FSM
   input   wire           rst,                 // synchronous low active
   input   wire           send_mes,            // request from bridge FSM
   input   wire           start_osc_trim, 
   input   wire           start_read,          // request from bridge FSM 
   input   wire           start_write,         // request from bridge FSM
   input   wire           timeoutrst,          // timeout reset signal to the state machine in case bridge controller is not respoding for a specified time
   output  reg     [4:0]  addr,                // request to caninterface block
   output  reg            cs_can, 
   output  reg            en_rec_reg,          // enable receive buffer (rec_mes_buf)
   output  reg            end_init,            // indication to bridge FSM when initialization is finished 
   output  reg            end_osc_trim, 
   output  reg            end_read,            // request to bridge FSM 
   output  reg            end_write,           // request to bridge FSM
   output  reg            initi,               // request to caninterface block
   output  reg            read,                // request to caninterface block(this actually connects to CAN node(canakari))
   output  reg            reset_all_done, 
   output  reg            reset_irq_can_done, 
   output  reg            reset_sig_can, 
   output  reg            reset_sig_can_all, 
   output  reg            rst_cnt, 
   output  reg            set_bus_id, 
   output  reg            start_cnt, 
   output  reg            start_init, 
   output  reg     [6:0]  statedeb,            // State debug signal 
   output  reg            trim, 
   output  reg            write                // request to caninterface block
);

//tmrg default triplicate
//tmrg tmr_error false
// Internal Declarations


// Module Declarations

// State encoding
parameter 
          waittoact     = 7'd0,
          reset         = 7'd1,
          prescalar     = 7'd2,
          general       = 7'd3,
          encom         = 7'd4,
          accmask       = 7'd5,
          accmask1      = 7'd6,
          idr31         = 7'd7,
          idr41         = 7'd8,
          endinit       = 7'd9,
          start         = 7'd10,
          waitCAN       = 7'd11,
          RB1           = 7'd12,
          store_RB1     = 7'd13,
          store_idr1    = 7'd14,
          idr1          = 7'd15,
          RB2           = 7'd16,
          store_RB2     = 7'd17,
          RB3           = 7'd18,
          RB4           = 7'd19,
          store_RB3     = 7'd20,
          end_readst    = 7'd21,
          store_RB4     = 7'd22,
          set_d3        = 7'd23,
          set_d1        = 7'd24,
          set_gen       = 7'd25,
          rstirq        = 7'd26,
          general2      = 7'd27,
          ST_CountRst   = 7'd28,
          rstirq1       = 7'd29,
          general3      = 7'd30,
          start1        = 7'd31,
          ST_CountRst1  = 7'd32,
          loop_rst      = 7'd33,
          ST_Start_Cnt  = 7'd34,
          finishtrim    = 7'd35,
          ST_Start_Trim = 7'd36,
          general4      = 7'd37,
          id2           = 7'd38,
          d5            = 7'd39,
          d6            = 7'd40,
          d7            = 7'd41,
          d8            = 7'd42,
          tc1           = 7'd43,
          set_id1       = 7'd44,
          set_tc        = 7'd45,
          set_d4        = 7'd46,
          set_d2        = 7'd47,
          Set_bus_Id2   = 7'd48,
          Wait_bits     = 7'd49,
          prescalar1    = 7'd50,
          general1      = 7'd51,
          encom1        = 7'd52,
          idr3          = 7'd53,
          idr4          = 7'd54,
          accmask2      = 7'd55,
          accmask3      = 7'd56,
          general5      = 7'd57,
          rstirq2       = 7'd58,
          set_gen1      = 7'd59,
          set_id2       = 7'd60,
          set_tc1       = 7'd61,
          set_d5        = 7'd62,
          set_d6        = 7'd63,
          set_d7        = 7'd64,
          set_d8        = 7'd65,
          general6      = 7'd66,
          rstirq3       = 7'd67,
          general7      = 7'd68,
          id3           = 7'd69,
          d9            = 7'd70,
          d10           = 7'd71,
          d11           = 7'd72,
          d12           = 7'd73,
          tc2           = 7'd74;

reg [6:0] current_state, next_state;

// Wait State Signals
reg [5:0] csm_timer;
reg [5:0] csm_next_timer;
reg       csm_timeout;
reg       csm_to_waitCAN;
reg       csm_to_end_readst;
reg       csm_to_ST_Start_Trim;
reg       csm_to_Wait_bits;

//-----------------------------------------------------------------
// Next State Block for machine csm
//-----------------------------------------------------------------
always @(
   csm_timeout, 
   current_state, 
   end_cnt, 
   init, 
   reset_irq_can, 
   reset_irq_can_all, 
   rst, 
   send_mes, 
   start_osc_trim, 
   start_read, 
   start_write
)
begin : next_state_block_proc
   // Default assignments to Wait State entry flags
   csm_to_waitCAN = 1'b0;
   csm_to_end_readst = 1'b0;
   csm_to_ST_Start_Trim = 1'b0;
   csm_to_Wait_bits = 1'b0;
   case (current_state) 
      waittoact: begin
         if (reset_irq_can == 1)
            next_state = general2;
         else if (start_read == 1) begin
            next_state = Wait_bits;
            csm_to_Wait_bits = 1'b1;
         end
         else if (init == 1)
            next_state = start;
         else if (start_write == 1)
            next_state = Set_bus_Id2;
         else if (reset_irq_can_all == 1)
            next_state = general6;
         else if (start_osc_trim ==1) begin
            next_state = ST_Start_Trim;
            csm_to_ST_Start_Trim = 1'b1;
         end
         else
            next_state = waittoact;
      end
      reset: begin
         if (rst == 1)
            next_state = waittoact;
         else
            next_state = reset;
      end
      prescalar: begin
         next_state = prescalar1;
      end
      general: begin
         next_state = general1;
      end
      encom: begin
         next_state = encom1;
      end
      accmask: begin
         next_state = accmask3;
      end
      accmask1: begin
         if (end_cnt ==1)
            next_state = ST_CountRst;
         else
            next_state = ST_Start_Cnt;
      end
      idr31: begin
         next_state = idr4;
      end
      idr41: begin
         next_state = accmask2;
      end
      endinit: begin
         next_state = waittoact;
      end
      start: begin
         next_state = waitCAN;
         csm_to_waitCAN = 1'b1;
      end
      waitCAN: begin
         if (csm_timeout && (init == 1))
            next_state = prescalar;
         else
            next_state = waitCAN;
      end
      RB1: begin
         next_state = store_RB1;
      end
      store_RB1: begin
         next_state = RB2;
      end
      store_idr1: begin
         next_state = RB1;
      end
      idr1: begin
         next_state = store_idr1;
      end
      RB2: begin
         next_state = store_RB2;
      end
      store_RB2: begin
         next_state = RB3;
      end
      RB3: begin
         next_state = store_RB3;
      end
      RB4: begin
         next_state = store_RB4;
      end
      store_RB3: begin
         next_state = RB4;
      end
      end_readst: begin
         if (csm_timeout)
            next_state = waittoact;
         else
            next_state = end_readst;
      end
      store_RB4: begin
         next_state = end_readst;
         csm_to_end_readst = 1'b1;
      end
      set_d3: begin
         next_state = set_d5;
      end
      set_d1: begin
         next_state = set_d2;
      end
      set_gen: begin
         next_state = set_gen1;
      end
      rstirq: begin
         next_state = rstirq2;
      end
      general2: begin
         next_state = general5;
      end
      ST_CountRst: begin
         next_state = endinit;
      end
      rstirq1: begin
         next_state = rstirq3;
      end
      general3: begin
         next_state = rstirq1;
      end
      start1: begin
         next_state = general3;
      end
      ST_CountRst1: begin
         next_state = waittoact;
      end
      loop_rst: begin
         if (end_cnt ==1)
            next_state = ST_CountRst1;
         else
            next_state = start1;
      end
      ST_Start_Cnt: begin
         next_state = start;
      end
      finishtrim: begin
         next_state = waittoact;
      end
      ST_Start_Trim: begin
         if (csm_timeout && (start_osc_trim==1))
            next_state = general4;
         else
            next_state = ST_Start_Trim;
      end
      general4: begin
         next_state = general7;
      end
      id2: begin
         next_state = id3;
      end
      d5: begin
         next_state = d9;
      end
      d6: begin
         next_state = d10;
      end
      d7: begin
         next_state = d11;
      end
      d8: begin
         next_state = d12;
      end
      tc1: begin
         next_state = tc2;
      end
      set_id1: begin
         next_state = set_id2;
      end
      set_tc: begin
         next_state = waittoact;
      end
      set_d4: begin
         if (send_mes == 1)
            next_state = set_tc1;
         else
            next_state = set_d4;
      end
      set_d2: begin
         next_state = set_d7;
      end
      Set_bus_Id2: begin
         next_state = set_gen;
      end
      Wait_bits: begin
         if (csm_timeout)
            next_state = idr1;
         else
            next_state = Wait_bits;
      end
      prescalar1: begin
         next_state = general;
      end
      general1: begin
         next_state = encom;
      end
      encom1: begin
         next_state = idr3;
      end
      idr3: begin
         next_state = idr31;
      end
      idr4: begin
         next_state = idr41;
      end
      accmask2: begin
         next_state = accmask;
      end
      accmask3: begin
         next_state = accmask1;
      end
      general5: begin
         next_state = rstirq;
      end
      rstirq2: begin
         next_state = waittoact;
      end
      set_gen1: begin
         next_state = set_id1;
      end
      set_id2: begin
         next_state = set_d8;
      end
      set_tc1: begin
         next_state = set_tc;
      end
      set_d5: begin
         next_state = set_d4;
      end
      set_d6: begin
         next_state = set_d3;
      end
      set_d7: begin
         next_state = set_d6;
      end
      set_d8: begin
         next_state = set_d1;
      end
      general6: begin
         next_state = general3;
      end
      rstirq3: begin
         next_state = loop_rst;
      end
      general7: begin
         next_state = id2;
      end
      id3: begin
         next_state = d5;
      end
      d9: begin
         next_state = d6;
      end
      d10: begin
         next_state = d7;
      end
      d11: begin
         next_state = d8;
      end
      d12: begin
         if (send_mes == 1)
            next_state = tc1;
         else
            next_state = d12;
      end
      tc2: begin
         next_state = finishtrim;
      end
      default: 
         next_state = reset;
   endcase
end // Next State Block

//-----------------------------------------------------------------
// Output Block for machine csm
//-----------------------------------------------------------------
always @(
   current_state
)
begin : output_block_proc
   // Default Assignment
   addr = 5'b11111;
   cs_can = 0;
   en_rec_reg = 0;
   end_init = 0;
   end_osc_trim = 0;
   end_read = 0;
   end_write = 0;
   initi = 0;
   read = 1;
   reset_all_done = 0;
   reset_irq_can_done = 0;
   reset_sig_can = 0;
   reset_sig_can_all = 0;
   rst_cnt = 0;
   set_bus_id = 0;
   start_cnt = 0;
   start_init = 0;
   trim = 0;
   write = 1;

   // Combined Actions
   case (current_state) 
      prescalar: begin
         initi = 1 ;
         addr = 5'b01111;
         write = 0 ;
      end
      general: begin
         initi = 1;
         addr = 5'b01110;
         write = 0 ;
      end
      encom: begin
         initi = 1;
         addr = 5'b10010 ;
         write = 0 ;
      end
      accmask: begin
         initi = 1 ;
         addr = 5'b10001 ;
         write = 0 ;
      end
      accmask1: begin
         initi = 1 ;
         addr = 5'b10000 ;
         write = 0 ;
         cs_can = 1 ;
      end
      idr31: begin
         addr = 5'b00101;
         initi = 1 ;
         write = 0 ;
         cs_can = 1 ;
      end
      idr41: begin
         initi = 1;
         addr = 5'b00100 ;
         write = 0 ;
         cs_can = 1 ;
      end
      endinit: begin
         end_init=1;
      end
      start: begin
         start_init =1;
      end
      RB1: begin
         read = 0;
         addr = 5'b00011 ;
         cs_can = 1 ;
      end
      store_RB1: begin
         read = 0;
         addr = 5'b00011 ;
         cs_can = 1 ;
         en_rec_reg = 1;
      end
      store_idr1: begin
         read = 0;
         addr = 5'b00101;
         cs_can = 1 ;
         en_rec_reg = 1 ;
      end
      idr1: begin
         read = 0;
         addr = 5'b00101;
         cs_can = 1 ;
      end
      RB2: begin
         read = 0;
         addr = 5'b00010 ;
         cs_can = 1 ;
      end
      store_RB2: begin
         read = 0;
         addr = 5'b00010 ;
         cs_can = 1 ;
         en_rec_reg = 1;
      end
      RB3: begin
         read = 0;
         addr = 5'b00001 ;
         cs_can = 1 ;
      end
      RB4: begin
         read = 0;
         addr = 5'b00000 ;
         cs_can = 1 ;
      end
      store_RB3: begin
         read = 0;
         addr = 5'b00001 ;
         cs_can = 1 ;
         en_rec_reg = 1;
      end
      end_readst: begin
         end_read = 1 ;
         addr = 5'b11111;
      end
      store_RB4: begin
         read = 0;
         addr = 5'b00000 ;
         cs_can = 1 ;
         en_rec_reg = 1;
      end
      set_d3: begin
         write = 0 ;
         addr = 5'b01000 ;
         cs_can = 1 ;
         set_bus_id =1;
      end
      set_d1: begin
         write = 0 ;
         addr = 5'b01010 ;
         cs_can = 1 ;
         set_bus_id =1;
      end
      set_gen: begin
         write = 0 ;
         addr = 5'b01110;
         set_bus_id =1;
      end
      rstirq: begin
         write = 0 ;
         reset_sig_can = 1;
         addr = 5'b10010 ;
      end
      general2: begin
         write = 0 ;
         reset_sig_can = 1;
         addr = 5'b01110;
      end
      ST_CountRst: begin
         rst_cnt = 1;
      end
      rstirq1: begin
         write = 0 ;
         addr = 5'b10010 ;
         reset_sig_can = 1;
         reset_sig_can_all = 1;
      end
      general3: begin
         write = 0 ;
         cs_can = 1 ;
         addr = 5'b01110;
         reset_sig_can = 1;
         reset_sig_can_all = 1;
      end
      start1: begin
         start_cnt =1;
      end
      ST_CountRst1: begin
         rst_cnt = 1;
         reset_all_done =1;
      end
      ST_Start_Cnt: begin
         start_cnt =1;
      end
      finishtrim: begin
         end_osc_trim =1;
      end
      general4: begin
         write = 0 ;
         trim =1;
         addr = 5'b01110;
      end
      id2: begin
         write = 0 ;
         trim =1;
         addr = 5'b01100 ;
      end
      d5: begin
         write = 0 ;
         trim =1;
         addr = 5'b01010 ;
      end
      d6: begin
         write = 0 ;
         trim =1;
         addr = 5'b01001 ;
      end
      d7: begin
         write = 0 ;
         trim =1;
         addr = 5'b01000 ;
      end
      d8: begin
         write = 0 ;
         trim =1;
         addr = 5'b00111 ;
         end_write = 1 ;
      end
      tc1: begin
         write = 0 ;
         trim =1;
         addr = 5'b01101 ;
      end
      set_id1: begin
         write = 0 ;
         addr = 5'b01100 ;
         set_bus_id =1;
      end
      set_tc: begin
         write = 0 ;
         addr = 5'b01101 ;
         cs_can = 1 ;
         set_bus_id =1;
      end
      set_d4: begin
         write = 0 ;
         addr = 5'b00111 ;
         cs_can = 1 ;
         end_write = 1 ;
         set_bus_id =1;
      end
      set_d2: begin
         write = 0 ;
         addr = 5'b01001 ;
         set_bus_id =1;
      end
      Set_bus_Id2: begin
         set_bus_id =1;
      end
      prescalar1: begin
         initi = 1 ;
         addr = 5'b01111;
         write = 0 ;
         cs_can = 1 ;
      end
      general1: begin
         initi = 1;
         addr = 5'b01110;
         write = 0 ;
         cs_can = 1 ;
      end
      encom1: begin
         initi = 1;
         addr = 5'b10010 ;
         write = 0 ;
         cs_can = 1 ;
      end
      idr3: begin
         addr = 5'b00101;
         initi = 1 ;
         write = 0 ;
      end
      idr4: begin
         initi = 1;
         addr = 5'b00100 ;
         write = 0 ;
      end
      accmask2: begin
         initi = 1 ;
         addr = 5'b10001 ;
         write = 0 ;
      end
      accmask3: begin
         initi = 1 ;
         addr = 5'b10000 ;
         write = 0 ;
         cs_can = 1 ;
      end
      general5: begin
         write = 0 ;
         reset_sig_can = 1;
         cs_can = 1 ;
         addr = 5'b01110;
      end
      rstirq2: begin
         write = 0 ;
         reset_sig_can = 1;
         cs_can = 1 ;
         addr = 5'b10010 ;
         reset_irq_can_done =1;
      end
      set_gen1: begin
         write = 0 ;
         addr = 5'b01110;
         cs_can = 1;
         set_bus_id =1;
      end
      set_id2: begin
         write = 0 ;
         addr = 5'b01100 ;
         cs_can = 1 ;
         set_bus_id =1;
      end
      set_tc1: begin
         write = 0 ;
         addr = 5'b01101 ;
         set_bus_id =1;
      end
      set_d5: begin
         write = 0 ;
         addr = 5'b00111 ;
         end_write = 1 ;
         set_bus_id =1;
      end
      set_d6: begin
         write = 0 ;
         addr = 5'b01000 ;
         set_bus_id =1;
      end
      set_d7: begin
         write = 0 ;
         addr = 5'b01001 ;
         cs_can = 1 ;
         set_bus_id =1;
      end
      set_d8: begin
         write = 0 ;
         addr = 5'b01010 ;
         set_bus_id =1;
      end
      general6: begin
         write = 0 ;
         addr = 5'b01110;
         reset_sig_can = 1;
         reset_sig_can_all = 1;
      end
      rstirq3: begin
         write = 0 ;
         cs_can = 1 ;
         addr = 5'b10010 ;
         reset_sig_can = 1;
         reset_sig_can_all = 1;
      end
      general7: begin
         write = 0 ;
         trim =1;
         addr = 5'b01110;
         cs_can = 1;
      end
      id3: begin
         write = 0 ;
         trim =1;
         addr = 5'b01100 ;
         cs_can = 1 ;
      end
      d9: begin
         write = 0 ;
         trim =1;
         addr = 5'b01010 ;
         cs_can = 1 ;
      end
      d10: begin
         write = 0 ;
         trim =1;
         addr = 5'b01001 ;
         cs_can = 1 ;
      end
      d11: begin
         write = 0 ;
         trim =1;
         addr = 5'b01000 ;
         cs_can = 1 ;
      end
      d12: begin
         write = 0 ;
         trim =1;
         addr = 5'b00111 ;
         end_write = 1 ;
         cs_can = 1 ;
      end
      tc2: begin
         write = 0 ;
         trim =1;
         addr = 5'b01101 ;
         cs_can = 1;
      end
   endcase
end // Output Block

//-----------------------------------------------------------------
// Clocked Block for machine csm
//-----------------------------------------------------------------
always @(
   posedge clk
) 
begin : clocked_block_proc
   if (!rst) begin
      current_state <= reset;
      csm_timer <= 6'd0;
   end
   else if (timeoutrst) begin
      current_state <= reset;
      csm_timer <= 6'd0;
   end
   else if (abort) begin
      current_state <= reset;
      csm_timer <= 6'd0;
   end
   else 
   begin
      current_state <= next_state;
      csm_timer <= csm_next_timer;
   end
end // Clocked Block

//-----------------------------------------------------------------
// Wait state logic for machine csm
//-----------------------------------------------------------------
always @(
   csm_timer,
   csm_to_waitCAN,
   csm_to_end_readst,
   csm_to_ST_Start_Trim,
   csm_to_Wait_bits
)
begin : csm_wait_block_proc
   csm_timeout = (csm_timer == 6'd0);
   if (csm_to_waitCAN == 1'b1) begin
      csm_next_timer = 6'd9;  //no cycles(10)-1=9
   end
   else if (csm_to_end_readst == 1'b1) begin
      csm_next_timer = 6'd3;  //no cycles(4)-1=3
   end
   else if (csm_to_ST_Start_Trim == 1'b1) begin
      csm_next_timer = 6'd59;  //no cycles(60)-1=59
   end
   else if (csm_to_Wait_bits == 1'b1) begin
      csm_next_timer = 6'd19;  //no cycles(20)-1=19
   end
   else begin
      csm_next_timer = (csm_timeout)? 6'd0: (csm_timer - 6'd1);
   end
end // Wait State Block
// State-As-Output assignment
always @(current_state)
statedeb = current_state;

endmodule // can_interface_SM
