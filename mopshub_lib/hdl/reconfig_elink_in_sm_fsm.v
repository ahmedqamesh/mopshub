//
// Module mopshub_lib.reconfig_elink_in_sm.fsm
//
// Created:
//          by - dcs.dcs (chipdev2.physik.uni-wuppertal.de)
//          at - 11:32:39 06/13/23
//
// Generated by Mentor Graphics' HDL Designer(TM) 2019.4 (Build 4)
//
`resetall
`timescale 1ns/10ps
module reconfig_elink_in_sm( 
   // Port Declarations
   input   wire    [7:0]  Kchar_comma, 
   input   wire    [7:0]  Kchar_eop, 
   input   wire    [7:0]  Kchar_sop, 
   input   wire           clk,                   // posedge
   input   wire    [9:0]  data_tra_10bitin, 
   input   wire           fifo_elink_rdy, 
   input   wire           partial_reconfig_rec, 
   input   wire           rst,                   // synchronous low active
   input   wire           timeoutrst, 
   output  reg     [7:0]  address_elink,         // request to caninterface block
   output  reg            cs_eread, 
   output  reg            data_received_elink, 
   output  reg     [7:0]  data_rx_elink, 
   output  reg            end_read_elink,        // request to bridge FSM 
   output  reg            entimeout, 
   output  reg            partial_reconfig_id, 
   output  reg     [6:0]  statedeb
);


// Internal Declarations


// Module Declarations
reg [7:0] dlc_reg;  

// State encoding
parameter 
          ST_waittoact     = 4'd0,
          ST_reset         = 4'd1,
          START_OF_FIELD0  = 4'd2,
          DATA_FIELD0      = 4'd3,
          DLC_SHIFTER      = 4'd4,
          END_OF_FIELD0    = 4'd5,
          ADDRESS_FIELD    = 4'd6,
          DATA_LENGHT_CODE = 4'd7,
          ID_field         = 4'd8;

reg [3:0] current_state, next_state;

//-----------------------------------------------------------------
// Next State Block for machine csm
//-----------------------------------------------------------------
always @(
   Kchar_eop, 
   Kchar_sop, 
   current_state, 
   data_tra_10bitin, 
   dlc_reg, 
   fifo_elink_rdy, 
   rst
)
begin : next_state_block_proc
   case (current_state) 
      ST_waittoact: begin
         if (fifo_elink_rdy ==1)
            next_state = START_OF_FIELD0;
         else
            next_state = ST_waittoact;
      end
      ST_reset: begin
         if (rst == 1)
            next_state = ST_waittoact;
         else
            next_state = ST_reset;
      end
      START_OF_FIELD0: begin
         if (fifo_elink_rdy && data_tra_10bitin[7:0] ==Kchar_sop)
            next_state = ID_field;
         else
            next_state = START_OF_FIELD0;
      end
      DATA_FIELD0: begin
         if (dlc_reg> 0 && fifo_elink_rdy)
            next_state = DLC_SHIFTER;
         else if (dlc_reg==0 && data_tra_10bitin[7:0] ==Kchar_eop)
            next_state = END_OF_FIELD0;
         else
            next_state = DATA_FIELD0;
      end
      DLC_SHIFTER: begin
         next_state = DATA_FIELD0;
      end
      END_OF_FIELD0: begin
         next_state = ST_waittoact;
      end
      ADDRESS_FIELD: begin
         if (fifo_elink_rdy)
            next_state = DATA_LENGHT_CODE;
         else
            next_state = ADDRESS_FIELD;
      end
      DATA_LENGHT_CODE: begin
         next_state = DATA_FIELD0;
      end
      ID_field: begin
         if (fifo_elink_rdy && data_tra_10bitin[7:0] ==8'h10)
            next_state = ADDRESS_FIELD;
         else
            next_state = ID_field;
      end
      default: 
         next_state = ST_reset;
   endcase
end // Next State Block

//-----------------------------------------------------------------
// Output Block for machine csm
//-----------------------------------------------------------------
always @(
   Kchar_sop, 
   current_state, 
   data_tra_10bitin, 
   dlc_reg, 
   fifo_elink_rdy
)
begin : output_block_proc
   // Default Assignment
   address_elink = 8'h7E;
   cs_eread = 0;
   data_received_elink = 1'h0;
   data_rx_elink = 8'h0;
   end_read_elink = 0;
   entimeout = 1'b1;
   partial_reconfig_id = 1'b0;

   // Combined Actions
   case (current_state) 
      ST_waittoact: begin
         entimeout = 0 ;
         if (fifo_elink_rdy ==1)
            cs_eread =1'b1;
      end
      START_OF_FIELD0: begin
         if (fifo_elink_rdy && data_tra_10bitin[7:0] ==Kchar_sop)
            cs_eread = 1'b1;
      end
      DATA_FIELD0: begin
         address_elink =  8'h00;
         data_rx_elink = data_tra_10bitin[7:0];
         if (dlc_reg> 0 && fifo_elink_rdy) begin
            data_rx_elink = data_tra_10bitin[7:0];
            data_received_elink =1'b1;
         end
      end
      DLC_SHIFTER: begin
         address_elink =  8'h00;
         data_rx_elink = data_tra_10bitin[7:0];
         cs_eread =1'b1;
      end
      END_OF_FIELD0: begin
         end_read_elink = 1 ;
      end
      ADDRESS_FIELD: begin
         partial_reconfig_id =1'b1;
         if (fifo_elink_rdy)
            cs_eread = 1'b1;
      end
      DATA_LENGHT_CODE: begin
         address_elink =  8'h00;
      end
      ID_field: begin
         if (fifo_elink_rdy && data_tra_10bitin[7:0] ==8'h10)
            cs_eread = 1'b1;
      end
   endcase
end // Output Block

//-----------------------------------------------------------------
// Clocked Block for machine csm
//-----------------------------------------------------------------
always @(
   posedge clk, 
   negedge rst
) 
begin : clocked_block_proc
   if (!rst) begin
      current_state <= ST_reset;
   end
   else 
   begin
      if (timeoutrst) begin
         current_state <= ST_reset;
      end
      else 
      begin
         current_state <= next_state;

         // Combined Actions
         case (current_state) 
            DLC_SHIFTER: begin
               dlc_reg = dlc_reg - 1;
            end
            ADDRESS_FIELD: begin
               if (fifo_elink_rdy)
                  dlc_reg = data_tra_10bitin[7:0];
            end
         endcase
      end
   end
end // Clocked Block

// State-As-Output assignment
always @(current_state)
begin
   statedeb = 7'b0;
   statedeb[3:0] = current_state;
end

endmodule // reconfig_elink_in_sm
