//
// Module mopshub_lib.fifo_to_elink.struct
//
// Created:
//          by - dcs.dcs (chipdev2.physik.uni-wuppertal.de)
//          at - 16:51:25 08/24/21
//
// Generated by Mentor Graphics' HDL Designer(TM) 2019.4 (Build 4)
//

`resetall
`timescale 1ns/10ps
module fifo_to_elink #(
   // synopsys template
   parameter serialized_input = 0
)
( 
   // Port Declarations
   input   wire           fifo_wr_en, 
   input   wire           bitCLKx2, 
   input   wire           bitCLKx4, 
   input   wire           reset, 
   input   wire    [9:0]  fifo_din, 
   output  wire           tx_elink1bit, 
   output  wire    [1:0]  tx_elink2bit, 
   input   wire           fifo_flush, 
   input   wire           reverse_tx,      // 0
   input   wire           swap_rx_bits, 
   input   wire           bitCLK, 
   output  wire           enc10b_rdy_dbg, 
   output  wire    [9:0]  enc10b_in_dbg, 
   output  wire           efifo_full, 
   input   wire           fifo_wr_clk, 
   input   wire           fifo_rd_clk
);

// Local declarations
// Internal signal declarations
// Internal Declarations
// Internal Declarations


// Local declarations

// Internal signal declarations
wire        efifo_pfull;
reg         bitCount1      = 0;
wire  [1:0] data_2bit_out;           //  @ 40MHz
wire        fifo_rd_en;
wire        efifo_empty;
reg   [1:0] dout2bit_r     = 2'b0;
reg         dout1bit_r     = 1'b0;


// Instances 
//  Instances
// 
elink_proc_out_enc8b10b elink_proc_out_enc8b10b0( 
   .bitCLKx4           (bitCLKx4), 
   .bitCLK             (bitCLK), 
   .EDATA_IN           (enc10b_in_dbg), 
   .EDATA_RDY          (enc10b_rdy_dbg), 
   .reverse_stream_10b (reverse_tx), 
   .swap_outbits       (swap_rx_bits), 
   .rst                (reset), 
   .getDataTrig        (fifo_rd_en), 
   .EDATA_OUT          (data_2bit_out)
); 

fifo_TXelink_wrap fifo_TXelink_wrap0( 
   .din            (fifo_din), 
   .flush_fifo     (fifo_flush), 
   .rd_clk         (fifo_rd_clk), 
   .rd_en          (fifo_rd_en), 
   .rst            (reset), 
   .wr_en          (fifo_wr_en), 
   .dout_efifo     (enc10b_in_dbg), 
   .dout_rdy_efifo (enc10b_rdy_dbg), 
   .empty_efifo    (efifo_empty), 
   .full_efifo     (efifo_full), 
   .prog_full      (efifo_pfull), 
   .wr_clk         (fifo_wr_clk)
); 

// HDL Embedded Text Block 1 eb1
// HDL Embedded Text Block 1 serialization
//-------------------------------------------
//-- serialization of the 2-bit data output:
//-------------------------------------------                                       
always @(posedge bitCLKx2)
begin
        bitCount1 <= ! bitCount1;
end

// HDL Embedded Text Block 3 eb3
// HDL Embedded Text Block 4 eb4
// eb4 4 
//2 bits @ clk80, can interface 2-bit of GBT frame                                       
assign tx_elink2bit = data_2bit_out;
assign tx_elink1bit = dout1bit_r; //1 bit output
if (serialized_input == 0) begin:GBT_frame_case
always @(posedge bitCLK)//serialized output
    if(bitCount1 == 0)
      dout2bit_r <= data_2bit_out[0]; //serialize the first bit
    else
   begin 
    dout2bit_r <= data_2bit_out; //serialize the second bit which is filled in the other block ?bitCount1 = 0
   end
end
else begin:Elink_frame_case 
   always @(posedge bitCLKx2)//serialized output
   begin
    if(bitCount1 == 0)
      begin
      dout1bit_r <= data_2bit_out[0]; //serialize the first bit
      end
    else
    begin
      dout1bit_r <= data_2bit_out[1]; //serialize the second bit which is filled in the other block ?bitCount1 = 0
      end
   end
end


















endmodule // fifo_to_elink
// FIFO_to_Elink
