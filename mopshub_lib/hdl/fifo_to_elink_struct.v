//
// Module mopshub_lib.fifo_to_elink.struct
//
// Created:
//          by - dcs.dcs (chipdev2.physik.uni-wuppertal.de)
//          at - 16:04:34 08/18/21
//
// Generated by Mentor Graphics' HDL Designer(TM) 2019.4 (Build 4)
//

`resetall
`timescale 1ns/10ps
module fifo_to_elink #(
   // synopsys template
   // synopsys template
// synopsys template
   parameter DATA_IN_WIDTH  = 10,
   parameter DATA_OUT_WIDTH = 10
)
( 
   // Port Declarations
   input   wire                         fifo_wr_en, 
   input   wire                         bitCLKx2, 
   input   wire                         bitCLKx4, 
   input   wire                         rst, 
   input   wire    [DATA_IN_WIDTH-1:0]  fifo_din, 
   output  wire                         efifoPfull, 
   output  wire                         DATA1bitOUT, 
   output  wire    [1:0]                elink2bit, 
   input   wire                         fifo_flush, 
   input   wire                         reverse_tx,   // 0
   input   wire                         swap_output,  // 0 default when '1', the output bits will be swapped
   input   wire                         bitCLK, 
   input   wire                         fifo_wr_clk
);

// Local declarations
// Internal signal declarations
// Internal Declarations
// Internal Declarations


// Local declarations

// Internal signal declarations
reg                        bitCount1      = 0;
wire  [1:0]                dout2bit;                //  @ 40MHz
wire                       doutRdy;
wire  [DATA_OUT_WIDTH-1:0] efifoDout;               // 10-bit data in
wire                       efifoRE;
wire                       empty;
wire                       full;
reg                        DATA1bitOUT_r  = 1'b0;


// Instances 
//  Instances
// 
elink_proc_out_enc8b10b elink_proc_out_enc8b10b0( 
   .bitCLKx4           (bitCLKx4), 
   .bitCLK             (bitCLK), 
   .EDATA_IN           (efifoDout), 
   .EDATA_RDY          (doutRdy), 
   .reverse_stream_10b (reverse_tx), 
   .swap_outbits       (swap_output), 
   .rst                (rst), 
   .getDataTrig        (efifoRE), 
   .EDATA_OUT          (dout2bit)
); 

fifo_TXelink_wrap fifo_TXelink_wrap0( 
   .din            (fifo_din), 
   .flush_fifo     (fifo_flush), 
   .rd_clk         (bitCLKx4), 
   .rd_en          (efifoRE), 
   .rst            (rst), 
   .wr_en          (fifo_wr_en), 
   .dout_efifo     (efifoDout), 
   .dout_rdy_efifo (doutRdy), 
   .empty_efifo    (empty), 
   .full_efifo     (full), 
   .prog_full      (efifoPfull), 
   .wr_clk         (fifo_wr_clk)
); 

// HDL Embedded Text Block 1 eb1
// HDL Embedded Text Block 1 serialization
//-------------------------------------------
//-- serialization of the 2-bit data output:
//-------------------------------------------                                       
always @(posedge bitCLKx2)
begin
        bitCount1 <= ! bitCount1;
end

// HDL Embedded Text Block 2 eb2
// HDL Embedded Text Block 3 eb3
// eb3 3                                        
always @(posedge bitCLKx2)//serialized output
begin 
  if(bitCount1 == 0)
    DATA1bitOUT_r <= dout2bit[0]; //serialize the first bit
  else
    DATA1bitOUT_r <= dout2bit[1]; //serialize the second bit which is filled in the other block ?bitCount1 = 0
end

// HDL Embedded Text Block 3 eb3
// HDL Embedded Text Block 4 eb4
// eb4 4 
//2 bits @ clk80, can interface 2-bit of GBT frame                                       
assign elink2bit = dout2bit;
assign DATA1bitOUT =DATA1bitOUT_r; //1 bit output

endmodule // fifo_to_elink
// FIFO_to_Elink
