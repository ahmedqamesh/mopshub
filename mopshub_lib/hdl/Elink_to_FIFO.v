//
// Module mopshub_lib.Elink_to_FIFO.struct
//
// Created:
//          by - dcs.dcs (chipdev2.physik.uni-wuppertal.de)
//          at - 18:35:38 04/03/21
//
// Generated by Mentor Graphics' HDL Designer(TM) 2018.1 (Build 12)
//

`resetall
`timescale 1ns/10ps
module Elink_to_FIFO( 
   // Port Declarations
   // Port Declarations
   input   wire           DATA1bitIN, 
   input   wire           bitCLKx2, 
   // -----------------------------
   // ------ General Interface ----
   input   wire           bitCLK, 
   output  reg     [9:0]  din_dbg, 
   input   wire           efifoRe, 
   input   wire    [1:0]  elink2bit, 
   input   wire           swap_input, 
   output  reg            wrEn_dbg, 
   input   wire           fifo_flush, 
   input   wire           efifoRclk, 
   output  wire           efifoEmpty, 
   output  wire           efifoFull, 
   output  wire    [9:0]  efifoDout
);


// Internal Declarations


// Local declarations

// Internal signal declarations
wire        busyOut;
wire  [9:0] DATA_OUT;
wire        DATA_RDY;
wire        code_err;
reg   [1:0] dataIn         = 0;
wire        datain_valid;
wire  [9:0] dec8bOut;
reg   [9:0] din_efw;
wire        disp_err;
reg         drdy_efw;
wire        rst;
reg   [1:0] shreg2bit      = 0;
reg   [1:0] DATA2bitIN     = 0;


// Instances 
EPROC_IN_DEC8b10b U_2( 
   .bitCLK         (bitCLK), 
   .rst            (rst), 
   .swap_inputbits (swap_input), 
   .edataIN        (dataIn), 
   .DATA_OUT       (DATA_OUT), 
   .DATA_RDY       (DATA_RDY)
); 

dec_8b10b_wrap U_0( 
   .ABCDEIFGHJ_IN (DATA_OUT), 
   .RBYTECLK      (bitCLK), 
   .datain_valid  (datain_valid), 
   .reset         (rst), 
   .BUSY          (busyOut), 
   .HGFEDCBA      (dec8bOut[7:0]), 
   .ISK           (dec8bOut[9:8]), 
   .code_err      (code_err), 
   .disp_err      (disp_err)
); 

elinkRXfifo_wrap U_1( 
   .bitClk       (bitCLK), 
   .rst          (rst), 
   .flush_fifo   (fifo_flush), 
   .din          (drdy_efw), 
   .din_rdy      (din_efw), 
   .rd_clk_elink (efifoRclk), 
   .rd_en_elink  (efifoRe), 
   .empty_elink  (efifoEmpty), 
   .full_elink   (efifoFull), 
   .dout_elink   (efifoDout)
); 

// HDL Embedded Text Block 1 eb1
// eb1 1                                        
always@(posedge bitCLK)
if (rst)
  begin
    drdy_efw <= 0;
    din_efw  <= 10'b0;
    wrEn_dbg <= 0;
    din_dbg  <= 10'b0;
  end
else
  begin
    drdy_efw <= DATA_RDY;
    din_efw  <= dec8bOut;
    wrEn_dbg <= DATA_RDY;
    din_dbg  <= dec8bOut;
  end  




// HDL Embedded Text Block 2 eb2
// eb2 2     
always@(swap_input, DATA2bitIN)
if (swap_input)
   dataIn <= DATA2bitIN;
else
   dataIn = {DATA2bitIN[0],DATA2bitIN[1]} ;                                   
                              
// HDL Embedded Text Block 3 eb3
// eb1 1                                        
always@(posedge bitCLKx2)
if (rst)
  begin
   shreg2bit <= 2'b0;
  end
else
  begin
  shreg2bit <= {DATA1bitIN,shreg2bit[1]};
  end  



// HDL Embedded Text Block 4 eb4
// eb1 1                                        
always@(posedge bitCLKx2)
if (rst)
  begin
   shreg2bit <= 2'b0;
  end
else
  begin
  shreg2bit <= {DATA1bitIN,shreg2bit[1]};
  end  



// HDL Embedded Text Block 5 eb5
// eb1 1                                        
always@(posedge bitCLK)
if (rst)
  begin
   DATA2bitIN <= 2'b0;
  end
else
  begin
  DATA2bitIN <= elink2bit;
  end  






endmodule // Elink_to_FIFO

