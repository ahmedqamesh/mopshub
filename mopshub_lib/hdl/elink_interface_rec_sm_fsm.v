//
// Module mopshub_lib.elink_interface_rec_sm.fsm
//
// Created:
//          by - dcs.dcs (chipdev2.physik.uni-wuppertal.de)
//          at - 07:47:18 05/13/24
//
// Generated by Mentor Graphics' HDL Designer(TM) 2019.4 (Build 4)
//
`resetall
`timescale 1ns/10ps
module elink_interface_rec_sm( 
   // Port Declarations
   input   wire           abort,                // Upon receiving a reset message on the CANbus. FSM goes into a known state
   input   wire           can_id, 
   input   wire           clk,                  // posedge
   input   wire           end_elink_proc, 
   input   wire           endwait, 
   input   wire           fifo_data_eop, 
   input   wire           fifo_data_sop, 
   input   wire           fifo_elink_rdy, 
   input   wire           fifo_packet_rdy, 
   input   wire           rst,                  // synchronous low active
   input   wire           spi_mon_id, 
   input   wire           spi_power_off_id, 
   input   wire           spi_power_on_id, 
   input   wire           start_read_elink, 
   input   wire           timeoutrst,           // timeout reset signal to the state machine in case bridge controller is not respoding for a specified time
   output  reg     [4:0]  addr_read,            // request to caninterface block
   output  reg            buffer_elink_en, 
   output  reg            buffer_eth_en, 
   output  reg            buffer_mon_spi_en, 
   output  reg            buffer_power_spi_en, 
   output  reg            buffer_tra_en, 
   output  reg            cs_eread, 
   output  reg            end_read_elink,       // request to bridge FSM 
   output  reg            entimeout,            // enable for timeout reset counter 
   output  reg            irq_elink_eth, 
   output  reg            irq_elink_tra, 
   output  reg            irq_spi_mon_tra, 
   output  reg            irq_spi_power_off, 
   output  reg            irq_spi_power_on, 
   output  reg            spi_tra_mode, 
   output  reg     [7:0]  statedeb
);

//tmrg default triplicate
//tmrg tmr_error false
// Internal Declarations


// Module Declarations

// State encoding
parameter 
          ST_IDLE         = 6'd0,
          ST_reset        = 6'd1,
          store_RB2       = 6'd2,
          store_RB3       = 6'd3,
          store_RB4       = 6'd4,
          store_RB0       = 6'd5,
          RB1             = 6'd6,
          store_RB5       = 6'd7,
          store_RB6       = 6'd8,
          store_RB7       = 6'd9,
          store_RB8       = 6'd10,
          store_RB9       = 6'd11,
          ST_wait_eop     = 6'd12,
          ST_end_read_en  = 6'd13,
          ST_Wait         = 6'd14,
          ST_en_buffer    = 6'd15,
          ST_wait_sop     = 6'd16,
          RB0             = 6'd17,
          store_SPI0      = 6'd18,
          store_SPI1      = 6'd19,
          store_SPI2      = 6'd20,
          ST_end_read_en1 = 6'd21,
          ST_en_buffer1   = 6'd22,
          ST_GOToWait1    = 6'd23,
          store_SPI3      = 6'd24,
          ST_wait_eop1    = 6'd25,
          store_SPI4      = 6'd26,
          store_SPI5      = 6'd27,
          store_SPI6      = 6'd28,
          ST_end_read_en4 = 6'd29,
          ST_en_buffer4   = 6'd30,
          ST_GOToWait4    = 6'd31,
          store_SPI7      = 6'd32,
          ST_wait_eop4    = 6'd33,
          ST_eth_buffer   = 6'd34,
          wait_irq        = 6'd35,
          irq_eth         = 6'd36,
          store_RB20      = 6'd37,
          store_RB21      = 6'd38,
          store_RB22      = 6'd39,
          store_RB23      = 6'd40,
          store_RB24      = 6'd41,
          store_RB25      = 6'd42,
          ST_endwait      = 6'd43,
          store_SPI8      = 6'd44,
          store_SPI9      = 6'd45,
          store_SPI10     = 6'd46,
          ST_end_read_en5 = 6'd47,
          ST_en_buffer5   = 6'd48,
          ST_GOToWait5    = 6'd49,
          store_SPI11     = 6'd50,
          ST_wait_eop5    = 6'd51;

reg [5:0] current_state, next_state;

//-----------------------------------------------------------------
// Next State Block for machine csm
//-----------------------------------------------------------------
always @(
   can_id, 
   current_state, 
   end_elink_proc, 
   fifo_data_eop, 
   fifo_data_sop, 
   fifo_elink_rdy, 
   fifo_packet_rdy, 
   rst, 
   spi_mon_id, 
   spi_power_off_id, 
   spi_power_on_id, 
   start_read_elink
)
begin : next_state_block_proc
   case (current_state) 
      ST_IDLE: begin
         if (fifo_elink_rdy ==1)
            next_state = ST_wait_sop;
         else
            next_state = ST_IDLE;
      end
      ST_reset: begin
         if (rst == 1)
            next_state = ST_IDLE;
         else
            next_state = ST_reset;
      end
      store_RB2: begin
         if (fifo_elink_rdy && fifo_packet_rdy ==1)
            next_state = store_RB3;
         else
            next_state = store_RB2;
      end
      store_RB3: begin
         if (fifo_elink_rdy && fifo_packet_rdy ==1)
            next_state = store_RB4;
         else
            next_state = store_RB3;
      end
      store_RB4: begin
         if (fifo_elink_rdy && fifo_packet_rdy ==1)
            next_state = store_RB5;
         else
            next_state = store_RB4;
      end
      store_RB0: begin
         if (fifo_elink_rdy && fifo_packet_rdy ==1)
            next_state = RB1;
         else
            next_state = store_RB0;
      end
      RB1: begin
         if (fifo_elink_rdy && fifo_packet_rdy ==1)
            next_state = store_RB2;
         else
            next_state = RB1;
      end
      store_RB5: begin
         if (fifo_elink_rdy && fifo_packet_rdy ==1)
            next_state = store_RB6;
         else
            next_state = store_RB5;
      end
      store_RB6: begin
         if (fifo_elink_rdy && fifo_packet_rdy ==1)
            next_state = store_RB7;
         else
            next_state = store_RB6;
      end
      store_RB7: begin
         if (fifo_elink_rdy && fifo_packet_rdy ==1)
            next_state = store_RB8;
         else
            next_state = store_RB7;
      end
      store_RB8: begin
         if (fifo_elink_rdy && fifo_packet_rdy ==1)
            next_state = store_RB9;
         else
            next_state = store_RB8;
      end
      store_RB9: begin
         if (fifo_elink_rdy && fifo_packet_rdy ==1)
            next_state = ST_wait_eop;
         else
            next_state = store_RB9;
      end
      ST_wait_eop: begin
         if (fifo_data_eop ==1)
            next_state = ST_eth_buffer;
         else
            next_state = ST_wait_eop;
      end
      ST_end_read_en: begin
         if (start_read_elink ==1)
            next_state = ST_en_buffer;
         else
            next_state = ST_end_read_en;
      end
      ST_Wait: begin
         if (end_elink_proc ==1'b1)
            next_state = ST_IDLE;
         else
            next_state = ST_Wait;
      end
      ST_en_buffer: begin
         next_state = ST_Wait;
      end
      ST_wait_sop: begin
         if (fifo_data_sop ==1)
            next_state = RB0;
         else
            next_state = ST_wait_sop;
      end
      RB0: begin
         if (can_id ==1)
            next_state = store_RB0;
         else if ((spi_mon_id ==1) && (fifo_packet_rdy ==1))
            next_state = store_SPI0;
         else if ((spi_power_on_id ==1) && (fifo_packet_rdy ==1))
            next_state = store_SPI4;
         else if ((spi_power_off_id ==1) && (fifo_packet_rdy ==1))
            next_state = store_SPI8;
         else
            next_state = RB0;
      end
      store_SPI0: begin
         if (fifo_elink_rdy && fifo_packet_rdy ==1)
            next_state = store_SPI1;
         else
            next_state = store_SPI0;
      end
      store_SPI1: begin
         if (fifo_elink_rdy && fifo_packet_rdy ==1)
            next_state = store_SPI2;
         else
            next_state = store_SPI1;
      end
      store_SPI2: begin
         if (fifo_elink_rdy && fifo_packet_rdy ==1)
            next_state = store_SPI3;
         else
            next_state = store_SPI2;
      end
      ST_end_read_en1: begin
         if (start_read_elink ==1)
            next_state = ST_en_buffer1;
         else
            next_state = ST_end_read_en1;
      end
      ST_en_buffer1: begin
         next_state = ST_GOToWait1;
      end
      ST_GOToWait1: begin
         next_state = ST_IDLE;
      end
      store_SPI3: begin
         if (fifo_elink_rdy && fifo_packet_rdy ==1)
            next_state = store_RB21;
         else
            next_state = store_SPI3;
      end
      ST_wait_eop1: begin
         if (fifo_data_eop ==1)
            next_state = ST_end_read_en1;
         else
            next_state = ST_wait_eop1;
      end
      store_SPI4: begin
         if (fifo_elink_rdy && fifo_packet_rdy ==1)
            next_state = store_SPI5;
         else
            next_state = store_SPI4;
      end
      store_SPI5: begin
         if (fifo_elink_rdy && fifo_packet_rdy ==1)
            next_state = store_SPI6;
         else
            next_state = store_SPI5;
      end
      store_SPI6: begin
         if (fifo_elink_rdy && fifo_packet_rdy ==1)
            next_state = store_SPI7;
         else
            next_state = store_SPI6;
      end
      ST_end_read_en4: begin
         if (start_read_elink ==1)
            next_state = ST_en_buffer4;
         else
            next_state = ST_end_read_en4;
      end
      ST_en_buffer4: begin
         next_state = ST_GOToWait4;
      end
      ST_GOToWait4: begin
         next_state = ST_IDLE;
      end
      store_SPI7: begin
         if (fifo_elink_rdy && fifo_packet_rdy ==1)
            next_state = ST_wait_eop4;
         else
            next_state = store_SPI7;
      end
      ST_wait_eop4: begin
         if (fifo_data_eop ==1)
            next_state = ST_end_read_en4;
         else
            next_state = ST_wait_eop4;
      end
      ST_eth_buffer: begin
         next_state = wait_irq;
      end
      wait_irq: begin
         next_state = irq_eth;
      end
      irq_eth: begin
         next_state = ST_end_read_en;
      end
      store_RB20: begin
         if (fifo_elink_rdy && fifo_packet_rdy ==1)
            next_state = store_RB25;
         else
            next_state = store_RB20;
      end
      store_RB21: begin
         if (fifo_elink_rdy && fifo_packet_rdy ==1)
            next_state = store_RB22;
         else
            next_state = store_RB21;
      end
      store_RB22: begin
         if (fifo_elink_rdy && fifo_packet_rdy ==1)
            next_state = store_RB23;
         else
            next_state = store_RB22;
      end
      store_RB23: begin
         if (fifo_elink_rdy && fifo_packet_rdy ==1)
            next_state = store_RB20;
         else
            next_state = store_RB23;
      end
      store_RB24: begin
         if (fifo_elink_rdy && fifo_packet_rdy ==1)
            next_state = ST_wait_eop1;
         else
            next_state = store_RB24;
      end
      store_RB25: begin
         if (fifo_elink_rdy && fifo_packet_rdy ==1)
            next_state = store_RB24;
         else
            next_state = store_RB25;
      end
      ST_endwait: begin
         next_state = ST_IDLE;
      end
      store_SPI8: begin
         if (fifo_elink_rdy && fifo_packet_rdy ==1)
            next_state = store_SPI9;
         else
            next_state = store_SPI8;
      end
      store_SPI9: begin
         if (fifo_elink_rdy && fifo_packet_rdy ==1)
            next_state = store_SPI10;
         else
            next_state = store_SPI9;
      end
      store_SPI10: begin
         if (fifo_elink_rdy && fifo_packet_rdy ==1)
            next_state = store_SPI11;
         else
            next_state = store_SPI10;
      end
      ST_end_read_en5: begin
         if (start_read_elink ==1)
            next_state = ST_en_buffer5;
         else
            next_state = ST_end_read_en5;
      end
      ST_en_buffer5: begin
         next_state = ST_GOToWait5;
      end
      ST_GOToWait5: begin
         next_state = ST_IDLE;
      end
      store_SPI11: begin
         if (fifo_elink_rdy && fifo_packet_rdy ==1)
            next_state = ST_wait_eop5;
         else
            next_state = store_SPI11;
      end
      ST_wait_eop5: begin
         if (fifo_data_eop ==1)
            next_state = ST_end_read_en5;
         else
            next_state = ST_wait_eop5;
      end
      default: 
         next_state = ST_reset;
   endcase
end // Next State Block

//-----------------------------------------------------------------
// Output Block for machine csm
//-----------------------------------------------------------------
always @(
   current_state
)
begin : output_block_proc
   // Default Assignment
   addr_read = 5'b0;
   buffer_elink_en = 0;
   buffer_eth_en = 0;
   buffer_mon_spi_en = 0;
   buffer_power_spi_en = 0;
   buffer_tra_en = 0;
   cs_eread = 0;
   end_read_elink = 0;
   entimeout = 1;
   irq_elink_eth = 0;
   irq_elink_tra = 0;
   irq_spi_mon_tra = 0;
   irq_spi_power_off = 0;
   irq_spi_power_on = 0;
   spi_tra_mode = 0;

   // Combined Actions
   case (current_state) 
      ST_IDLE: begin
         entimeout = 0 ;
      end
      ST_reset: begin
         entimeout = 0 ;
         spi_tra_mode =0;
      end
      store_RB2: begin
         addr_read = 5'h4;
         cs_eread = 1 ;
         buffer_elink_en =1;
      end
      store_RB3: begin
         addr_read = 5'h5;
         cs_eread = 1 ;
         buffer_elink_en =1;
      end
      store_RB4: begin
         addr_read = 5'h6;
         cs_eread = 1 ;
         buffer_elink_en =1;
      end
      store_RB0: begin
         addr_read = 5'h2;
         buffer_elink_en =1;
         cs_eread =1;
      end
      RB1: begin
         addr_read = 5'h3;
         cs_eread = 1 ;
         buffer_elink_en =1;
      end
      store_RB5: begin
         addr_read = 5'h7;
         cs_eread = 1 ;
         buffer_elink_en =1;
      end
      store_RB6: begin
         addr_read = 5'h8;
         cs_eread = 1 ;
         buffer_elink_en =1;
      end
      store_RB7: begin
         addr_read = 5'h9;
         cs_eread = 1 ;
         buffer_elink_en =1;
      end
      store_RB8: begin
         addr_read = 5'hA;
         cs_eread = 1 ;
         buffer_elink_en =1;
      end
      store_RB9: begin
         addr_read = 5'hB;
         cs_eread = 1 ;
         buffer_elink_en =1;
      end
      ST_wait_eop: begin
         addr_read = 5'h0;
         cs_eread = 1 ;
         buffer_elink_en =0;
      end
      ST_end_read_en: begin
         addr_read = 5'h0;
         irq_elink_tra =1'b1;
      end
      ST_Wait: begin
         addr_read = 5'h0;
         end_read_elink = 1 ;
      end
      ST_en_buffer: begin
         addr_read = 5'h0;
         buffer_tra_en =1;
      end
      ST_wait_sop: begin
         addr_read = 5'h0;
         cs_eread = 1 ;
      end
      RB0: begin
         addr_read = 5'h2;
         cs_eread =1;
      end
      store_SPI0: begin
         addr_read = 5'h2 ;
         buffer_mon_spi_en =1;
         cs_eread =1;
         spi_tra_mode =1;
      end
      store_SPI1: begin
         addr_read = 5'h3;
         cs_eread = 1 ;
         buffer_mon_spi_en =1;
         spi_tra_mode =1;
      end
      store_SPI2: begin
         addr_read = 5'h4;
         cs_eread = 1 ;
         buffer_mon_spi_en =1;
         spi_tra_mode =1;
      end
      ST_end_read_en1: begin
         addr_read = 5'h0;
         irq_spi_mon_tra =1'b1;
         spi_tra_mode =1;
      end
      ST_en_buffer1: begin
         addr_read = 5'h0;
         irq_spi_mon_tra =1'b1;
         spi_tra_mode =1;
      end
      ST_GOToWait1: begin
         end_read_elink = 1 ;
         addr_read = 5'h0;
         spi_tra_mode =1;
      end
      store_SPI3: begin
         addr_read = 5'h5;
         cs_eread = 1 ;
         buffer_mon_spi_en =1;
         spi_tra_mode =1;
      end
      ST_wait_eop1: begin
         addr_read = 5'h0;
         cs_eread = 1 ;
         spi_tra_mode =1;
      end
      store_SPI4: begin
         addr_read = 5'h2 ;
         buffer_power_spi_en =1;
         cs_eread =1;
         spi_tra_mode =1;
      end
      store_SPI5: begin
         addr_read = 5'h3 ;
         cs_eread = 1 ;
         buffer_power_spi_en =1;
         spi_tra_mode =1;
      end
      store_SPI6: begin
         addr_read = 5'h4 ;
         cs_eread = 1 ;
         buffer_power_spi_en = 1 ;
         spi_tra_mode =1;
      end
      ST_end_read_en4: begin
         addr_read = 5'h0;
         irq_spi_power_on =1'b1;
         spi_tra_mode =1;
      end
      ST_en_buffer4: begin
         addr_read = 5'h0;
         spi_tra_mode =1;
      end
      ST_GOToWait4: begin
         end_read_elink = 1 ;
         addr_read = 5'b0;
         spi_tra_mode =1;
      end
      store_SPI7: begin
         addr_read = 5'h5 ;
         cs_eread = 1 ;
         buffer_power_spi_en = 1 ;
         spi_tra_mode =1;
      end
      ST_wait_eop4: begin
         addr_read = 5'h0;
         cs_eread = 1 ;
         buffer_power_spi_en =0 ;
         spi_tra_mode =1;
      end
      ST_eth_buffer: begin
         addr_read = 5'h0;
         buffer_eth_en =1;
      end
      wait_irq: begin
         addr_read = 5'h0;
      end
      irq_eth: begin
         addr_read = 5'h0;
         irq_elink_eth =1'b1;
      end
      store_RB20: begin
         addr_read = 5'h9;
         spi_tra_mode =1;
         cs_eread = 1 ;
         buffer_mon_spi_en =1;
      end
      store_RB21: begin
         addr_read = 5'h6;
         cs_eread = 1 ;
         buffer_mon_spi_en =1;
         spi_tra_mode =1;
      end
      store_RB22: begin
         addr_read = 5'h7;
         cs_eread = 1 ;
         spi_tra_mode =1;
         buffer_mon_spi_en =1;
      end
      store_RB23: begin
         addr_read = 5'h8;
         cs_eread = 1 ;
         spi_tra_mode =1;
         buffer_mon_spi_en =1;
      end
      store_RB24: begin
         addr_read = 5'hB;
         cs_eread = 1 ;
         buffer_mon_spi_en =1;
         spi_tra_mode =1;
      end
      store_RB25: begin
         addr_read = 5'hA;
         cs_eread = 1 ;
         buffer_mon_spi_en =1;
         spi_tra_mode =1;
      end
      store_SPI8: begin
         addr_read = 5'h2 ;
         buffer_power_spi_en =1;
         cs_eread =1;
         spi_tra_mode =1;
      end
      store_SPI9: begin
         addr_read = 5'h3 ;
         cs_eread = 1 ;
         buffer_power_spi_en =1;
         spi_tra_mode =1;
      end
      store_SPI10: begin
         addr_read = 5'h4 ;
         cs_eread = 1 ;
         buffer_power_spi_en = 1 ;
         spi_tra_mode =1;
      end
      ST_end_read_en5: begin
         addr_read = 5'h0;
         irq_spi_power_off =1'b1;
         spi_tra_mode =1;
      end
      ST_en_buffer5: begin
         addr_read = 5'h0;
         spi_tra_mode =1;
      end
      ST_GOToWait5: begin
         end_read_elink = 1 ;
         addr_read = 5'b0;
         spi_tra_mode =1;
      end
      store_SPI11: begin
         addr_read = 5'h5 ;
         cs_eread = 1 ;
         buffer_power_spi_en = 1 ;
         spi_tra_mode =1;
      end
      ST_wait_eop5: begin
         addr_read = 5'h0;
         cs_eread = 1 ;
         buffer_power_spi_en =0 ;
         spi_tra_mode =1;
      end
   endcase
end // Output Block

//-----------------------------------------------------------------
// Clocked Block for machine csm
//-----------------------------------------------------------------
always @(
   posedge clk
) 
begin : clocked_block_proc
   if (!rst) begin
      current_state <= ST_reset;
   end
   else if (timeoutrst) begin
      current_state <= ST_reset;
   end
   else if (abort) begin
      current_state <= ST_endwait;
   end
   else if (endwait) begin
      current_state <= ST_reset;
   end
   else 
   begin
      current_state <= next_state;
   end
end // Clocked Block

// State-As-Output assignment
always @(current_state)
begin
   statedeb = 8'b0;
   statedeb[5:0] = current_state;
end

endmodule // elink_interface_rec_sm
