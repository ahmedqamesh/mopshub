//
// Module mopshub_lib.elink_interface_rec_SM.fsm
//
// Created:
//          by - dcs.dcs (chipdev2.physik.uni-wuppertal.de)
//          at - 16:44:35 11/25/22
//
// Generated by Mentor Graphics' HDL Designer(TM) 2019.4 (Build 4)
//
`resetall
`timescale 1ns/10ps
module elink_interface_rec_SM( 
   // Port Declarations
   input   wire           abort,                  // Upon receiving a reset message on the CANbus. FSM goes into a known state
   input   wire           clk,                    // posedge
   input   wire           rst,                    // synchronous low active
   input   wire           start_write_elink,      // request from bridge FSM
   input   wire           start_write_elink_dbg, 
   input   wire           start_write_elink_spi, 
   input   wire           timeoutrst,             // timeout reset signal to the state machine in case bridge controller is not respoding for a specified time
   output  reg     [4:0]  addr_write,             // request to caninterface block
   output  reg            buffer_rec_en, 
   output  reg            buffer_spi_rec_en, 
   output  reg            cs_ewrite, 
   output  reg            dbg_rec_mode, 
   output  reg            end_write_elink,        // request to bridge FSM
   output  reg            end_write_elink_dbg, 
   output  reg            end_write_elink_spi, 
   output  reg            entimeout,              // enable for timeout reset counter 
   output  reg            irq_elink_rec, 
   output  reg            spi_rec_mode, 
   output  reg     [6:0]  statedeb
);

//tmrg default triplicate
//tmrg tmr_error false
// Internal Declarations


// Module Declarations

// State encoding
parameter 
          ST_waittoact     = 7'd0,
          ST_reset         = 7'd1,
          ST_end_write_en  = 7'd2,
          store_WB0        = 7'd3,
          store_WB1        = 7'd4,
          ST_wait_can_rq   = 7'd5,
          store_WB8        = 7'd6,
          store_WB2        = 7'd7,
          store_WB7        = 7'd8,
          store_WB3        = 7'd9,
          store_WB6        = 7'd10,
          store_WB4        = 7'd11,
          store_WB5        = 7'd12,
          st_write_data    = 7'd13,
          store_SOP        = 7'd14,
          store_WB9        = 7'd15,
          store_Eop        = 7'd16,
          WB0              = 7'd17,
          WB1              = 7'd18,
          WB2              = 7'd19,
          WB3              = 7'd20,
          WB4              = 7'd21,
          WB5              = 7'd22,
          WB6              = 7'd23,
          WB7              = 7'd24,
          WB8              = 7'd25,
          WB9              = 7'd26,
          W_SOP            = 7'd27,
          W_Eop            = 7'd28,
          ST_end_write_en1 = 7'd29,
          store_SPI0       = 7'd30,
          store_SPI1       = 7'd31,
          ST_wait_eop2     = 7'd32,
          store_SPI2       = 7'd33,
          store_SPI3       = 7'd34,
          st_write_data1   = 7'd35,
          store_SOP1       = 7'd36,
          store_Eop1       = 7'd37,
          SPI0             = 7'd38,
          SPI1             = 7'd39,
          SPI2             = 7'd40,
          SPI3             = 7'd41,
          W_SOP1           = 7'd42,
          W_Eop1           = 7'd43,
          store_comma      = 7'd44,
          store_comma1     = 7'd45,
          ST_end_write_en2 = 7'd46,
          store_WB10       = 7'd47,
          store_WB11       = 7'd48,
          ST_wait_can_rq1  = 7'd49,
          store_WB12       = 7'd50,
          store_WB13       = 7'd51,
          store_WB14       = 7'd52,
          store_WB15       = 7'd53,
          store_WB16       = 7'd54,
          store_WB17       = 7'd55,
          store_WB18       = 7'd56,
          st_write_data2   = 7'd57,
          store_SOP2       = 7'd58,
          store_WB19       = 7'd59,
          store_Eop2       = 7'd60,
          WB10             = 7'd61,
          WB11             = 7'd62,
          WB12             = 7'd63,
          WB13             = 7'd64,
          WB14             = 7'd65,
          WB15             = 7'd66,
          WB16             = 7'd67,
          WB17             = 7'd68,
          WB18             = 7'd69,
          WB19             = 7'd70,
          W_SOP2           = 7'd71,
          W_Eop2           = 7'd72,
          store_comma2     = 7'd73;

reg [6:0] current_state, next_state;

//-----------------------------------------------------------------
// Next State Block for machine csm
//-----------------------------------------------------------------
always @(
   current_state, 
   rst, 
   start_write_elink, 
   start_write_elink_dbg, 
   start_write_elink_spi
)
begin : next_state_block_proc
   case (current_state) 
      ST_waittoact: begin
         if (start_write_elink == 1)
            next_state = st_write_data;
         else if (start_write_elink_spi ==1)
            next_state = st_write_data1;
         else if (start_write_elink_dbg == 1)
            next_state = st_write_data2;
         else
            next_state = ST_waittoact;
      end
      ST_reset: begin
         if (rst == 1)
            next_state = ST_waittoact;
         else
            next_state = ST_reset;
      end
      ST_end_write_en: begin
         next_state = ST_waittoact;
      end
      store_WB0: begin
         next_state = WB1;
      end
      store_WB1: begin
         next_state = WB2;
      end
      ST_wait_can_rq: begin
         next_state = ST_end_write_en;
      end
      store_WB8: begin
         next_state = WB9;
      end
      store_WB2: begin
         next_state = WB3;
      end
      store_WB7: begin
         next_state = WB8;
      end
      store_WB3: begin
         next_state = WB4;
      end
      store_WB6: begin
         next_state = WB7;
      end
      store_WB4: begin
         next_state = WB5;
      end
      store_WB5: begin
         next_state = WB6;
      end
      st_write_data: begin
         next_state = W_SOP;
      end
      store_SOP: begin
         next_state = WB0;
      end
      store_WB9: begin
         next_state = W_Eop;
      end
      store_Eop: begin
         next_state = store_comma;
      end
      WB0: begin
         next_state = store_WB0;
      end
      WB1: begin
         next_state = store_WB1;
      end
      WB2: begin
         next_state = store_WB2;
      end
      WB3: begin
         next_state = store_WB3;
      end
      WB4: begin
         next_state = store_WB4;
      end
      WB5: begin
         next_state = store_WB5;
      end
      WB6: begin
         next_state = store_WB6;
      end
      WB7: begin
         next_state = store_WB7;
      end
      WB8: begin
         next_state = store_WB8;
      end
      WB9: begin
         next_state = store_WB9;
      end
      W_SOP: begin
         next_state = store_SOP;
      end
      W_Eop: begin
         next_state = store_Eop;
      end
      ST_end_write_en1: begin
         next_state = ST_waittoact;
      end
      store_SPI0: begin
         next_state = SPI1;
      end
      store_SPI1: begin
         next_state = SPI2;
      end
      ST_wait_eop2: begin
         next_state = ST_end_write_en1;
      end
      store_SPI2: begin
         next_state = SPI3;
      end
      store_SPI3: begin
         next_state = W_Eop1;
      end
      st_write_data1: begin
         next_state = W_SOP1;
      end
      store_SOP1: begin
         next_state = SPI0;
      end
      store_Eop1: begin
         next_state = store_comma1;
      end
      SPI0: begin
         next_state = store_SPI0;
      end
      SPI1: begin
         next_state = store_SPI1;
      end
      SPI2: begin
         next_state = store_SPI2;
      end
      SPI3: begin
         next_state = store_SPI3;
      end
      W_SOP1: begin
         next_state = store_SOP1;
      end
      W_Eop1: begin
         next_state = store_Eop1;
      end
      store_comma: begin
         next_state = ST_wait_can_rq;
      end
      store_comma1: begin
         next_state = ST_wait_eop2;
      end
      ST_end_write_en2: begin
         next_state = ST_waittoact;
      end
      store_WB10: begin
         next_state = WB11;
      end
      store_WB11: begin
         next_state = WB12;
      end
      ST_wait_can_rq1: begin
         next_state = ST_end_write_en2;
      end
      store_WB12: begin
         next_state = WB19;
      end
      store_WB13: begin
         next_state = WB13;
      end
      store_WB14: begin
         next_state = WB18;
      end
      store_WB15: begin
         next_state = WB14;
      end
      store_WB16: begin
         next_state = WB17;
      end
      store_WB17: begin
         next_state = WB15;
      end
      store_WB18: begin
         next_state = WB16;
      end
      st_write_data2: begin
         next_state = W_SOP2;
      end
      store_SOP2: begin
         next_state = WB10;
      end
      store_WB19: begin
         next_state = W_Eop2;
      end
      store_Eop2: begin
         next_state = store_comma2;
      end
      WB10: begin
         next_state = store_WB10;
      end
      WB11: begin
         next_state = store_WB11;
      end
      WB12: begin
         next_state = store_WB13;
      end
      WB13: begin
         next_state = store_WB15;
      end
      WB14: begin
         next_state = store_WB17;
      end
      WB15: begin
         next_state = store_WB18;
      end
      WB16: begin
         next_state = store_WB16;
      end
      WB17: begin
         next_state = store_WB14;
      end
      WB18: begin
         next_state = store_WB12;
      end
      WB19: begin
         next_state = store_WB19;
      end
      W_SOP2: begin
         next_state = store_SOP2;
      end
      W_Eop2: begin
         next_state = store_Eop2;
      end
      store_comma2: begin
         next_state = ST_wait_can_rq1;
      end
      default: 
         next_state = ST_reset;
   endcase
end // Next State Block

//-----------------------------------------------------------------
// Output Block for machine csm
//-----------------------------------------------------------------
always @(
   current_state
)
begin : output_block_proc
   // Default Assignment
   addr_write = 5'b0;
   buffer_rec_en = 0;
   buffer_spi_rec_en = 0;
   cs_ewrite = 0;
   dbg_rec_mode = 0;
   end_write_elink = 0;
   end_write_elink_dbg = 0;
   end_write_elink_spi = 0;
   entimeout = 1;
   irq_elink_rec = 0;
   spi_rec_mode = 0;

   // Combined Actions
   case (current_state) 
      ST_waittoact: begin
         entimeout = 0 ;
      end
      ST_reset: begin
         spi_rec_mode =0;
         entimeout = 0 ;
      end
      ST_end_write_en: begin
         end_write_elink =1;
      end
      store_WB0: begin
         addr_write = 5'b00010 ;
         cs_ewrite = 1 ;
         buffer_rec_en =1;
      end
      store_WB1: begin
         addr_write = 5'b00011 ;
         cs_ewrite = 1 ;
         buffer_rec_en =1;
      end
      ST_wait_can_rq: begin
         addr_write = 5'b00000;
         irq_elink_rec =1;
      end
      store_WB8: begin
         addr_write = 5'b01010 ;
         cs_ewrite = 1 ;
         buffer_rec_en =1;
      end
      store_WB2: begin
         addr_write = 5'b00100 ;
         cs_ewrite = 1 ;
         buffer_rec_en =1;
      end
      store_WB7: begin
         addr_write = 5'b01001 ;
         cs_ewrite = 1 ;
         buffer_rec_en =1;
      end
      store_WB3: begin
         addr_write = 5'b00101 ;
         cs_ewrite = 1 ;
         buffer_rec_en =1;
      end
      store_WB6: begin
         addr_write = 5'b01000 ;
         cs_ewrite = 1 ;
         buffer_rec_en =1;
      end
      store_WB4: begin
         addr_write = 5'b00110 ;
         cs_ewrite = 1 ;
         buffer_rec_en =1;
      end
      store_WB5: begin
         addr_write = 5'b00111 ;
         cs_ewrite = 1 ;
         buffer_rec_en =1;
      end
      store_SOP: begin
         addr_write = 5'b00001 ;
         cs_ewrite =1;
      end
      store_WB9: begin
         addr_write = 5'b01011 ;
         cs_ewrite = 1 ;
         buffer_rec_en =1;
      end
      store_Eop: begin
         addr_write = 5'b01100 ;
         cs_ewrite =1;
      end
      WB0: begin
         addr_write = 5'b00010 ;
      end
      WB1: begin
         addr_write = 5'b00011 ;
      end
      WB2: begin
         addr_write = 5'b00100 ;
      end
      WB3: begin
         addr_write = 5'b00101 ;
      end
      WB4: begin
         addr_write = 5'b00110 ;
      end
      WB5: begin
         addr_write = 5'b00111 ;
      end
      WB6: begin
         addr_write = 5'b01000 ;
      end
      WB7: begin
         addr_write = 5'b01001 ;
      end
      WB8: begin
         addr_write = 5'b01010 ;
      end
      WB9: begin
         addr_write = 5'b01011 ;
      end
      W_SOP: begin
         addr_write = 5'b00001 ;
      end
      W_Eop: begin
         addr_write = 5'b01100 ;
      end
      ST_end_write_en1: begin
         end_write_elink_spi =1;
         spi_rec_mode =1;
      end
      store_SPI0: begin
         addr_write = 5'b00010 ;
         cs_ewrite = 1 ;
         buffer_spi_rec_en  =1;
         spi_rec_mode =1;
      end
      store_SPI1: begin
         addr_write = 5'b00011 ;
         cs_ewrite = 1 ;
         buffer_spi_rec_en  =1;
         spi_rec_mode =1;
      end
      ST_wait_eop2: begin
         addr_write = 5'b00000;
         irq_elink_rec =1;
         spi_rec_mode =1;
      end
      store_SPI2: begin
         addr_write = 5'b00100 ;
         cs_ewrite = 1 ;
         buffer_spi_rec_en  =1;
         spi_rec_mode =1;
      end
      store_SPI3: begin
         addr_write = 5'b00101 ;
         cs_ewrite = 1 ;
         buffer_spi_rec_en  =1;
         spi_rec_mode =1;
      end
      st_write_data1: begin
         spi_rec_mode =1;
      end
      store_SOP1: begin
         addr_write = 5'b00001 ;
         cs_ewrite =1;
         spi_rec_mode =1;
      end
      store_Eop1: begin
         addr_write = 5'b01100 ;
         cs_ewrite =1;
         spi_rec_mode =1;
      end
      SPI0: begin
         addr_write = 5'b00010 ;
         spi_rec_mode =1;
      end
      SPI1: begin
         addr_write = 5'b00011 ;
         spi_rec_mode =1;
      end
      SPI2: begin
         addr_write = 5'b00100 ;
         spi_rec_mode =1;
      end
      SPI3: begin
         addr_write = 5'b00101 ;
         spi_rec_mode =1;
      end
      W_SOP1: begin
         addr_write = 5'b00001 ;
         spi_rec_mode =1;
      end
      W_Eop1: begin
         addr_write = 5'b01100 ;
         spi_rec_mode =1;
      end
      store_comma: begin
         addr_write = 5'b00000 ;
         cs_ewrite =1;
      end
      store_comma1: begin
         addr_write = 5'b00000 ;
         cs_ewrite =1;
         spi_rec_mode =1;
      end
      ST_end_write_en2: begin
         end_write_elink_dbg =1;
         dbg_rec_mode = 1'b1;
      end
      store_WB10: begin
         addr_write = 5'b00010 ;
         cs_ewrite = 1 ;
         buffer_rec_en =1;
         dbg_rec_mode = 1'b1;
      end
      store_WB11: begin
         addr_write = 5'b00011 ;
         cs_ewrite = 1 ;
         buffer_rec_en =1;
         dbg_rec_mode = 1'b1;
      end
      ST_wait_can_rq1: begin
         addr_write = 5'b00000;
         irq_elink_rec =1;
         dbg_rec_mode = 1'b1;
      end
      store_WB12: begin
         addr_write = 5'b01010 ;
         cs_ewrite = 1 ;
         buffer_rec_en =1;
         dbg_rec_mode = 1'b1;
      end
      store_WB13: begin
         addr_write = 5'b00100 ;
         cs_ewrite = 1 ;
         buffer_rec_en =1;
         dbg_rec_mode = 1'b1;
      end
      store_WB14: begin
         addr_write = 5'b01001 ;
         cs_ewrite = 1 ;
         buffer_rec_en =1;
         dbg_rec_mode = 1'b1;
      end
      store_WB15: begin
         addr_write = 5'b00101 ;
         cs_ewrite = 1 ;
         buffer_rec_en =1;
         dbg_rec_mode = 1'b1;
      end
      store_WB16: begin
         addr_write = 5'b01000 ;
         cs_ewrite = 1 ;
         buffer_rec_en =1;
         dbg_rec_mode = 1'b1;
      end
      store_WB17: begin
         addr_write = 5'b00110 ;
         cs_ewrite = 1 ;
         buffer_rec_en =1;
         dbg_rec_mode = 1'b1;
      end
      store_WB18: begin
         addr_write = 5'b00111 ;
         cs_ewrite = 1 ;
         buffer_rec_en =1;
         dbg_rec_mode = 1'b1;
      end
      store_SOP2: begin
         addr_write = 5'b00001 ;
         cs_ewrite =1;
         dbg_rec_mode = 1'b1;
      end
      store_WB19: begin
         addr_write = 5'b01011 ;
         cs_ewrite = 1 ;
         buffer_rec_en =1;
         dbg_rec_mode = 1'b1;
      end
      store_Eop2: begin
         addr_write = 5'b01100 ;
         cs_ewrite =1;
         dbg_rec_mode = 1'b1;
      end
      WB10: begin
         addr_write = 5'b00010 ;
         dbg_rec_mode = 1'b1;
      end
      WB11: begin
         addr_write = 5'b00011 ;
         dbg_rec_mode = 1'b1;
      end
      WB12: begin
         addr_write = 5'b00100 ;
         dbg_rec_mode = 1'b1;
      end
      WB13: begin
         addr_write = 5'b00101 ;
         dbg_rec_mode = 1'b1;
      end
      WB14: begin
         addr_write = 5'b00110 ;
         dbg_rec_mode = 1'b1;
      end
      WB15: begin
         addr_write = 5'b00111 ;
         dbg_rec_mode = 1'b1;
      end
      WB16: begin
         addr_write = 5'b01000 ;
         dbg_rec_mode = 1'b1;
      end
      WB17: begin
         addr_write = 5'b01001 ;
         dbg_rec_mode = 1'b1;
      end
      WB18: begin
         addr_write = 5'b01010 ;
         dbg_rec_mode = 1'b1;
      end
      WB19: begin
         addr_write = 5'b01011 ;
         dbg_rec_mode = 1'b1;
      end
      W_SOP2: begin
         addr_write = 5'b00001 ;
         dbg_rec_mode = 1'b1;
      end
      W_Eop2: begin
         addr_write = 5'b01100 ;
         dbg_rec_mode = 1'b1;
      end
      store_comma2: begin
         addr_write = 5'b00000 ;
         cs_ewrite =1;
         dbg_rec_mode = 1'b1;
      end
   endcase
end // Output Block

//-----------------------------------------------------------------
// Clocked Block for machine csm
//-----------------------------------------------------------------
always @(
   posedge clk
) 
begin : clocked_block_proc
   if (!rst) begin
      current_state <= ST_reset;
   end
   else if (timeoutrst) begin
      current_state <= ST_reset;
   end
   else if (abort) begin
      current_state <= ST_reset;
   end
   else 
   begin
      current_state <= next_state;
   end
end // Clocked Block

// State-As-Output assignment
always @(current_state)
statedeb = current_state;

endmodule // elink_interface_rec_SM
