//
// Module mopshub_lib.enc8b10b_wrap.struct
//
// Created:
//          by - dcs.dcs (chipdev2.physik.uni-wuppertal.de)
//          at - 14:05:15 03/10/22
//
// Generated by Mentor Graphics' HDL Designer(TM) 2019.4 (Build 4)
//

`resetall
`timescale 1ns/10ps
module enc8b10b_wrap( 
   // Port Declarations
   // Port Declarations
   input   wire           clk, 
   input   wire           rst, 
   input   wire    [1:0]  data_code, 
   input   wire    [7:0]  data_in, 
   input   wire           data_in_rdy, 
   output  wire    [9:0]  enc_10b_data_out, 
   input   wire    [7:0]  Kchar_comma, 
   input   wire    [7:0]  Kchar_eop, 
   input   wire    [7:0]  Kchar_sop, 
   input   wire    [9:0]  COMMAp,            // K28.1 3C
   input   wire    [9:0]  COMMAn             // K28.1 3C
);

// Internal Declarations


// Local declarations

// Internal signal declarations
// Internal Declarations


// Local declarations

// Internal signal declarations
reg   [9:0] enc_10b_data_out_r;
wire  [7:0] byte;
wire        KI;                   // -- Control (K) input(active high)
wire  [9:0] data_out;


// Instances 
//  Instances
// 
enc_8b10b enc_8b10b0( 
   .rst     (rst), 
   .clk     (clk), 
   .ena     (data_in_rdy), 
   .KI      (KI), 
   .datain  (byte), 
   .dataout (data_out)
); 

//  -------------------------------------------------------------------------------------------
//  -- data code cases
//  -- 00"data, 01"eop, 10"sop, 11"comma
//  -------------------------------------------------------------------------------------------
// 
// 
mux4_Nbit mux4_Nbit0( 
   .data0     (data_in), 
   .data1     (Kchar_eop), 
   .data2     (Kchar_sop), 
   .data3     (Kchar_comma), 
   .sel       (data_code), 
   .data_out  (byte), 
   .def_value (Kchar_comma)
); 

// HDL Embedded Text Block 5 eb5
assign KI        = data_code[1] | data_code[0]; //Control signal for the KI of the encoder (goes low if there is data i.e. code = 00, 01, 10)











// HDL Embedded Text Block 6 eb6
assign enc_10b_data_out = enc_10b_data_out_r;
always @ (posedge clk)
  if (!rst) enc_10b_data_out_r <=COMMAn;
  else 
  begin
    if (data_in == Kchar_comma && KI ==1) enc_10b_data_out_r <=COMMAn;
    else enc_10b_data_out_r <= data_out; 
  end













endmodule // enc8b10b_wrap
// enc8b10b_wrap
