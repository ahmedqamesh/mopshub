//
// Module mopshub_lib.enc8b10b_wrap.struct
//
// Created:
//          by - dcs.dcs (chipdev2.physik.uni-wuppertal.de)
//          at - 16:07:23 08/18/21
//
// Generated by Mentor Graphics' HDL Designer(TM) 2019.4 (Build 4)
//

`resetall
`timescale 1ns/10ps
module enc8b10b_wrap( 
   // Port Declarations
   // Port Declarations
   input   wire           clk, 
   input   wire           rst, 
   input   wire    [1:0]  dataCode,       // 00"data, 01"eop, 10"sop, 11"comma
   input   wire    [7:0]  dataIN, 
   input   wire           dataINrdy, 
   output  wire           encDataOutrdy, 
   output  wire    [9:0]  encDataOut
);

// Internal Declarations


// Local declarations

// Internal signal declarations
// Internal Declarations


// Local declarations

// Internal signal declarations
reg   [7:0] dataIN_s;
wire  [7:0] byte;
reg   [1:0] dataCode_s           = 2'b11;
wire  [7:0] Kchar_eop            = 8'b11011100;   // K28.6 DC
wire  [7:0] Kchar_sop            = 8'b00111100;   // K28.1 3C
wire  [7:0] Kchar_comma          = 8'b10111100;   //K28.5  BC
// --enaFall : in std_logic ;
// --SBYTECLK : in std_logic ;	-- Master synchronous send byte clock
reg         isk                  = 1;             // -- Control (K) input(active high)
wire        encoder_rst;
wire        enc_ena_s;
wire        dataINrdy_s;
reg         enc_ena              = 1;
reg         encoder_rst_delayed  = 1;
reg         encoder_rst_clk1     = 1;
reg         encDataOutrdy_r;


// Instances 
//  Instances
// 
enc_8b10b enc_8b10b0( 
   .reset   (encoder_rst), 
   .clk     (clk), 
   .ena     (enc_ena_s), 
   .KI      (isk), 
   .datain  (byte), 
   .dataout (encDataOut)
); 

//  -------------------------------------------------------------------------------------------
//  -- data code cases
//  -- 00"data, 01"eop, 10"sop, 11"comma
//  -------------------------------------------------------------------------------------------
// 
// 
mux4_Nbit #(8) mux4_Nbit0( 
   .data0    (dataIN_s), 
   .data1    (Kchar_eop), 
   .data2    (Kchar_sop), 
   .data3    (Kchar_comma), 
   .sel      (dataCode_s), 
   .data_out (byte)
); 

// HDL Embedded Text Block 1 eb1
// output Trig signal will enable reading from fifo (rd_en=1)
// 
//  ### Please start your Verilog code here ###

// HDL Embedded Text Block 1 in_reg
// in_reg 1 
//Part realted to ISK, Data and Data code to the encoder                                       
always @(posedge clk) //read from memory
  begin    
    if(dataINrdy_s == 1)// Receive a signal that data is ready
      begin
            dataIN_s    <= dataIN;
            dataCode_s  <= dataCode;
            isk         <= dataCode[1] | dataCode[0]; //Control signal for the KI of the encoder (goes low if there is data i.e. code = 00, 01, 10)
      end
  end
// HDL Embedded Text Block 2 eb2
// HDL Embedded Text Block 2 enc_rst_sig
// eb1 2         
assign encoder_rst = rst;//(rst_state |rst);
// HDL Embedded Text Block 3 eb1
// eb1 3
//Assign the  dataINrdy signal to be used later as output
assign dataINrdy_s = dataINrdy & (!encoder_rst);

// HDL Embedded Text Block 4 eb4
// HDL Embedded Text Block 5 enc_enable
// eb2 5
assign  enc_ena_s = enc_ena | encoder_rst_delayed;
// HDL Embedded Text Block 5 eb5
// HDL Embedded Text Block 6 encoder_rst
// encoder_rst 6  
//enable the decoder at the  negative edge of the clock
always @(posedge clk) //Still not sure about that Qamesh 16/3 2021 
  begin    
    enc_ena <= dataINrdy_s | encoder_rst; // whenever a data is ready or a rest signal received
    encoder_rst_clk1 <= encoder_rst;
    encoder_rst_delayed <= encoder_rst_clk1;
  end
// HDL Embedded Text Block 6 eb6
// HDL Embedded Text Block 7 rdy_out
// rdy_out 7
//output signal  encDataOutrdy to show that data is ready after the decoder                              
always @(posedge clk) 
if (rst)
encDataOutrdy_r <=0;
else
  begin    
    encDataOutrdy_r <= dataINrdy_s & (! encoder_rst);
  end
// HDL Embedded Text Block 7 eb7
// HDL Embedded Text Block 8 enc_doutrdy
// enc_doutrdy 8  
assign  encDataOutrdy = encDataOutrdy_r;

endmodule // enc8b10b_wrap
// enc8b10b_wrap
