//
// Module mopshub_lib.elink_interface_tra_sm.fsm
//
// Created:
//          by - dcs.dcs (chipdev2.physik.uni-wuppertal.de)
//          at - 11:26:22 08/09/23
//
// Generated by Mentor Graphics' HDL Designer(TM) 2019.4 (Build 4)
//
`resetall
`timescale 1ns/10ps
module elink_interface_tra_sm( 
   // Port Declarations
   input   wire           abort,                  // Upon receiving a reset message on the CANbus. FSM goes into a known state
   input   wire           clk,                    // posedge
   input   wire           endwait, 
   input   wire           rst,                    // synchronous low active
   input   wire           sign_on_signal, 
   input   wire           start_write_elink,      // request from bridge FSM
   input   wire           start_write_elink_dbg, 
   input   wire           start_write_elink_spi, 
   input   wire           timeoutrst,             // timeout reset signal to the state machine in case bridge controller is not respoding for a specified time
   input   wire           tx_efifo_full, 
   output  reg     [4:0]  addr_write,             // request to caninterface block
   output  reg            buffer_rec_en, 
   output  reg            buffer_spi_rec_en, 
   output  reg            can_rec_mode, 
   output  reg            cs_ewrite, 
   output  reg            dbg_rec_mode, 
   output  reg            end_write_elink,        // request to bridge FSM
   output  reg            end_write_elink_dbg, 
   output  reg            end_write_elink_spi, 
   output  reg            entimeout,              // enable for timeout reset counter 
   output  reg            irq_elink_rec, 
   output  reg            rst_mopshub_mode, 
   output  reg            spi_rec_mode, 
   output  reg            start_read_eth_fifo, 
   output  reg     [7:0]  statedeb
);

//tmrg default triplicate
//tmrg tmr_error false
// Internal Declarations


// Module Declarations

// State encoding
parameter 
          ST_waittoact        = 7'd0,
          ST_reset            = 7'd1,
          ST_end_write_en     = 7'd2,
          store_WB0           = 7'd3,
          store_WB1           = 7'd4,
          ST_wait_can_rq      = 7'd5,
          store_WB8           = 7'd6,
          store_WB2           = 7'd7,
          store_WB7           = 7'd8,
          store_WB3           = 7'd9,
          store_WB6           = 7'd10,
          store_WB4           = 7'd11,
          store_WB5           = 7'd12,
          st_write_data       = 7'd13,
          store_SOP           = 7'd14,
          store_WB9           = 7'd15,
          store_Eop           = 7'd16,
          WB0                 = 7'd17,
          WB1                 = 7'd18,
          WB2                 = 7'd19,
          WB3                 = 7'd20,
          WB4                 = 7'd21,
          WB5                 = 7'd22,
          WB6                 = 7'd23,
          WB7                 = 7'd24,
          WB8                 = 7'd25,
          WB9                 = 7'd26,
          W_SOP               = 7'd27,
          W_Eop               = 7'd28,
          ST_end_write_en_SPI = 7'd29,
          store_SPI0          = 7'd30,
          store_SPI1          = 7'd31,
          ST_wait_can_rq_SPI  = 7'd32,
          store_SPI2          = 7'd33,
          store_SPI3          = 7'd34,
          st_write_data_SPI   = 7'd35,
          store_SOP_SPI       = 7'd36,
          store_Eop1          = 7'd37,
          SPI0                = 7'd38,
          SPI1                = 7'd39,
          SPI2                = 7'd40,
          SPI3                = 7'd41,
          W_SOP1              = 7'd42,
          W_Eop1              = 7'd43,
          store_Comma         = 7'd44,
          store_comma1        = 7'd45,
          ST_end_write_en_DBG = 7'd46,
          store_WB0_DBG       = 7'd47,
          store_WB1_DBG       = 7'd48,
          ST_wait_can_rq_DBG  = 7'd49,
          store_WB8_DBG       = 7'd50,
          store_WB2_DBG       = 7'd51,
          store_WB7_DBG       = 7'd52,
          store_WB3_DBG       = 7'd53,
          store_WB6_DBG       = 7'd54,
          store_WB4_DBG       = 7'd55,
          store_WB5_DBG       = 7'd56,
          st_write_data_DBG   = 7'd57,
          store_SOP_DBG       = 7'd58,
          store_WB9_DBG       = 7'd59,
          Store_Eop_DBG       = 7'd60,
          WB0_DBG             = 7'd61,
          WB1_DBG             = 7'd62,
          WB2_DBG             = 7'd63,
          WB3_DBG             = 7'd64,
          WB4_DBG             = 7'd65,
          WB5_DBG             = 7'd66,
          WB6_DBG             = 7'd67,
          WB7_DBG             = 7'd68,
          WB8_DBG             = 7'd69,
          WB9_DBG             = 7'd70,
          W_SOP_DBG           = 7'd71,
          W_Eop_DBG           = 7'd72,
          Store_Comma_DBG     = 7'd73,
          store_WB21          = 7'd74,
          WB21                = 7'd75,
          store_WB23          = 7'd76,
          WB23                = 7'd77,
          store_WB25          = 7'd78,
          WB24                = 7'd79,
          WB25                = 7'd80,
          store_WB26          = 7'd81,
          store_WB27          = 7'd82,
          WB26                = 7'd83,
          store_WB28          = 7'd84,
          WB27                = 7'd85,
          ST_end_write_en_rst = 7'd86,
          store_WB0_rst       = 7'd87,
          store_WB1_rst       = 7'd88,
          ST_wait_can_rq_rst  = 7'd89,
          store_WB8_rst       = 7'd90,
          store_WB2_rst       = 7'd91,
          store_WB7_rst       = 7'd92,
          store_WB3_rst       = 7'd93,
          store_WB6_rst       = 7'd94,
          store_WB4_rst       = 7'd95,
          store_WB5_rst       = 7'd96,
          st_write_data_rst   = 7'd97,
          store_SOP_rst       = 7'd98,
          store_WB9_rst       = 7'd99,
          store_Eop_rst       = 7'd100,
          WB0_rst             = 7'd101,
          WB1_rst             = 7'd102,
          WB2_rst             = 7'd103,
          WB3_rst             = 7'd104,
          WB4_rst             = 7'd105,
          WB5_rst             = 7'd106,
          WB6_rst             = 7'd107,
          WB7_rst             = 7'd108,
          WB8_rst             = 7'd109,
          WB9_rst             = 7'd110,
          W_SOP_rst           = 7'd111,
          W_Eop_rst           = 7'd112,
          store_comma_rst     = 7'd113,
          ST_endwait          = 7'd114,
          W_Comma             = 7'd115,
          W_Comma_DBG         = 7'd116,
          W_Comma_rst         = 7'd117,
          W_Comma3            = 7'd118;

reg [6:0] current_state, next_state;

// Wait State Signals
reg [1:0] csm_timer;
reg [1:0] csm_next_timer;
reg       csm_timeout;
reg       csm_to_store_Comma;

//-----------------------------------------------------------------
// Next State Block for machine csm
//-----------------------------------------------------------------
always @(
   current_state, 
   rst, 
   sign_on_signal, 
   start_write_elink, 
   start_write_elink_dbg, 
   start_write_elink_spi, 
   tx_efifo_full
)
begin : next_state_block_proc
   // Default assignments to Wait State entry flags
   csm_to_store_Comma = 1'b0;
   case (current_state) 
      ST_waittoact: begin
         if (start_write_elink == 1)
            next_state = st_write_data;
         else if (start_write_elink_spi ==1)
            next_state = st_write_data_SPI;
         else if (start_write_elink_dbg == 1)
            next_state = st_write_data_DBG;
         else if (sign_on_signal == 1)
            next_state = st_write_data_rst;
         else
            next_state = ST_waittoact;
      end
      ST_reset: begin
         if (rst == 1)
            next_state = ST_waittoact;
         else
            next_state = ST_reset;
      end
      ST_end_write_en: begin
         next_state = ST_waittoact;
      end
      store_WB0: begin
         next_state = WB1;
      end
      store_WB1: begin
         next_state = WB2;
      end
      ST_wait_can_rq: begin
         next_state = ST_end_write_en;
      end
      store_WB8: begin
         next_state = WB9;
      end
      store_WB2: begin
         next_state = WB3;
      end
      store_WB7: begin
         next_state = WB8;
      end
      store_WB3: begin
         next_state = WB4;
      end
      store_WB6: begin
         next_state = WB7;
      end
      store_WB4: begin
         next_state = WB5;
      end
      store_WB5: begin
         next_state = WB6;
      end
      st_write_data: begin
         next_state = W_SOP;
      end
      store_SOP: begin
         next_state = WB0;
      end
      store_WB9: begin
         next_state = W_Eop;
      end
      store_Eop: begin
         next_state = W_Comma;
      end
      WB0: begin
         if (!tx_efifo_full)
            next_state = store_WB0;
         else
            next_state = WB0;
      end
      WB1: begin
         if (!tx_efifo_full)
            next_state = store_WB1;
         else
            next_state = WB1;
      end
      WB2: begin
         if (!tx_efifo_full)
            next_state = store_WB2;
         else
            next_state = WB2;
      end
      WB3: begin
         if (!tx_efifo_full)
            next_state = store_WB3;
         else
            next_state = WB3;
      end
      WB4: begin
         if (!tx_efifo_full)
            next_state = store_WB4;
         else
            next_state = WB4;
      end
      WB5: begin
         if (!tx_efifo_full)
            next_state = store_WB5;
         else
            next_state = WB5;
      end
      WB6: begin
         if (!tx_efifo_full)
            next_state = store_WB6;
         else
            next_state = WB6;
      end
      WB7: begin
         if (!tx_efifo_full)
            next_state = store_WB7;
         else
            next_state = WB7;
      end
      WB8: begin
         if (!tx_efifo_full)
            next_state = store_WB8;
         else
            next_state = WB8;
      end
      WB9: begin
         if (!tx_efifo_full)
            next_state = store_WB9;
         else
            next_state = WB9;
      end
      W_SOP: begin
         if (!tx_efifo_full)
            next_state = store_SOP;
         else
            next_state = W_SOP;
      end
      W_Eop: begin
         if (!tx_efifo_full)
            next_state = store_Eop;
         else
            next_state = W_Eop;
      end
      ST_end_write_en_SPI: begin
         next_state = ST_waittoact;
      end
      store_SPI0: begin
         next_state = SPI1;
      end
      store_SPI1: begin
         next_state = SPI2;
      end
      ST_wait_can_rq_SPI: begin
         next_state = ST_end_write_en_SPI;
      end
      store_SPI2: begin
         next_state = SPI3;
      end
      store_SPI3: begin
         next_state = WB24;
      end
      st_write_data_SPI: begin
         next_state = W_SOP1;
      end
      store_SOP_SPI: begin
         next_state = SPI0;
      end
      store_Eop1: begin
         next_state = W_Comma3;
      end
      SPI0: begin
         if (!tx_efifo_full)
            next_state = store_SPI0;
         else
            next_state = SPI0;
      end
      SPI1: begin
         if (!tx_efifo_full)
            next_state = store_SPI1;
         else
            next_state = SPI1;
      end
      SPI2: begin
         if (!tx_efifo_full)
            next_state = store_SPI2;
         else
            next_state = SPI2;
      end
      SPI3: begin
         if (!tx_efifo_full)
            next_state = store_SPI3;
         else
            next_state = SPI3;
      end
      W_SOP1: begin
         if (!tx_efifo_full)
            next_state = store_SOP_SPI;
         else
            next_state = W_SOP1;
      end
      W_Eop1: begin
         if (!tx_efifo_full)
            next_state = store_Eop1;
         else
            next_state = W_Eop1;
      end
      store_Comma: begin
         next_state = ST_wait_can_rq;
      end
      store_comma1: begin
         next_state = ST_wait_can_rq_SPI;
      end
      ST_end_write_en_DBG: begin
         next_state = ST_waittoact;
      end
      store_WB0_DBG: begin
         next_state = WB1_DBG;
      end
      store_WB1_DBG: begin
         next_state = WB2_DBG;
      end
      ST_wait_can_rq_DBG: begin
         next_state = ST_end_write_en_DBG;
      end
      store_WB8_DBG: begin
         next_state = WB9_DBG;
      end
      store_WB2_DBG: begin
         next_state = WB3_DBG;
      end
      store_WB7_DBG: begin
         next_state = WB8_DBG;
      end
      store_WB3_DBG: begin
         next_state = WB4_DBG;
      end
      store_WB6_DBG: begin
         next_state = WB7_DBG;
      end
      store_WB4_DBG: begin
         next_state = WB5_DBG;
      end
      store_WB5_DBG: begin
         next_state = WB6_DBG;
      end
      st_write_data_DBG: begin
         next_state = W_SOP_DBG;
      end
      store_SOP_DBG: begin
         next_state = WB0_DBG;
      end
      store_WB9_DBG: begin
         next_state = W_Eop_DBG;
      end
      Store_Eop_DBG: begin
         next_state = W_Comma_DBG;
      end
      WB0_DBG: begin
         if (!tx_efifo_full)
            next_state = store_WB0_DBG;
         else
            next_state = WB0_DBG;
      end
      WB1_DBG: begin
         if (!tx_efifo_full)
            next_state = store_WB1_DBG;
         else
            next_state = WB1_DBG;
      end
      WB2_DBG: begin
         if (!tx_efifo_full)
            next_state = store_WB2_DBG;
         else
            next_state = WB2_DBG;
      end
      WB3_DBG: begin
         if (!tx_efifo_full)
            next_state = store_WB3_DBG;
         else
            next_state = WB3_DBG;
      end
      WB4_DBG: begin
         if (!tx_efifo_full)
            next_state = store_WB4_DBG;
         else
            next_state = WB4_DBG;
      end
      WB5_DBG: begin
         if (!tx_efifo_full)
            next_state = store_WB5_DBG;
         else
            next_state = WB5_DBG;
      end
      WB6_DBG: begin
         if (!tx_efifo_full)
            next_state = store_WB6_DBG;
         else
            next_state = WB6_DBG;
      end
      WB7_DBG: begin
         if (!tx_efifo_full)
            next_state = store_WB7_DBG;
         else
            next_state = WB7_DBG;
      end
      WB8_DBG: begin
         if (!tx_efifo_full)
            next_state = store_WB8_DBG;
         else
            next_state = WB8_DBG;
      end
      WB9_DBG: begin
         if (!tx_efifo_full)
            next_state = store_WB9_DBG;
         else
            next_state = WB9_DBG;
      end
      W_SOP_DBG: begin
         if (!tx_efifo_full)
            next_state = store_SOP_DBG;
         else
            next_state = W_SOP_DBG;
      end
      W_Eop_DBG: begin
         if (!tx_efifo_full)
            next_state = Store_Eop_DBG;
         else
            next_state = W_Eop_DBG;
      end
      Store_Comma_DBG: begin
         if (!tx_efifo_full)
            next_state = ST_wait_can_rq_DBG;
         else
            next_state = Store_Comma_DBG;
      end
      store_WB21: begin
         next_state = W_Eop1;
      end
      WB21: begin
         if (!tx_efifo_full)
            next_state = store_WB21;
         else
            next_state = WB21;
      end
      store_WB23: begin
         next_state = WB21;
      end
      WB23: begin
         if (!tx_efifo_full)
            next_state = store_WB23;
         else
            next_state = WB23;
      end
      store_WB25: begin
         next_state = WB23;
      end
      WB24: begin
         if (!tx_efifo_full)
            next_state = store_WB26;
         else
            next_state = WB24;
      end
      WB25: begin
         if (!tx_efifo_full)
            next_state = store_WB25;
         else
            next_state = WB25;
      end
      store_WB26: begin
         next_state = WB26;
      end
      store_WB27: begin
         next_state = WB25;
      end
      WB26: begin
         if (!tx_efifo_full)
            next_state = store_WB28;
         else
            next_state = WB26;
      end
      store_WB28: begin
         next_state = WB27;
      end
      WB27: begin
         if (!tx_efifo_full)
            next_state = store_WB27;
         else
            next_state = WB27;
      end
      ST_end_write_en_rst: begin
         next_state = ST_waittoact;
      end
      store_WB0_rst: begin
         next_state = WB1_rst;
      end
      store_WB1_rst: begin
         next_state = WB2_rst;
      end
      ST_wait_can_rq_rst: begin
         next_state = ST_end_write_en_rst;
      end
      store_WB8_rst: begin
         next_state = WB9_rst;
      end
      store_WB2_rst: begin
         next_state = WB3_rst;
      end
      store_WB7_rst: begin
         next_state = WB8_rst;
      end
      store_WB3_rst: begin
         next_state = WB4_rst;
      end
      store_WB6_rst: begin
         next_state = WB7_rst;
      end
      store_WB4_rst: begin
         next_state = WB5_rst;
      end
      store_WB5_rst: begin
         next_state = WB6_rst;
      end
      st_write_data_rst: begin
         next_state = W_SOP_rst;
      end
      store_SOP_rst: begin
         next_state = WB0_rst;
      end
      store_WB9_rst: begin
         next_state = W_Eop_rst;
      end
      store_Eop_rst: begin
         next_state = W_Comma_rst;
      end
      WB0_rst: begin
         if (!tx_efifo_full)
            next_state = store_WB0_rst;
         else
            next_state = WB0_rst;
      end
      WB1_rst: begin
         if (!tx_efifo_full)
            next_state = store_WB1_rst;
         else
            next_state = WB1_rst;
      end
      WB2_rst: begin
         if (!tx_efifo_full)
            next_state = store_WB2_rst;
         else
            next_state = WB2_rst;
      end
      WB3_rst: begin
         if (!tx_efifo_full)
            next_state = store_WB3_rst;
         else
            next_state = WB3_rst;
      end
      WB4_rst: begin
         if (!tx_efifo_full)
            next_state = store_WB4_rst;
         else
            next_state = WB4_rst;
      end
      WB5_rst: begin
         if (!tx_efifo_full)
            next_state = store_WB5_rst;
         else
            next_state = WB5_rst;
      end
      WB6_rst: begin
         if (!tx_efifo_full)
            next_state = store_WB6_rst;
         else
            next_state = WB6_rst;
      end
      WB7_rst: begin
         if (!tx_efifo_full)
            next_state = store_WB7_rst;
         else
            next_state = WB7_rst;
      end
      WB8_rst: begin
         if (!tx_efifo_full)
            next_state = store_WB8_rst;
         else
            next_state = WB8_rst;
      end
      WB9_rst: begin
         if (!tx_efifo_full)
            next_state = store_WB9_rst;
         else
            next_state = WB9_rst;
      end
      W_SOP_rst: begin
         if (!tx_efifo_full)
            next_state = store_SOP_rst;
         else
            next_state = W_SOP_rst;
      end
      W_Eop_rst: begin
         if (!tx_efifo_full)
            next_state = store_Eop_rst;
         else
            next_state = W_Eop_rst;
      end
      store_comma_rst: begin
         next_state = ST_wait_can_rq_rst;
      end
      ST_endwait: begin
         next_state = ST_waittoact;
      end
      W_Comma: begin
         if (!tx_efifo_full) begin
            next_state = store_Comma;
            csm_to_store_Comma = 1'b1;
         end
         else
            next_state = W_Comma;
      end
      W_Comma_DBG: begin
         if (!tx_efifo_full)
            next_state = Store_Comma_DBG;
         else
            next_state = W_Comma_DBG;
      end
      W_Comma_rst: begin
         if (!tx_efifo_full)
            next_state = store_comma_rst;
         else
            next_state = W_Comma_rst;
      end
      W_Comma3: begin
         if (!tx_efifo_full)
            next_state = store_comma1;
         else
            next_state = W_Comma3;
      end
      default: 
         next_state = ST_reset;
   endcase
end // Next State Block

//-----------------------------------------------------------------
// Output Block for machine csm
//-----------------------------------------------------------------
always @(
   current_state
)
begin : output_block_proc
   // Default Assignment
   addr_write = 5'b0;
   buffer_rec_en = 0;
   buffer_spi_rec_en = 0;
   can_rec_mode = 0;
   cs_ewrite = 0;
   dbg_rec_mode = 0;
   end_write_elink = 0;
   end_write_elink_dbg = 0;
   end_write_elink_spi = 0;
   entimeout = 1;
   irq_elink_rec = 0;
   rst_mopshub_mode = 0;
   spi_rec_mode = 0;
   start_read_eth_fifo = 0;

   // Combined Actions
   case (current_state) 
      ST_waittoact: begin
         entimeout = 0 ;
      end
      ST_reset: begin
         spi_rec_mode =0;
         entimeout = 0 ;
      end
      ST_end_write_en: begin
         end_write_elink =1;
         can_rec_mode=1;
      end
      store_WB0: begin
         addr_write = 5'h2;
         cs_ewrite = 1 ;
         buffer_rec_en =1;
         can_rec_mode=1;
      end
      store_WB1: begin
         addr_write = 5'h3;
         cs_ewrite = 1 ;
         buffer_rec_en =1;
         can_rec_mode=1;
      end
      ST_wait_can_rq: begin
         addr_write = 5'b00000;
         irq_elink_rec =1;
         can_rec_mode=1;
      end
      store_WB8: begin
         addr_write = 5'hA ;
         cs_ewrite = 1 ;
         buffer_rec_en =1;
         can_rec_mode=1;
      end
      store_WB2: begin
         addr_write = 5'h4;
         cs_ewrite = 1 ;
         buffer_rec_en =1;
         can_rec_mode=1;
      end
      store_WB7: begin
         addr_write = 5'h9 ;
         cs_ewrite = 1 ;
         buffer_rec_en =1;
         can_rec_mode=1;
      end
      store_WB3: begin
         addr_write = 5'h5 ;
         cs_ewrite = 1 ;
         buffer_rec_en =1;
         can_rec_mode=1;
      end
      store_WB6: begin
         addr_write = 5'h8;
         cs_ewrite = 1 ;
         buffer_rec_en =1;
         can_rec_mode=1;
      end
      store_WB4: begin
         addr_write = 5'h6;
         cs_ewrite = 1 ;
         buffer_rec_en =1;
         can_rec_mode=1;
      end
      store_WB5: begin
         addr_write = 5'h7;
         cs_ewrite = 1 ;
         buffer_rec_en =1;
         can_rec_mode=1;
      end
      st_write_data: begin
         can_rec_mode =1;
      end
      store_SOP: begin
         addr_write = 5'h1 ;
         cs_ewrite =1;
         can_rec_mode=1;
      end
      store_WB9: begin
         addr_write = 5'hB;
         cs_ewrite = 1 ;
         buffer_rec_en =1;
         can_rec_mode=1;
      end
      store_Eop: begin
         addr_write = 5'hC;
         cs_ewrite =1;
         can_rec_mode=1;
      end
      WB0: begin
         addr_write = 5'h2;
         can_rec_mode=1;
      end
      WB1: begin
         addr_write = 5'h3;
         can_rec_mode=1;
      end
      WB2: begin
         addr_write = 5'h4 ;
         can_rec_mode=1;
      end
      WB3: begin
         addr_write = 5'h5 ;
         can_rec_mode=1;
      end
      WB4: begin
         addr_write = 5'h6 ;
         can_rec_mode=1;
      end
      WB5: begin
         addr_write = 5'h7 ;
         can_rec_mode=1;
      end
      WB6: begin
         addr_write = 5'h8;
         can_rec_mode=1;
      end
      WB7: begin
         addr_write = 5'h9 ;
         can_rec_mode=1;
      end
      WB8: begin
         addr_write = 5'hA ;
         can_rec_mode=1;
      end
      WB9: begin
         addr_write = 5'hB;
         can_rec_mode=1;
      end
      W_SOP: begin
         addr_write = 5'h1 ;
         can_rec_mode=1;
      end
      W_Eop: begin
         addr_write = 5'hC;
         can_rec_mode=1;
      end
      ST_end_write_en_SPI: begin
         end_write_elink_spi =1;
         spi_rec_mode =1;
      end
      store_SPI0: begin
         addr_write = 5'h2;
         cs_ewrite = 1 ;
         buffer_spi_rec_en  =1;
         spi_rec_mode =1;
      end
      store_SPI1: begin
         addr_write = 5'h3;
         cs_ewrite = 1 ;
         buffer_spi_rec_en  =1;
         spi_rec_mode =1;
      end
      ST_wait_can_rq_SPI: begin
         addr_write = 5'b00000;
         irq_elink_rec =1;
         spi_rec_mode =1;
      end
      store_SPI2: begin
         addr_write = 5'h4;
         cs_ewrite = 1 ;
         buffer_spi_rec_en  =1;
         spi_rec_mode =1;
      end
      store_SPI3: begin
         addr_write = 5'h5;
         cs_ewrite = 1 ;
         buffer_spi_rec_en  =1;
         spi_rec_mode =1;
      end
      st_write_data_SPI: begin
         spi_rec_mode =1;
      end
      store_SOP_SPI: begin
         addr_write = 5'h1  ;
         cs_ewrite =1;
         spi_rec_mode =1;
      end
      store_Eop1: begin
         addr_write = 5'hC;
         cs_ewrite =1;
         buffer_spi_rec_en  =1;
         spi_rec_mode =1;
      end
      SPI0: begin
         addr_write = 5'h2;
         spi_rec_mode =1;
      end
      SPI1: begin
         addr_write = 5'h3;
         spi_rec_mode =1;
      end
      SPI2: begin
         addr_write = 5'h4;
         spi_rec_mode =1;
      end
      SPI3: begin
         addr_write = 5'h5;
         spi_rec_mode =1;
      end
      W_SOP1: begin
         addr_write = 5'h1 ;
         spi_rec_mode =1;
      end
      W_Eop1: begin
         addr_write = 5'hC;
         spi_rec_mode =1;
      end
      store_Comma: begin
         addr_write = 5'h0;
         cs_ewrite =1;
         can_rec_mode=1;
         buffer_rec_en =1;
      end
      store_comma1: begin
         addr_write = 5'h0;
         cs_ewrite =1;
         buffer_spi_rec_en  =1;
         spi_rec_mode =1;
      end
      ST_end_write_en_DBG: begin
         end_write_elink_dbg =1;
         dbg_rec_mode = 1'b1;
      end
      store_WB0_DBG: begin
         addr_write = 5'b00010 ;
         cs_ewrite = 1 ;
         buffer_rec_en =1;
         dbg_rec_mode = 1'b1;
      end
      store_WB1_DBG: begin
         addr_write = 5'b00011 ;
         cs_ewrite = 1 ;
         buffer_rec_en =1;
         dbg_rec_mode = 1'b1;
      end
      ST_wait_can_rq_DBG: begin
         addr_write = 5'b00000;
         irq_elink_rec =1;
         dbg_rec_mode = 1'b1;
      end
      store_WB8_DBG: begin
         addr_write = 5'b01010 ;
         cs_ewrite = 1 ;
         buffer_rec_en =1;
         dbg_rec_mode = 1'b1;
      end
      store_WB2_DBG: begin
         addr_write = 5'b00100 ;
         cs_ewrite = 1 ;
         buffer_rec_en =1;
         dbg_rec_mode = 1'b1;
      end
      store_WB7_DBG: begin
         addr_write = 5'b01001 ;
         cs_ewrite = 1 ;
         buffer_rec_en =1;
         dbg_rec_mode = 1'b1;
      end
      store_WB3_DBG: begin
         addr_write = 5'b00101 ;
         cs_ewrite = 1 ;
         buffer_rec_en =1;
         dbg_rec_mode = 1'b1;
      end
      store_WB6_DBG: begin
         addr_write = 5'b01000 ;
         cs_ewrite = 1 ;
         buffer_rec_en =1;
         dbg_rec_mode = 1'b1;
      end
      store_WB4_DBG: begin
         addr_write = 5'b00110 ;
         cs_ewrite = 1 ;
         buffer_rec_en =1;
         dbg_rec_mode = 1'b1;
      end
      store_WB5_DBG: begin
         addr_write = 5'b00111 ;
         cs_ewrite = 1 ;
         buffer_rec_en =1;
         dbg_rec_mode = 1'b1;
      end
      st_write_data_DBG: begin
         dbg_rec_mode = 1'b1;
         start_read_eth_fifo =1'b1;
      end
      store_SOP_DBG: begin
         addr_write = 5'b00001 ;
         cs_ewrite =1;
         dbg_rec_mode = 1'b1;
      end
      store_WB9_DBG: begin
         addr_write = 5'b01011 ;
         cs_ewrite = 1 ;
         buffer_rec_en =1;
         dbg_rec_mode = 1'b1;
      end
      Store_Eop_DBG: begin
         addr_write = 5'b01100 ;
         cs_ewrite =1;
         buffer_rec_en =1;
         dbg_rec_mode = 1'b1;
      end
      WB0_DBG: begin
         addr_write = 5'b00010 ;
         dbg_rec_mode = 1'b1;
      end
      WB1_DBG: begin
         addr_write = 5'b00011 ;
         dbg_rec_mode = 1'b1;
      end
      WB2_DBG: begin
         addr_write = 5'b00100 ;
         dbg_rec_mode = 1'b1;
      end
      WB3_DBG: begin
         addr_write = 5'b00101 ;
         dbg_rec_mode = 1'b1;
      end
      WB4_DBG: begin
         addr_write = 5'b00110 ;
         dbg_rec_mode = 1'b1;
      end
      WB5_DBG: begin
         addr_write = 5'b00111 ;
         dbg_rec_mode = 1'b1;
      end
      WB6_DBG: begin
         addr_write = 5'b01000 ;
         dbg_rec_mode = 1'b1;
      end
      WB7_DBG: begin
         addr_write = 5'b01001 ;
         dbg_rec_mode = 1'b1;
      end
      WB8_DBG: begin
         addr_write = 5'b01010 ;
         dbg_rec_mode = 1'b1;
      end
      WB9_DBG: begin
         addr_write = 5'b01011 ;
         dbg_rec_mode = 1'b1;
      end
      W_SOP_DBG: begin
         addr_write = 5'b00001 ;
         dbg_rec_mode = 1'b1;
      end
      W_Eop_DBG: begin
         addr_write = 5'b01100 ;
         dbg_rec_mode = 1'b1;
      end
      Store_Comma_DBG: begin
         addr_write = 5'h0;
         cs_ewrite =1;
         buffer_rec_en =1;
         dbg_rec_mode = 1'b1;
      end
      store_WB21: begin
         addr_write = 5'hB;
         cs_ewrite = 1 ;
         buffer_spi_rec_en  =1;
         spi_rec_mode =1;
      end
      WB21: begin
         addr_write = 5'hB;
         spi_rec_mode =1;
      end
      store_WB23: begin
         addr_write = 5'hA;
         cs_ewrite = 1 ;
         buffer_spi_rec_en  =1;
         spi_rec_mode =1;
      end
      WB23: begin
         addr_write = 5'hA;
         spi_rec_mode =1;
      end
      store_WB25: begin
         addr_write = 5'h9;
         cs_ewrite = 1 ;
         buffer_spi_rec_en  =1;
         spi_rec_mode =1;
      end
      WB24: begin
         addr_write = 5'h6;
         spi_rec_mode =1;
      end
      WB25: begin
         addr_write = 5'h9;
         spi_rec_mode =1;
      end
      store_WB26: begin
         addr_write = 5'h6;
         cs_ewrite = 1 ;
         buffer_spi_rec_en  =1;
         spi_rec_mode =1;
      end
      store_WB27: begin
         addr_write = 5'h8;
         cs_ewrite = 1 ;
         buffer_spi_rec_en  =1;
         spi_rec_mode =1;
      end
      WB26: begin
         addr_write = 5'h7;
         spi_rec_mode =1;
      end
      store_WB28: begin
         addr_write = 5'h7;
         cs_ewrite = 1 ;
         buffer_spi_rec_en  =1;
         spi_rec_mode =1;
      end
      WB27: begin
         addr_write = 5'h8;
         spi_rec_mode =1;
      end
      ST_end_write_en_rst: begin
         end_write_elink =1;
         rst_mopshub_mode=1;
      end
      store_WB0_rst: begin
         addr_write = 5'h2;
         cs_ewrite = 1 ;
         buffer_rec_en =1;
         rst_mopshub_mode=1;
      end
      store_WB1_rst: begin
         addr_write = 5'h3;
         cs_ewrite = 1 ;
         buffer_rec_en =1;
         rst_mopshub_mode=1;
      end
      ST_wait_can_rq_rst: begin
         addr_write = 5'b00000;
         irq_elink_rec =1;
         rst_mopshub_mode=1;
      end
      store_WB8_rst: begin
         addr_write = 5'hA;
         cs_ewrite = 1 ;
         buffer_rec_en =1;
         rst_mopshub_mode=1;
      end
      store_WB2_rst: begin
         addr_write = 5'h4 ;
         cs_ewrite = 1 ;
         buffer_rec_en =1;
         rst_mopshub_mode=1;
      end
      store_WB7_rst: begin
         addr_write = 5'h9 ;
         cs_ewrite = 1 ;
         buffer_rec_en =1;
         rst_mopshub_mode=1;
      end
      store_WB3_rst: begin
         addr_write = 5'h5;
         cs_ewrite = 1 ;
         buffer_rec_en =1;
         rst_mopshub_mode=1;
      end
      store_WB6_rst: begin
         addr_write = 5'h8;
         cs_ewrite = 1 ;
         buffer_rec_en =1;
         rst_mopshub_mode=1;
      end
      store_WB4_rst: begin
         addr_write = 5'h6;
         cs_ewrite = 1 ;
         buffer_rec_en =1;
         rst_mopshub_mode=1;
      end
      store_WB5_rst: begin
         addr_write = 5'h7;
         cs_ewrite = 1 ;
         buffer_rec_en =1;
         rst_mopshub_mode=1;
      end
      st_write_data_rst: begin
         rst_mopshub_mode =1;
      end
      store_SOP_rst: begin
         addr_write = 5'h1 ;
         cs_ewrite =1;
         rst_mopshub_mode=1;
      end
      store_WB9_rst: begin
         addr_write = 5'hB;
         cs_ewrite = 1 ;
         buffer_rec_en =1;
         rst_mopshub_mode=1;
      end
      store_Eop_rst: begin
         addr_write = 5'hC;
         cs_ewrite =1;
         rst_mopshub_mode=1;
      end
      WB0_rst: begin
         addr_write = 5'h2;
         rst_mopshub_mode=1;
      end
      WB1_rst: begin
         addr_write = 5'h3;
         rst_mopshub_mode=1;
      end
      WB2_rst: begin
         addr_write = 5'h4;
         rst_mopshub_mode=1;
      end
      WB3_rst: begin
         addr_write = 5'h5;
         rst_mopshub_mode=1;
      end
      WB4_rst: begin
         addr_write = 5'h6;
         rst_mopshub_mode=1;
      end
      WB5_rst: begin
         addr_write = 5'h7;
         rst_mopshub_mode=1;
      end
      WB6_rst: begin
         addr_write = 5'h8;
         rst_mopshub_mode=1;
      end
      WB7_rst: begin
         addr_write = 5'h9;
         rst_mopshub_mode=1;
      end
      WB8_rst: begin
         addr_write = 5'hA;
         rst_mopshub_mode=1;
      end
      WB9_rst: begin
         addr_write = 5'hB;
         rst_mopshub_mode=1;
      end
      W_SOP_rst: begin
         addr_write = 5'h1 ;
         rst_mopshub_mode=1;
      end
      W_Eop_rst: begin
         addr_write = 5'hC;
         rst_mopshub_mode=1;
      end
      store_comma_rst: begin
         addr_write = 5'b00000 ;
         cs_ewrite =1;
         buffer_rec_en =1;
         rst_mopshub_mode=1;
      end
      W_Comma: begin
         addr_write = 5'h0;
         can_rec_mode=1;
      end
      W_Comma_DBG: begin
         addr_write = 5'h0;
         dbg_rec_mode = 1'b1;
      end
      W_Comma_rst: begin
         addr_write = 5'h0;
         rst_mopshub_mode=1;
      end
      W_Comma3: begin
         addr_write = 5'h0;
         spi_rec_mode =1;
      end
   endcase
end // Output Block

//-----------------------------------------------------------------
// Clocked Block for machine csm
//-----------------------------------------------------------------
always @(
   posedge clk
) 
begin : clocked_block_proc
   if (!rst) begin
      current_state <= ST_reset;
      csm_timer <= 2'd0;
   end
   else if (timeoutrst) begin
      current_state <= ST_reset;
      csm_timer <= 2'd0;
   end
   else if (abort) begin
      current_state <= ST_endwait;
      csm_timer <= 2'd0;
   end
   else if (endwait) begin
      current_state <= ST_reset;
      csm_timer <= 2'd0;
   end
   else 
   begin
      current_state <= next_state;
      csm_timer <= csm_next_timer;
   end
end // Clocked Block

//-----------------------------------------------------------------
// Wait state logic for machine csm
//-----------------------------------------------------------------
always @(
   csm_timer,
   csm_to_store_Comma
)
begin : csm_wait_block_proc
   csm_timeout = (csm_timer == 2'd0);
   if (csm_to_store_Comma == 1'b1) begin
      csm_next_timer = 2'd2;  //no cycles(3)-1=2
   end
   else begin
      csm_next_timer = (csm_timeout)? 2'd0: (csm_timer - 2'd1);
   end
end // Wait State Block
// State-As-Output assignment
always @(current_state)
begin
   statedeb = 8'b0;
   statedeb[6:0] = current_state;
end

endmodule // elink_interface_tra_sm
