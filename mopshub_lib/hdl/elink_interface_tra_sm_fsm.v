//
// Module mopshub_lib.elink_interface_tra_SM.fsm
//
// Created:
//          by - dcs.dcs (chipdev2.physik.uni-wuppertal.de)
//          at - 15:04:02 03/10/23
//
// Generated by Mentor Graphics' HDL Designer(TM) 2019.4 (Build 4)
//
`resetall
`timescale 1ns/10ps
module elink_interface_tra_SM( 
   // Port Declarations
   input   wire           abort,                // Upon receiving a reset message on the CANbus. FSM goes into a known state
   input   wire           can_id, 
   input   wire           clk,                  // posedge
   input   wire           fifo_data_eop, 
   input   wire           fifo_data_sop, 
   input   wire           fifo_elink_rdy, 
   input   wire           fifo_packet_rdy, 
   input   wire           rst,                  // synchronous low active
   input   wire           spi_can_id, 
   input   wire           spi_mon_id, 
   input   wire           spi_power_off_id, 
   input   wire           spi_power_on_id, 
   input   wire           start_read_elink, 
   input   wire           timeoutrst,           // timeout reset signal to the state machine in case bridge controller is not respoding for a specified time
   output  reg     [4:0]  addr_read,            // request to caninterface block
   output  reg            buffer_elink_en, 
   output  reg            buffer_elink_spi_en, 
   output  reg            buffer_eth_en, 
   output  reg            buffer_power_spi_en, 
   output  reg            buffer_spi_en, 
   output  reg            buffer_tra_en, 
   output  reg            cs_eread, 
   output  reg            end_read_elink,       // request to bridge FSM 
   output  reg            entimeout,            // enable for timeout reset counter 
   output  reg            irq_elink_eth, 
   output  reg            irq_elink_tra, 
   output  reg            irq_spi_power_off, 
   output  reg            irq_spi_power_on, 
   output  reg            irq_spi_tra, 
   output  reg            spi_tra_mode, 
   output  reg     [6:0]  statedeb
);

//tmrg default triplicate
//tmrg tmr_error false
// Internal Declarations


// Module Declarations

// State encoding
parameter 
          ST_waittoact    = 7'd0,
          ST_reset        = 7'd1,
          RB2             = 7'd2,
          store_RB2       = 7'd3,
          RB3             = 7'd4,
          RB4             = 7'd5,
          store_RB3       = 7'd6,
          store_RB4       = 7'd7,
          store_RB0       = 7'd8,
          RB1             = 7'd9,
          store_RB1       = 7'd10,
          RB5             = 7'd11,
          store_RB5       = 7'd12,
          RB6             = 7'd13,
          store_RB6       = 7'd14,
          RB7             = 7'd15,
          store_RB7       = 7'd16,
          store_RB8       = 7'd17,
          RB8             = 7'd18,
          store_RB9       = 7'd19,
          RB9             = 7'd20,
          ST_wait_eop     = 7'd21,
          ST_end_read_en  = 7'd22,
          ST_GOToWait     = 7'd23,
          ST_en_buffer    = 7'd24,
          ST_wait_sop     = 7'd25,
          RB0             = 7'd26,
          store_SPI0      = 7'd27,
          SPI1            = 7'd28,
          store_SPI1      = 7'd29,
          SPI2            = 7'd30,
          store_SPI2      = 7'd31,
          ST_end_read_en1 = 7'd32,
          ST_en_buffer1   = 7'd33,
          ST_GOToWait1    = 7'd34,
          SPI3            = 7'd35,
          store_SPI3      = 7'd36,
          ST_wait_eop1    = 7'd37,
          ST_skip_msg     = 7'd38,
          RB10            = 7'd39,
          store_RB10      = 7'd40,
          RB11            = 7'd41,
          RB12            = 7'd42,
          store_RB11      = 7'd43,
          store_RB12      = 7'd44,
          store_RB13      = 7'd45,
          RB13            = 7'd46,
          store_RB14      = 7'd47,
          RB14            = 7'd48,
          store_RB15      = 7'd49,
          RB15            = 7'd50,
          store_RB16      = 7'd51,
          RB16            = 7'd52,
          store_RB17      = 7'd53,
          store_RB18      = 7'd54,
          RB17            = 7'd55,
          store_RB19      = 7'd56,
          RB18            = 7'd57,
          ST_wait_eop2    = 7'd58,
          ST_GOToWait2    = 7'd59,
          ST_en_buffer2   = 7'd60,
          store_SPI4      = 7'd61,
          SPI4            = 7'd62,
          store_SPI5      = 7'd63,
          SPI5            = 7'd64,
          store_SPI6      = 7'd65,
          ST_end_read_en4 = 7'd66,
          ST_en_buffer4   = 7'd67,
          ST_GOToWait4    = 7'd68,
          SPI6            = 7'd69,
          store_SPI7      = 7'd70,
          ST_wait_eop4    = 7'd71,
          store_SPI8      = 7'd72,
          SPI7            = 7'd73,
          store_SPI9      = 7'd74,
          SPI8            = 7'd75,
          store_SPI10     = 7'd76,
          ST_end_read_en5 = 7'd77,
          ST_en_buffer5   = 7'd78,
          ST_GOToWait5    = 7'd79,
          SPI9            = 7'd80,
          store_SPI11     = 7'd81,
          ST_wait_eop5    = 7'd82,
          ST_eth_buffer   = 7'd83,
          wait_irq        = 7'd84,
          irq_eth         = 7'd85,
          ST_eth_buffer1  = 7'd86,
          wait_irq1       = 7'd87,
          ST_end_read_en3 = 7'd88,
          irq_eth1        = 7'd89;

reg [6:0] current_state, next_state;

//-----------------------------------------------------------------
// Next State Block for machine csm
//-----------------------------------------------------------------
always @(
   can_id, 
   current_state, 
   fifo_data_eop, 
   fifo_data_sop, 
   fifo_elink_rdy, 
   fifo_packet_rdy, 
   rst, 
   spi_can_id, 
   spi_mon_id, 
   spi_power_off_id, 
   spi_power_on_id, 
   start_read_elink
)
begin : next_state_block_proc
   case (current_state) 
      ST_waittoact: begin
         if (fifo_elink_rdy ==1)
            next_state = ST_wait_sop;
         else
            next_state = ST_waittoact;
      end
      ST_reset: begin
         if (rst == 1)
            next_state = ST_waittoact;
         else
            next_state = ST_reset;
      end
      RB2: begin
         next_state = store_RB2;
      end
      store_RB2: begin
         if (fifo_elink_rdy && fifo_packet_rdy ==1)
            next_state = RB3;
         else
            next_state = store_RB2;
      end
      RB3: begin
         next_state = store_RB3;
      end
      RB4: begin
         next_state = store_RB4;
      end
      store_RB3: begin
         if (fifo_elink_rdy && fifo_packet_rdy ==1)
            next_state = RB4;
         else
            next_state = store_RB3;
      end
      store_RB4: begin
         if (fifo_elink_rdy && fifo_packet_rdy ==1)
            next_state = RB5;
         else
            next_state = store_RB4;
      end
      store_RB0: begin
         if (fifo_elink_rdy && fifo_packet_rdy ==1)
            next_state = RB1;
         else
            next_state = store_RB0;
      end
      RB1: begin
         next_state = store_RB1;
      end
      store_RB1: begin
         if (fifo_elink_rdy && fifo_packet_rdy ==1)
            next_state = RB2;
         else
            next_state = store_RB1;
      end
      RB5: begin
         next_state = store_RB5;
      end
      store_RB5: begin
         if (fifo_elink_rdy && fifo_packet_rdy ==1)
            next_state = RB6;
         else
            next_state = store_RB5;
      end
      RB6: begin
         next_state = store_RB6;
      end
      store_RB6: begin
         if (fifo_elink_rdy && fifo_packet_rdy ==1)
            next_state = RB7;
         else
            next_state = store_RB6;
      end
      RB7: begin
         next_state = store_RB7;
      end
      store_RB7: begin
         if (fifo_elink_rdy && fifo_packet_rdy ==1)
            next_state = RB8;
         else
            next_state = store_RB7;
      end
      store_RB8: begin
         if (fifo_elink_rdy && fifo_packet_rdy ==1)
            next_state = RB9;
         else
            next_state = store_RB8;
      end
      RB8: begin
         next_state = store_RB8;
      end
      store_RB9: begin
         if (fifo_elink_rdy && fifo_packet_rdy ==1)
            next_state = ST_wait_eop;
         else
            next_state = store_RB9;
      end
      RB9: begin
         next_state = store_RB9;
      end
      ST_wait_eop: begin
         if (fifo_data_eop ==1)
            next_state = ST_eth_buffer;
         else
            next_state = ST_wait_eop;
      end
      ST_end_read_en: begin
         if (start_read_elink ==1)
            next_state = ST_en_buffer;
         else
            next_state = ST_end_read_en;
      end
      ST_GOToWait: begin
         next_state = ST_waittoact;
      end
      ST_en_buffer: begin
         next_state = ST_GOToWait;
      end
      ST_wait_sop: begin
         if (fifo_data_sop ==1)
            next_state = RB0;
         else
            next_state = ST_wait_sop;
      end
      RB0: begin
         if (can_id ==1)
            next_state = store_RB0;
         else if ((spi_mon_id ==1) && (fifo_packet_rdy ==1))
            next_state = store_SPI0;
         else if (spi_can_id ==1)
            next_state = store_RB13;
         else if ((spi_power_on_id ==1) && (fifo_packet_rdy ==1))
            next_state = store_SPI4;
         else if ((spi_power_off_id ==1) && (fifo_packet_rdy ==1))
            next_state = store_SPI8;
         else
            next_state = RB0;
      end
      store_SPI0: begin
         if (fifo_elink_rdy && fifo_packet_rdy ==1)
            next_state = SPI1;
         else
            next_state = store_SPI0;
      end
      SPI1: begin
         next_state = store_SPI1;
      end
      store_SPI1: begin
         if (fifo_elink_rdy && fifo_packet_rdy ==1)
            next_state = SPI2;
         else
            next_state = store_SPI1;
      end
      SPI2: begin
         next_state = store_SPI2;
      end
      store_SPI2: begin
         if (fifo_elink_rdy && fifo_packet_rdy ==1)
            next_state = SPI3;
         else
            next_state = store_SPI2;
      end
      ST_end_read_en1: begin
         if (start_read_elink ==1)
            next_state = ST_en_buffer1;
         else
            next_state = ST_end_read_en1;
      end
      ST_en_buffer1: begin
         next_state = ST_GOToWait1;
      end
      ST_GOToWait1: begin
         next_state = ST_waittoact;
      end
      SPI3: begin
         next_state = store_SPI3;
      end
      store_SPI3: begin
         if (fifo_elink_rdy && fifo_packet_rdy ==1)
            next_state = ST_wait_eop1;
         else
            next_state = store_SPI3;
      end
      ST_wait_eop1: begin
         if (fifo_data_eop ==1)
            next_state = ST_end_read_en1;
         else
            next_state = ST_wait_eop1;
      end
      ST_skip_msg: begin
         next_state = ST_waittoact;
      end
      RB10: begin
         next_state = store_RB10;
      end
      store_RB10: begin
         if (fifo_elink_rdy && fifo_packet_rdy ==1)
            next_state = RB11;
         else
            next_state = store_RB10;
      end
      RB11: begin
         next_state = store_RB11;
      end
      RB12: begin
         next_state = store_RB12;
      end
      store_RB11: begin
         if (fifo_elink_rdy && fifo_packet_rdy ==1)
            next_state = RB12;
         else
            next_state = store_RB11;
      end
      store_RB12: begin
         next_state = RB14;
      end
      store_RB13: begin
         if (fifo_elink_rdy && fifo_packet_rdy ==1)
            next_state = RB13;
         else
            next_state = store_RB13;
      end
      RB13: begin
         next_state = store_RB14;
      end
      store_RB14: begin
         if (fifo_elink_rdy && fifo_packet_rdy ==1)
            next_state = RB10;
         else
            next_state = store_RB14;
      end
      RB14: begin
         next_state = store_RB15;
      end
      store_RB15: begin
         next_state = RB15;
      end
      RB15: begin
         next_state = store_RB16;
      end
      store_RB16: begin
         next_state = RB16;
      end
      RB16: begin
         next_state = store_RB17;
      end
      store_RB17: begin
         next_state = RB17;
      end
      store_RB18: begin
         next_state = RB18;
      end
      RB17: begin
         next_state = store_RB18;
      end
      store_RB19: begin
         next_state = ST_wait_eop2;
      end
      RB18: begin
         next_state = store_RB19;
      end
      ST_wait_eop2: begin
         if (fifo_data_eop ==1)
            next_state = ST_eth_buffer1;
         else
            next_state = ST_wait_eop2;
      end
      ST_GOToWait2: begin
         next_state = ST_waittoact;
      end
      ST_en_buffer2: begin
         next_state = ST_GOToWait2;
      end
      store_SPI4: begin
         if (fifo_elink_rdy && fifo_packet_rdy ==1)
            next_state = SPI4;
         else
            next_state = store_SPI4;
      end
      SPI4: begin
         next_state = store_SPI5;
      end
      store_SPI5: begin
         if (fifo_elink_rdy && fifo_packet_rdy ==1)
            next_state = SPI5;
         else
            next_state = store_SPI5;
      end
      SPI5: begin
         next_state = store_SPI6;
      end
      store_SPI6: begin
         if (fifo_elink_rdy && fifo_packet_rdy ==1)
            next_state = SPI6;
         else
            next_state = store_SPI6;
      end
      ST_end_read_en4: begin
         if (start_read_elink ==1)
            next_state = ST_en_buffer4;
         else
            next_state = ST_end_read_en4;
      end
      ST_en_buffer4: begin
         next_state = ST_GOToWait4;
      end
      ST_GOToWait4: begin
         next_state = ST_waittoact;
      end
      SPI6: begin
         next_state = store_SPI7;
      end
      store_SPI7: begin
         if (fifo_elink_rdy && fifo_packet_rdy ==1)
            next_state = ST_wait_eop4;
         else
            next_state = store_SPI7;
      end
      ST_wait_eop4: begin
         if (fifo_data_eop ==1)
            next_state = ST_end_read_en4;
         else
            next_state = ST_wait_eop4;
      end
      store_SPI8: begin
         if (fifo_elink_rdy && fifo_packet_rdy ==1)
            next_state = SPI7;
         else
            next_state = store_SPI8;
      end
      SPI7: begin
         next_state = store_SPI9;
      end
      store_SPI9: begin
         if (fifo_elink_rdy && fifo_packet_rdy ==1)
            next_state = SPI8;
         else
            next_state = store_SPI9;
      end
      SPI8: begin
         next_state = store_SPI10;
      end
      store_SPI10: begin
         if (fifo_elink_rdy && fifo_packet_rdy ==1)
            next_state = SPI9;
         else
            next_state = store_SPI10;
      end
      ST_end_read_en5: begin
         if (start_read_elink ==1)
            next_state = ST_en_buffer5;
         else
            next_state = ST_end_read_en5;
      end
      ST_en_buffer5: begin
         next_state = ST_GOToWait5;
      end
      ST_GOToWait5: begin
         next_state = ST_waittoact;
      end
      SPI9: begin
         next_state = store_SPI11;
      end
      store_SPI11: begin
         if (fifo_elink_rdy && fifo_packet_rdy ==1)
            next_state = ST_wait_eop5;
         else
            next_state = store_SPI11;
      end
      ST_wait_eop5: begin
         if (fifo_data_eop ==1)
            next_state = ST_end_read_en5;
         else
            next_state = ST_wait_eop5;
      end
      ST_eth_buffer: begin
         next_state = wait_irq;
      end
      wait_irq: begin
         next_state = irq_eth;
      end
      irq_eth: begin
         next_state = ST_end_read_en;
      end
      ST_eth_buffer1: begin
         next_state = wait_irq1;
      end
      wait_irq1: begin
         next_state = irq_eth1;
      end
      ST_end_read_en3: begin
         if (start_read_elink ==1)
            next_state = ST_en_buffer2;
         else
            next_state = ST_end_read_en3;
      end
      irq_eth1: begin
         next_state = ST_end_read_en3;
      end
      default: 
         next_state = ST_reset;
   endcase
end // Next State Block

//-----------------------------------------------------------------
// Output Block for machine csm
//-----------------------------------------------------------------
always @(
   current_state
)
begin : output_block_proc
   // Default Assignment
   addr_read = 5'b0;
   buffer_elink_en = 0;
   buffer_elink_spi_en = 0;
   buffer_eth_en = 0;
   buffer_power_spi_en = 0;
   buffer_spi_en = 0;
   buffer_tra_en = 0;
   cs_eread = 0;
   end_read_elink = 0;
   entimeout = 1;
   irq_elink_eth = 0;
   irq_elink_tra = 0;
   irq_spi_power_off = 0;
   irq_spi_power_on = 0;
   irq_spi_tra = 0;
   spi_tra_mode = 0;

   // Combined Actions
   case (current_state) 
      ST_waittoact: begin
         entimeout = 0 ;
      end
      ST_reset: begin
         entimeout = 0 ;
         spi_tra_mode =0;
      end
      RB2: begin
         addr_read = 5'b00100 ;
         cs_eread = 1 ;
      end
      store_RB2: begin
         addr_read = 5'b00100 ;
         cs_eread = 1 ;
         buffer_elink_en =1;
      end
      RB3: begin
         addr_read = 5'b00101 ;
         cs_eread = 1 ;
      end
      RB4: begin
         addr_read = 5'b00110 ;
         cs_eread = 1 ;
      end
      store_RB3: begin
         addr_read = 5'b00101 ;
         cs_eread = 1 ;
         buffer_elink_en =1;
      end
      store_RB4: begin
         addr_read = 5'b00110 ;
         cs_eread = 1 ;
         buffer_elink_en =1;
      end
      store_RB0: begin
         addr_read = 5'b00010 ;
         buffer_elink_en =1;
         cs_eread =1;
      end
      RB1: begin
         addr_read = 5'b00011 ;
         cs_eread = 1 ;
      end
      store_RB1: begin
         addr_read = 5'b00011 ;
         cs_eread = 1 ;
         buffer_elink_en =1;
      end
      RB5: begin
         addr_read = 5'b00111 ;
         cs_eread = 1 ;
      end
      store_RB5: begin
         addr_read = 5'b00111 ;
         cs_eread = 1 ;
         buffer_elink_en =1;
      end
      RB6: begin
         addr_read = 5'b01000 ;
         cs_eread = 1 ;
      end
      store_RB6: begin
         addr_read = 5'b01000 ;
         cs_eread = 1 ;
         buffer_elink_en =1;
      end
      RB7: begin
         addr_read = 5'b01001 ;
         cs_eread = 1 ;
      end
      store_RB7: begin
         addr_read = 5'b01001 ;
         cs_eread = 1 ;
         buffer_elink_en =1;
      end
      store_RB8: begin
         addr_read = 5'b01010 ;
         cs_eread = 1 ;
         buffer_elink_en =1;
      end
      RB8: begin
         addr_read = 5'b01010 ;
         cs_eread = 1 ;
      end
      store_RB9: begin
         addr_read = 5'b01011 ;
         cs_eread = 1 ;
         buffer_elink_en =1;
      end
      RB9: begin
         addr_read = 5'b01011 ;
         cs_eread = 1 ;
      end
      ST_wait_eop: begin
         addr_read = 5'b00000;
         cs_eread = 1 ;
         buffer_elink_en =0;
      end
      ST_end_read_en: begin
         addr_read = 5'b00000;
         irq_elink_tra =1'b1;
      end
      ST_GOToWait: begin
         end_read_elink = 1 ;
         addr_read = 5'b00000;
      end
      ST_en_buffer: begin
         addr_read = 5'b00000;
         buffer_tra_en =1;
      end
      ST_wait_sop: begin
         addr_read = 5'b00000;
         cs_eread = 1 ;
      end
      RB0: begin
         addr_read = 5'b00010 ;
         cs_eread =1;
      end
      store_SPI0: begin
         addr_read = 5'b00010 ;
         buffer_elink_spi_en =1;
         cs_eread =1;
         spi_tra_mode =1;
      end
      SPI1: begin
         addr_read = 5'b00011 ;
         cs_eread = 1 ;
         spi_tra_mode =1;
      end
      store_SPI1: begin
         addr_read = 5'b00011 ;
         cs_eread = 1 ;
         buffer_elink_spi_en =1;
         spi_tra_mode =1;
      end
      SPI2: begin
         addr_read = 5'b00100 ;
         cs_eread =1;
         spi_tra_mode =1;
      end
      store_SPI2: begin
         addr_read = 5'b00100 ;
         cs_eread = 1 ;
         buffer_elink_spi_en = 1 ;
         spi_tra_mode =1;
      end
      ST_end_read_en1: begin
         addr_read = 5'b00000;
         irq_spi_tra =1'b1;
         spi_tra_mode =1;
      end
      ST_en_buffer1: begin
         addr_read = 5'b00000;
         buffer_spi_en =1;
         spi_tra_mode =1;
      end
      ST_GOToWait1: begin
         end_read_elink = 1 ;
         addr_read = 5'b00000;
         spi_tra_mode =1;
      end
      SPI3: begin
         addr_read = 5'b00101 ;
         cs_eread =1;
         spi_tra_mode =1;
      end
      store_SPI3: begin
         addr_read = 5'b00101 ;
         cs_eread = 1 ;
         buffer_elink_spi_en = 1 ;
         spi_tra_mode =1;
      end
      ST_wait_eop1: begin
         addr_read = 5'b00000;
         cs_eread = 1 ;
         buffer_elink_spi_en =0 ;
         spi_tra_mode =1;
      end
      RB10: begin
         addr_read = 5'b00100 ;
         cs_eread = 1 ;
      end
      store_RB10: begin
         addr_read = 5'b00100 ;
         cs_eread = 1 ;
         buffer_elink_en =1;
      end
      RB11: begin
         addr_read = 5'b00101 ;
         cs_eread = 1 ;
      end
      RB12: begin
         addr_read = 5'b00110 ;
         cs_eread = 1 ;
      end
      store_RB11: begin
         addr_read = 5'b00101 ;
         cs_eread = 1 ;
         buffer_elink_en =1;
      end
      store_RB12: begin
         addr_read = 5'b00110 ;
         cs_eread = 1 ;
         buffer_elink_en =1;
      end
      store_RB13: begin
         addr_read = 5'b00010 ;
         buffer_elink_en =1;
         cs_eread =1;
      end
      RB13: begin
         addr_read = 5'b00011 ;
         cs_eread = 1 ;
      end
      store_RB14: begin
         addr_read = 5'b00011 ;
         cs_eread = 1 ;
         buffer_elink_en =1;
      end
      RB14: begin
         addr_read = 5'b00111 ;
         cs_eread = 1 ;
      end
      store_RB15: begin
         addr_read = 5'b00111 ;
         cs_eread = 1 ;
         buffer_elink_en =1;
      end
      RB15: begin
         addr_read = 5'b01000 ;
         cs_eread = 1 ;
      end
      store_RB16: begin
         addr_read = 5'b01000 ;
         cs_eread = 1 ;
         buffer_elink_en =1;
      end
      RB16: begin
         addr_read = 5'b01001 ;
         cs_eread = 1 ;
      end
      store_RB17: begin
         addr_read = 5'b01001 ;
         cs_eread = 1 ;
         buffer_elink_en =1;
      end
      store_RB18: begin
         addr_read = 5'b01010 ;
         cs_eread = 1 ;
         buffer_elink_en =1;
      end
      RB17: begin
         addr_read = 5'b01010 ;
         cs_eread = 1 ;
      end
      store_RB19: begin
         addr_read = 5'b01011 ;
         cs_eread = 1 ;
         buffer_elink_en =1;
      end
      RB18: begin
         addr_read = 5'b01011 ;
         cs_eread = 1 ;
      end
      ST_wait_eop2: begin
         addr_read = 5'b00000;
         cs_eread = 1 ;
      end
      ST_GOToWait2: begin
         end_read_elink = 1 ;
         addr_read = 5'b00000;
      end
      ST_en_buffer2: begin
         addr_read = 5'b00000;
         buffer_tra_en =1;
      end
      store_SPI4: begin
         addr_read = 5'b00010 ;
         buffer_power_spi_en =1;
         cs_eread =1;
         spi_tra_mode =1;
      end
      SPI4: begin
         addr_read = 5'b00011 ;
         cs_eread = 1 ;
         spi_tra_mode =1;
      end
      store_SPI5: begin
         addr_read = 5'b00011 ;
         cs_eread = 1 ;
         buffer_power_spi_en =1;
         spi_tra_mode =1;
      end
      SPI5: begin
         addr_read = 5'b00100 ;
         cs_eread =1;
         spi_tra_mode =1;
      end
      store_SPI6: begin
         addr_read = 5'b00100 ;
         cs_eread = 1 ;
         buffer_power_spi_en = 1 ;
         spi_tra_mode =1;
      end
      ST_end_read_en4: begin
         addr_read = 5'b00000;
         irq_spi_power_on =1'b1;
         spi_tra_mode =1;
      end
      ST_en_buffer4: begin
         addr_read = 5'b00000;
         buffer_power_spi_en =1;
         spi_tra_mode =1;
      end
      ST_GOToWait4: begin
         end_read_elink = 1 ;
         addr_read = 5'b00000;
         spi_tra_mode =1;
      end
      SPI6: begin
         addr_read = 5'b00101 ;
         cs_eread =1;
         spi_tra_mode =1;
      end
      store_SPI7: begin
         addr_read = 5'b00101 ;
         cs_eread = 1 ;
         buffer_power_spi_en = 1 ;
         spi_tra_mode =1;
      end
      ST_wait_eop4: begin
         addr_read = 5'b00000;
         cs_eread = 1 ;
         buffer_power_spi_en =0 ;
         spi_tra_mode =1;
      end
      store_SPI8: begin
         addr_read = 5'b00010 ;
         buffer_power_spi_en =1;
         cs_eread =1;
         spi_tra_mode =1;
      end
      SPI7: begin
         addr_read = 5'b00011 ;
         cs_eread = 1 ;
         spi_tra_mode =1;
      end
      store_SPI9: begin
         addr_read = 5'b00011 ;
         cs_eread = 1 ;
         buffer_power_spi_en =1;
         spi_tra_mode =1;
      end
      SPI8: begin
         addr_read = 5'b00100 ;
         cs_eread =1;
         spi_tra_mode =1;
      end
      store_SPI10: begin
         addr_read = 5'b00100 ;
         cs_eread = 1 ;
         buffer_power_spi_en = 1 ;
         spi_tra_mode =1;
      end
      ST_end_read_en5: begin
         addr_read = 5'b00000;
         irq_spi_power_off =1'b1;
         spi_tra_mode =1;
      end
      ST_en_buffer5: begin
         addr_read = 5'b00000;
         buffer_power_spi_en =1;
         spi_tra_mode =1;
      end
      ST_GOToWait5: begin
         end_read_elink = 1 ;
         addr_read = 5'b00000;
         spi_tra_mode =1;
      end
      SPI9: begin
         addr_read = 5'b00101 ;
         cs_eread =1;
         spi_tra_mode =1;
      end
      store_SPI11: begin
         addr_read = 5'b00101 ;
         cs_eread = 1 ;
         buffer_power_spi_en = 1 ;
         spi_tra_mode =1;
      end
      ST_wait_eop5: begin
         addr_read = 5'b00000;
         cs_eread = 1 ;
         buffer_power_spi_en =0 ;
         spi_tra_mode =1;
      end
      ST_eth_buffer: begin
         addr_read = 5'b00000;
         buffer_eth_en =1;
      end
      wait_irq: begin
         addr_read = 5'b00000;
      end
      irq_eth: begin
         addr_read = 5'b00000;
         irq_elink_eth =1'b1;
      end
      ST_eth_buffer1: begin
         addr_read = 5'b00000;
         buffer_eth_en =1;
      end
      wait_irq1: begin
         addr_read = 5'b00000;
      end
      ST_end_read_en3: begin
         addr_read = 5'b00000;
         irq_elink_tra =1'b1;
      end
      irq_eth1: begin
         addr_read = 5'b00000;
         irq_elink_eth =1'b1;
      end
   endcase
end // Output Block

//-----------------------------------------------------------------
// Clocked Block for machine csm
//-----------------------------------------------------------------
always @(
   posedge clk
) 
begin : clocked_block_proc
   if (!rst) begin
      current_state <= ST_reset;
   end
   else if (timeoutrst) begin
      current_state <= ST_skip_msg;
   end
   else if (abort) begin
      current_state <= ST_skip_msg;
   end
   else 
   begin
      current_state <= next_state;
   end
end // Clocked Block

// State-As-Output assignment
always @(current_state)
statedeb = current_state;

endmodule // elink_interface_tra_SM
