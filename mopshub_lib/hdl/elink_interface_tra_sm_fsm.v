//
// Module mopshub_lib.elink_interface_tra_SM.fsm
//
// Created:
//          by - dcs.dcs (chipdev2.physik.uni-wuppertal.de)
//          at - 20:59:54 08/23/21
//
// Generated by Mentor Graphics' HDL Designer(TM) 2019.4 (Build 4)
//
`resetall
`timescale 1ns/10ps
module elink_interface_tra_SM #(
   // synopsys template
   parameter Kchar_eop = 8'b11011100,  // K28.6
   parameter Kchar_sop = 8'b00111100   // K28.1
)
( 
   // Port Declarations
   input   wire           abort,             // Upon receiving a reset message on the CANbus. FSM goes into a known state
   input   wire           clk,               // posedge
   input   wire           elink_delim_dbg, 
   input   wire           fifo_data_eop, 
   input   wire           fifo_data_sop, 
   input   wire           fifo_elink_rdy, 
   input   wire           fifo_packet_rdy, 
   input   wire           rst,               // synchronous low active
   input   wire           timeoutrst,        // timeout reset signal to the state machine in case bridge controller is not respoding for a specified time
   output  reg     [4:0]  addr_read,         // request to caninterface block
   output  reg            buffer_tra_en, 
   output  reg            cs_eread, 
   output  reg            end_read_elink,    // request to bridge FSM 
   output  reg            irq_elink_tra, 
   output  reg            start_read_elink, 
   output  reg     [6:0]  statedeb
);

//tmrg default triplicate
//tmrg tmr_error false
// Internal Declarations


// Module Declarations

// State encoding
parameter 
          waittoact      = 5'd0,
          reset          = 5'd1,
          RB0            = 5'd2,
          ST_wait_sop    = 5'd3,
          RB2            = 5'd4,
          store_RB2      = 5'd5,
          RB3            = 5'd6,
          RB4            = 5'd7,
          store_RB3      = 5'd8,
          ST_wait_buffer = 5'd9,
          store_RB4      = 5'd10,
          store_RB0      = 5'd11,
          RB1            = 5'd12,
          store_RB1      = 5'd13,
          RB5            = 5'd14,
          store_RB5      = 5'd15,
          RB6            = 5'd16,
          store_RB6      = 5'd17,
          RB7            = 5'd18,
          store_RB7      = 5'd19,
          store_RB8      = 5'd20,
          RB8            = 5'd21,
          store_RB9      = 5'd22,
          RB9            = 5'd23,
          ST_wait_eop    = 5'd24,
          ST_end_read_en = 5'd25,
          packet_check   = 5'd26;

reg [4:0] current_state, next_state;

// Wait State Signals
reg [2:0] csm_timer;
reg [2:0] csm_next_timer;
reg       csm_timeout;
reg       csm_to_ST_wait_buffer;

//-----------------------------------------------------------------
// Next State Block for machine csm
//-----------------------------------------------------------------
always @(
   csm_timeout, 
   current_state, 
   fifo_data_eop, 
   fifo_data_sop, 
   fifo_elink_rdy, 
   fifo_packet_rdy, 
   rst
)
begin : next_state_block_proc
   // Default assignments to Wait State entry flags
   csm_to_ST_wait_buffer = 1'b0;
   case (current_state) 
      waittoact: begin
         if (fifo_elink_rdy ==1)
            next_state = ST_wait_sop;
         else
            next_state = waittoact;
      end
      reset: begin
         if (rst == 1)
            next_state = waittoact;
         else
            next_state = reset;
      end
      RB0: begin
         next_state = store_RB0;
      end
      ST_wait_sop: begin
         if (fifo_data_sop ==1 && fifo_elink_rdy ==1)
            next_state = packet_check;
         else
            next_state = ST_wait_sop;
      end
      RB2: begin
         next_state = store_RB2;
      end
      store_RB2: begin
         if (fifo_elink_rdy && fifo_packet_rdy ==1)
            next_state = RB3;
         else
            next_state = store_RB2;
      end
      RB3: begin
         next_state = store_RB3;
      end
      RB4: begin
         next_state = store_RB4;
      end
      store_RB3: begin
         if (fifo_elink_rdy && fifo_packet_rdy ==1)
            next_state = RB4;
         else
            next_state = store_RB3;
      end
      ST_wait_buffer: begin
         if (csm_timeout)
            next_state = ST_end_read_en;
         else
            next_state = ST_wait_buffer;
      end
      store_RB4: begin
         if (fifo_elink_rdy && fifo_packet_rdy ==1)
            next_state = RB5;
         else
            next_state = store_RB4;
      end
      store_RB0: begin
         if (fifo_elink_rdy && fifo_packet_rdy ==1)
            next_state = RB1;
         else
            next_state = store_RB0;
      end
      RB1: begin
         next_state = store_RB1;
      end
      store_RB1: begin
         if (fifo_elink_rdy && fifo_packet_rdy ==1)
            next_state = RB2;
         else
            next_state = store_RB1;
      end
      RB5: begin
         next_state = store_RB5;
      end
      store_RB5: begin
         if (fifo_elink_rdy && fifo_packet_rdy ==1)
            next_state = RB6;
         else
            next_state = store_RB5;
      end
      RB6: begin
         next_state = store_RB6;
      end
      store_RB6: begin
         if (fifo_elink_rdy && fifo_packet_rdy ==1)
            next_state = RB7;
         else
            next_state = store_RB6;
      end
      RB7: begin
         next_state = store_RB7;
      end
      store_RB7: begin
         if (fifo_elink_rdy && fifo_packet_rdy ==1)
            next_state = RB8;
         else
            next_state = store_RB7;
      end
      store_RB8: begin
         if (fifo_elink_rdy && fifo_packet_rdy ==1)
            next_state = RB9;
         else
            next_state = store_RB8;
      end
      RB8: begin
         next_state = store_RB8;
      end
      store_RB9: begin
         if (fifo_elink_rdy && fifo_packet_rdy ==1)
            next_state = ST_wait_eop;
         else
            next_state = store_RB9;
      end
      RB9: begin
         next_state = store_RB9;
      end
      ST_wait_eop: begin
         if (fifo_data_eop ==1) begin
            next_state = ST_wait_buffer;
            csm_to_ST_wait_buffer = 1'b1;
         end
         else
            next_state = ST_wait_eop;
      end
      ST_end_read_en: begin
         next_state = waittoact;
      end
      packet_check: begin
         if (fifo_packet_rdy ==1)
            next_state = RB0;
         else
            next_state = packet_check;
      end
      default: 
         next_state = reset;
   endcase
end // Next State Block

//-----------------------------------------------------------------
// Output Block for machine csm
//-----------------------------------------------------------------
always @(
   current_state
)
begin : output_block_proc
   // Default Assignment
   addr_read = 5'b0;
   buffer_tra_en = 0;
   cs_eread = 0;
   end_read_elink = 0;
   irq_elink_tra = 0;
   start_read_elink = 0;

   // Combined Actions
   case (current_state) 
      RB0: begin
         addr_read = 5'b00010 ;
         cs_eread =1;
      end
      ST_wait_sop: begin
         addr_read = 5'b00000;
         cs_eread = 1 ;
         start_read_elink =1;
      end
      RB2: begin
         addr_read = 5'b00100 ;
         cs_eread = 1 ;
      end
      store_RB2: begin
         addr_read = 5'b00100 ;
         cs_eread = 1 ;
         buffer_tra_en =1;
      end
      RB3: begin
         addr_read = 5'b00101 ;
         cs_eread = 1 ;
      end
      RB4: begin
         addr_read = 5'b00110 ;
         cs_eread = 1 ;
      end
      store_RB3: begin
         addr_read = 5'b00101 ;
         cs_eread = 1 ;
         buffer_tra_en =1;
      end
      store_RB4: begin
         addr_read = 5'b00110 ;
         cs_eread = 1 ;
         buffer_tra_en =1;
      end
      store_RB0: begin
         addr_read = 5'b00010 ;
         buffer_tra_en =1;
         cs_eread =1;
      end
      RB1: begin
         addr_read = 5'b00011 ;
         cs_eread = 1 ;
      end
      store_RB1: begin
         addr_read = 5'b00011 ;
         cs_eread = 1 ;
         buffer_tra_en =1;
      end
      RB5: begin
         addr_read = 5'b00111 ;
         cs_eread = 1 ;
      end
      store_RB5: begin
         addr_read = 5'b00111 ;
         cs_eread = 1 ;
         buffer_tra_en =1;
      end
      RB6: begin
         addr_read = 5'b01000 ;
         cs_eread = 1 ;
      end
      store_RB6: begin
         addr_read = 5'b01000 ;
         cs_eread = 1 ;
         buffer_tra_en =1;
      end
      RB7: begin
         addr_read = 5'b01001 ;
         cs_eread = 1 ;
      end
      store_RB7: begin
         addr_read = 5'b01001 ;
         cs_eread = 1 ;
         buffer_tra_en =1;
      end
      store_RB8: begin
         addr_read = 5'b01010 ;
         cs_eread = 1 ;
         buffer_tra_en =1;
      end
      RB8: begin
         addr_read = 5'b01010 ;
         cs_eread = 1 ;
      end
      store_RB9: begin
         addr_read = 5'b01011 ;
         cs_eread = 1 ;
         buffer_tra_en =1;
      end
      RB9: begin
         addr_read = 5'b01011 ;
         cs_eread = 1 ;
      end
      ST_wait_eop: begin
         addr_read = 5'b00000;
         cs_eread = 1 ;
         buffer_tra_en =0;
         irq_elink_tra =1;
      end
      ST_end_read_en: begin
         end_read_elink = 1 ;
         addr_read = 5'b00000;
      end
      packet_check: begin
         addr_read = 5'b00000 ;
         cs_eread =1;
      end
   endcase
end // Output Block

//-----------------------------------------------------------------
// Clocked Block for machine csm
//-----------------------------------------------------------------
always @(
   posedge clk, 
   negedge rst
) 
begin : clocked_block_proc
   if (!rst) begin
      current_state <= reset;
      csm_timer <= 3'd0;
   end
   else 
   begin
      if (abort) begin
         current_state <= reset;
         csm_timer <= 3'd0;
      end
      else if (timeoutrst) begin
         current_state <= reset;
         csm_timer <= 3'd0;
      end
      else 
      begin
         current_state <= next_state;
         csm_timer <= csm_next_timer;
      end
   end
end // Clocked Block

//-----------------------------------------------------------------
// Wait state logic for machine csm
//-----------------------------------------------------------------
always @(
   csm_timer,
   csm_to_ST_wait_buffer
)
begin : csm_wait_block_proc
   csm_timeout = (csm_timer == 3'd0);
   if (csm_to_ST_wait_buffer == 1'b1) begin
      csm_next_timer = 3'd3;  //no cycles(4)-1=3
   end
   else begin
      csm_next_timer = (csm_timeout)? 3'd0: (csm_timer - 3'd1);
   end
end // Wait State Block
// State-As-Output assignment
always @(current_state)
begin
   statedeb = 7'b0;
   statedeb[4:0] = current_state;
end

endmodule // elink_interface_tra_SM
