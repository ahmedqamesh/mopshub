//
// Module mopshub_lib.elink_core.struct
//
// Created:
//          by - dcs.dcs (chipdev2.physik.uni-wuppertal.de)
//          at - 19:00:53 08/24/21
//
// Generated by Mentor Graphics' HDL Designer(TM) 2019.4 (Build 4)
//

`resetall
`timescale 1ns/10ps
module elink_core #(
   // synopsys template
   parameter Kchar_eop = 8'b11011100,  // K28.6
   parameter Kchar_sop = 8'b00111100   // K28.1
)
( 
   // Port Declarations
   output  wire            rx_fifo_full, 
   input   wire            rx_elink1bit, 
   input   wire            clk, 
   input   wire            bitCLKx2, 
   input   wire            bitCLKx4, 
   input   wire            rst, 
   input   wire    [75:0]  data_rec_uplink, 
   input   wire            start_write_elink, 
   input   wire    [1:0]   rx_elink2bit, 
   output  wire            tx_efifo_full, 
   output  wire            tx_elink1bit, 
   output  wire    [1:0]   tx_elink2bit, 
   output  wire            irq_elink_rec, 
   output  wire            irq_elink_tra, 
   output  wire    [75:0]  data_tra_out, 
   output  wire            end_write_elink, 
   output  wire            start_read_elink, 
   output  wire            end_read_elink, 
   output  reg     [75:0]  data_tra_76bit_reg   = 76'b0, 
   output  reg     [75:0]  data_rec_76bit_reg   = 76'b0
);


// Internal Declarations


// Local declarations

// Internal signal declarations
reg         reverse_stream_10b_rx  = 0;
reg         reverse_stream_10b_tx  = 0;      // 0
reg         swap_rx_bits           = 0;
reg         swap__tx_bits          = 0;      // 0 defaultwhen '1', the output bits will be swapped
wire  [1:0] data_in_clkA;
wire  [1:0] data_out_clkB;
wire        reset;
wire  [4:0] addr_write;                      // request to caninterface block
wire        cs_ewrite;
wire  [9:0] data_rec_10bitout;
wire  [7:0] data_rec_8bitout;
wire  [1:0] data_rec_delimiter;
wire        cs_eread;
reg         fifo_data_packet;
wire        elink_data_rdy;
reg         fifo_data_sop          = 1'b0;
reg         fifo_data_eop          = 1'b0;
wire  [4:0] addr_read;                       // request to caninterface block
wire        buffer_tra_en;
wire  [9:0] data_tra_10bitin;
wire        fifo_empty;


// Instances 
clock_domain_crossing #(2) clock_domain_crossing2( 
   .clkA          (clk), 
   .data_in_clkA  (data_in_clkA), 
   .clkB          (clk), 
   .data_out_clkB (data_out_clkB)
); 

elink_interface_rec_SM elink_interface_rec_SM0( 
   .abort             (), 
   .clk               (clk), 
   .elink_delim_dbg   (), 
   .rst               (rst), 
   .start_write_elink (start_write_elink), 
   .timeoutrst        (), 
   .addr_write        (addr_write), 
   .buffer_rec_en     (), 
   .cs_ewrite         (cs_ewrite), 
   .end_write_elink   (end_write_elink), 
   .irq_elink_rec     (irq_elink_rec), 
   .statedeb          ()
); 

elink_interface_tra_SM elink_interface_tra_SM0( 
   .abort            (), 
   .clk              (clk), 
   .elink_delim_dbg  (), 
   .fifo_data_eop    (fifo_data_eop), 
   .fifo_data_sop    (fifo_data_sop), 
   .fifo_elink_rdy   (elink_data_rdy), 
   .fifo_packet_rdy  (fifo_data_packet), 
   .rst              (rst), 
   .timeoutrst       (), 
   .addr_read        (addr_read), 
   .buffer_tra_en    (buffer_tra_en), 
   .cs_eread         (cs_eread), 
   .end_read_elink   (end_read_elink), 
   .irq_elink_tra    (irq_elink_tra), 
   .start_read_elink (start_read_elink), 
   .statedeb         ()
); 

elink_to_fifo #(1,0) elink_to_fifo0( 
   .rx_elink1bit   (rx_elink1bit), 
   .bitCLKx2       (bitCLKx2), 
   .swap_rx_bits   (swap_rx_bits), 
   .bitCLK         (clk), 
   .fifo_empty     (fifo_empty), 
   .fifo_flush     (reset), 
   .fifo_full      (rx_fifo_full), 
   .fifo_dout      (data_tra_10bitin), 
   .rx_elink2bit   (rx_elink2bit), 
   .bitCLKx4       (bitCLKx4), 
   .reset          (reset), 
   .reverse_rx     (reverse_stream_10b_rx), 
   .fifo_rd_en     (cs_eread), 
   .fifo_wr_clk    (clk), 
   .dec10b_Out_dbg (), 
   .dec10b_rdy_dbg (), 
   .fifo_rd_clk    (clk)
); 

fifo_to_elink #(0) fifo_to_elink0( 
   .fifo_wr_en     (cs_ewrite), 
   .bitCLKx2       (bitCLKx2), 
   .bitCLKx4       (bitCLKx4), 
   .reset          (reset), 
   .fifo_din       (data_rec_10bitout), 
   .tx_elink1bit   (tx_elink1bit), 
   .tx_elink2bit   (tx_elink2bit), 
   .fifo_flush     (reset), 
   .reverse_tx     (reverse_stream_10b_tx), 
   .swap_tx_bits   (swap__tx_bits), 
   .bitCLK         (clk), 
   .enc10b_rdy_dbg (), 
   .enc10b_in_dbg  (), 
   .efifo_full     (tx_efifo_full), 
   .fifo_wr_clk    (clk), 
   .fifo_rd_clk    (bitCLKx4)
); 

intialize_elinkCore intialize_elinkCore0( 
   .rst               (rst), 
   .clk               (clk), 
   .fifo_flush_signal (data_in_clkA[1]), 
   .rst_signal        (data_in_clkA[0])
); 

rec_elink_buf rec_elink_buf0( 
   .data_rec_in        (data_rec_uplink), 
   .addr               (addr_write), 
   .data_rec_8bitout   (data_rec_8bitout), 
   .data_rec_delimiter (data_rec_delimiter)
); 

tra_elink_buf tra_elink_buf0( 
   .clk             (clk), 
   .data_tra_8bitin (data_tra_10bitin[7:0]), 
   .buffer_en       (buffer_tra_en), 
   .rst             (rst), 
   .addr            (addr_read), 
   .data_tra_out    (data_tra_out)
); 

// HDL Embedded Text Block 6 FIFO_read1

//Check FIFO output
assign elink_data_rdy = !fifo_empty;
always@(data_tra_10bitin)
  begin
  if(data_tra_10bitin == {2'b10,Kchar_sop})// 0x3c = 0011 1100 SOP (if 8b10b)
      begin
        fifo_data_sop = 1'b1;
        fifo_data_eop = 1'b0;
        fifo_data_packet =1'b0;
      end 
    else if(cs_eread && data_tra_10bitin != {2'b10,Kchar_sop}&& data_tra_10bitin != {2'b01,Kchar_eop})// data
      begin
        fifo_data_sop = 1'b0;
        fifo_data_eop = 1'b0;
        fifo_data_packet = 1'b1;
      end   
    else if(data_tra_10bitin == {2'b01,Kchar_eop})// 0xdc = 1101 1100 (if 8b10b)
      begin
       fifo_data_sop = 1'b0;
       fifo_data_eop = 1'b1;
       fifo_data_packet =1'b0;
      end
    else  
      begin
       fifo_data_sop = 1'b0;
       fifo_data_eop = 1'b0;
       fifo_data_packet =1'b0;
      end    
  end





























































































































// HDL Embedded Text Block 7 Data_rdy_signal1
//Save data into a buffer
always@(posedge clk)
begin 
  if (rst)
  begin
    data_tra_76bit_reg <= 75'b0;
  end
  if (irq_elink_tra)
  begin
    data_tra_76bit_reg <= data_tra_out; 
  end 
  else
  begin
   data_tra_76bit_reg <= data_tra_76bit_reg; 
  end
end  

//Save data into a buffer
always@(posedge clk)
begin 
  if (rst)
  begin
    data_rec_76bit_reg <= 75'b0;
  end
  if (irq_elink_rec)
  begin
    data_rec_76bit_reg  <= data_rec_uplink ; 
  end 
  else
  begin
   data_rec_76bit_reg  <= data_rec_76bit_reg ; 
  end
end  





























































































































// HDL Embedded Text Block 9 reset1
assign reset = !rst;  



































































































































// HDL Embedded Text Block 10 FIFO_write1
assign data_rec_10bitout ={data_rec_delimiter,data_rec_8bitout}; 







































































































































endmodule // elink_core

