//
// Module mopshub_lib.elink_core.struct
//
// Created:
//          by - dcs.dcs (chipdev2.physik.uni-wuppertal.de)
//          at - 10:57:34 12/15/21
//
// Generated by Mentor Graphics' HDL Designer(TM) 2019.4 (Build 4)
//

`resetall
`timescale 1ns/10ps
module elink_core #(
   // synopsys template
   parameter Kchar_eop        = 8'b11011100,  // K28.6
   parameter Kchar_sop        = 8'b00111100,  // K28.1
   parameter generate_mopshub = 1
)
( 
   // Port Declarations
   output  wire            rx_fifo_full, 
   input   wire            clk, 
   input   wire            rst, 
   input   wire    [75:0]  data_rec_uplink, 
   input   wire            start_write_elink, 
   output  wire            tx_efifo_full, 
   output  wire            irq_elink_rec, 
   output  wire            irq_elink_tra, 
   output  wire    [75:0]  data_tra_out, 
   output  wire            end_write_elink, 
   input   wire            start_read_elink, 
   output  wire            end_read_elink, 
   output  wire            buffer_tra_en, 
   input   wire            reverse_stream_10b_rx, 
   input   wire            reverse_stream_10b_tx,  // 0
   output  wire            rx_data_rdy, 
   output  wire            tx_data_rdy, 
   input   wire            enc_stream, 
   input   wire    [1:0]   data_2bit_in, 
   output  wire    [1:0]   data_2bit_out
);


// Internal Declarations


// Local declarations

// Internal signal declarations
wire  [4:0] addr_write;                   // request to caninterface block
wire        cs_ewrite;
wire  [9:0] data_rec_10bitout;
wire  [7:0] data_rec_8bitout;
wire  [1:0] data_rec_delimiter;
wire        cs_eread;
reg         fifo_data_packet;
reg         fifo_data_sop       = 1'b0;
reg         fifo_data_eop       = 1'b0;
wire  [4:0] addr_read;                    // request to caninterface block
wire  [9:0] data_tra_10bitin;
wire        fifo_empty;
wire        buffer_elink_en;
wire        fifo_flush;
wire        efifo_empty;
wire        timeoutrst          = 1'b0;   // timeout reset signal to the state machine in case bridge controller is not respoding for a specified time
wire        abort               = 1'b0;   // Upon receiving a reset message on the CANbus. FSM goes into a known state


// Instances 
buffer_rec_elink rec_elink_buf0( 
   .data_rec_in        (data_rec_uplink), 
   .addr               (addr_write), 
   .data_rec_8bitout   (data_rec_8bitout), 
   .data_rec_delimiter (data_rec_delimiter)
); 

buffer_tra_elink tra_elink_buf0( 
   .clk             (clk), 
   .data_tra_8bitin (data_tra_10bitin[7:0]), 
   .buffer_en       (buffer_elink_en), 
   .rst             (rst), 
   .addr            (addr_read), 
   .data_tra_out    (data_tra_out)
); 

elink_interface_rec_SM elink_interface_rec_SM0( 
   .abort             (abort), 
   .clk               (clk), 
   .rst               (rst), 
   .start_write_elink (start_write_elink), 
   .timeoutrst        (timeoutrst), 
   .addr_write        (addr_write), 
   .buffer_rec_en     (), 
   .cs_ewrite         (cs_ewrite), 
   .end_write_elink   (end_write_elink), 
   .irq_elink_rec     (irq_elink_rec), 
   .statedeb          ()
); 

elink_interface_tra_SM elink_interface_tra_SM0( 
   .abort            (abort), 
   .clk              (clk), 
   .fifo_data_eop    (fifo_data_eop), 
   .fifo_data_sop    (fifo_data_sop), 
   .fifo_elink_rdy   (rx_data_rdy), 
   .fifo_packet_rdy  (fifo_data_packet), 
   .rst              (rst), 
   .start_read_elink (start_read_elink), 
   .timeoutrst       (timeoutrst), 
   .addr_read        (addr_read), 
   .buffer_elink_en  (buffer_elink_en), 
   .buffer_tra_en    (buffer_tra_en), 
   .cs_eread         (cs_eread), 
   .end_read_elink   (end_read_elink), 
   .irq_elink_tra    (irq_elink_tra), 
   .statedeb         ()
); 

elink_to_fifo #(generate_mopshub) elink_to_fifo0( 
   .fifo_empty     (fifo_empty), 
   .fifo_flush     (fifo_flush), 
   .fifo_full      (rx_fifo_full), 
   .fifo_dout      (data_tra_10bitin), 
   .clk            (clk), 
   .reverse_rx     (reverse_stream_10b_rx), 
   .fifo_rd_en     (cs_eread), 
   .dec10b_Out_dbg (), 
   .data_2bit_in   (data_2bit_in), 
   .dec10b_rdy_dbg (), 
   .rst            (rst), 
   .enc_stream     (enc_stream)
); 

fifo_to_elink fifo_to_elink0( 
   .fifo_wr_en            (cs_ewrite), 
   .clk                   (clk), 
   .fifo_din              (data_rec_10bitout), 
   .fifo_flush            (fifo_flush), 
   .reverse_stream_10b_tx (reverse_stream_10b_tx), 
   .data_2bit_out         (data_2bit_out), 
   .enc10b_rdy_dbg        (), 
   .enc10b_in_dbg         (), 
   .efifo_empty           (efifo_empty), 
   .efifo_full            (tx_efifo_full), 
   .rst                   (rst), 
   .enc_stream            (enc_stream)
); 

// HDL Embedded Text Block 6 FIFO_read1

//Check FIFO output
assign rx_data_rdy = !fifo_empty;
always@(data_tra_10bitin or cs_eread)
  begin
  if(data_tra_10bitin == {2'b10,Kchar_sop})// 0x3c = 0011 1100 SOP (if 8b10b)
      begin
        fifo_data_sop = 1'b1;
        fifo_data_eop = 1'b0;
        fifo_data_packet =1'b0;
      end 
    else if(cs_eread && data_tra_10bitin != {2'b10,Kchar_sop}&& data_tra_10bitin != {2'b01,Kchar_eop})// data
      begin
        fifo_data_sop = 1'b0;
        fifo_data_eop = 1'b0;
        fifo_data_packet = 1'b1;
      end   
    else if(data_tra_10bitin == {2'b01,Kchar_eop})// 0xdc = 1101 1100 (if 8b10b)
      begin
       fifo_data_sop = 1'b0;
       fifo_data_eop = 1'b1;
       fifo_data_packet =1'b0;
      end
    else  
      begin
       fifo_data_sop = 1'b0;
       fifo_data_eop = 1'b0;
       fifo_data_packet =1'b0;
      end    
  end































































































































// HDL Embedded Text Block 9 reset1
assign fifo_flush = !rst;  
assign tx_data_rdy = !efifo_empty;






































































































































// HDL Embedded Text Block 10 FIFO_write1
assign data_rec_10bitout ={data_rec_delimiter,data_rec_8bitout}; 







































































































































endmodule // elink_core

