//
// Module mopshub_lib.elink_core.struct
//
// Created:
//          by - dcs.dcs (chipdev2.physik.uni-wuppertal.de)
//          at - 15:56:55 08/09/21
//
// Generated by Mentor Graphics' HDL Designer(TM) 2019.4 (Build 4)
//

`resetall
`timescale 1ns/10ps
module elink_core( 
   // Port Declarations
   output  wire    [9:0]     tra_fifo_dout, 
   output  wire              rx_fifo_empty, 
   output  wire              rx_fifo_full, 
   input   wire              rx_elink1bit, 
   output  wire    [1:0]     tx_elink2bit, 
   input   wire              clk, 
   input   wire              bitCLKx2, 
   input   wire              bitCLKx4, 
   input   wire              tra_fifo_rd_enable, 
   input   wire              fifo_flush, 
   input   wire              rst, 
   output  wire              efifoPfull, 
   output  wire              tx_elink1bit, 
   output  wire    [10-1:0]  rec_fifo_din, 
   input   wire    [75:0]    data_rec_uplink, 
   input   wire              start_write_elink, 
   output  wire              end_write_elink_trig, 
   input   wire              rst_elink_cnt, 
   input   wire    [1:0]     rx_elink2bit
);


// Internal Declarations


// Local declarations

// Internal signal declarations
wire         rec_fifo_wr_enable;
wire  [9:0]  din_dbg;
wire  [9:0]  din_fifo_dbg;
wire  [9:0]  dout_dbg;
reg          reverse_stream_10b      = 0;
reg          reverse_tx              = 0;   // 0
reg          swap_tx_bits            = 0;
reg          swap_output             = 0;   // 0 defaultwhen '1', the output bits will be swapped
wire         wr_en_dbg;
wire         wr_en_fifo_dbg;
wire  [1:0]  data_in_clkA;
wire  [1:0]  data_out_clkB;
wire         reset;
reg   [10:0] data_uplink_out_reg;           // [17:0]
reg          rec_fifo_wr_enable_reg  = 0;
wire  [4:0]  sel_cnt;


// Instances 
bit_counter bit_counter_Elink( 
   .ext_rst    (), 
   .rst        (rst), 
   .data_out   (sel_cnt), 
   .clk        (clk), 
   .cnt_enable (start_write_elink)
); 

clock_domain_crossing #(2) clock_domain_crossing2( 
   .clkA          (clk), 
   .data_in_clkA  (data_in_clkA), 
   .clkB          (clk), 
   .data_out_clkB (data_out_clkB)
); 

elink_to_fifo elink_to_fifo0( 
   .DATA1bitIN         (rx_elink1bit), 
   .bitCLKx2           (bitCLKx2), 
   .swap_tx_bits       (swap_tx_bits), 
   .bitCLK             (clk), 
   .efifoEmpty         (rx_fifo_empty), 
   .fifo_flush         (reset), 
   .efifoFull          (rx_fifo_full), 
   .fifo_dout          (tra_fifo_dout), 
   .rx_elink2bit       (rx_elink2bit), 
   .wr_en_dbg          (wr_en_dbg), 
   .dout_dbg           (dout_dbg), 
   .bitCLKx4           (bitCLKx4), 
   .din_dbg            (din_dbg), 
   .din_fifo_dbg       (din_fifo_dbg), 
   .wr_en_fifo_dbg     (wr_en_fifo_dbg), 
   .rst                (rst), 
   .reverse_stream_10b (reverse_stream_10b), 
   .fifo_rd_en         (tra_fifo_rd_enable), 
   .fifo_wr_clk        (clk)
); 

fifo_to_elink #(10,10) fifo_to_elink0( 
   .fifo_wr_en  (rec_fifo_wr_enable), 
   .bitCLKx2    (bitCLKx2), 
   .bitCLKx4    (bitCLKx4), 
   .rst         (reset), 
   .fifo_din    (rec_fifo_din), 
   .efifoPfull  (efifoPfull), 
   .DATA1bitOUT (tx_elink1bit), 
   .elink2bit   (tx_elink2bit), 
   .fifo_flush  (reset), 
   .reverse_tx  (reverse_tx), 
   .swap_output (swap_output), 
   .bitCLK      (clk), 
   .fifo_wr_clk (clk)
); 

intialize_elinkCore intialize_elinkCore0( 
   .rst               (rst), 
   .clk               (clk), 
   .fifo_flush_signal (data_in_clkA[1]), 
   .rst_signal        (data_in_clkA[0])
); 

// HDL Embedded Text Block 5 data_loader4
// data_loader 1
//sel din process
assign end_write_elink_trig = (sel_cnt == 5'b101) ? 1:0; 
assign rec_fifo_din = data_uplink_out_reg;
assign reset = !rst;
assign rec_fifo_wr_enable = rec_fifo_wr_enable_reg;
always @(posedge clk)
  if(!rst)
  begin
    data_uplink_out_reg <= {2'b11,8'h00};
    rec_fifo_wr_enable_reg <=0;
  end  
 else
// begin 
//    case (sel_cnt)
//        5'b00 : begin 
//                 data_uplink_out_reg  <= {2'b10,16'b0};
//                end
//        5'b01 : begin 
//                data_uplink_out_reg  <= {2'b00,data_rec_uplink[74:58]};
//                end
//        5'b10 : begin 
//                data_uplink_out_reg  <= {2'b00,data_rec_uplink[57:41]};
//                end
//        5'b011 : begin 
//                data_uplink_out_reg  <= {2'b00,data_rec_uplink[40:24]};
//                end
//        5'b100 : begin 
//                data_uplink_out_reg  <= {2'b00,data_rec_uplink[23:7]};
//                end
//        5'b101 : begin 
//                 data_uplink_out_reg  <= {2'b00,data_rec_uplink[6:0],11'b0};
//                end 
//        5'b110 : begin 
//                 data_uplink_out_reg  <= {2'b01,16'h0};
//                end 
//        default: begin
//                 data_uplink_out_reg <= {2'b11,16'h00}; 
//                end  
//    endcase
//end                                            
 begin 
    case (sel_cnt)
        5'b00 : begin 
                 data_uplink_out_reg  <= {2'b10,8'b0};
                 rec_fifo_wr_enable_reg <=1;
                end
        5'b01 : begin 
                data_uplink_out_reg  <= {2'b00,8'hDE};
                rec_fifo_wr_enable_reg <=1;
                end
        5'b10 : begin 
                data_uplink_out_reg  <= {2'b00,8'hAD};
                rec_fifo_wr_enable_reg <=1;
                end
        5'b011 : begin 
                data_uplink_out_reg  <= {2'b00,8'hBE};
                rec_fifo_wr_enable_reg <=1;
                end
        5'b100 : begin 
                data_uplink_out_reg  <= {2'b00,8'hEF};
                rec_fifo_wr_enable_reg <=1;
                end
        5'b101 : begin 
                 data_uplink_out_reg  <= {2'b01,8'h00};
                rec_fifo_wr_enable_reg <=1; 
                end 
        default: begin
                 data_uplink_out_reg <= {2'b11,16'h00}; 
                 rec_fifo_wr_enable_reg <=0;
                end  
    endcase
end 


























endmodule // elink_core

