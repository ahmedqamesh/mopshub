//
// Module mopshub_lib.spi_core.struct
//
// Created:
//          by - dcs.dcs (chipdev2.physik.uni-wuppertal.de)
//          at - 14:27:18 04/11/23
//
// Generated by Mentor Graphics' HDL Designer(TM) 2019.4 (Build 4)
//

`resetall
`timescale 1ns/10ps
module spi_core( 
   // Port Declarations
   input   wire            abort, 
   input   wire            clk, 
   input   wire    [75:0]  data_tra_mon_spi, 
   input   wire    [75:0]  data_tra_power_spi, 
   input   wire            end_read_elink, 
   input   wire            end_write_elink_spi, 
   input   wire            irq_spi_mon_tra, 
   input   wire            miso_c, 
   input   wire            miso_m, 
   input   wire    [4:0]   n_buses, 
   input   wire            power_bus_en, 
   input   wire            rst, 
   input   wire            rst_osc_cnt, 
   input   wire            start_mon_init, 
   input   wire            start_osc_cnt, 
   input   wire            start_osc_init, 
   input   wire            start_power_off, 
   input   wire            start_power_on, 
   input   wire            timeoutrst, 
   input   wire    [11:0]  xadc_rec_in, 
   output  wire            cs_active_c, 
   output  wire            cs_active_m, 
   output  wire    [75:0]  data_rec_mon_spi, 
   output  wire            end_osc_cnt, 
   output  wire    [4:0]   mon_bus_cnt, 
   output  wire            mon_en_done, 
   output  wire            mosi_c, 
   output  wire            mosi_m, 
   output  wire    [4:0]   power_bus_cnt, 
   output  wire            power_bus_en_done, 
   output  wire            sck_c, 
   output  wire            sck_m, 
   output  wire            spi_entimeout, 
   output  wire            start_read_elink, 
   output  wire            start_write_elink_spi
);


// Internal Declarations


// Local declarations

// Internal signal declarations
wire  [4:0] addr_write_spi;
wire        busy_m;
wire        busy_p;
wire  [7:0] data_init;           // request to caninterface block
wire        end_mon_cnt;
wire        rst_mon_cnt;
wire        spi_power_mode;
wire        spi_read_mode;
wire  [7:0] spi_tra_mon_reg;
wire  [7:0] spi_tra_power_reg;
wire        start_init_spi;
wire        start_mon_cnt;
wire        start_read_power;
wire  [8:0] statedeb;            // State debug signal 
wire        transcieve_m;
wire        transcieve_p;


// Instances 
spi_control_SM SPI_control_SM( 
   .abort                 (abort), 
   .busy_m                (busy_m), 
   .busy_p                (busy_p), 
   .clk                   (clk), 
   .end_mon_cnt           (end_mon_cnt), 
   .end_read_elink        (end_read_elink), 
   .end_write_elink_spi   (end_write_elink_spi), 
   .irq_spi_mon_tra       (irq_spi_mon_tra), 
   .rst                   (rst), 
   .spi_tra_mon_reg       (spi_tra_mon_reg), 
   .start_bus_init        (power_bus_en), 
   .start_mon_init        (start_mon_init), 
   .start_power_off       (start_power_off), 
   .start_power_on        (start_power_on), 
   .start_read_power      (start_read_power), 
   .timeoutrst            (timeoutrst), 
   .addr_write            (addr_write_spi), 
   .bus_en_done           (power_bus_en_done), 
   .cs_m                  (cs_active_m), 
   .cs_p                  (cs_active_c), 
   .data_init             (data_init), 
   .entimeout             (spi_entimeout), 
   .mon_en_done           (mon_en_done), 
   .read_spi_mode         (spi_read_mode), 
   .rst_mon_cnt           (rst_mon_cnt), 
   .spi_power_mode        (spi_power_mode), 
   .start_init_spi        (start_init_spi), 
   .start_mon_cnt         (start_mon_cnt), 
   .start_read_elink      (start_read_elink), 
   .start_write_elink_spi (start_write_elink_spi), 
   .statedeb              (statedeb), 
   .transcieve_m          (transcieve_m), 
   .transcieve_p          (transcieve_p)
); 

spi_interface spi_interface_monitor0( 
   .addr_write        (addr_write_spi), 
   .clk               (clk), 
   .data_tra_spi_out  (data_tra_mon_spi), 
   .miso              (miso_m), 
   .n_buses           (n_buses), 
   .rst               (rst), 
   .rst_cnt           (rst_mon_cnt), 
   .start_cnt         (start_mon_cnt), 
   .start_init        (start_mon_init), 
   .transceive        (transcieve_m), 
   .tx_spi_data       (data_init), 
   .xadc_rec_in       (xadc_rec_in), 
   .bus_cnt_active    (mon_bus_cnt), 
   .data_tra_out      (data_rec_mon_spi), 
   .end_cnt           (end_mon_cnt), 
   .mosi              (mosi_m), 
   .sck               (sck_m), 
   .spi_reg           (spi_tra_mon_reg), 
   .w_Master_TX_Ready (busy_m)
); 

spi_interface spi_interface_power0( 
   .addr_write        (addr_write_spi), 
   .clk               (clk), 
   .data_tra_spi_out  (data_tra_power_spi), 
   .miso              (miso_c), 
   .n_buses           (n_buses), 
   .rst               (rst), 
   .rst_cnt           (rst_osc_cnt), 
   .start_cnt         (start_osc_cnt), 
   .start_init        (start_osc_init), 
   .transceive        (transcieve_p), 
   .tx_spi_data       (data_init), 
   .xadc_rec_in       (xadc_rec_in), 
   .bus_cnt_active    (power_bus_cnt), 
   .data_tra_out      (), 
   .end_cnt           (end_osc_cnt), 
   .mosi              (mosi_c), 
   .sck               (sck_c), 
   .spi_reg           (spi_tra_power_reg), 
   .w_Master_TX_Ready (busy_p)
); 

// HDL Embedded Text Block 3 reg_assign2
assign start_read_power = 1'b0;



























endmodule // spi_core

