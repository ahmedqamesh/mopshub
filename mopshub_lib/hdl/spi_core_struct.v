//
// Module mopshub_lib.spi_core.struct
//
// Created:
//          by - Ahmed Qamesh (University of Wuppertal)
//          at - 17:01:52 05/11/24
//
// Generated by Mentor Graphics' HDL Designer(TM) 2019.4 (Build 4)
//

`resetall
`timescale 1ns/10ps
module spi_core #(
   // synopsys template
   parameter CLKS_PER_HALF_BITS = 200
)
( 
   // Port Declarations
   input   wire            Set_power_init, 
   input   wire            abort, 
   input   wire    [4:0]   bus_cnt_power, 
   input   wire            clk, 
   input   wire    [75:0]  data_tra_mon_spi, 
   input   wire    [75:0]  data_tra_power_spi, 
   input   wire            end_read_elink, 
   input   wire            end_write_elink_spi, 
   input   wire            irq_spi_mon_tra, 
   input   wire            miso_control, 
   input   wire            miso_mon, 
   input   wire    [4:0]   n_buses, 
   input   wire            rst, 
   input   wire            start_mon_init, 
   input   wire            start_power_init, 
   input   wire            start_power_off, 
   input   wire            start_power_on, 
   input   wire            timeoutrst, 
   input   wire    [11:0]  xadc_rec_in, 
   output  wire    [4:0]   bus_control_select, 
   output  wire    [4:0]   bus_mon_select, 
   output  wire            cs_control, 
   output  wire            cs_mon, 
   output  wire    [75:0]  data_rec_mon_spi, 
   output  wire            mon_en_done, 
   output  wire            mosi_control, 
   output  wire            mosi_mon, 
   output  wire            power_bus_en_done, 
   output  wire            sck_control, 
   output  wire            sck_mon, 
   output  wire            spi_entimeout, 
   output  wire            start_read_elink, 
   output  wire            start_write_elink_spi, 
   output  wire    [7:0]   statedeb_spi
);


// Internal Declarations


// Local declarations

// Internal signal declarations
wire        ack_spi_control_receive;
wire        ack_spi_control_transmit;
wire        ack_spi_mon_receive;
wire        ack_spi_mon_transmit;
wire  [4:0] addr_write_spi;
wire        buffer_en;
wire  [4:0] bus_cnt_mon;
wire  [7:0] data_init;                  // request to caninterface block
wire  [7:0] spi_mon_id;
wire  [7:0] spi_power_id;
wire        spi_power_mode;
wire        spi_read_mode;
wire  [7:0] spi_tra_mon_reg;
wire  [7:0] spi_tra_power_reg;
wire        start_init_spi;
wire        start_mon_config;
wire        start_mon_read;
wire        start_power_read;
wire        transcieve_m;
wire        transcieve_p;


// Instances 
spi_control_sm SPI_control_SM( 
   .abort                 (abort), 
   .busy_m                (ack_spi_mon_transmit), 
   .busy_p                (ack_spi_control_transmit), 
   .clk                   (clk), 
   .end_read_elink        (end_read_elink), 
   .end_write_elink_spi   (end_write_elink_spi), 
   .miso_m                (miso_mon), 
   .n_buses               (n_buses), 
   .rst                   (rst), 
   .spi_rx_m_rec          (ack_spi_mon_receive), 
   .spi_tra_mon_reg       (spi_tra_mon_reg), 
   .spi_tra_power_reg     (spi_tra_power_reg), 
   .start_mon_config      (start_mon_config), 
   .start_mon_init        (start_mon_init), 
   .start_mon_read        (start_mon_read), 
   .start_power_init      (start_power_init), 
   .start_power_off       (start_power_off), 
   .start_power_on        (start_power_on), 
   .start_power_read      (start_power_read), 
   .timeoutrst            (timeoutrst), 
   .addr_write            (addr_write_spi), 
   .buffer_en             (buffer_en), 
   .can_bus_reg           (bus_cnt_mon), 
   .cs_m                  (cs_mon), 
   .cs_p                  (cs_control), 
   .data_init             (data_init), 
   .entimeout             (spi_entimeout), 
   .mon_en_done           (mon_en_done), 
   .power_en_done         (power_bus_en_done), 
   .read_spi_mode         (spi_read_mode), 
   .spi_power_mode        (spi_power_mode), 
   .start_init_spi        (start_init_spi), 
   .start_read_elink      (start_read_elink), 
   .start_write_elink_spi (start_write_elink_spi), 
   .statedeb              (statedeb_spi), 
   .transcieve_m          (transcieve_m), 
   .transcieve_p          (transcieve_p)
); 

spi_interface #(CLKS_PER_HALF_BITS) spi_interface_monitor0( 
   .addr_write        (addr_write_spi), 
   .buffer_en         (buffer_en), 
   .bus_cnt           (bus_cnt_mon), 
   .clk               (clk), 
   .data_tra_spi_out  (data_tra_mon_spi), 
   .miso              (miso_mon), 
   .rst               (rst), 
   .start_init        (start_mon_init), 
   .transceive        (transcieve_m), 
   .tx_spi_data       (data_init), 
   .xadc_rec_in       (xadc_rec_in), 
   .bus_cnt_active    (bus_mon_select), 
   .data_rec_spi_out  (data_rec_mon_spi), 
   .mosi              (mosi_mon), 
   .resceive          (ack_spi_mon_receive), 
   .sck               (sck_mon), 
   .spi_id            (spi_mon_id), 
   .spi_reg           (spi_tra_mon_reg), 
   .w_Master_TX_Ready (ack_spi_mon_transmit)
); 

spi_interface #(CLKS_PER_HALF_BITS) spi_interface_power0( 
   .addr_write        (addr_write_spi), 
   .buffer_en         (buffer_en), 
   .bus_cnt           (bus_cnt_power), 
   .clk               (clk), 
   .data_tra_spi_out  (data_tra_power_spi), 
   .miso              (miso_control), 
   .rst               (rst), 
   .start_init        (Set_power_init), 
   .transceive        (transcieve_p), 
   .tx_spi_data       (data_init), 
   .xadc_rec_in       (xadc_rec_in), 
   .bus_cnt_active    (bus_control_select), 
   .data_rec_spi_out  (), 
   .mosi              (mosi_control), 
   .resceive          (ack_spi_control_receive), 
   .sck               (sck_control), 
   .spi_id            (spi_power_id), 
   .spi_reg           (spi_tra_power_reg), 
   .w_Master_TX_Ready (ack_spi_control_transmit)
); 

// HDL Embedded Text Block 3 reg_assign2
assign start_power_read = 1'b0;
assign start_mon_config = (irq_spi_mon_tra && spi_mon_id ==8'h21) ? irq_spi_mon_tra: 1'b0;
assign start_mon_read   = (irq_spi_mon_tra && spi_mon_id ==8'h20)   ? irq_spi_mon_tra: 1'b0;





























endmodule // spi_core

