//
// Module mopshub_lib.FIFO_to_Elink.struct
//
// Created:
//          by - dcs.dcs (chipdev2.physik.uni-wuppertal.de)
//          at - 16:34:12 03/05/21
//
// Generated by Mentor Graphics' HDL Designer(TM) 2019.4 (Build 4)
//

`resetall
`timescale 1ns/10ps
module FIFO_to_Elink #(
   parameter DATA_IN_WIDTH  = 10
)
( 
   // Port Declarations
   input   wire            efifoWclk, 
   input   wire            clk_40, 
   input   wire            clk_80, 
   input   wire            clk_160, 
   input   wire            rst, 
   input   wire            efifoDin, 
   input   wire    [17:0]  efifoWe, 
   output  wire            efifoPfull, 
   output  wire            DATA1bitOUT, 
   output  wire    [1:0]   elink2bit, 
   input   wire            fifo_flush
);


// Local declarations

// Internal signal declarations
reg                       bitCount1      = 0;
reg   [1:0]               dout2bit;             //  @ 40MHz
reg                       dout2bit_r     = 0;
reg                       doutRdy;
reg   [DATA_IN_WIDTH-1:0] efifoDout;            // 10-bit data in
reg                       efifoRE;
wire                      empty;
//---
wire                      full;
reg                       reverse_tx     = 0;
wire                      swap_output    = 0;   // when '1', the output bits will be swapped
reg                       DATA1bitOUT_r;


// Instances 
EPROC_OUT U_1( 
   .bitCLK           (clk_40), 
   .bitCLKx4         (clk_160), 
   .rst              (rst), 
   .swap_outbits     (swap_output), 
   .getDataTrig      (efifoRE), 
   .EDATA_OUT        (dout2bit), 
   .fhCR_REVERSE_10B (reverse_tx), 
   .DATA_IN          (efifoDout), 
   .DATA_RDY         (doutRdy)
); 

fifoTXelink_wrap U_0( 
   .rd_clk    (clk_160), 
   .fifoFLUSH (fifo_flush), 
   .din       (efifoDin), 
   .rd_en     (efifoRE), 
   .rst       (rst), 
   .wr_clk    (efifoWclk), 
   .wr_en     (efifoWe), 
   .dout      (efifoDout), 
   .doutRdy   (doutRdy), 
   .empty     (empty), 
   .full      (full), 
   .prog_full (efifoPfull)
); 

// HDL Embedded Text Block 1 eb1
// eb1 1                                        
always @(posedge clk_80)
begin
        bitCount1 <= ! bitCount1;
end
// HDL Embedded Text Block 2 eb2
// eb2 2                                        
always @(posedge clk_80)
begin 
  if(bitCount1 == 0)
    dout2bit_r <= dout2bit[1];
end

// HDL Embedded Text Block 3 eb3
// eb3 3                                        
always @(posedge clk_80)//serialized output
begin 
  if(bitCount1 == 0)
    DATA1bitOUT_r <= dout2bit[0]; 
  else
    DATA1bitOUT_r <= dout2bit_r;
end

// HDL Embedded Text Block 4 eb4
// eb4 4 
//2 bits @ clk40, can interface 2-bit of GBT frame                                       
assign elink2bit = dout2bit; //2 bits @ clk40, can interface 2-bit of GBT frame

// HDL Embedded Text Block 5 eb5
// eb5 5  
assign DATA1bitOUT =DATA1bitOUT_r;                                 

endmodule // FIFO_to_Elink

