//
// Module mopshub_lib.FIFO_to_Elink.struct
//
// Created:
//          by - dcs.dcs (chipdev2.physik.uni-wuppertal.de)
//          at - 17:50:35 03/24/21
//
// Generated by Mentor Graphics' HDL Designer(TM) 2019.4 (Build 4)
//

`resetall
`timescale 1ns/10ps
module FIFO_to_Elink #(
   // synopsys template
   parameter DATA_IN_WIDTH  = 10,
   parameter DATA_OUT_WIDTH = 10
)
( 
   // Port Declarations
   input   wire                         efifoWe, 
   input   wire                         wr_clk, 
   input   wire                         clk_80,
   input   wire                         bitCLKx4, 
   input   wire                         rst, 
   input   wire    [DATA_IN_WIDTH-1:0]  efifoDin, 
   output  wire                         efifoPfull, 
   output  wire                         DATA1bitOUT, 
   output  wire    [1:0]                elink2bit, 
   input   wire                         fifo_flush
);

// Local declarations

// Internal signal declarations
// Internal Declarations
reg                        bitCount1      = 0;
wire  [1:0]                dout2bit;             //  @ 40MHz
wire                        doutRdy;
wire  [DATA_OUT_WIDTH-1:0] efifoDout;            // 10-bit data in
wire                       efifoRE;
wire                       empty;
wire                       full;
wire                       reverse_tx     = 1'b0;
wire                       swap_output    = 1'b0;   // when '1', the output bits will be swapped
reg                        DATA1bitOUT_r = 1'b0;


fifoTXelink_wrap U_0( 
   .wr_clk    (wr_clk), 
   .rd_clk    (bitCLKx4), 
   .din       (efifoDin), 
   .fifoFLUSH (fifo_flush), 
   .rd_en     (efifoRE), 
   .rst       (rst), 
   .wr_en     (efifoWe), 
   .dout      (efifoDout), 
   .doutRdy   (doutRdy), 
   .empty_efifo(empty), 
   .full_efifo (full), 
   .prog_full (efifoPfull)
); 

// Instances 
EPROC_OUT_ENC8b10b U_1( 
   .bitCLK           (wr_clk), 
   .bitCLKx4         (bitCLKx4),
   .getDataTrig      (efifoRE), 
   .edataIN          (efifoDout), 
   .DATA_RDY         (doutRdy), 
   .fhCR_REVERSE_10B (reverse_tx), 
   .rst              (rst), 
   .EDATA_OUT        (dout2bit), 
   .swap_outbits     (swap_output)
); 


// HDL Embedded Text Block 1 serialization
//-------------------------------------------
//-- serialization of the 2-bit data output:
//-------------------------------------------                                       
always @(posedge clk_80)
begin
        bitCount1 <= ! bitCount1;
end

// HDL Embedded Text Block 3 eb3
// eb3 3                                        
always @(posedge clk_80)//serialized output
begin 
  if(bitCount1 == 0)
    DATA1bitOUT_r <= dout2bit[0]; //serialize the first bit
  else
    DATA1bitOUT_r <= dout2bit[1]; //serialize the second bit which is filled in the other block ?bitCount1 = 0
end

// HDL Embedded Text Block 4 eb4
// eb4 4 
//2 bits @ clk80, can interface 2-bit of GBT frame                                       
assign elink2bit = dout2bit; 
assign DATA1bitOUT =DATA1bitOUT_r; //1 bit output 

endmodule // FIFO_to_Elink

