//
// Module mopshub_lib.tb_fifoTXelink_wrap.struct
//
// Created:
//          by - dcs.dcs (chipdev2.physik.uni-wuppertal.de)
//          at - 18:09:44 03/08/21
//
// Generated by Mentor Graphics' HDL Designer(TM) 2019.4 (Build 4)
//

`resetall
`timescale 1ns/10ps
module tb_fifoTXelink_wrap( 
   // Port Declarations
   output  wire    [9:0]  dout, 
   output  wire           doutRdy, 
   output  wire           prog_full, 
   output  wire           full, 
   output  wire           empty
);


// Internal Declarations


// Local declarations

// Internal signal declarations
reg  [17:0] din;
reg         rd_en;
reg         wr_en;
reg         rd_clk;
reg         wr_clk;
reg         rst;
reg         fifoFLUSH;


// Instances 
fifoTXelink_wrap TXelink_wrap( 
   .din       (din), 
   .fifoFLUSH (fifoFLUSH), 
   .rd_clk    (rd_clk), 
   .rd_en     (rd_en), 
   .rst       (rst), 
   .wr_clk    (wr_clk), 
   .wr_en     (wr_en), 
   .dout      (dout), 
   .doutRdy   (doutRdy), 
   .empty     (empty), 
   .full      (full), 
   .prog_full (prog_full)
); 

// HDL Embedded Text Block 1 Rclock
initial begin 
    #10 rd_clk=0; 
    forever #10 rd_clk=~rd_clk; 
  end
// HDL Embedded Text Block 2 Wclock
initial begin 
    #5 wr_clk=0; 
    forever #5 wr_clk=~wr_clk; 
  end

// HDL Embedded Text Block 3 Initialize
// Initialize 3                                        
initial 
  begin 
    fifoFLUSH = 1;
  end
// HDL Embedded Text Block 4 Data_Gen
// Data_Gen 4                                        
initial begin 
  din=0;
 @(posedge wr_en) din = {2'b10,16'b0};
 @(posedge wr_en) wr_en = 1;
 @(posedge wr_en) wr_en = 0;

 @(posedge wr_en) din = {2'b00,16'hDEAD};
 @(posedge wr_en) wr_en = 1;
 @(posedge wr_en) wr_en = 0;
 
 @(posedge wr_en) din = {2'b00,16'hBEEF};
 @(posedge wr_en) wr_en = 1;
 @(posedge wr_en) wr_en = 0;
  
 
 @(posedge wr_en) din = {2'b01,16'b0};
 @(posedge wr_en) wr_en = 1;
 @(posedge wr_en) wr_en = 0;
end

// HDL Embedded Text Block 5 enabling
// enabling 5                                        
initial 
  begin 
    fork //Fork-Join will start all the processes inside it parallel and wait for the completion of all the processes.
    #50   wr_en=1; 
    #100 wr_en=0; 
    #200 wr_en=1 ; 
    join 
  end    

// HDL Embedded Text Block 6 reset
// Reset                                        
  initial 
    begin 
      rst=1;
      #30 rst=0;
    end 
// HDL Embedded Text Block 7 reading
// reading 7                                        
  initial 
  begin
    $monitor("din %d dout %d",din,dout);
    fork 
     #50   rd_en=0; 
     #100  rd_en=1; 
     #2400 rd_en=0; 
     #2500 rd_en=1; 
    join 
  end


endmodule // tb_fifoTXelink_wrap

