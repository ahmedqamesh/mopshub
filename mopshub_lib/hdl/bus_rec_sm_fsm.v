//
// Module mopshub_lib.bus_rec_SM.fsm
//
// Created:
//          by - dcs.dcs (chipdev2.physik.uni-wuppertal.de)
//          at - 14:24:49 02/19/22
//
// Generated by Mentor Graphics' HDL Designer(TM) 2019.4 (Build 4)
//
`resetall
`timescale 1ns/10ps
module bus_rec_SM( 
   // Port Declarations
   output  reg     [4:0]   bus_rec_select, 
   output  reg             entimeout,          // enable for timeout reset counter 
   input   wire    [31:0]  can_rec, 
   output  reg             irq_can_rec, 
   input   wire            clk, 
   output  reg             end_choose_bus, 
   input   wire            endwait, 
   output  reg             start_bus_loop,     // to initialize the node
   input   wire            ireqsucrec, 
   input   wire            rst, 
   output  reg             done_bus_loop, 
   input   wire    [31:0]  can_rec_counter, 
   output  reg             en_irqsucrec_read, 
   input   wire            timeoutrst,         // timeout reset in case bridge controller does not respond in a specied amount of time 
   input   wire    [31:0]  can_rec_update
);


// Internal Declarations


// Module Declarations

// State encoding
parameter 
          ST_Bus_Loop     = 7'd0,
          canbus1         = 7'd1,
          canbus2         = 7'd2,
          canbus3         = 7'd3,
          canbus4         = 7'd4,
          canbus5         = 7'd5,
          canbus6         = 7'd6,
          canbus7         = 7'd7,
          canbus8         = 7'd8,
          canbus9         = 7'd9,
          canbus10        = 7'd10,
          canbus11        = 7'd11,
          canbus12        = 7'd12,
          canbus13        = 7'd13,
          canbus14        = 7'd14,
          canbus15        = 7'd15,
          canbus16        = 7'd16,
          canbus17        = 7'd17,
          canbus18        = 7'd18,
          canbus19        = 7'd19,
          canbus20        = 7'd20,
          canbus21        = 7'd21,
          canbus22        = 7'd22,
          canbus23        = 7'd23,
          canbus24        = 7'd24,
          canbus25        = 7'd25,
          canbus26        = 7'd26,
          canbus27        = 7'd27,
          canbus28        = 7'd28,
          canbus29        = 7'd29,
          canbus30        = 7'd30,
          canbus31        = 7'd31,
          ST_Reset_Bus    = 7'd32,
          donebus1        = 7'd33,
          donebus2        = 7'd34,
          donebus3        = 7'd35,
          donebus4        = 7'd36,
          donebus5        = 7'd37,
          donebus6        = 7'd38,
          donebus7        = 7'd39,
          donebus8        = 7'd40,
          donebus9        = 7'd41,
          donebus10       = 7'd42,
          donebus11       = 7'd43,
          donebus12       = 7'd44,
          donebus13       = 7'd45,
          donebus14       = 7'd46,
          donebus15       = 7'd47,
          donebus16       = 7'd48,
          donebus17       = 7'd49,
          donebus18       = 7'd50,
          donebus19       = 7'd51,
          donebus20       = 7'd52,
          donebus21       = 7'd53,
          donebus22       = 7'd54,
          donebus23       = 7'd55,
          donebus24       = 7'd56,
          donebus25       = 7'd57,
          donebus26       = 7'd58,
          donebus27       = 7'd59,
          donebus28       = 7'd60,
          donebus29       = 7'd61,
          donebus30       = 7'd62,
          donebus31       = 7'd63,
          ST_Reset_Loop   = 7'd64,
          ST_End_Read     = 7'd65,
          ST_Wait_Suc_Rec = 7'd66,
          canbus0         = 7'd67,
          donebus0        = 7'd68;

reg [6:0] current_state, next_state;

//-----------------------------------------------------------------
// Next State Block for machine csm
//-----------------------------------------------------------------
always @(
   can_rec, 
   can_rec_counter, 
   can_rec_update, 
   current_state, 
   ireqsucrec, 
   rst
)
begin : next_state_block_proc
   case (current_state) 
      ST_Bus_Loop: begin
         if (can_rec_counter[0]&& can_rec[0])
            next_state = canbus0;
         else if (can_rec_update == 32'b0)
            next_state = ST_End_Read;
         else if ((can_rec_counter[1]&& can_rec[1]))
            next_state = canbus1;
         else if ((can_rec_counter[2] && can_rec[2]))
            next_state = canbus2;
         else if ((can_rec_counter[3]&& can_rec[3]))
            next_state = canbus3;
         else if ((can_rec_counter[4]&& can_rec[4]))
            next_state = canbus4;
         else if ((can_rec_counter[5] && can_rec[5]))
            next_state = canbus5;
         else if ((can_rec_counter[6]&& can_rec[6]))
            next_state = canbus6;
         else if ((can_rec_counter[7] && can_rec[7]))
            next_state = canbus7;
         else if ((can_rec_counter[8] && can_rec[8]))
            next_state = canbus8;
         else if ((can_rec_counter[9] && can_rec[9]))
            next_state = canbus9;
         else if ((can_rec_counter[10] && can_rec[10]))
            next_state = canbus10;
         else if ((can_rec_counter[11] && can_rec[11]))
            next_state = canbus11;
         else if ((can_rec_counter[12] && can_rec[12]))
            next_state = canbus12;
         else if ((can_rec_counter[13] && can_rec[13]))
            next_state = canbus13;
         else if ((can_rec_counter[14] && can_rec[14]))
            next_state = canbus14;
         else if ((can_rec_counter[15] && can_rec[15]))
            next_state = canbus15;
         else if ((can_rec_counter[16] && can_rec[16]))
            next_state = canbus16;
         else if ((can_rec_counter[17] && can_rec[17]))
            next_state = canbus17;
         else if ((can_rec_counter[18] && can_rec[18]))
            next_state = canbus18;
         else if ((can_rec_counter[19] && can_rec[19]))
            next_state = canbus19;
         else if ((can_rec_counter[20] && can_rec[20]))
            next_state = canbus20;
         else if ((can_rec_counter[21] && can_rec[21]))
            next_state = canbus21;
         else if ((can_rec_counter[22] && can_rec[22]))
            next_state = canbus22;
         else if ((can_rec_counter[23] && can_rec[23]))
            next_state = canbus23;
         else if ((can_rec_counter[24] && can_rec[24]))
            next_state = canbus24;
         else if ((can_rec_counter[25] && can_rec[25]))
            next_state = canbus25;
         else if ((can_rec_counter[26] && can_rec[26]))
            next_state = canbus26;
         else if ((can_rec_counter[27] && can_rec[27]))
            next_state = canbus27;
         else if ((can_rec_counter[28] && can_rec[28]))
            next_state = canbus28;
         else if ((can_rec_counter[29] && can_rec[29]))
            next_state = canbus29;
         else if ((can_rec_counter[30] && can_rec[30]))
            next_state = canbus30;
         else if ((can_rec_counter[31] && can_rec[31]))
            next_state = canbus31;
         else
            next_state = ST_Bus_Loop;
      end
      canbus1: begin
         next_state = donebus1;
      end
      canbus2: begin
         next_state = donebus2;
      end
      canbus3: begin
         next_state = donebus3;
      end
      canbus4: begin
         next_state = donebus4;
      end
      canbus5: begin
         next_state = donebus5;
      end
      canbus6: begin
         next_state = donebus6;
      end
      canbus7: begin
         next_state = donebus7;
      end
      canbus8: begin
         next_state = donebus8;
      end
      canbus9: begin
         next_state = donebus9;
      end
      canbus10: begin
         next_state = donebus10;
      end
      canbus11: begin
         next_state = donebus11;
      end
      canbus12: begin
         next_state = donebus12;
      end
      canbus13: begin
         next_state = donebus13;
      end
      canbus14: begin
         next_state = donebus14;
      end
      canbus15: begin
         next_state = donebus15;
      end
      canbus16: begin
         next_state = donebus16;
      end
      canbus17: begin
         next_state = donebus17;
      end
      canbus18: begin
         next_state = donebus18;
      end
      canbus19: begin
         next_state = donebus19;
      end
      canbus20: begin
         next_state = donebus20;
      end
      canbus21: begin
         next_state = donebus21;
      end
      canbus22: begin
         next_state = donebus22;
      end
      canbus23: begin
         next_state = donebus23;
      end
      canbus24: begin
         next_state = donebus24;
      end
      canbus25: begin
         next_state = donebus25;
      end
      canbus26: begin
         next_state = donebus26;
      end
      canbus27: begin
         next_state = donebus27;
      end
      canbus28: begin
         next_state = donebus28;
      end
      canbus29: begin
         next_state = donebus29;
      end
      canbus30: begin
         next_state = donebus30;
      end
      canbus31: begin
         next_state = donebus31;
      end
      ST_Reset_Bus: begin
         next_state = ST_Bus_Loop;
      end
      donebus1: begin
         next_state = ST_Bus_Loop;
      end
      donebus2: begin
         next_state = ST_Bus_Loop;
      end
      donebus3: begin
         next_state = ST_Bus_Loop;
      end
      donebus4: begin
         next_state = ST_Bus_Loop;
      end
      donebus5: begin
         next_state = ST_Bus_Loop;
      end
      donebus6: begin
         next_state = ST_Bus_Loop;
      end
      donebus7: begin
         next_state = ST_Bus_Loop;
      end
      donebus8: begin
         next_state = ST_Bus_Loop;
      end
      donebus9: begin
         next_state = ST_Bus_Loop;
      end
      donebus10: begin
         next_state = ST_Bus_Loop;
      end
      donebus11: begin
         next_state = ST_Bus_Loop;
      end
      donebus12: begin
         next_state = ST_Bus_Loop;
      end
      donebus13: begin
         next_state = ST_Bus_Loop;
      end
      donebus14: begin
         next_state = ST_Bus_Loop;
      end
      donebus15: begin
         next_state = ST_Bus_Loop;
      end
      donebus16: begin
         next_state = ST_Bus_Loop;
      end
      donebus17: begin
         next_state = ST_Bus_Loop;
      end
      donebus18: begin
         next_state = ST_Bus_Loop;
      end
      donebus19: begin
         next_state = ST_Bus_Loop;
      end
      donebus20: begin
         next_state = ST_Bus_Loop;
      end
      donebus21: begin
         next_state = ST_Bus_Loop;
      end
      donebus22: begin
         next_state = ST_Bus_Loop;
      end
      donebus23: begin
         next_state = ST_Bus_Loop;
      end
      donebus24: begin
         next_state = ST_Bus_Loop;
      end
      donebus25: begin
         next_state = ST_Bus_Loop;
      end
      donebus26: begin
         next_state = ST_Bus_Loop;
      end
      donebus27: begin
         next_state = ST_Bus_Loop;
      end
      donebus28: begin
         next_state = ST_Bus_Loop;
      end
      donebus29: begin
         next_state = ST_Bus_Loop;
      end
      donebus30: begin
         next_state = ST_Bus_Loop;
      end
      donebus31: begin
         next_state = ST_Bus_Loop;
      end
      ST_Reset_Loop: begin
         if (rst == 1)
            next_state = ST_Wait_Suc_Rec;
         else
            next_state = ST_Reset_Loop;
      end
      ST_End_Read: begin
         next_state = ST_Wait_Suc_Rec;
      end
      ST_Wait_Suc_Rec: begin
         if (ireqsucrec ==1)
            next_state = ST_Reset_Bus;
         else
            next_state = ST_Wait_Suc_Rec;
      end
      canbus0: begin
         next_state = donebus0;
      end
      donebus0: begin
         next_state = ST_Bus_Loop;
      end
      default: 
         next_state = ST_Reset_Loop;
   endcase
end // Next State Block

//-----------------------------------------------------------------
// Output Block for machine csm
//-----------------------------------------------------------------
always @(
   current_state
)
begin : output_block_proc
   // Default Assignment
   bus_rec_select = 5'b0;
   entimeout = 1;
   irq_can_rec = 0;
   end_choose_bus = 0;
   start_bus_loop = 0;
   done_bus_loop = 0;
   en_irqsucrec_read = 0;

   // Combined Actions
   case (current_state) 
      ST_Bus_Loop: begin
         start_bus_loop =1;
      end
      canbus1: begin
         bus_rec_select = 5'b00001;
         irq_can_rec =1;
      end
      canbus2: begin
         bus_rec_select = 5'b00010;
         irq_can_rec =1;
      end
      canbus3: begin
         bus_rec_select = 5'b00011;
         irq_can_rec =1;
      end
      canbus4: begin
         bus_rec_select = 5'b00100;
         irq_can_rec =1;
      end
      canbus5: begin
         bus_rec_select = 5'b00101;
         irq_can_rec =1;
      end
      canbus6: begin
         bus_rec_select = 5'b00110;
         irq_can_rec =1;
      end
      canbus7: begin
         bus_rec_select = 5'b00111;
         irq_can_rec =1;
      end
      canbus8: begin
         bus_rec_select = 5'b01000;
         irq_can_rec =1;
      end
      canbus9: begin
         bus_rec_select = 5'b01001;
         irq_can_rec =1;
      end
      canbus10: begin
         bus_rec_select = 5'b01010;
         irq_can_rec =1;
      end
      canbus11: begin
         bus_rec_select = 5'b01011;
         irq_can_rec =1;
      end
      canbus12: begin
         bus_rec_select = 5'b01100;
         irq_can_rec =1;
      end
      canbus13: begin
         bus_rec_select = 5'b01101;
         irq_can_rec =1;
      end
      canbus14: begin
         bus_rec_select = 5'b01110;
         irq_can_rec =1;
      end
      canbus15: begin
         bus_rec_select = 5'b01111;
         irq_can_rec =1;
      end
      canbus16: begin
         bus_rec_select = 5'b10000;
         irq_can_rec =1;
      end
      canbus17: begin
         bus_rec_select = 5'b10001;
         irq_can_rec =1;
      end
      canbus18: begin
         bus_rec_select = 5'b10010;
         irq_can_rec =1;
      end
      canbus19: begin
         bus_rec_select = 5'b10011;
         irq_can_rec =1;
      end
      canbus20: begin
         bus_rec_select = 5'b10100;
         irq_can_rec =1;
      end
      canbus21: begin
         bus_rec_select = 5'b10101;
         irq_can_rec =1;
      end
      canbus22: begin
         bus_rec_select = 5'b10110;
         irq_can_rec =1;
      end
      canbus23: begin
         bus_rec_select = 5'b10111;
         irq_can_rec =1;
      end
      canbus24: begin
         bus_rec_select = 5'b11000;
         irq_can_rec =1;
      end
      canbus25: begin
         bus_rec_select = 5'b11001;
         irq_can_rec =1;
      end
      canbus26: begin
         bus_rec_select = 5'b11010;
         irq_can_rec =1;
      end
      canbus27: begin
         bus_rec_select = 5'b11011;
         irq_can_rec =1;
      end
      canbus28: begin
         bus_rec_select = 5'b11100;
         irq_can_rec =1;
      end
      canbus29: begin
         bus_rec_select = 5'b11101;
         irq_can_rec =1;
      end
      canbus30: begin
         bus_rec_select = 5'b11110;
         irq_can_rec =1;
      end
      canbus31: begin
         bus_rec_select = 5'b11111;
         irq_can_rec =1;
      end
      ST_Reset_Bus: begin
         en_irqsucrec_read =1;
         done_bus_loop = 0;
         end_choose_bus =0;
      end
      donebus1: begin
         end_choose_bus =1;
      end
      donebus2: begin
         end_choose_bus =1;
      end
      donebus3: begin
         end_choose_bus =1;
      end
      donebus4: begin
         end_choose_bus =1;
      end
      donebus5: begin
         end_choose_bus =1;
      end
      donebus6: begin
         end_choose_bus =1;
      end
      donebus7: begin
         end_choose_bus =1;
      end
      donebus8: begin
         end_choose_bus =1;
      end
      donebus9: begin
         end_choose_bus =1;
      end
      donebus10: begin
         end_choose_bus =1;
      end
      donebus11: begin
         end_choose_bus =1;
      end
      donebus12: begin
         end_choose_bus =1;
      end
      donebus13: begin
         end_choose_bus =1;
      end
      donebus14: begin
         end_choose_bus =1;
      end
      donebus15: begin
         end_choose_bus =1;
      end
      donebus16: begin
         end_choose_bus =1;
      end
      donebus17: begin
         end_choose_bus =1;
      end
      donebus18: begin
         end_choose_bus =1;
      end
      donebus19: begin
         end_choose_bus =1;
      end
      donebus20: begin
         end_choose_bus =1;
      end
      donebus21: begin
         end_choose_bus =1;
      end
      donebus22: begin
         end_choose_bus =1;
      end
      donebus23: begin
         end_choose_bus =1;
      end
      donebus24: begin
         end_choose_bus =1;
      end
      donebus25: begin
         end_choose_bus =1;
      end
      donebus26: begin
         end_choose_bus =1;
      end
      donebus27: begin
         end_choose_bus =1;
      end
      donebus28: begin
         end_choose_bus =1;
      end
      donebus29: begin
         end_choose_bus =1;
      end
      donebus30: begin
         end_choose_bus =1;
      end
      donebus31: begin
         end_choose_bus =1;
      end
      ST_Reset_Loop: begin
         start_bus_loop =0;
         done_bus_loop =0;
         entimeout=0 ;
         end_choose_bus =0;
         en_irqsucrec_read =0;
      end
      ST_End_Read: begin
         bus_rec_select = 5'b0;
         done_bus_loop = 1;
      end
      ST_Wait_Suc_Rec: begin
         entimeout = 0 ;
      end
      canbus0: begin
         irq_can_rec =1;
         bus_rec_select = 5'b0;
      end
      donebus0: begin
         end_choose_bus =1;
      end
   endcase
end // Output Block

//-----------------------------------------------------------------
// Clocked Block for machine csm
//-----------------------------------------------------------------
always @(
   posedge clk, 
   posedge endwait
) 
begin : clocked_block_proc
   if (endwait) begin
      current_state <= ST_Wait_Suc_Rec;
   end
   else 
   begin
      if (!rst) begin
         current_state <= ST_Reset_Loop;
      end
      else if (timeoutrst) begin
         current_state <= ST_Reset_Loop;
      end
      else 
      begin
         current_state <= next_state;
      end
   end
end // Clocked Block

endmodule // bus_rec_SM
