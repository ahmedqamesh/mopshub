//
// Module mopshub_lib.mopshub_core.struct
//
// Created:
//          by - dcs.dcs (chipdev2.physik.uni-wuppertal.de)
//          at - 14:44:52 10/20/21
//
// Generated by Mentor Graphics' HDL Designer(TM) 2019.4 (Build 4)
//

`resetall
`timescale 1ns/10ps
module mopshub_core #(
   // synopsys template
   parameter n_buses = 5'b11111
)
( 
   // Port Declarations
   input   wire            buffer_en, 
   input   wire    [4:0]   can_tra_select_dbg, 
   input   wire            clk, 
   input   wire    [75:0]  data_tra_uplink, 
   input   wire            end_cnt_dbg, 
   input   wire            end_read_elink, 
   input   wire            end_write_elink, 
   input   wire            irq_elink_tra, 
   input   wire            osc_auto_trim_mopshub, 
   input   wire            rst, 
   input   wire            rx0, 
   input   wire            rx1, 
   input   wire            rx2, 
   input   wire            rx3, 
   input   wire            rx4, 
   input   wire            rx5, 
   input   wire            rx6, 
   input   wire            rx7, 
   output  wire    [4:0]   can_rec_select, 
   output  wire    [4:0]   can_tra_select, 
   output  wire    [75:0]  data_rec_uplink, 
   output  wire            done_trim_osc_all, 
   output  wire            end_init, 
   output  wire            end_trim_bus, 
   output  wire            irq_can_ack, 
   output  wire            irq_can_rec, 
   output  wire            irq_can_tra, 
   output  wire    [3:0]   mopshub_sm_dbg, 
   output  wire    [4:0]   power_bus_cnt, 
   output  wire            power_bus_en, 
   output  wire            rst_mops_dbg, 
   output  wire            sign_on_sig, 
   output  wire            start_init, 
   output  wire            start_read_elink, 
   output  wire            start_trim_ack, 
   output  wire            start_write_elink, 
   output  wire    [5:0]   statedeb, 
   output  wire            tx0, 
   output  wire            tx1, 
   output  wire            tx2, 
   output  wire            tx3, 
   output  wire            tx4, 
   output  wire            tx5, 
   output  wire            tx6, 
   output  wire            tx7
);


// Internal Declarations


// Local declarations

// Internal signal declarations
wire  [4:0]  addr_can;
wire         enable_cs;
wire         endwait          = 0;
wire         entimeout;
wire         priority_sig;
wire  [15:0] read_can;
wire         read_sig_can_n;
wire         timeoutrst       = 0;
wire  [15:0] write_can;
wire         write_sig_can_n;


// Instances 
bridge_controller #(n_buses) bridge_controller0( 
   .buffer_en             (buffer_en), 
   .can_rec_select        (can_rec_select), 
   .can_tra_select_dbg    (can_tra_select_dbg), 
   .clk                   (clk), 
   .data_tra_uplink       (data_tra_uplink), 
   .end_cnt_dbg           (end_cnt_dbg), 
   .end_read_elink        (end_read_elink), 
   .end_write_elink       (end_write_elink), 
   .endwait               (endwait), 
   .irq_can_rec           (irq_can_rec), 
   .irq_can_tra           (irq_can_tra), 
   .irq_elink_tra         (irq_elink_tra), 
   .osc_auto_trim_mopshub (osc_auto_trim_mopshub), 
   .read_can              (read_can), 
   .rst                   (rst), 
   .addr_can              (addr_can), 
   .can_tra_select        (can_tra_select), 
   .data_rec_uplink       (data_rec_uplink), 
   .done_trim_osc_all     (done_trim_osc_all), 
   .enable_cs             (enable_cs), 
   .end_init              (end_init), 
   .end_trim_bus          (end_trim_bus), 
   .irq_can_ack           (irq_can_ack), 
   .mopshub_sm_dbg        (mopshub_sm_dbg), 
   .power_bus_cnt         (power_bus_cnt), 
   .power_bus_en          (power_bus_en), 
   .priority_sig          (priority_sig), 
   .read_sig_can_n        (read_sig_can_n), 
   .rst_mops_dbg          (rst_mops_dbg), 
   .sign_on_sig           (sign_on_sig), 
   .start_init            (start_init), 
   .start_read_elink      (start_read_elink), 
   .start_trim_ack        (start_trim_ack), 
   .start_write_elink     (start_write_elink), 
   .statedeb              (statedeb), 
   .write_can             (write_can), 
   .write_sig_can_n       (write_sig_can_n)
); 

canakari_top canakari_top0( 
   .clk            (clk), 
   .rst            (rst), 
   .address        (addr_can), 
   .bus_tra_select (can_tra_select), 
   .writedata      (write_can), 
   .write_n_sig    (write_sig_can_n), 
   .irq_can_tra    (irq_can_tra), 
   .irq_can_rec    (irq_can_rec), 
   .rx2            (rx2), 
   .rx3            (rx3), 
   .rx5            (rx5), 
   .rx6            (rx6), 
   .rx7            (rx7), 
   .tx1            (tx1), 
   .tx2            (tx2), 
   .tx3            (tx3), 
   .tx5            (tx5), 
   .tx6            (tx6), 
   .tx7            (tx7), 
   .rx1            (rx1), 
   .bus_rec_select (can_rec_select), 
   .endwait        (endwait), 
   .read_n_sig     (read_sig_can_n), 
   .enable_cs_sig  (enable_cs), 
   .readdata       (read_can), 
   .rx0            (rx0), 
   .tx0            (tx0), 
   .entimeout      (entimeout), 
   .timeoutrst     (timeoutrst), 
   .rx4            (rx4), 
   .tx4            (tx4)
); 


endmodule // mopshub_core

