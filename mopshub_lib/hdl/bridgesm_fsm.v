//
// Module mopshub_lib.bridgeSM.fsm
//
// Created:
//          by - dcs.dcs (chipdev2.physik.uni-wuppertal.de)
//          at - 11:53:57 06/24/21
//
// Generated by Mentor Graphics' HDL Designer(TM) 2019.4 (Build 4)
//
`resetall
`timescale 1ns/10ps
module bridgeSM #(
   // synopsys template
   parameter n_busses = 5'b11111
)
( 
   // Port Declarations
   input   wire           clk,                  // posedge
   input   wire    [4:0]  data_rec_select, 
   input   wire    [4:0]  data_tra_select, 
   input   wire           end_init,             // Signal from CAN interface block to indicate that initialization process is finished 
   input   wire           end_read_can,         // signal from CANopen block to indicate that it has read receive message buffer 
   input   wire           end_read_elink,       // this signal goes high when CANopen block has finshed writing transmit message buffer register 
   input   wire           end_write_can,        // goes high when can interface block had finished writing canakari transmit registers
   input   wire           end_write_elink,      // Goes high when CANopen block finished reading the received message buffer register 
   input   wire           endwait,              // This signal indicates when message can't be decoded in one of the CANopen objects to go back to known state to receive message
   input   wire           irq_can_rec,          // interrupt signal from canakari to indicate successful read of a new message by one of the 32 buses 
   input   wire           irq_can_tra,          // successful transmission interrupt signal from cankari 
   input   wire           irq_elink,            // interrupt from elink to indicate it has a msg
   input   wire           rst,                  // lowactive
   input   wire           timeoutrst,           // timeout reset in case bridge controller does not respond in a specied amount of time 
   output  reg            abort_mes,            // Signals other state machines to come to a known statte 
   output  reg     [4:0]  data_tra_select_sig, 
   output  reg            end_can_proc, 
   output  reg            entimeout,            // enable for timeout reset counter 
   output  reg            init,                 // to initialize the CAN node (cankari)
   output  reg            reset_irq_can,        // reset canakri interrupt 
   output  reg            send_mes_can,         // tto start transmitting CAN message 
   output  reg            send_mes_can_done, 
   output  reg            send_mes_elink,       // tto start transmitting CAN message 
   output  reg            sign_on_sig,          // Signal to send one time NMT message after bootup
   output  reg            start_read_can,       // to read canakari receive registers
   output  reg            start_read_elink,     // signal to read transmit message buffer register 
   output  reg            start_write_can,      // to write transmit registers of canakari 
   output  reg            start_write_elink, 
   output  reg     [4:0]  statedeb
);


// Internal Declarations


// Module Declarations

// State encoding
parameter 
          reset              = 5'd0,
          initialize         = 5'd1,
          waittoact          = 5'd2,
          Abort_current      = 5'd3,
          pass_mes_to_elink  = 5'd4,
          rst_rec_irq_can    = 5'd5,
          write_mes_canakari = 5'd6,
          wait_suc_tra       = 5'd7,
          rst_all_irq        = 5'd8,
          send_mes           = 5'd9,
          read_elink_mes     = 5'd10,
          assign_bus_id      = 5'd11,
          endwaitst          = 5'd12,
          Start              = 5'd13,
          Start_read_new     = 5'd14,
          signon             = 5'd15,
          comp_bus_select    = 5'd16,
          check_rec2         = 5'd17,
          finish_proc        = 5'd18,
          rec_mes            = 5'd19,
          assign_bus_id1     = 5'd20,
          init_counter       = 5'd21,
          rst_rec_irq_can2   = 5'd22,
          increment_counter  = 5'd23,
          reset_loop_bus     = 5'd24;

reg [4:0] current_state, next_state;

//-----------------------------------------------------------------
// Next State Block for machine csm
//-----------------------------------------------------------------
always @(
   current_state, 
   data_rec_select, 
   data_tra_select, 
   data_tra_select_sig, 
   end_init, 
   end_read_can, 
   end_read_elink, 
   end_write_can, 
   end_write_elink, 
   irq_can_rec, 
   irq_can_tra, 
   irq_elink, 
   rst
)
begin : next_state_block_proc
   case (current_state) 
      reset: begin
         if (rst == 1)
            next_state = Start;
         else
            next_state = reset;
      end
      initialize: begin
         if (end_init == 1)
            next_state = signon;
         else
            next_state = initialize;
      end
      waittoact: begin
         if (irq_elink == 1)
            next_state = check_rec2;
         else if (irq_can_rec == 1)
            next_state = assign_bus_id;
         else
            next_state = waittoact;
      end
      Abort_current: begin
         next_state = assign_bus_id;
      end
      pass_mes_to_elink: begin
         if (end_write_elink == 1)
            next_state = rec_mes;
         else
            next_state = pass_mes_to_elink;
      end
      rst_rec_irq_can: begin
         next_state = finish_proc;
      end
      write_mes_canakari: begin
         if (end_write_can == 1)
            next_state = send_mes;
         else
            next_state = write_mes_canakari;
      end
      wait_suc_tra: begin
         if (irq_can_tra == 1)
            next_state = rst_all_irq;
         else
            next_state = wait_suc_tra;
      end
      rst_all_irq: begin
         next_state = waittoact;
      end
      send_mes: begin
         next_state = wait_suc_tra;
      end
      read_elink_mes: begin
         if (end_read_elink == 1)
            next_state = assign_bus_id1;
         else
            next_state = read_elink_mes;
      end
      assign_bus_id: begin
         next_state = Start_read_new;
      end
      endwaitst: begin
         next_state = init_counter;
      end
      Start: begin
         next_state = initialize;
      end
      Start_read_new: begin
         if (end_read_can == 1)
            next_state = pass_mes_to_elink;
         else
            next_state = Start_read_new;
      end
      signon: begin
         if (irq_can_rec == 1)
            next_state = assign_bus_id;
         else
            next_state = waittoact;
      end
      comp_bus_select: begin
         if (data_tra_select == data_rec_select)
            next_state = assign_bus_id;
         else
            next_state = read_elink_mes;
      end
      check_rec2: begin
         if (irq_can_rec == 1)
            next_state = comp_bus_select;
         else
            next_state = read_elink_mes;
      end
      finish_proc: begin
         next_state = waittoact;
      end
      rec_mes: begin
         next_state = rst_rec_irq_can;
      end
      assign_bus_id1: begin
         next_state = write_mes_canakari;
      end
      init_counter: begin
         next_state = rst_rec_irq_can2;
      end
      rst_rec_irq_can2: begin
         next_state = increment_counter;
      end
      increment_counter: begin
         if (data_tra_select_sig != n_busses)
            next_state = reset_loop_bus;
         else
            next_state = waittoact;
      end
      reset_loop_bus: begin
         next_state = rst_rec_irq_can2;
      end
      default: 
         next_state = reset;
   endcase
end // Next State Block

//-----------------------------------------------------------------
// Output Block for machine csm
//-----------------------------------------------------------------
always @(
   current_state, 
   data_rec_select, 
   data_tra_select, 
   data_tra_select_sig
)
begin : output_block_proc
   // Default Assignment
   abort_mes = 0;
   end_can_proc = 0;
   entimeout = 1;
   init = 0;
   reset_irq_can = 0;
   send_mes_can = 0;
   send_mes_can_done = 0;
   send_mes_elink = 0;
   sign_on_sig = 0;
   start_read_can = 0;
   start_read_elink = 0;
   start_write_can = 0;
   start_write_elink = 0;

   // Combined Actions
   case (current_state) 
      reset: begin
         abort_mes = 1 ;
         reset_irq_can = 0 ;
         send_mes_can = 0 ; 
         start_read_can = 0 ;
         start_read_elink = 0 ;
         start_write_can = 0 ;
         start_write_elink = 0 ;
         init = 0 ;
         entimeout = 0 ;
         data_tra_select_sig=0;
      end
      initialize: begin
         init = 1 ;
         entimeout = 0 ;
      end
      waittoact: begin
         entimeout = 0 ;
      end
      Abort_current: begin
         abort_mes = 1 ;
      end
      pass_mes_to_elink: begin
         start_write_elink = 1;
      end
      rst_rec_irq_can: begin
         reset_irq_can = 1 ;
      end
      write_mes_canakari: begin
         start_write_can = 1 ;
      end
      wait_suc_tra: begin
         send_mes_can_done = 1;
      end
      rst_all_irq: begin
         reset_irq_can = 1 ;
      end
      send_mes: begin
         send_mes_can = 1 ;
      end
      read_elink_mes: begin
         start_read_elink = 1 ;
      end
      assign_bus_id: begin
         data_tra_select_sig = data_rec_select;
      end
      Start_read_new: begin
         start_read_can = 1 ;
      end
      signon: begin
         sign_on_sig = 1 ;
      end
      finish_proc: begin
         end_can_proc = 1;
      end
      rec_mes: begin
         send_mes_elink = 1 ;
      end
      assign_bus_id1: begin
         data_tra_select_sig = data_tra_select;
      end
      init_counter: begin
         data_tra_select_sig = 5'h0;
      end
      rst_rec_irq_can2: begin
         reset_irq_can = 1 ;
      end
      increment_counter: begin
         data_tra_select_sig= data_tra_select_sig +1;
      end
   endcase
end // Output Block

//-----------------------------------------------------------------
// Clocked Block for machine csm
//-----------------------------------------------------------------
always @(
   posedge clk, 
   negedge rst
) 
begin : clocked_block_proc
   if (!rst) begin
      current_state <= reset;
   end
   else 
   begin
      if (timeoutrst) begin
         current_state <= reset;
      end
      else if (endwait) begin
         current_state <= endwaitst;
      end
      else 
      begin
         current_state <= next_state;
      end
   end
end // Clocked Block

// State-As-Output assignment
always @(current_state)
statedeb = current_state;

endmodule // bridgeSM
