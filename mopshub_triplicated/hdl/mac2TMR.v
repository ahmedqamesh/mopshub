/****************************************************************************************************
 *                          ! THIS FILE WAS AUTO-GENERATED BY TMRG TOOL !                           *
 *                                   ! DO NOT EDIT IT MANUALLY !                                    *
 *                                                                                                  *
 * file    : ./output/mac2TMR.v                                                                     *
 *                                                                                                  *
 * user    : lucas                                                                                  *
 * host    : DESKTOP-BFDSFP2                                                                        *
 * date    : 06/10/2022 13:52:52                                                                    *
 *                                                                                                  *
 * workdir : /mnt/c/Users/Lucas/Documents/GitHub/mopshub_triplicated/triplicated/mopshub_top_board/hdl *
 * cmd     : /mnt/c/Users/Lucas/Desktop/mopshub_triplication/tmrg-master/bin/tmrg -vv -c tmrg.cfg   *
 * tmrg rev:                                                                                        *
 *                                                                                                  *
 * src file: mac2.v                                                                                 *
 *           Git SHA           : c110441b08b692cc54ebd4a3b84a2599430e8f93                           *
 *           Modification time : 2022-08-25 09:31:31                                                *
 *           File Size         : 19320                                                              *
 *           MD5 hash          : 4f5d6ce0d06be273ec8d49afc66690e1                                   *
 *                                                                                                  *
 ****************************************************************************************************/

module mac2TMR(
  input wire  clock ,
  input wire  Prescale_EN ,
  input wire  reset ,
  input wire  sendpoint ,
  input wire  smplpoint ,
  input wire  inbit ,
  input wire  trans ,
  input wire  erroractiv ,
  input wire  errorpassiv ,
  input wire  busof ,
  input wire  load ,
  input wire  actvtsftllc ,
  input wire  actvtcap ,
  input wire  resettra ,
  input wire [28:0] identifierr ,
  input wire [7:0] data1r ,
  input wire [7:0] data2r ,
  input wire [7:0] data3r ,
  input wire [7:0] data4r ,
  input wire [7:0] data5r ,
  input wire [7:0] data6r ,
  input wire [7:0] data7r ,
  input wire [7:0] data8r ,
  input wire  extendedr ,
  input wire  remoter ,
  input wire [3:0] datalenr ,
  output wire [28:0] identifierw ,
  output wire [7:0] data1w ,
  output wire [7:0] data2w ,
  output wire [7:0] data3w ,
  output wire [7:0] data4w ,
  output wire [7:0] data5w ,
  output wire [7:0] data6w ,
  output wire [7:0] data7w ,
  output wire [7:0] data8w ,
  output wire  remotew ,
  output wire [3:0] datalenw ,
  output wire  inconerec ,
  output wire  incegtrec ,
  output wire  incegttra ,
  output wire  decrec ,
  output wire  dectra ,
  output wire  elevrecb ,
  output wire  hardsync ,
  output wire  outbit ,
  output wire [7:0] statedeb 
);
wire stufft;
wire stuffr;
wire biterror;
wire stferror;
wire [6:0] count;
wire [3:0] rmlb;
wire [2:0] setrmleno;
wire actvrmln;
wire actvtcrc;
wire actvrcrc;
wire actvtstf;
wire actvrstf;
wire actvtsft;
wire actvrsft;
wire actvtdct;
wire actvrdct;
wire actvtbed;
wire setbdom;
wire setbrec;
wire lcrc;
wire lmsg;
wire tshift;
wire inccount;
wire resrmlen;
wire rescount;
wire resetdst;
wire resetstf;
wire bitout;
wire [67:0] mesout_a;
wire [17:0] mesout_b;
wire [10:0] mesout_c;
wire [102:0] mesin;
wire bittosend;
wire receivedbit;
wire actvtsftsig;
wire resetsig;
wire resetstfsig;
wire rescountsig;
wire resrmlensig;
wire resetdstsig;
wire loader;
wire [14:0] crc_pre_load_sig_ext;
wire [14:0] crc_pre_load_sig_rem;
wire crc_out_bit;
wire crc_ok;
wire [1:0] ackerror_set_i;
wire [1:0] onarbit_set_i;
wire [1:0] transmitter_set_i;
wire [1:0] receiver_set_i;
wire [1:0] error_set_i;
wire [1:0] first_set_i;
wire [1:0] puffer_set_i;
wire [1:0] rext_set_i;
wire [1:0] rrtr_set_i;
wire ackerror_i;
wire onarbit_i;
wire transmitter_i;
wire receiver_i;
wire error_i;
wire first_i;
wire puffer_i;
wire rext;
wire rrtr;
wire rmzero;
wire lt3_i;
wire gt3_i;
wire eq3_i;
wire lt11_i;
wire eq11_i;
wire activatefast;
wire directshift;
wire setzero;
wire crc_shft_out;
wire crc_tosend;
wire stuff_inbit;
wire [3:0] tmlen;
wire startrcrc_i;
wire starttcrc_i;
wire zerointcrc_i;
wire en_zerointcrc;
wire sync_reset_i;
assign remotew =  rrtr;
assign datalenw =  mesout_a[67:64] ;
assign data1w =  mesout_a[63:56] ;
assign data2w =  mesout_a[55:48] ;
assign data3w =  mesout_a[47:40] ;
assign data4w =  mesout_a[39:32] ;
assign data5w =  mesout_a[31:24] ;
assign data6w =  mesout_a[23:16] ;
assign data7w =  mesout_a[15:8] ;
assign remotew =  rrtr;
assign datalenw =  mesout_a[67:64] ;
assign data1w =  mesout_a[63:56] ;
assign data2w =  mesout_a[55:48] ;
assign data3w =  mesout_a[47:40] ;
assign data4w =  mesout_a[39:32] ;
assign data5w =  mesout_a[31:24] ;
assign data6w =  mesout_a[23:16] ;
assign data7w =  mesout_a[15:8] ;
assign data8w =  mesout_a[7:0] ;
assign data8w =  mesout_a[7:0] ;
assign stuff_inbit =  (crc_shft_out&crc_tosend)|((~ crc_shft_out )&bittosend);
assign mesin[63:0]  =  {data1r,data2r,data3r,data4r,data5r,data6r,data7r,data8r};
assign crc_pre_load_sig_ext =  mesin[102:88] ;
assign crc_pre_load_sig_rem =  mesin[82:68] ;
assign actvtsftsig =  actvtsft|actvtsftllc;
assign resetsig =  sync_reset_i&resettra;
assign resetstfsig =  sync_reset_i&resettra&resetstf;
assign rescountsig =  sync_reset_i&rescount;
assign resrmlensig =  sync_reset_i&resrmlen;
assign resetdstsig =  sync_reset_i&resetdst;
assign outbit =  bitout;
assign loader =  load|lmsg;

reset_mac2TMR reset_mac_i (
    .reset(reset),
    .sync_reset(sync_reset_i),
    .clock(clock),
    .prescaler(Prescale_EN)
    );

macfsm2TMR fsm (
    .clock(clock),
    .Prescale_EN(Prescale_EN),
    .reset(sync_reset_i),
    .sendpoint(sendpoint),
    .smplpoint(smplpoint),
    .crc_ok(crc_ok),
    .inbit(receivedbit),
    .stufft(stufft),
    .stuffr(stuffr),
    .biterror(biterror),
    .stferror(stferror),
    .trans(trans),
    .text(extendedr),
    .erroractiv(erroractiv),
    .errorpassiv(errorpassiv),
    .busof(busof),
    .ackerror(ackerror_i),
    .onarbit(onarbit_i),
    .transmitter(transmitter_i),
    .receiver(receiver_i),
    .error(error_i),
    .first(first_i),
    .puffer(puffer_i),
    .rext(rext),
    .rrtr(rrtr),
    .startrcrc(startrcrc_i),
    .rmzero(rmzero),
    .starttcrc(starttcrc_i),
    .lt3(lt3_i),
    .gt3(gt3_i),
    .eq3(eq3_i),
    .lt11(lt11_i),
    .eq11(eq11_i),
    .ackerror_set(ackerror_set_i),
    .onarbit_set(onarbit_set_i),
    .transmitter_set(transmitter_set_i),
    .receiver_set(receiver_set_i),
    .error_set(error_set_i),
    .first_set(first_set_i),
    .puffer_set(puffer_set_i),
    .rext_set(rext_set_i),
    .rrtr_set(rrtr_set_i),
    .count(count),
    .setrmleno(setrmleno),
    .actvrmln(actvrmln),
    .actvtcrc(actvtcrc),
    .actvrcrc(actvrcrc),
    .actvtstf(actvtstf),
    .actvrstf(actvrstf),
    .actvtsft(actvtsft),
    .actvrsft(actvrsft),
    .actvtdct(actvtdct),
    .actvrdct(actvrdct),
    .actvtbed(actvtbed),
    .setbdom(setbdom),
    .setbrec(setbrec),
    .lcrc(lcrc),
    .lmsg(lmsg),
    .tshift(tshift),
    .inconerec(inconerec),
    .incegtrec(incegtrec),
    .incegttra(incegttra),
    .decrec(decrec),
    .dectra(dectra),
    .elevrecb(elevrecb),
    .hardsync(hardsync),
    .inccount(inccount),
    .resrmlen(resrmlen),
    .rescount(rescount),
    .resetdst(resetdst),
    .resetstf(resetstf),
    .activatefast(activatefast),
    .crc_shft_out(crc_shft_out),
    .en_zerointcrc(en_zerointcrc),
    .statedeb(statedeb)
    );

biterrordetect2TMR errordetect (
    .clock(clock),
    .bitin(inbit),
    .bitout(bitout),
    .activ(actvtbed),
    .reset(sync_reset_i),
    .biterror(biterror)
    );

counter2TMR counting (
    .clock(clock),
    .Prescale_EN(Prescale_EN),
    .inc(inccount),
    .reset(rescountsig),
    .lt3(lt3_i),
    .gt3(gt3_i),
    .eq3(eq3_i),
    .lt11(lt11_i),
    .eq11(eq11_i),
    .counto(count)
    );

decapsulation2TMR decaps (
    .message_b(mesout_b),
    .message_c(mesout_c),
    .extended(rext),
    .identifier(identifierw)
    );

destuffing2TMR destuff (
    .clock(clock),
    .bitin(inbit),
    .activ(actvrstf),
    .reset(resetdstsig),
    .direct(actvrdct),
    .stfer(stferror),
    .stuff(stuffr),
    .bitout(receivedbit)
    );

encapsulation2TMR encaps (
    .clock(clock),
    .identifier(identifierr),
    .extended(extendedr),
    .remote(remoter),
    .activ(actvtcap),
    .reset(resetsig),
    .datalen(datalenr),
    .tmlen(tmlen),
    .message(mesin[102:64] )
    );

rcrc2TMR receivecrc (
    .clock(clock),
    .bitin(receivedbit),
    .activ(actvrcrc),
    .reset(resrmlensig),
    .crc_ok(crc_ok)
    );

recmeslen2TMR recmlen (
    .clock(clock),
    .activ(actvrmln),
    .reset(resrmlensig),
    .setrmlen(setrmleno),
    .rmlb(rmlb)
    );

rshiftreg2TMR recshift (
    .clock(clock),
    .bitin(receivedbit),
    .activ(actvrsft),
    .reset(sync_reset_i),
    .lcrc(lcrc),
    .setzero(setzero),
    .directshift(directshift),
    .mesout_a(mesout_a),
    .mesout_b(mesout_b),
    .mesout_c(mesout_c)
    );

stuffing2TMR stuff (
    .clock(clock),
    .bitin(stuff_inbit),
    .activ(actvtstf),
    .reset(resetstfsig),
    .direct(actvtdct),
    .setdom(setbdom),
    .setrec(setbrec),
    .bitout(bitout),
    .stuff(stufft)
    );

tcrc2TMR transmitcrc (
    .clock(clock),
    .bitin(crc_out_bit),
    .activ(actvtcrc),
    .reset(resetsig),
    .crc_pre_load_ext(crc_pre_load_sig_ext),
    .crc_pre_load_rem(crc_pre_load_sig_rem),
    .extended(extendedr),
    .load(loader),
    .load_activ(actvtsftsig),
    .crc_shft_out(crc_shft_out),
    .zerointcrc(zerointcrc_i),
    .crc_tosend(crc_tosend)
    );

tshiftreg2TMR transhift (
    .clock(clock),
    .mesin(mesin),
    .activ(actvtsftsig),
    .reset(resetsig),
    .load(loader),
    .shift(tshift),
    .extended(extendedr),
    .bitout(bittosend),
    .crc_out_bit(crc_out_bit)
    );

fsm_register2TMR fsm_regs (
    .clock(clock),
    .reset(sync_reset_i),
    .ackerror_set(ackerror_set_i),
    .onarbit_set(onarbit_set_i),
    .transmitter_set(transmitter_set_i),
    .receiver_set(receiver_set_i),
    .error_set(error_set_i),
    .first_set(first_set_i),
    .puffer_set(puffer_set_i),
    .rext_set(rext_set_i),
    .rrtr_set(rrtr_set_i),
    .ackerror(ackerror_i),
    .onarbit(onarbit_i),
    .transmitter(transmitter_i),
    .receiver(receiver_i),
    .error(error_i),
    .first(first_i),
    .puffer(puffer_i),
    .rext(rext),
    .rrtr(rrtr)
    );

fastshift2TMR frshift (
    .reset(resrmlensig),
    .clock(clock),
    .activate(activatefast),
    .rmlb(rmlb),
    .setzero(setzero),
    .directshift(directshift)
    );

meslencompare2TMR comparator (
    .count(count),
    .rmlen(rmlb),
    .tmlen(tmlen),
    .ext_r(rext),
    .ext_t(extendedr),
    .startrcrc(startrcrc_i),
    .rmzero(rmzero),
    .starttcrc(starttcrc_i),
    .zerointcrc(zerointcrc_i),
    .en_zerointcrc(en_zerointcrc)
    );
endmodule

