/****************************************************************************************************
 *                          ! THIS FILE WAS AUTO-GENERATED BY TMRG TOOL !                           *
 *                                   ! DO NOT EDIT IT MANUALLY !                                    *
 *                                                                                                  *
 * file    : ./output/dec1_NbitTMR.v                                                                *
 *                                                                                                  *
 * user    : lucas                                                                                  *
 * host    : DESKTOP-BFDSFP2                                                                        *
 * date    : 16/08/2022 12:58:14                                                                    *
 *                                                                                                  *
 * workdir : /mnt/c/Users/Lucas/Desktop/mopshub_triplication/mopshub_top_board_canakari_ftrim/hdl   *
 * cmd     : /mnt/c/Users/Lucas/Desktop/mopshub_triplication/tmrg-master/bin/tmrg -c tmrg.cfg -vvv  *
 * tmrg rev:                                                                                        *
 *                                                                                                  *
 * src file: dec1_Nbit.v                                                                            *
 *           Git SHA           : File not in git repository!                                        *
 *           Modification time : 2022-08-12 10:12:46                                                *
 *           File Size         : 2303                                                               *
 *           MD5 hash          : 7744db3547f96dac395863f05236c86a                                   *
 *                                                                                                  *
 ****************************************************************************************************/

module dec1_NbitTMR(
  input wire  clk ,
  input wire  rst ,
  input wire  buffer_en ,
  input wire  rst_bus_sig ,
  input wire [4:0] bus_rec_select ,
  input wire [15:0] data_rec_in ,
  output wire [15:0] data_rec_out 
);
wire rst_bus_sigC;
wire rst_bus_sigB;
wire rst_bus_sigA;
wire rstC;
wire rstB;
wire rstA;
wire [15:0] output_bus_reg_vC;
wire [15:0] output_bus_reg_vB;
wire [15:0] output_bus_reg_vA;
wire [15:0] data_rec_inC;
wire [15:0] data_rec_inB;
wire [15:0] data_rec_inA;
wire clkC;
wire clkB;
wire clkA;
wire [4:0] bus_rec_selectC;
wire [4:0] bus_rec_selectB;
wire [4:0] bus_rec_selectA;
wire buffer_enC;
wire buffer_enB;
wire buffer_enA;
wor output_bus_regTmrError;
wire [15:0] output_bus_reg;
reg  [15:0] output_bus_regA ;
reg  [15:0] output_bus_regB ;
reg  [15:0] output_bus_regC ;
initial
  output_bus_regA =  16'd0;
initial
  output_bus_regB =  16'd0;
initial
  output_bus_regC =  16'd0;
wire [15:0] output_bus_reg_v =  output_bus_reg;

always @( posedge clkA )
  begin
    if (!rstA)
      output_bus_regA <= 16'd0;
    if (buffer_enA)
      output_bus_regA <= data_rec_inA;
    else
      if (rst_bus_sigA)
        case (bus_rec_selectA)
          5'h0 : output_bus_regA <= {data_rec_inA[15:1] ,1'b0};
          5'h1 : output_bus_regA <= {data_rec_inA[15:2] ,1'b0,data_rec_inA[0] };
          5'h2 : output_bus_regA <= {data_rec_inA[15:3] ,1'b0,data_rec_inA[1:0] };
          5'h3 : output_bus_regA <= {data_rec_inA[15:4] ,1'b0,data_rec_inA[2:0] };
          5'h4 : output_bus_regA <= {data_rec_inA[15:5] ,1'b0,data_rec_inA[3:0] };
          5'h5 : output_bus_regA <= {data_rec_inA[15:6] ,1'b0,data_rec_inA[4:0] };
          5'h6 : output_bus_regA <= {data_rec_inA[15:7] ,1'b0,data_rec_inA[5:0] };
          5'h7 : output_bus_regA <= {data_rec_inA[15:8] ,1'b0,data_rec_inA[6:0] };
          5'h8 : output_bus_regA <= {data_rec_inA[15:9] ,1'b0,data_rec_inA[7:0] };
          5'h9 : output_bus_regA <= {data_rec_inA[15:10] ,1'b0,data_rec_inA[8:0] };
          5'hA : output_bus_regA <= {data_rec_inA[15:11] ,1'b0,data_rec_inA[9:0] };
          5'hB : output_bus_regA <= {data_rec_inA[15:12] ,1'b0,data_rec_inA[10:0] };
          5'hC : output_bus_regA <= {data_rec_inA[15:13] ,1'b0,data_rec_inA[11:0] };
          5'hD : output_bus_regA <= {data_rec_inA[15:14] ,1'b0,data_rec_inA[12:0] };
          5'hE : output_bus_regA <= {data_rec_inA[15] ,1'b0,data_rec_inA[13:0] };
          5'hF : output_bus_regA <= {1'b0,data_rec_inA[14:0] };
          default : output_bus_regA <= 16'd0;
        endcase
      else
        output_bus_regA <= output_bus_reg_vA;
  end

always @( posedge clkB )
  begin
    if (!rstB)
      output_bus_regB <= 16'd0;
    if (buffer_enB)
      output_bus_regB <= data_rec_inB;
    else
      if (rst_bus_sigB)
        case (bus_rec_selectB)
          5'h0 : output_bus_regB <= {data_rec_inB[15:1] ,1'b0};
          5'h1 : output_bus_regB <= {data_rec_inB[15:2] ,1'b0,data_rec_inB[0] };
          5'h2 : output_bus_regB <= {data_rec_inB[15:3] ,1'b0,data_rec_inB[1:0] };
          5'h3 : output_bus_regB <= {data_rec_inB[15:4] ,1'b0,data_rec_inB[2:0] };
          5'h4 : output_bus_regB <= {data_rec_inB[15:5] ,1'b0,data_rec_inB[3:0] };
          5'h5 : output_bus_regB <= {data_rec_inB[15:6] ,1'b0,data_rec_inB[4:0] };
          5'h6 : output_bus_regB <= {data_rec_inB[15:7] ,1'b0,data_rec_inB[5:0] };
          5'h7 : output_bus_regB <= {data_rec_inB[15:8] ,1'b0,data_rec_inB[6:0] };
          5'h8 : output_bus_regB <= {data_rec_inB[15:9] ,1'b0,data_rec_inB[7:0] };
          5'h9 : output_bus_regB <= {data_rec_inB[15:10] ,1'b0,data_rec_inB[8:0] };
          5'hA : output_bus_regB <= {data_rec_inB[15:11] ,1'b0,data_rec_inB[9:0] };
          5'hB : output_bus_regB <= {data_rec_inB[15:12] ,1'b0,data_rec_inB[10:0] };
          5'hC : output_bus_regB <= {data_rec_inB[15:13] ,1'b0,data_rec_inB[11:0] };
          5'hD : output_bus_regB <= {data_rec_inB[15:14] ,1'b0,data_rec_inB[12:0] };
          5'hE : output_bus_regB <= {data_rec_inB[15] ,1'b0,data_rec_inB[13:0] };
          5'hF : output_bus_regB <= {1'b0,data_rec_inB[14:0] };
          default : output_bus_regB <= 16'd0;
        endcase
      else
        output_bus_regB <= output_bus_reg_vB;
  end

always @( posedge clkC )
  begin
    if (!rstC)
      output_bus_regC <= 16'd0;
    if (buffer_enC)
      output_bus_regC <= data_rec_inC;
    else
      if (rst_bus_sigC)
        case (bus_rec_selectC)
          5'h0 : output_bus_regC <= {data_rec_inC[15:1] ,1'b0};
          5'h1 : output_bus_regC <= {data_rec_inC[15:2] ,1'b0,data_rec_inC[0] };
          5'h2 : output_bus_regC <= {data_rec_inC[15:3] ,1'b0,data_rec_inC[1:0] };
          5'h3 : output_bus_regC <= {data_rec_inC[15:4] ,1'b0,data_rec_inC[2:0] };
          5'h4 : output_bus_regC <= {data_rec_inC[15:5] ,1'b0,data_rec_inC[3:0] };
          5'h5 : output_bus_regC <= {data_rec_inC[15:6] ,1'b0,data_rec_inC[4:0] };
          5'h6 : output_bus_regC <= {data_rec_inC[15:7] ,1'b0,data_rec_inC[5:0] };
          5'h7 : output_bus_regC <= {data_rec_inC[15:8] ,1'b0,data_rec_inC[6:0] };
          5'h8 : output_bus_regC <= {data_rec_inC[15:9] ,1'b0,data_rec_inC[7:0] };
          5'h9 : output_bus_regC <= {data_rec_inC[15:10] ,1'b0,data_rec_inC[8:0] };
          5'hA : output_bus_regC <= {data_rec_inC[15:11] ,1'b0,data_rec_inC[9:0] };
          5'hB : output_bus_regC <= {data_rec_inC[15:12] ,1'b0,data_rec_inC[10:0] };
          5'hC : output_bus_regC <= {data_rec_inC[15:13] ,1'b0,data_rec_inC[11:0] };
          5'hD : output_bus_regC <= {data_rec_inC[15:14] ,1'b0,data_rec_inC[12:0] };
          5'hE : output_bus_regC <= {data_rec_inC[15] ,1'b0,data_rec_inC[13:0] };
          5'hF : output_bus_regC <= {1'b0,data_rec_inC[14:0] };
          default : output_bus_regC <= 16'd0;
        endcase
      else
        output_bus_regC <= output_bus_reg_vC;
  end
assign data_rec_out =  output_bus_reg;

majorityVoter #(.WIDTH(16)) output_bus_regVoter (
    .inA(output_bus_regA),
    .inB(output_bus_regB),
    .inC(output_bus_regC),
    .out(output_bus_reg),
    .tmrErr(output_bus_regTmrError)
    );

fanout buffer_enFanout (
    .in(buffer_en),
    .outA(buffer_enA),
    .outB(buffer_enB),
    .outC(buffer_enC)
    );

fanout #(.WIDTH(5)) bus_rec_selectFanout (
    .in(bus_rec_select),
    .outA(bus_rec_selectA),
    .outB(bus_rec_selectB),
    .outC(bus_rec_selectC)
    );

fanout clkFanout (
    .in(clk),
    .outA(clkA),
    .outB(clkB),
    .outC(clkC)
    );

fanout #(.WIDTH(16)) data_rec_inFanout (
    .in(data_rec_in),
    .outA(data_rec_inA),
    .outB(data_rec_inB),
    .outC(data_rec_inC)
    );

fanout #(.WIDTH(16)) output_bus_reg_vFanout (
    .in(output_bus_reg_v),
    .outA(output_bus_reg_vA),
    .outB(output_bus_reg_vB),
    .outC(output_bus_reg_vC)
    );

fanout rstFanout (
    .in(rst),
    .outA(rstA),
    .outB(rstB),
    .outC(rstC)
    );

fanout rst_bus_sigFanout (
    .in(rst_bus_sig),
    .outA(rst_bus_sigA),
    .outB(rst_bus_sigB),
    .outC(rst_bus_sigC)
    );
endmodule

