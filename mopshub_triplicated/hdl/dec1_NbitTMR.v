/****************************************************************************************************
 *                          ! THIS FILE WAS AUTO-GENERATED BY TMRG TOOL !                           *
 *                                   ! DO NOT EDIT IT MANUALLY !                                    *
 *                                                                                                  *
 * file    : ./output/dec1_NbitTMR.v                                                                *
 *                                                                                                  *
 * user    : lucas                                                                                  *
 * host    : DESKTOP-BFDSFP2                                                                        *
 * date    : 03/04/2022 20:08:33                                                                    *
 *                                                                                                  *
 * workdir : /mnt/c/Users/Lucas/Desktop/mopshub_triplication/triplicated/mopshub_top_canakari_ftrim/hdl *
 * cmd     : /mnt/c/Users/Lucas/Desktop/mopshub_triplication/tmrg-master/bin/tmrg -vv -c tmrg.cfg   *
 * tmrg rev:                                                                                        *
 *                                                                                                  *
 * src file: dec1_Nbit.v                                                                            *
 *           Git SHA           : File not in git repository!                                        *
 *           Modification time : 2022-03-28 18:35:09                                                *
 *           File Size         : 3405                                                               *
 *           MD5 hash          : 43e4c04e774ca822e68390ad88243d6e                                   *
 *                                                                                                  *
 ****************************************************************************************************/

module dec1_NbitTMR(
  input wire  clkA ,
  input wire  clkB ,
  input wire  clkC ,
  input wire  rstA ,
  input wire  rstB ,
  input wire  rstC ,
  input wire  buffer_enA ,
  input wire  buffer_enB ,
  input wire  buffer_enC ,
  input wire  rst_bus_sigA ,
  input wire  rst_bus_sigB ,
  input wire  rst_bus_sigC ,
  input wire [4:0] bus_rec_selectA ,
  input wire [4:0] bus_rec_selectB ,
  input wire [4:0] bus_rec_selectC ,
  output wire [31:0] data_rec_inA ,
  output wire [31:0] data_rec_inB ,
  output wire [31:0] data_rec_inC ,
  output wire [31:0] data_rec_outA ,
  output wire [31:0] data_rec_outB ,
  output wire [31:0] data_rec_outC 
);
reg  [31:0] output_bus_regA ;
reg  [31:0] output_bus_regB ;
reg  [31:0] output_bus_regC ;
initial
  output_bus_regA =  32'd0;
initial
  output_bus_regB =  32'd0;
initial
  output_bus_regC =  32'd0;

always @( posedge clkA )
  begin
    if (!rstA)
      begin
        output_bus_regA <= 32'd0;
      end
    if (buffer_enA)
      begin
        output_bus_regA <= data_rec_inA;
      end
    else
      if (rst_bus_sigA)
        case (bus_rec_selectA)
          5'h0 : output_bus_regA <= {data_rec_inA[31:1] ,1'b0};
          5'h1 : output_bus_regA <= {data_rec_inA[31:2] ,1'b0,data_rec_inA[0] };
          5'h2 : output_bus_regA <= {data_rec_inA[31:3] ,1'b0,data_rec_inA[1:0] };
          5'h3 : output_bus_regA <= {data_rec_inA[31:4] ,1'b0,data_rec_inA[2:0] };
          5'h4 : output_bus_regA <= {data_rec_inA[31:5] ,1'b0,data_rec_inA[3:0] };
          5'h5 : output_bus_regA <= {data_rec_inA[31:6] ,1'b0,data_rec_inA[4:0] };
          5'h6 : output_bus_regA <= {data_rec_inA[31:7] ,1'b0,data_rec_inA[5:0] };
          5'h7 : output_bus_regA <= {data_rec_inA[31:8] ,1'b0,data_rec_inA[6:0] };
          5'h8 : output_bus_regA <= {data_rec_inA[31:9] ,1'b0,data_rec_inA[7:0] };
          5'h9 : output_bus_regA <= {data_rec_inA[31:10] ,1'b0,data_rec_inA[8:0] };
          5'hA : output_bus_regA <= {data_rec_inA[31:11] ,1'b0,data_rec_inA[9:0] };
          5'hB : output_bus_regA <= {data_rec_inA[31:12] ,1'b0,data_rec_inA[10:0] };
          5'hC : output_bus_regA <= {data_rec_inA[31:13] ,1'b0,data_rec_inA[11:0] };
          5'hD : output_bus_regA <= {data_rec_inA[31:14] ,1'b0,data_rec_inA[12:0] };
          5'hE : output_bus_regA <= {data_rec_inA[31:15] ,1'b0,data_rec_inA[13:0] };
          5'hF : output_bus_regA <= {data_rec_inA[31:16] ,1'b0,data_rec_inA[14:0] };
          5'h10 : output_bus_regA <= {data_rec_inA[31:17] ,1'b0,data_rec_inA[15:0] };
          5'h11 : output_bus_regA <= {data_rec_inA[31:18] ,1'b0,data_rec_inA[16:0] };
          5'h12 : output_bus_regA <= {data_rec_inA[31:19] ,1'b0,data_rec_inA[17:0] };
          5'h13 : output_bus_regA <= {data_rec_inA[31:20] ,1'b0,data_rec_inA[18:0] };
          5'h14 : output_bus_regA <= {data_rec_inA[31:21] ,1'b0,data_rec_inA[19:0] };
          5'h15 : output_bus_regA <= {data_rec_inA[31:22] ,1'b0,data_rec_inA[20:0] };
          5'h16 : output_bus_regA <= {data_rec_inA[31:23] ,1'b0,data_rec_inA[21:0] };
          5'h17 : output_bus_regA <= {data_rec_inA[31:24] ,1'b0,data_rec_inA[22:0] };
          5'h18 : output_bus_regA <= {data_rec_inA[31:25] ,1'b0,data_rec_inA[23:0] };
          5'h19 : output_bus_regA <= {data_rec_inA[31:26] ,1'b0,data_rec_inA[24:0] };
          5'h1A : output_bus_regA <= {data_rec_inA[31:27] ,1'b0,data_rec_inA[25:0] };
          5'h1B : output_bus_regA <= {data_rec_inA[31:28] ,1'b0,data_rec_inA[26:0] };
          5'h1C : output_bus_regA <= {data_rec_inA[31:29] ,1'b0,data_rec_inA[27:0] };
          5'h1D : output_bus_regA <= {data_rec_inA[31:30] ,1'b0,data_rec_inA[28:0] };
          5'h1E : output_bus_regA <= {data_rec_inA[31] ,1'b0,data_rec_inA[29:0] };
          5'h1F : output_bus_regA <= {1'b0,data_rec_inA[30:0] };
          default : 
            begin
              output_bus_regA <= 32'd0;
            end
        endcase
      else
        begin
          output_bus_regA <= output_bus_regA;
        end
  end

always @( posedge clkB )
  begin
    if (!rstB)
      begin
        output_bus_regB <= 32'd0;
      end
    if (buffer_enB)
      begin
        output_bus_regB <= data_rec_inB;
      end
    else
      if (rst_bus_sigB)
        case (bus_rec_selectB)
          5'h0 : output_bus_regB <= {data_rec_inB[31:1] ,1'b0};
          5'h1 : output_bus_regB <= {data_rec_inB[31:2] ,1'b0,data_rec_inB[0] };
          5'h2 : output_bus_regB <= {data_rec_inB[31:3] ,1'b0,data_rec_inB[1:0] };
          5'h3 : output_bus_regB <= {data_rec_inB[31:4] ,1'b0,data_rec_inB[2:0] };
          5'h4 : output_bus_regB <= {data_rec_inB[31:5] ,1'b0,data_rec_inB[3:0] };
          5'h5 : output_bus_regB <= {data_rec_inB[31:6] ,1'b0,data_rec_inB[4:0] };
          5'h6 : output_bus_regB <= {data_rec_inB[31:7] ,1'b0,data_rec_inB[5:0] };
          5'h7 : output_bus_regB <= {data_rec_inB[31:8] ,1'b0,data_rec_inB[6:0] };
          5'h8 : output_bus_regB <= {data_rec_inB[31:9] ,1'b0,data_rec_inB[7:0] };
          5'h9 : output_bus_regB <= {data_rec_inB[31:10] ,1'b0,data_rec_inB[8:0] };
          5'hA : output_bus_regB <= {data_rec_inB[31:11] ,1'b0,data_rec_inB[9:0] };
          5'hB : output_bus_regB <= {data_rec_inB[31:12] ,1'b0,data_rec_inB[10:0] };
          5'hC : output_bus_regB <= {data_rec_inB[31:13] ,1'b0,data_rec_inB[11:0] };
          5'hD : output_bus_regB <= {data_rec_inB[31:14] ,1'b0,data_rec_inB[12:0] };
          5'hE : output_bus_regB <= {data_rec_inB[31:15] ,1'b0,data_rec_inB[13:0] };
          5'hF : output_bus_regB <= {data_rec_inB[31:16] ,1'b0,data_rec_inB[14:0] };
          5'h10 : output_bus_regB <= {data_rec_inB[31:17] ,1'b0,data_rec_inB[15:0] };
          5'h11 : output_bus_regB <= {data_rec_inB[31:18] ,1'b0,data_rec_inB[16:0] };
          5'h12 : output_bus_regB <= {data_rec_inB[31:19] ,1'b0,data_rec_inB[17:0] };
          5'h13 : output_bus_regB <= {data_rec_inB[31:20] ,1'b0,data_rec_inB[18:0] };
          5'h14 : output_bus_regB <= {data_rec_inB[31:21] ,1'b0,data_rec_inB[19:0] };
          5'h15 : output_bus_regB <= {data_rec_inB[31:22] ,1'b0,data_rec_inB[20:0] };
          5'h16 : output_bus_regB <= {data_rec_inB[31:23] ,1'b0,data_rec_inB[21:0] };
          5'h17 : output_bus_regB <= {data_rec_inB[31:24] ,1'b0,data_rec_inB[22:0] };
          5'h18 : output_bus_regB <= {data_rec_inB[31:25] ,1'b0,data_rec_inB[23:0] };
          5'h19 : output_bus_regB <= {data_rec_inB[31:26] ,1'b0,data_rec_inB[24:0] };
          5'h1A : output_bus_regB <= {data_rec_inB[31:27] ,1'b0,data_rec_inB[25:0] };
          5'h1B : output_bus_regB <= {data_rec_inB[31:28] ,1'b0,data_rec_inB[26:0] };
          5'h1C : output_bus_regB <= {data_rec_inB[31:29] ,1'b0,data_rec_inB[27:0] };
          5'h1D : output_bus_regB <= {data_rec_inB[31:30] ,1'b0,data_rec_inB[28:0] };
          5'h1E : output_bus_regB <= {data_rec_inB[31] ,1'b0,data_rec_inB[29:0] };
          5'h1F : output_bus_regB <= {1'b0,data_rec_inB[30:0] };
          default : 
            begin
              output_bus_regB <= 32'd0;
            end
        endcase
      else
        begin
          output_bus_regB <= output_bus_regB;
        end
  end

always @( posedge clkC )
  begin
    if (!rstC)
      begin
        output_bus_regC <= 32'd0;
      end
    if (buffer_enC)
      begin
        output_bus_regC <= data_rec_inC;
      end
    else
      if (rst_bus_sigC)
        case (bus_rec_selectC)
          5'h0 : output_bus_regC <= {data_rec_inC[31:1] ,1'b0};
          5'h1 : output_bus_regC <= {data_rec_inC[31:2] ,1'b0,data_rec_inC[0] };
          5'h2 : output_bus_regC <= {data_rec_inC[31:3] ,1'b0,data_rec_inC[1:0] };
          5'h3 : output_bus_regC <= {data_rec_inC[31:4] ,1'b0,data_rec_inC[2:0] };
          5'h4 : output_bus_regC <= {data_rec_inC[31:5] ,1'b0,data_rec_inC[3:0] };
          5'h5 : output_bus_regC <= {data_rec_inC[31:6] ,1'b0,data_rec_inC[4:0] };
          5'h6 : output_bus_regC <= {data_rec_inC[31:7] ,1'b0,data_rec_inC[5:0] };
          5'h7 : output_bus_regC <= {data_rec_inC[31:8] ,1'b0,data_rec_inC[6:0] };
          5'h8 : output_bus_regC <= {data_rec_inC[31:9] ,1'b0,data_rec_inC[7:0] };
          5'h9 : output_bus_regC <= {data_rec_inC[31:10] ,1'b0,data_rec_inC[8:0] };
          5'hA : output_bus_regC <= {data_rec_inC[31:11] ,1'b0,data_rec_inC[9:0] };
          5'hB : output_bus_regC <= {data_rec_inC[31:12] ,1'b0,data_rec_inC[10:0] };
          5'hC : output_bus_regC <= {data_rec_inC[31:13] ,1'b0,data_rec_inC[11:0] };
          5'hD : output_bus_regC <= {data_rec_inC[31:14] ,1'b0,data_rec_inC[12:0] };
          5'hE : output_bus_regC <= {data_rec_inC[31:15] ,1'b0,data_rec_inC[13:0] };
          5'hF : output_bus_regC <= {data_rec_inC[31:16] ,1'b0,data_rec_inC[14:0] };
          5'h10 : output_bus_regC <= {data_rec_inC[31:17] ,1'b0,data_rec_inC[15:0] };
          5'h11 : output_bus_regC <= {data_rec_inC[31:18] ,1'b0,data_rec_inC[16:0] };
          5'h12 : output_bus_regC <= {data_rec_inC[31:19] ,1'b0,data_rec_inC[17:0] };
          5'h13 : output_bus_regC <= {data_rec_inC[31:20] ,1'b0,data_rec_inC[18:0] };
          5'h14 : output_bus_regC <= {data_rec_inC[31:21] ,1'b0,data_rec_inC[19:0] };
          5'h15 : output_bus_regC <= {data_rec_inC[31:22] ,1'b0,data_rec_inC[20:0] };
          5'h16 : output_bus_regC <= {data_rec_inC[31:23] ,1'b0,data_rec_inC[21:0] };
          5'h17 : output_bus_regC <= {data_rec_inC[31:24] ,1'b0,data_rec_inC[22:0] };
          5'h18 : output_bus_regC <= {data_rec_inC[31:25] ,1'b0,data_rec_inC[23:0] };
          5'h19 : output_bus_regC <= {data_rec_inC[31:26] ,1'b0,data_rec_inC[24:0] };
          5'h1A : output_bus_regC <= {data_rec_inC[31:27] ,1'b0,data_rec_inC[25:0] };
          5'h1B : output_bus_regC <= {data_rec_inC[31:28] ,1'b0,data_rec_inC[26:0] };
          5'h1C : output_bus_regC <= {data_rec_inC[31:29] ,1'b0,data_rec_inC[27:0] };
          5'h1D : output_bus_regC <= {data_rec_inC[31:30] ,1'b0,data_rec_inC[28:0] };
          5'h1E : output_bus_regC <= {data_rec_inC[31] ,1'b0,data_rec_inC[29:0] };
          5'h1F : output_bus_regC <= {1'b0,data_rec_inC[30:0] };
          default : 
            begin
              output_bus_regC <= 32'd0;
            end
        endcase
      else
        begin
          output_bus_regC <= output_bus_regC;
        end
  end
assign data_rec_outA =  output_bus_regA;
assign data_rec_outB =  output_bus_regB;
assign data_rec_outC =  output_bus_regC;
endmodule

