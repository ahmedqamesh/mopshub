/****************************************************************************************************
 *                          ! THIS FILE WAS AUTO-GENERATED BY TMRG TOOL !                           *
 *                                   ! DO NOT EDIT IT MANUALLY !                                    *
 *                                                                                                  *
 * file    : ./output/buffer_rec_elink_spiTMR.v                                                     *
 *                                                                                                  *
 * user    : lucas                                                                                  *
 * host    : DESKTOP-BFDSFP2                                                                        *
 * date    : 05/12/2022 13:28:00                                                                    *
 *                                                                                                  *
 * workdir : /mnt/c/Users/Lucas/Documents/GitHub/mopshub_triplicated/triplicated/mopshub_top_board_16/hdl *
 * cmd     : /mnt/c/Users/Lucas/Documents/GitHub/mopshub_triplicated/tmrg-master/bin/tmrg -vv -c    *
 *           tmrg.cfg                                                                               *
 * tmrg rev: b25f042058e4e97751df2a0933c24aeadd5a78a5                                               *
 *                                                                                                  *
 * src file: buffer_rec_elink_spi.v                                                                 *
 *           Git SHA           : b25f042058e4e97751df2a0933c24aeadd5a78a5 (?? buffer_rec_elink_spi.v) *
 *           Modification time : 2022-12-04 13:47:54                                                *
 *           File Size         : 1506                                                               *
 *           MD5 hash          : a06c5138bd5616cc5844bc7d5fd17ff9                                   *
 *                                                                                                  *
 ****************************************************************************************************/

`resetall 
`timescale  1ns/10ps
module buffer_rec_elink_spiTMR(
  input wire  clk ,
  input wire  rst ,
  input wire [31:0] data_rec_in ,
  input wire [4:0] addr ,
  output wire [9:0] data_rec_10bitout ,
  input wire [7:0] Kchar_sop ,
  input wire [7:0] Kchar_eop ,
  input wire [7:0] Kchar_comma 
);
wire rstC;
wire rstB;
wire rstA;
wire [31:0] data_rec_inC;
wire [31:0] data_rec_inB;
wire [31:0] data_rec_inA;
wire clkC;
wire clkB;
wire clkA;
wire [4:0] addrC;
wire [4:0] addrB;
wire [4:0] addrA;
wire [7:0] Kchar_sopC;
wire [7:0] Kchar_sopB;
wire [7:0] Kchar_sopA;
wire [7:0] Kchar_eopC;
wire [7:0] Kchar_eopB;
wire [7:0] Kchar_eopA;
wire [7:0] Kchar_commaC;
wire [7:0] Kchar_commaB;
wire [7:0] Kchar_commaA;
wor data_rec_regTmrError;
wire [9:0] data_rec_reg;
reg  [9:0] data_rec_regA ;
reg  [9:0] data_rec_regB ;
reg  [9:0] data_rec_regC ;
initial
  data_rec_regA =  {2'b11,8'b10111100};
initial
  data_rec_regB =  {2'b11,8'b10111100};
initial
  data_rec_regC =  {2'b11,8'b10111100};
wire [9:0] data_rec_regV =  data_rec_reg;

always @( posedge clkA )
  if (!rstA)
    data_rec_regA <= {2'b11,Kchar_commaA};
  else
    case (addrA)
      5'b00000 : data_rec_regA =  {2'b11,Kchar_commaA};
      5'b00001 : data_rec_regA =  {2'b10,Kchar_sopA};
      5'b00010 : data_rec_regA =  {2'b00,data_rec_inA[31:24] };
      5'b00011 : data_rec_regA =  {2'b00,data_rec_inA[23:16] };
      5'b00100 : data_rec_regA =  {2'b00,data_rec_inA[15:8] };
      5'b00101 : data_rec_regA =  {2'b00,data_rec_inA[7:0] };
      5'b01100 : data_rec_regA =  {2'b01,Kchar_eopA};
      default : data_rec_regA =  {2'b11,Kchar_commaA};
    endcase

always @( posedge clkB )
  if (!rstB)
    data_rec_regB <= {2'b11,Kchar_commaB};
  else
    case (addrB)
      5'b00000 : data_rec_regB =  {2'b11,Kchar_commaB};
      5'b00001 : data_rec_regB =  {2'b10,Kchar_sopB};
      5'b00010 : data_rec_regB =  {2'b00,data_rec_inB[31:24] };
      5'b00011 : data_rec_regB =  {2'b00,data_rec_inB[23:16] };
      5'b00100 : data_rec_regB =  {2'b00,data_rec_inB[15:8] };
      5'b00101 : data_rec_regB =  {2'b00,data_rec_inB[7:0] };
      5'b01100 : data_rec_regB =  {2'b01,Kchar_eopB};
      default : data_rec_regB =  {2'b11,Kchar_commaB};
    endcase

always @( posedge clkC )
  if (!rstC)
    data_rec_regC <= {2'b11,Kchar_commaC};
  else
    case (addrC)
      5'b00000 : data_rec_regC =  {2'b11,Kchar_commaC};
      5'b00001 : data_rec_regC =  {2'b10,Kchar_sopC};
      5'b00010 : data_rec_regC =  {2'b00,data_rec_inC[31:24] };
      5'b00011 : data_rec_regC =  {2'b00,data_rec_inC[23:16] };
      5'b00100 : data_rec_regC =  {2'b00,data_rec_inC[15:8] };
      5'b00101 : data_rec_regC =  {2'b00,data_rec_inC[7:0] };
      5'b01100 : data_rec_regC =  {2'b01,Kchar_eopC};
      default : data_rec_regC =  {2'b11,Kchar_commaC};
    endcase
assign data_rec_10bitout =  data_rec_reg;

majorityVoter #(.WIDTH(10)) data_rec_regVoter (
    .inA(data_rec_regA),
    .inB(data_rec_regB),
    .inC(data_rec_regC),
    .out(data_rec_reg),
    .tmrErr(data_rec_regTmrError)
    );

fanout #(.WIDTH(8)) Kchar_commaFanout (
    .in(Kchar_comma),
    .outA(Kchar_commaA),
    .outB(Kchar_commaB),
    .outC(Kchar_commaC)
    );

fanout #(.WIDTH(8)) Kchar_eopFanout (
    .in(Kchar_eop),
    .outA(Kchar_eopA),
    .outB(Kchar_eopB),
    .outC(Kchar_eopC)
    );

fanout #(.WIDTH(8)) Kchar_sopFanout (
    .in(Kchar_sop),
    .outA(Kchar_sopA),
    .outB(Kchar_sopB),
    .outC(Kchar_sopC)
    );

fanout #(.WIDTH(5)) addrFanout (
    .in(addr),
    .outA(addrA),
    .outB(addrB),
    .outC(addrC)
    );

fanout clkFanout (
    .in(clk),
    .outA(clkA),
    .outB(clkB),
    .outC(clkC)
    );

fanout #(.WIDTH(32)) data_rec_inFanout (
    .in(data_rec_in),
    .outA(data_rec_inA),
    .outB(data_rec_inB),
    .outC(data_rec_inC)
    );

fanout rstFanout (
    .in(rst),
    .outA(rstA),
    .outB(rstB),
    .outC(rstC)
    );
endmodule

