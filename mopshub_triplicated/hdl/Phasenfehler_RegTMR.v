/****************************************************************************************************
 *                          ! THIS FILE WAS AUTO-GENERATED BY TMRG TOOL !                           *
 *                                   ! DO NOT EDIT IT MANUALLY !                                    *
 *                                                                                                  *
 * file    : ./output/Phasenfehler_RegTMR.v                                                         *
 *                                                                                                  *
 * user    : lucas                                                                                  *
 * host    : DESKTOP-BFDSFP2                                                                        *
 * date    : 05/12/2022 13:27:59                                                                    *
 *                                                                                                  *
 * workdir : /mnt/c/Users/Lucas/Documents/GitHub/mopshub_triplicated/triplicated/mopshub_top_board_16/hdl *
 * cmd     : /mnt/c/Users/Lucas/Documents/GitHub/mopshub_triplicated/tmrg-master/bin/tmrg -vv -c    *
 *           tmrg.cfg                                                                               *
 * tmrg rev: b25f042058e4e97751df2a0933c24aeadd5a78a5                                               *
 *                                                                                                  *
 * src file: Phasenfehler_Reg.v                                                                     *
 *           Git SHA           : b25f042058e4e97751df2a0933c24aeadd5a78a5 (?? Phasenfehler_Reg.v)   *
 *           Modification time : 2022-11-10 21:17:25                                                *
 *           File Size         : 1186                                                               *
 *           MD5 hash          : 19ba99058c016476a1e5d92c44b91a8b                                   *
 *                                                                                                  *
 ****************************************************************************************************/

module Phasenfehler_RegTMR(
  input wire  clk ,
  input wire  Reset ,
  input wire  Enable ,
  input wire [3:0] E2 ,
  input wire [3:0] E1 ,
  input wire [2:0] ctrl ,
  output wire signed [7:0] e_k 
);
wire signed  [7:0] e_kC;
wire signed  [7:0] e_kB;
wire signed  [7:0] e_kA;
wire [2:0] ctrlC;
wire [2:0] ctrlB;
wire [2:0] ctrlA;
wire clkC;
wire clkB;
wire clkA;
wire ResetC;
wire ResetB;
wire ResetA;
wire [3:0] E2C;
wire [3:0] E2B;
wire [3:0] E2A;
wire [3:0] E1_regVC;
wire [3:0] E1_regVB;
wire [3:0] E1_regVA;
wire [3:0] E1C;
wire [3:0] E1B;
wire [3:0] E1A;
wor e_k_iTmrError;
wire signed  [7:0] e_k_i;
wor E1_regTmrError;
wire [3:0] E1_reg;
reg  [3:0] E1_regA ;
reg  [3:0] E1_regB ;
reg  [3:0] E1_regC ;
reg signed  [7:0] e_k_iA ;
reg signed  [7:0] e_k_iB ;
reg signed  [7:0] e_k_iC ;
assign e_k =  e_k_i;
wire [3:0] E1_regV =  E1_reg;

always @( posedge clkA or negedge ResetA )
  begin
    if (ResetA==1'b0)
      begin
        e_k_iA <= 8'd0;
        E1_regA <= 4'd0;
      end
    else
      begin
        E1_regA <= E1_regVA;
        e_k_iA <= e_kA;
        case (ctrlA)
          3'd1 : e_k_iA <= (8*(E1_regVA-1))+E2A+3;
          3'd2 : e_k_iA <= (8*(E1_regVA-9))+(E2A-9)-5;
          3'd3 : e_k_iA <= E2A-5;
          3'd4 : E1_regA <= E1A;
          default : e_k_iA <= e_kA;
        endcase
      end
  end

always @( posedge clkB or negedge ResetB )
  begin
    if (ResetB==1'b0)
      begin
        e_k_iB <= 8'd0;
        E1_regB <= 4'd0;
      end
    else
      begin
        E1_regB <= E1_regVB;
        e_k_iB <= e_kB;
        case (ctrlB)
          3'd1 : e_k_iB <= (8*(E1_regVB-1))+E2B+3;
          3'd2 : e_k_iB <= (8*(E1_regVB-9))+(E2B-9)-5;
          3'd3 : e_k_iB <= E2B-5;
          3'd4 : E1_regB <= E1B;
          default : e_k_iB <= e_kB;
        endcase
      end
  end

always @( posedge clkC or negedge ResetC )
  begin
    if (ResetC==1'b0)
      begin
        e_k_iC <= 8'd0;
        E1_regC <= 4'd0;
      end
    else
      begin
        E1_regC <= E1_regVC;
        e_k_iC <= e_kC;
        case (ctrlC)
          3'd1 : e_k_iC <= (8*(E1_regVC-1))+E2C+3;
          3'd2 : e_k_iC <= (8*(E1_regVC-9))+(E2C-9)-5;
          3'd3 : e_k_iC <= E2C-5;
          3'd4 : E1_regC <= E1C;
          default : e_k_iC <= e_kC;
        endcase
      end
  end

majorityVoter #(.WIDTH(4)) E1_regVoter (
    .inA(E1_regA),
    .inB(E1_regB),
    .inC(E1_regC),
    .out(E1_reg),
    .tmrErr(E1_regTmrError)
    );

majorityVoter #(.WIDTH(8)) e_k_iVoter (
    .inA(e_k_iA),
    .inB(e_k_iB),
    .inC(e_k_iC),
    .out(e_k_i),
    .tmrErr(e_k_iTmrError)
    );

fanout #(.WIDTH(4)) E1Fanout (
    .in(E1),
    .outA(E1A),
    .outB(E1B),
    .outC(E1C)
    );

fanout #(.WIDTH(4)) E1_regVFanout (
    .in(E1_regV),
    .outA(E1_regVA),
    .outB(E1_regVB),
    .outC(E1_regVC)
    );

fanout #(.WIDTH(4)) E2Fanout (
    .in(E2),
    .outA(E2A),
    .outB(E2B),
    .outC(E2C)
    );

fanout ResetFanout (
    .in(Reset),
    .outA(ResetA),
    .outB(ResetB),
    .outC(ResetC)
    );

fanout clkFanout (
    .in(clk),
    .outA(clkA),
    .outB(clkB),
    .outC(clkC)
    );

fanout #(.WIDTH(3)) ctrlFanout (
    .in(ctrl),
    .outA(ctrlA),
    .outB(ctrlB),
    .outC(ctrlC)
    );

fanout #(.WIDTH(8)) e_kFanout (
    .in(e_k),
    .outA(e_kA),
    .outB(e_kB),
    .outC(e_kC)
    );
endmodule

