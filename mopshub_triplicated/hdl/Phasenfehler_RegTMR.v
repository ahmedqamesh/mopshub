/****************************************************************************************************
 *                          ! THIS FILE WAS AUTO-GENERATED BY TMRG TOOL !                           *
 *                                   ! DO NOT EDIT IT MANUALLY !                                    *
 *                                                                                                  *
 * file    : ./output/Phasenfehler_RegTMR.v                                                         *
 *                                                                                                  *
 * user    : lucas                                                                                  *
 * host    : DESKTOP-BFDSFP2                                                                        *
 * date    : 03/04/2022 20:08:30                                                                    *
 *                                                                                                  *
 * workdir : /mnt/c/Users/Lucas/Desktop/mopshub_triplication/triplicated/mopshub_top_canakari_ftrim/hdl *
 * cmd     : /mnt/c/Users/Lucas/Desktop/mopshub_triplication/tmrg-master/bin/tmrg -vv -c tmrg.cfg   *
 * tmrg rev:                                                                                        *
 *                                                                                                  *
 * src file: Phasenfehler_Reg.v                                                                     *
 *           Git SHA           : File not in git repository!                                        *
 *           Modification time : 2022-03-29 13:49:21                                                *
 *           File Size         : 1207                                                               *
 *           MD5 hash          : a1daf6f276493998cd7ade8728aee099                                   *
 *                                                                                                  *
 ****************************************************************************************************/

module Phasenfehler_RegTMR(
  input wire  clkA ,
  input wire  clkB ,
  input wire  clkC ,
  input wire  ResetA ,
  input wire  ResetB ,
  input wire  ResetC ,
  input wire  EnableA ,
  input wire  EnableB ,
  input wire  EnableC ,
  input wire [3:0] E2A ,
  input wire [3:0] E2B ,
  input wire [3:0] E2C ,
  input wire [3:0] E1A ,
  input wire [3:0] E1B ,
  input wire [3:0] E1C ,
  input wire [2:0] ctrlA ,
  input wire [2:0] ctrlB ,
  input wire [2:0] ctrlC ,
  output wire signed [7:0] e_kA ,
  output wire signed [7:0] e_kB ,
  output wire signed [7:0] e_kC 
);
wor e_k_iTmrErrorC;
wire signed  [7:0] e_k_iVotedC;
wor E1_regTmrErrorC;
wire [3:0] E1_regVotedC;
wor e_k_iTmrErrorB;
wire signed  [7:0] e_k_iVotedB;
wor E1_regTmrErrorB;
wire [3:0] E1_regVotedB;
wor e_k_iTmrErrorA;
wire signed  [7:0] e_k_iVotedA;
wor E1_regTmrErrorA;
wire [3:0] E1_regVotedA;
reg  [3:0] E1_regA ;
reg  [3:0] E1_regB ;
reg  [3:0] E1_regC ;
reg signed  [7:0] e_k_iA ;
reg signed  [7:0] e_k_iB ;
reg signed  [7:0] e_k_iC ;
assign e_kA =  e_k_iA;
assign e_kB =  e_k_iB;
assign e_kC =  e_k_iC;

always @( posedge clkA or negedge ResetA )
  begin
    if (ResetA==1'b0)
      begin
        e_k_iA <= 8'd0;
        E1_regA <= 4'd0;
      end
    else
      begin
        E1_regA <= E1_regVotedA;
        e_k_iA <= e_k_iVotedA;
        case (ctrlA)
          3'd1 : e_k_iA <= (8*(E1_regVotedA-1))+E2A+3;
          3'd2 : e_k_iA <= (8*(E1_regVotedA-9))+(E2A-9)-5;
          3'd3 : e_k_iA <= E2A-5;
          3'd4 : E1_regA <= E1A;
          default : e_k_iA <= e_k_iVotedA;
        endcase
      end
  end

always @( posedge clkB or negedge ResetB )
  begin
    if (ResetB==1'b0)
      begin
        e_k_iB <= 8'd0;
        E1_regB <= 4'd0;
      end
    else
      begin
        E1_regB <= E1_regVotedB;
        e_k_iB <= e_k_iVotedB;
        case (ctrlB)
          3'd1 : e_k_iB <= (8*(E1_regVotedB-1))+E2B+3;
          3'd2 : e_k_iB <= (8*(E1_regVotedB-9))+(E2B-9)-5;
          3'd3 : e_k_iB <= E2B-5;
          3'd4 : E1_regB <= E1B;
          default : e_k_iB <= e_k_iVotedB;
        endcase
      end
  end

always @( posedge clkC or negedge ResetC )
  begin
    if (ResetC==1'b0)
      begin
        e_k_iC <= 8'd0;
        E1_regC <= 4'd0;
      end
    else
      begin
        E1_regC <= E1_regVotedC;
        e_k_iC <= e_k_iVotedC;
        case (ctrlC)
          3'd1 : e_k_iC <= (8*(E1_regVotedC-1))+E2C+3;
          3'd2 : e_k_iC <= (8*(E1_regVotedC-9))+(E2C-9)-5;
          3'd3 : e_k_iC <= E2C-5;
          3'd4 : E1_regC <= E1C;
          default : e_k_iC <= e_k_iVotedC;
        endcase
      end
  end

majorityVoter #(.WIDTH(4)) E1_regVoterA (
    .inA(E1_regA),
    .inB(E1_regB),
    .inC(E1_regC),
    .out(E1_regVotedA),
    .tmrErr(E1_regTmrErrorA)
    );

majorityVoter #(.WIDTH(8)) e_k_iVoterA (
    .inA(e_k_iA),
    .inB(e_k_iB),
    .inC(e_k_iC),
    .out(e_k_iVotedA),
    .tmrErr(e_k_iTmrErrorA)
    );

majorityVoter #(.WIDTH(4)) E1_regVoterB (
    .inA(E1_regA),
    .inB(E1_regB),
    .inC(E1_regC),
    .out(E1_regVotedB),
    .tmrErr(E1_regTmrErrorB)
    );

majorityVoter #(.WIDTH(8)) e_k_iVoterB (
    .inA(e_k_iA),
    .inB(e_k_iB),
    .inC(e_k_iC),
    .out(e_k_iVotedB),
    .tmrErr(e_k_iTmrErrorB)
    );

majorityVoter #(.WIDTH(4)) E1_regVoterC (
    .inA(E1_regA),
    .inB(E1_regB),
    .inC(E1_regC),
    .out(E1_regVotedC),
    .tmrErr(E1_regTmrErrorC)
    );

majorityVoter #(.WIDTH(8)) e_k_iVoterC (
    .inA(e_k_iA),
    .inB(e_k_iB),
    .inC(e_k_iC),
    .out(e_k_iVotedC),
    .tmrErr(e_k_iTmrErrorC)
    );
endmodule

