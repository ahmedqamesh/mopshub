/****************************************************************************************************
 *                          ! THIS FILE WAS AUTO-GENERATED BY TMRG TOOL !                           *
 *                                   ! DO NOT EDIT IT MANUALLY !                                    *
 *                                                                                                  *
 * file    : ./output/Output_ScalingTMR.v                                                           *
 *                                                                                                  *
 * user    : lucas                                                                                  *
 * host    : DESKTOP-BFDSFP2                                                                        *
 * date    : 03/04/2022 20:08:29                                                                    *
 *                                                                                                  *
 * workdir : /mnt/c/Users/Lucas/Desktop/mopshub_triplication/triplicated/mopshub_top_canakari_ftrim/hdl *
 * cmd     : /mnt/c/Users/Lucas/Desktop/mopshub_triplication/tmrg-master/bin/tmrg -vv -c tmrg.cfg   *
 * tmrg rev:                                                                                        *
 *                                                                                                  *
 * src file: Output_Scaling.v                                                                       *
 *           Git SHA           : File not in git repository!                                        *
 *           Modification time : 2022-03-29 13:49:21                                                *
 *           File Size         : 964                                                                *
 *           MD5 hash          : d00c86befd4295cb5b62a22b5aab7fd4                                   *
 *                                                                                                  *
 ****************************************************************************************************/

module Output_ScalingTMR #(
  parameter  WidthA  = 18,
  parameter  WidthB  = 6
)(
  input wire signed [WidthA-1:0] AA ,
  input wire signed [WidthA-1:0] AB ,
  input wire signed [WidthA-1:0] AC ,
  input wire  ResetA ,
  input wire  ResetB ,
  input wire  ResetC ,
  input wire  CLKA ,
  input wire  CLKB ,
  input wire  CLKC ,
  input wire  EnableA ,
  input wire  EnableB ,
  input wire  EnableC ,
  output wire [WidthB-1:0] BA ,
  output wire [WidthB-1:0] BB ,
  output wire [WidthB-1:0] BC 
);
localparam Max =(2**WidthB)-1;
wor B_iTmrErrorC;
wire [WidthB-1:0] B_iVotedC;
wor B_iTmrErrorB;
wire [WidthB-1:0] B_iVotedB;
wor B_iTmrErrorA;
wire [WidthB-1:0] B_iVotedA;
reg  [WidthB-1:0] B_iA ;
reg  [WidthB-1:0] B_iB ;
reg  [WidthB-1:0] B_iC ;
assign BA =  B_iVotedA;
assign BB =  B_iVotedB;
assign BC =  B_iVotedC;

always @( posedge CLKA or negedge ResetA )
  begin
    if (ResetA==0)
      B_iA <= 6'b100000;
    else
      begin
        if (EnableA)
          begin
            if (AA>0&&AA[17:3] >Max)
              B_iA <= Max;
            else
              if (AA<=0)
                B_iA <= 0;
              else
                B_iA <= AA[8:3] ;
          end
        else
          B_iA <= B_iVotedA;
      end
  end

always @( posedge CLKB or negedge ResetB )
  begin
    if (ResetB==0)
      B_iB <= 6'b100000;
    else
      begin
        if (EnableB)
          begin
            if (AB>0&&AB[17:3] >Max)
              B_iB <= Max;
            else
              if (AB<=0)
                B_iB <= 0;
              else
                B_iB <= AB[8:3] ;
          end
        else
          B_iB <= B_iVotedB;
      end
  end

always @( posedge CLKC or negedge ResetC )
  begin
    if (ResetC==0)
      B_iC <= 6'b100000;
    else
      begin
        if (EnableC)
          begin
            if (AC>0&&AC[17:3] >Max)
              B_iC <= Max;
            else
              if (AC<=0)
                B_iC <= 0;
              else
                B_iC <= AC[8:3] ;
          end
        else
          B_iC <= B_iVotedC;
      end
  end

majorityVoter #(.WIDTH(((WidthB-1)>(0)) ? ((WidthB-1)-(0)+1) : ((0)-(WidthB-1)+1))) B_iVoterA (
    .inA(B_iA),
    .inB(B_iB),
    .inC(B_iC),
    .out(B_iVotedA),
    .tmrErr(B_iTmrErrorA)
    );

majorityVoter #(.WIDTH(((WidthB-1)>(0)) ? ((WidthB-1)-(0)+1) : ((0)-(WidthB-1)+1))) B_iVoterB (
    .inA(B_iA),
    .inB(B_iB),
    .inC(B_iC),
    .out(B_iVotedB),
    .tmrErr(B_iTmrErrorB)
    );

majorityVoter #(.WIDTH(((WidthB-1)>(0)) ? ((WidthB-1)-(0)+1) : ((0)-(WidthB-1)+1))) B_iVoterC (
    .inA(B_iA),
    .inB(B_iB),
    .inC(B_iC),
    .out(B_iVotedC),
    .tmrErr(B_iTmrErrorC)
    );
endmodule

