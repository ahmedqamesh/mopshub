/****************************************************************************************************
 *                          ! THIS FILE WAS AUTO-GENERATED BY TMRG TOOL !                           *
 *                                   ! DO NOT EDIT IT MANUALLY !                                    *
 *                                                                                                  *
 * file    : ./output/Output_ScalingTMR.v                                                           *
 *                                                                                                  *
 * user    : lucas                                                                                  *
 * host    : DESKTOP-BFDSFP2                                                                        *
 * date    : 06/10/2022 13:52:34                                                                    *
 *                                                                                                  *
 * workdir : /mnt/c/Users/Lucas/Documents/GitHub/mopshub_triplicated/triplicated/mopshub_top_board/hdl *
 * cmd     : /mnt/c/Users/Lucas/Desktop/mopshub_triplication/tmrg-master/bin/tmrg -vv -c tmrg.cfg   *
 * tmrg rev:                                                                                        *
 *                                                                                                  *
 * src file: Output_Scaling.v                                                                       *
 *           Git SHA           : c110441b08b692cc54ebd4a3b84a2599430e8f93                           *
 *           Modification time : 2022-08-25 09:50:07                                                *
 *           File Size         : 937                                                                *
 *           MD5 hash          : 1e1e0c6e4a5e30d25ede67415b4a4afe                                   *
 *                                                                                                  *
 ****************************************************************************************************/

module Output_ScalingTMR #(
  parameter  WidthA  = 18,
  parameter  WidthB  = 6
)(
  input wire signed [WidthA-1:0] A ,
  input wire  Reset ,
  input wire  CLK ,
  input wire  Enable ,
  output wire [WidthB-1:0] B 
);
localparam Max =(2**WidthB)-1;
wire ResetC;
wire ResetB;
wire ResetA;
wire EnableC;
wire EnableB;
wire EnableA;
wire CLKC;
wire CLKB;
wire CLKA;
wire [WidthB-1:0] BC;
wire [WidthB-1:0] BB;
wire [WidthB-1:0] BA;
wire signed  [WidthA-1:0] AC;
wire signed  [WidthA-1:0] AB;
wire signed  [WidthA-1:0] AA;
wor B_iTmrError;
wire [WidthB-1:0] B_i;
reg  [WidthB-1:0] B_iA ;
reg  [WidthB-1:0] B_iB ;
reg  [WidthB-1:0] B_iC ;
assign B =  B_i;

always @( posedge CLKA or negedge ResetA )
  begin
    if (ResetA==0)
      B_iA <= 6'b100000;
    else
      begin
        if (EnableA)
          begin
            if (AA>0&&AA[17:3] >Max)
              B_iA <= Max;
            else
              if (AA<=0)
                B_iA <= 0;
              else
                B_iA <= AA[8:3] ;
          end
        else
          B_iA <= BA;
      end
  end

always @( posedge CLKB or negedge ResetB )
  begin
    if (ResetB==0)
      B_iB <= 6'b100000;
    else
      begin
        if (EnableB)
          begin
            if (AB>0&&AB[17:3] >Max)
              B_iB <= Max;
            else
              if (AB<=0)
                B_iB <= 0;
              else
                B_iB <= AB[8:3] ;
          end
        else
          B_iB <= BB;
      end
  end

always @( posedge CLKC or negedge ResetC )
  begin
    if (ResetC==0)
      B_iC <= 6'b100000;
    else
      begin
        if (EnableC)
          begin
            if (AC>0&&AC[17:3] >Max)
              B_iC <= Max;
            else
              if (AC<=0)
                B_iC <= 0;
              else
                B_iC <= AC[8:3] ;
          end
        else
          B_iC <= BC;
      end
  end

majorityVoter #(.WIDTH(((WidthB-1)>(0)) ? ((WidthB-1)-(0)+1) : ((0)-(WidthB-1)+1))) B_iVoter (
    .inA(B_iA),
    .inB(B_iB),
    .inC(B_iC),
    .out(B_i),
    .tmrErr(B_iTmrError)
    );

fanout #(.WIDTH(((WidthA-1)>(0)) ? ((WidthA-1)-(0)+1) : ((0)-(WidthA-1)+1))) AFanout (
    .in(A),
    .outA(AA),
    .outB(AB),
    .outC(AC)
    );

fanout #(.WIDTH(((WidthB-1)>(0)) ? ((WidthB-1)-(0)+1) : ((0)-(WidthB-1)+1))) BFanout (
    .in(B),
    .outA(BA),
    .outB(BB),
    .outC(BC)
    );

fanout CLKFanout (
    .in(CLK),
    .outA(CLKA),
    .outB(CLKB),
    .outC(CLKC)
    );

fanout EnableFanout (
    .in(Enable),
    .outA(EnableA),
    .outB(EnableB),
    .outC(EnableC)
    );

fanout ResetFanout (
    .in(Reset),
    .outA(ResetA),
    .outB(ResetB),
    .outC(ResetC)
    );
endmodule

