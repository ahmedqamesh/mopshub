/****************************************************************************************************
 *                          ! THIS FILE WAS AUTO-GENERATED BY TMRG TOOL !                           *
 *                                   ! DO NOT EDIT IT MANUALLY !                                    *
 *                                                                                                  *
 * file    : ./output/llc_fsm2TMR.v                                                                 *
 *                                                                                                  *
 * user    : lucas                                                                                  *
 * host    : DESKTOP-BFDSFP2                                                                        *
 * date    : 16/08/2022 12:58:22                                                                    *
 *                                                                                                  *
 * workdir : /mnt/c/Users/Lucas/Desktop/mopshub_triplication/mopshub_top_board_canakari_ftrim/hdl   *
 * cmd     : /mnt/c/Users/Lucas/Desktop/mopshub_triplication/tmrg-master/bin/tmrg -c tmrg.cfg -vvv  *
 * tmrg rev:                                                                                        *
 *                                                                                                  *
 * src file: llc_fsm2.v                                                                             *
 *           Git SHA           : File not in git repository!                                        *
 *           Modification time : 2022-03-29 13:49:21                                                *
 *           File Size         : 14157                                                              *
 *           MD5 hash          : 640c89d93f326780b119f23fdf593f7c                                   *
 *                                                                                                  *
 ****************************************************************************************************/

module llc_fsm2TMR(
  input wire  clockA ,
  input wire  clockB ,
  input wire  clockC ,
  input wire  resetA ,
  input wire  resetB ,
  input wire  resetC ,
  input wire  initreqrA ,
  input wire  initreqrB ,
  input wire  initreqrC ,
  input wire  traregbitA ,
  input wire  traregbitB ,
  input wire  traregbitC ,
  input wire  sucfrecvcA ,
  input wire  sucfrecvcB ,
  input wire  sucfrecvcC ,
  input wire  sucftrancA ,
  input wire  sucftrancB ,
  input wire  sucftrancC ,
  input wire  sucfrecvrA ,
  input wire  sucfrecvrB ,
  input wire  sucfrecvrC ,
  input wire  sucftranrA ,
  input wire  sucftranrB ,
  input wire  sucftranrC ,
  input wire  equalA ,
  input wire  equalB ,
  input wire  equalC ,
  output reg  activtregA ,
  output reg  activtregB ,
  output reg  activtregC ,
  output wire  activrregA ,
  output wire  activrregB ,
  output wire  activrregC ,
  output reg  activgregA ,
  output reg  activgregB ,
  output reg  activgregC ,
  output wire  ldrecidA ,
  output wire  ldrecidB ,
  output wire  ldrecidC ,
  output reg  sucftranoA ,
  output reg  sucftranoB ,
  output reg  sucftranoC ,
  output reg  sucfrecvoA ,
  output reg  sucfrecvoB ,
  output reg  sucfrecvoC ,
  output reg  overflowoA ,
  output reg  overflowoB ,
  output reg  overflowoC ,
  output reg  transA ,
  output reg  transB ,
  output reg  transC ,
  output reg  loadA ,
  output reg  loadB ,
  output reg  loadC ,
  output reg  actvtsftA ,
  output reg  actvtsftB ,
  output reg  actvtsftC ,
  output reg  actvtcapA ,
  output reg  actvtcapB ,
  output reg  actvtcapC ,
  output reg  resettraA ,
  output reg  resettraB ,
  output reg  resettraC ,
  output reg  resetallA ,
  output reg  resetallB ,
  output reg  resetallC 
);
localparam waitoact =4'b0000;
localparam tradrvdat =4'b0001;
localparam traruncap =4'b0010;
localparam tralodsft =4'b0011;
localparam trawtosuc =4'b0100;
localparam trasetvall =4'b0101;
localparam trareset =4'b0110;
localparam trasetvalh =4'b0111;
localparam recwrtmesll =4'b1000;
localparam recwrtmeslh =4'b1001;
localparam recwrtmeshl =4'b1010;
localparam recwrtmeshh =4'b1011;
localparam resetste =4'b1100;
wor CURRENT_STATETmrErrorC;
wire [3:0] CURRENT_STATEVotedC;
wor CURRENT_STATETmrErrorB;
wire [3:0] CURRENT_STATEVotedB;
wor CURRENT_STATETmrErrorA;
wire [3:0] CURRENT_STATEVotedA;
reg  [3:0] CURRENT_STATEA ;
reg  [3:0] NEXT_STATEA ;
reg  [3:0] CURRENT_STATEB ;
reg  [3:0] NEXT_STATEB ;
reg  [3:0] CURRENT_STATEC ;
reg  [3:0] NEXT_STATEC ;
reg  activrreg_iA ;
reg  activrreg_iB ;
reg  activrreg_iC ;
wire [1:0] sctrrcinA;
wire [1:0] sctrrcinB;
wire [1:0] sctrrcinC;
assign sctrrcinA =  {sucftranrA,sucfrecvrA};
assign sctrrcinB =  {sucftranrB,sucfrecvrB};
assign sctrrcinC =  {sucftranrC,sucfrecvrC};
assign ldrecidA =  activrreg_iA;
assign ldrecidB =  activrreg_iB;
assign ldrecidC =  activrreg_iC;
assign activrregA =  activrreg_iA;
assign activrregB =  activrreg_iB;
assign activrregC =  activrreg_iC;

always @( posedge clockA )
  begin
    if (resetA==1'b0)
      CURRENT_STATEA <= waitoact;
    else
      CURRENT_STATEA <= NEXT_STATEA;
  end

always @( posedge clockB )
  begin
    if (resetB==1'b0)
      CURRENT_STATEB <= waitoact;
    else
      CURRENT_STATEB <= NEXT_STATEB;
  end

always @( posedge clockC )
  begin
    if (resetC==1'b0)
      CURRENT_STATEC <= waitoact;
    else
      CURRENT_STATEC <= NEXT_STATEC;
  end

always @( CURRENT_STATEVotedA or traregbitA or sucfrecvcA or sucftrancA or sucfrecvrA or sctrrcinA or initreqrA or equalA )
  begin
    activtregA =  1'b0;
    activrreg_iA =  1'b0;
    activgregA =  1'b0;
    sucftranoA =  1'b0;
    sucfrecvoA =  1'b0;
    transA =  1'b0;
    loadA =  1'b0;
    actvtsftA =  1'b0;
    actvtcapA =  1'b0;
    overflowoA =  1'b0;
    resettraA =  1'b1;
    resetallA =  1'b1;
    case (CURRENT_STATEVotedA)
      waitoact : 
        begin
          activtregA =  1'b0;
          activrreg_iA =  1'b0;
          activgregA =  1'b0;
          sucftranoA =  1'b0;
          sucfrecvoA =  1'b0;
          transA =  1'b0;
          loadA =  1'b0;
          actvtsftA =  1'b0;
          actvtcapA =  1'b0;
          overflowoA =  1'b0;
          resettraA =  1'b1;
          resetallA =  1'b1;
          if (initreqrA==1'b1)
            NEXT_STATEA =  resetste;
          else
            if (initreqrA==1'b0&&traregbitA==1'b1&&sucfrecvcA==1'b0)
              NEXT_STATEA =  tradrvdat;
            else
              if (sctrrcinA==2'b00&&sucfrecvcA==1'b1&&initreqrA==1'b0&&equalA==1'b1)
                NEXT_STATEA =  recwrtmesll;
              else
                if (sctrrcinA==2'b01&&sucfrecvcA==1'b1&&initreqrA==1'b0&&equalA==1'b1)
                  NEXT_STATEA =  recwrtmeslh;
                else
                  if (sctrrcinA==2'b10&&sucfrecvcA==1'b1&&initreqrA==1'b0&&equalA==1'b1)
                    NEXT_STATEA =  recwrtmeshl;
                  else
                    if (sctrrcinA==2'b11&&sucfrecvcA==1'b1&&initreqrA==1'b0&&equalA==1'b1)
                      NEXT_STATEA =  recwrtmeshh;
                    else
                      NEXT_STATEA =  waitoact;
        end
      resetste : 
        begin
          activtregA =  1'b0;
          activrreg_iA =  1'b0;
          activgregA =  1'b1;
          sucftranoA =  1'b0;
          sucfrecvoA =  1'b0;
          transA =  1'b0;
          loadA =  1'b0;
          actvtsftA =  1'b0;
          actvtcapA =  1'b0;
          overflowoA =  1'b0;
          resettraA =  1'b1;
          resetallA =  1'b0;
          NEXT_STATEA =  waitoact;
        end
      trareset : 
        begin
          activtregA =  1'b0;
          activrreg_iA =  1'b0;
          activgregA =  1'b0;
          sucftranoA =  1'b0;
          sucfrecvoA =  1'b0;
          transA =  1'b0;
          loadA =  1'b0;
          actvtsftA =  1'b0;
          actvtcapA =  1'b0;
          overflowoA =  1'b0;
          resettraA =  1'b0;
          resetallA =  1'b1;
          if (initreqrA==1'b1)
            NEXT_STATEA =  resetste;
          else
            NEXT_STATEA =  tradrvdat;
        end
      tradrvdat : 
        begin
          activtregA =  1'b0;
          activrreg_iA =  1'b0;
          activgregA =  1'b0;
          sucftranoA =  1'b0;
          sucfrecvoA =  1'b0;
          transA =  1'b0;
          loadA =  1'b0;
          actvtsftA =  1'b0;
          actvtcapA =  1'b0;
          overflowoA =  1'b0;
          resettraA =  1'b1;
          resetallA =  1'b1;
          if (initreqrA==1'b1)
            NEXT_STATEA =  resetste;
          else
            NEXT_STATEA =  traruncap;
        end
      traruncap : 
        begin
          activtregA =  1'b0;
          activrreg_iA =  1'b0;
          activgregA =  1'b0;
          sucftranoA =  1'b0;
          sucfrecvoA =  1'b0;
          transA =  1'b0;
          loadA =  1'b1;
          actvtsftA =  1'b0;
          actvtcapA =  1'b1;
          overflowoA =  1'b0;
          resettraA =  1'b1;
          resetallA =  1'b1;
          if (initreqrA==1'b1)
            NEXT_STATEA =  resetste;
          else
            NEXT_STATEA =  tralodsft;
        end
      tralodsft : 
        begin
          activtregA =  1'b0;
          activrreg_iA =  1'b0;
          activgregA =  1'b0;
          sucftranoA =  1'b0;
          sucfrecvoA =  1'b0;
          transA =  1'b0;
          loadA =  1'b1;
          actvtsftA =  1'b1;
          actvtcapA =  1'b0;
          overflowoA =  1'b0;
          resettraA =  1'b1;
          resetallA =  1'b1;
          if (initreqrA==1'b1)
            NEXT_STATEA =  resetste;
          else
            NEXT_STATEA =  trawtosuc;
        end
      trawtosuc : 
        begin
          activtregA =  1'b0;
          activrreg_iA =  1'b0;
          activgregA =  1'b0;
          sucftranoA =  1'b0;
          sucfrecvoA =  1'b0;
          transA =  1'b1;
          loadA =  1'b0;
          actvtsftA =  1'b0;
          actvtcapA =  1'b0;
          overflowoA =  1'b0;
          resettraA =  1'b1;
          resetallA =  1'b1;
          if (initreqrA==1'b1)
            NEXT_STATEA =  resetste;
          else
            if (initreqrA==1'b0&&sucftrancA==1'b1&&sucfrecvcA==1'b0&&sucfrecvrA==1'b0)
              NEXT_STATEA =  trasetvall;
            else
              if (initreqrA==1'b0&&sucftrancA==1'b1&&sucfrecvcA==1'b0&&sucfrecvrA==1'b1)
                NEXT_STATEA =  trasetvalh;
              else
                if (sctrrcinA==2'b00&&sucfrecvcA==1'b1&&initreqrA==1'b0&&equalA==1'b1)
                  NEXT_STATEA =  recwrtmesll;
                else
                  if (sctrrcinA==2'b01&&sucfrecvcA==1'b1&&initreqrA==1'b0&&equalA==1'b1)
                    NEXT_STATEA =  recwrtmeshl;
                  else
                    if (sctrrcinA==2'b10&&sucfrecvcA==1'b1&&initreqrA==1'b0&&equalA==1'b1)
                      NEXT_STATEA =  recwrtmeshl;
                    else
                      if (sctrrcinA==2'b11&&sucfrecvcA==1'b1&&initreqrA==1'b0&&equalA==1'b1)
                        NEXT_STATEA =  recwrtmeshh;
                      else
                        NEXT_STATEA =  trawtosuc;
        end
      trasetvall : 
        begin
          activtregA =  1'b1;
          activrreg_iA =  1'b0;
          activgregA =  1'b1;
          sucftranoA =  1'b1;
          sucfrecvoA =  1'b0;
          transA =  1'b0;
          loadA =  1'b0;
          actvtsftA =  1'b0;
          actvtcapA =  1'b0;
          overflowoA =  1'b0;
          resettraA =  1'b1;
          resetallA =  1'b1;
          if (initreqrA==1'b1)
            NEXT_STATEA =  resetste;
          else
            NEXT_STATEA =  waitoact;
        end
      trasetvalh : 
        begin
          activtregA =  1'b1;
          activrreg_iA =  1'b0;
          activgregA =  1'b1;
          sucftranoA =  1'b1;
          sucfrecvoA =  1'b1;
          transA =  1'b0;
          loadA =  1'b0;
          actvtsftA =  1'b0;
          actvtcapA =  1'b0;
          overflowoA =  1'b0;
          resettraA =  1'b1;
          resetallA =  1'b1;
          if (initreqrA==1'b1)
            NEXT_STATEA =  resetste;
          else
            NEXT_STATEA =  waitoact;
        end
      recwrtmesll : 
        begin
          activtregA =  1'b0;
          activrreg_iA =  1'b1;
          activgregA =  1'b1;
          sucftranoA =  1'b0;
          sucfrecvoA =  1'b1;
          transA =  1'b0;
          loadA =  1'b0;
          actvtsftA =  1'b0;
          actvtcapA =  1'b0;
          resettraA =  1'b1;
          overflowoA =  1'b0;
          resetallA =  1'b1;
          if (initreqrA==1'b1)
            NEXT_STATEA =  resetste;
          else
            if (sucfrecvcA==1'b0)
              NEXT_STATEA =  waitoact;
            else
              NEXT_STATEA =  recwrtmesll;
        end
      recwrtmeslh : 
        begin
          activtregA =  1'b0;
          activrreg_iA =  1'b1;
          activgregA =  1'b1;
          sucftranoA =  1'b0;
          sucfrecvoA =  1'b1;
          transA =  1'b0;
          loadA =  1'b0;
          actvtsftA =  1'b0;
          actvtcapA =  1'b0;
          resettraA =  1'b1;
          overflowoA =  1'b1;
          resetallA =  1'b1;
          if (initreqrA==1'b1)
            NEXT_STATEA =  resetste;
          else
            if (sucfrecvcA==1'b0)
              NEXT_STATEA =  waitoact;
            else
              NEXT_STATEA =  recwrtmeslh;
        end
      recwrtmeshl : 
        begin
          activtregA =  1'b0;
          activrreg_iA =  1'b1;
          activgregA =  1'b1;
          sucftranoA =  1'b1;
          sucfrecvoA =  1'b1;
          transA =  1'b0;
          loadA =  1'b0;
          actvtsftA =  1'b0;
          actvtcapA =  1'b0;
          resettraA =  1'b1;
          overflowoA =  1'b0;
          resetallA =  1'b1;
          if (initreqrA==1'b1)
            NEXT_STATEA =  resetste;
          else
            if (sucfrecvcA==1'b0)
              NEXT_STATEA =  waitoact;
            else
              NEXT_STATEA =  recwrtmeshl;
        end
      recwrtmeshh : 
        begin
          activtregA =  1'b0;
          activrreg_iA =  1'b1;
          activgregA =  1'b1;
          sucftranoA =  1'b1;
          sucfrecvoA =  1'b1;
          transA =  1'b0;
          loadA =  1'b0;
          actvtsftA =  1'b0;
          actvtcapA =  1'b0;
          resettraA =  1'b1;
          overflowoA =  1'b1;
          resetallA =  1'b1;
          if (initreqrA==1'b1)
            NEXT_STATEA =  resetste;
          else
            if (sucfrecvcA==1'b0)
              NEXT_STATEA =  waitoact;
            else
              NEXT_STATEA =  recwrtmeshh;
        end
      default : 
        begin
          NEXT_STATEA =  CURRENT_STATEVotedA;
        end
    endcase
  end

always @( CURRENT_STATEVotedB or traregbitB or sucfrecvcB or sucftrancB or sucfrecvrB or sctrrcinB or initreqrB or equalB )
  begin
    activtregB =  1'b0;
    activrreg_iB =  1'b0;
    activgregB =  1'b0;
    sucftranoB =  1'b0;
    sucfrecvoB =  1'b0;
    transB =  1'b0;
    loadB =  1'b0;
    actvtsftB =  1'b0;
    actvtcapB =  1'b0;
    overflowoB =  1'b0;
    resettraB =  1'b1;
    resetallB =  1'b1;
    case (CURRENT_STATEVotedB)
      waitoact : 
        begin
          activtregB =  1'b0;
          activrreg_iB =  1'b0;
          activgregB =  1'b0;
          sucftranoB =  1'b0;
          sucfrecvoB =  1'b0;
          transB =  1'b0;
          loadB =  1'b0;
          actvtsftB =  1'b0;
          actvtcapB =  1'b0;
          overflowoB =  1'b0;
          resettraB =  1'b1;
          resetallB =  1'b1;
          if (initreqrB==1'b1)
            NEXT_STATEB =  resetste;
          else
            if (initreqrB==1'b0&&traregbitB==1'b1&&sucfrecvcB==1'b0)
              NEXT_STATEB =  tradrvdat;
            else
              if (sctrrcinB==2'b00&&sucfrecvcB==1'b1&&initreqrB==1'b0&&equalB==1'b1)
                NEXT_STATEB =  recwrtmesll;
              else
                if (sctrrcinB==2'b01&&sucfrecvcB==1'b1&&initreqrB==1'b0&&equalB==1'b1)
                  NEXT_STATEB =  recwrtmeslh;
                else
                  if (sctrrcinB==2'b10&&sucfrecvcB==1'b1&&initreqrB==1'b0&&equalB==1'b1)
                    NEXT_STATEB =  recwrtmeshl;
                  else
                    if (sctrrcinB==2'b11&&sucfrecvcB==1'b1&&initreqrB==1'b0&&equalB==1'b1)
                      NEXT_STATEB =  recwrtmeshh;
                    else
                      NEXT_STATEB =  waitoact;
        end
      resetste : 
        begin
          activtregB =  1'b0;
          activrreg_iB =  1'b0;
          activgregB =  1'b1;
          sucftranoB =  1'b0;
          sucfrecvoB =  1'b0;
          transB =  1'b0;
          loadB =  1'b0;
          actvtsftB =  1'b0;
          actvtcapB =  1'b0;
          overflowoB =  1'b0;
          resettraB =  1'b1;
          resetallB =  1'b0;
          NEXT_STATEB =  waitoact;
        end
      trareset : 
        begin
          activtregB =  1'b0;
          activrreg_iB =  1'b0;
          activgregB =  1'b0;
          sucftranoB =  1'b0;
          sucfrecvoB =  1'b0;
          transB =  1'b0;
          loadB =  1'b0;
          actvtsftB =  1'b0;
          actvtcapB =  1'b0;
          overflowoB =  1'b0;
          resettraB =  1'b0;
          resetallB =  1'b1;
          if (initreqrB==1'b1)
            NEXT_STATEB =  resetste;
          else
            NEXT_STATEB =  tradrvdat;
        end
      tradrvdat : 
        begin
          activtregB =  1'b0;
          activrreg_iB =  1'b0;
          activgregB =  1'b0;
          sucftranoB =  1'b0;
          sucfrecvoB =  1'b0;
          transB =  1'b0;
          loadB =  1'b0;
          actvtsftB =  1'b0;
          actvtcapB =  1'b0;
          overflowoB =  1'b0;
          resettraB =  1'b1;
          resetallB =  1'b1;
          if (initreqrB==1'b1)
            NEXT_STATEB =  resetste;
          else
            NEXT_STATEB =  traruncap;
        end
      traruncap : 
        begin
          activtregB =  1'b0;
          activrreg_iB =  1'b0;
          activgregB =  1'b0;
          sucftranoB =  1'b0;
          sucfrecvoB =  1'b0;
          transB =  1'b0;
          loadB =  1'b1;
          actvtsftB =  1'b0;
          actvtcapB =  1'b1;
          overflowoB =  1'b0;
          resettraB =  1'b1;
          resetallB =  1'b1;
          if (initreqrB==1'b1)
            NEXT_STATEB =  resetste;
          else
            NEXT_STATEB =  tralodsft;
        end
      tralodsft : 
        begin
          activtregB =  1'b0;
          activrreg_iB =  1'b0;
          activgregB =  1'b0;
          sucftranoB =  1'b0;
          sucfrecvoB =  1'b0;
          transB =  1'b0;
          loadB =  1'b1;
          actvtsftB =  1'b1;
          actvtcapB =  1'b0;
          overflowoB =  1'b0;
          resettraB =  1'b1;
          resetallB =  1'b1;
          if (initreqrB==1'b1)
            NEXT_STATEB =  resetste;
          else
            NEXT_STATEB =  trawtosuc;
        end
      trawtosuc : 
        begin
          activtregB =  1'b0;
          activrreg_iB =  1'b0;
          activgregB =  1'b0;
          sucftranoB =  1'b0;
          sucfrecvoB =  1'b0;
          transB =  1'b1;
          loadB =  1'b0;
          actvtsftB =  1'b0;
          actvtcapB =  1'b0;
          overflowoB =  1'b0;
          resettraB =  1'b1;
          resetallB =  1'b1;
          if (initreqrB==1'b1)
            NEXT_STATEB =  resetste;
          else
            if (initreqrB==1'b0&&sucftrancB==1'b1&&sucfrecvcB==1'b0&&sucfrecvrB==1'b0)
              NEXT_STATEB =  trasetvall;
            else
              if (initreqrB==1'b0&&sucftrancB==1'b1&&sucfrecvcB==1'b0&&sucfrecvrB==1'b1)
                NEXT_STATEB =  trasetvalh;
              else
                if (sctrrcinB==2'b00&&sucfrecvcB==1'b1&&initreqrB==1'b0&&equalB==1'b1)
                  NEXT_STATEB =  recwrtmesll;
                else
                  if (sctrrcinB==2'b01&&sucfrecvcB==1'b1&&initreqrB==1'b0&&equalB==1'b1)
                    NEXT_STATEB =  recwrtmeshl;
                  else
                    if (sctrrcinB==2'b10&&sucfrecvcB==1'b1&&initreqrB==1'b0&&equalB==1'b1)
                      NEXT_STATEB =  recwrtmeshl;
                    else
                      if (sctrrcinB==2'b11&&sucfrecvcB==1'b1&&initreqrB==1'b0&&equalB==1'b1)
                        NEXT_STATEB =  recwrtmeshh;
                      else
                        NEXT_STATEB =  trawtosuc;
        end
      trasetvall : 
        begin
          activtregB =  1'b1;
          activrreg_iB =  1'b0;
          activgregB =  1'b1;
          sucftranoB =  1'b1;
          sucfrecvoB =  1'b0;
          transB =  1'b0;
          loadB =  1'b0;
          actvtsftB =  1'b0;
          actvtcapB =  1'b0;
          overflowoB =  1'b0;
          resettraB =  1'b1;
          resetallB =  1'b1;
          if (initreqrB==1'b1)
            NEXT_STATEB =  resetste;
          else
            NEXT_STATEB =  waitoact;
        end
      trasetvalh : 
        begin
          activtregB =  1'b1;
          activrreg_iB =  1'b0;
          activgregB =  1'b1;
          sucftranoB =  1'b1;
          sucfrecvoB =  1'b1;
          transB =  1'b0;
          loadB =  1'b0;
          actvtsftB =  1'b0;
          actvtcapB =  1'b0;
          overflowoB =  1'b0;
          resettraB =  1'b1;
          resetallB =  1'b1;
          if (initreqrB==1'b1)
            NEXT_STATEB =  resetste;
          else
            NEXT_STATEB =  waitoact;
        end
      recwrtmesll : 
        begin
          activtregB =  1'b0;
          activrreg_iB =  1'b1;
          activgregB =  1'b1;
          sucftranoB =  1'b0;
          sucfrecvoB =  1'b1;
          transB =  1'b0;
          loadB =  1'b0;
          actvtsftB =  1'b0;
          actvtcapB =  1'b0;
          resettraB =  1'b1;
          overflowoB =  1'b0;
          resetallB =  1'b1;
          if (initreqrB==1'b1)
            NEXT_STATEB =  resetste;
          else
            if (sucfrecvcB==1'b0)
              NEXT_STATEB =  waitoact;
            else
              NEXT_STATEB =  recwrtmesll;
        end
      recwrtmeslh : 
        begin
          activtregB =  1'b0;
          activrreg_iB =  1'b1;
          activgregB =  1'b1;
          sucftranoB =  1'b0;
          sucfrecvoB =  1'b1;
          transB =  1'b0;
          loadB =  1'b0;
          actvtsftB =  1'b0;
          actvtcapB =  1'b0;
          resettraB =  1'b1;
          overflowoB =  1'b1;
          resetallB =  1'b1;
          if (initreqrB==1'b1)
            NEXT_STATEB =  resetste;
          else
            if (sucfrecvcB==1'b0)
              NEXT_STATEB =  waitoact;
            else
              NEXT_STATEB =  recwrtmeslh;
        end
      recwrtmeshl : 
        begin
          activtregB =  1'b0;
          activrreg_iB =  1'b1;
          activgregB =  1'b1;
          sucftranoB =  1'b1;
          sucfrecvoB =  1'b1;
          transB =  1'b0;
          loadB =  1'b0;
          actvtsftB =  1'b0;
          actvtcapB =  1'b0;
          resettraB =  1'b1;
          overflowoB =  1'b0;
          resetallB =  1'b1;
          if (initreqrB==1'b1)
            NEXT_STATEB =  resetste;
          else
            if (sucfrecvcB==1'b0)
              NEXT_STATEB =  waitoact;
            else
              NEXT_STATEB =  recwrtmeshl;
        end
      recwrtmeshh : 
        begin
          activtregB =  1'b0;
          activrreg_iB =  1'b1;
          activgregB =  1'b1;
          sucftranoB =  1'b1;
          sucfrecvoB =  1'b1;
          transB =  1'b0;
          loadB =  1'b0;
          actvtsftB =  1'b0;
          actvtcapB =  1'b0;
          resettraB =  1'b1;
          overflowoB =  1'b1;
          resetallB =  1'b1;
          if (initreqrB==1'b1)
            NEXT_STATEB =  resetste;
          else
            if (sucfrecvcB==1'b0)
              NEXT_STATEB =  waitoact;
            else
              NEXT_STATEB =  recwrtmeshh;
        end
      default : 
        begin
          NEXT_STATEB =  CURRENT_STATEVotedB;
        end
    endcase
  end

always @( CURRENT_STATEVotedC or traregbitC or sucfrecvcC or sucftrancC or sucfrecvrC or sctrrcinC or initreqrC or equalC )
  begin
    activtregC =  1'b0;
    activrreg_iC =  1'b0;
    activgregC =  1'b0;
    sucftranoC =  1'b0;
    sucfrecvoC =  1'b0;
    transC =  1'b0;
    loadC =  1'b0;
    actvtsftC =  1'b0;
    actvtcapC =  1'b0;
    overflowoC =  1'b0;
    resettraC =  1'b1;
    resetallC =  1'b1;
    case (CURRENT_STATEVotedC)
      waitoact : 
        begin
          activtregC =  1'b0;
          activrreg_iC =  1'b0;
          activgregC =  1'b0;
          sucftranoC =  1'b0;
          sucfrecvoC =  1'b0;
          transC =  1'b0;
          loadC =  1'b0;
          actvtsftC =  1'b0;
          actvtcapC =  1'b0;
          overflowoC =  1'b0;
          resettraC =  1'b1;
          resetallC =  1'b1;
          if (initreqrC==1'b1)
            NEXT_STATEC =  resetste;
          else
            if (initreqrC==1'b0&&traregbitC==1'b1&&sucfrecvcC==1'b0)
              NEXT_STATEC =  tradrvdat;
            else
              if (sctrrcinC==2'b00&&sucfrecvcC==1'b1&&initreqrC==1'b0&&equalC==1'b1)
                NEXT_STATEC =  recwrtmesll;
              else
                if (sctrrcinC==2'b01&&sucfrecvcC==1'b1&&initreqrC==1'b0&&equalC==1'b1)
                  NEXT_STATEC =  recwrtmeslh;
                else
                  if (sctrrcinC==2'b10&&sucfrecvcC==1'b1&&initreqrC==1'b0&&equalC==1'b1)
                    NEXT_STATEC =  recwrtmeshl;
                  else
                    if (sctrrcinC==2'b11&&sucfrecvcC==1'b1&&initreqrC==1'b0&&equalC==1'b1)
                      NEXT_STATEC =  recwrtmeshh;
                    else
                      NEXT_STATEC =  waitoact;
        end
      resetste : 
        begin
          activtregC =  1'b0;
          activrreg_iC =  1'b0;
          activgregC =  1'b1;
          sucftranoC =  1'b0;
          sucfrecvoC =  1'b0;
          transC =  1'b0;
          loadC =  1'b0;
          actvtsftC =  1'b0;
          actvtcapC =  1'b0;
          overflowoC =  1'b0;
          resettraC =  1'b1;
          resetallC =  1'b0;
          NEXT_STATEC =  waitoact;
        end
      trareset : 
        begin
          activtregC =  1'b0;
          activrreg_iC =  1'b0;
          activgregC =  1'b0;
          sucftranoC =  1'b0;
          sucfrecvoC =  1'b0;
          transC =  1'b0;
          loadC =  1'b0;
          actvtsftC =  1'b0;
          actvtcapC =  1'b0;
          overflowoC =  1'b0;
          resettraC =  1'b0;
          resetallC =  1'b1;
          if (initreqrC==1'b1)
            NEXT_STATEC =  resetste;
          else
            NEXT_STATEC =  tradrvdat;
        end
      tradrvdat : 
        begin
          activtregC =  1'b0;
          activrreg_iC =  1'b0;
          activgregC =  1'b0;
          sucftranoC =  1'b0;
          sucfrecvoC =  1'b0;
          transC =  1'b0;
          loadC =  1'b0;
          actvtsftC =  1'b0;
          actvtcapC =  1'b0;
          overflowoC =  1'b0;
          resettraC =  1'b1;
          resetallC =  1'b1;
          if (initreqrC==1'b1)
            NEXT_STATEC =  resetste;
          else
            NEXT_STATEC =  traruncap;
        end
      traruncap : 
        begin
          activtregC =  1'b0;
          activrreg_iC =  1'b0;
          activgregC =  1'b0;
          sucftranoC =  1'b0;
          sucfrecvoC =  1'b0;
          transC =  1'b0;
          loadC =  1'b1;
          actvtsftC =  1'b0;
          actvtcapC =  1'b1;
          overflowoC =  1'b0;
          resettraC =  1'b1;
          resetallC =  1'b1;
          if (initreqrC==1'b1)
            NEXT_STATEC =  resetste;
          else
            NEXT_STATEC =  tralodsft;
        end
      tralodsft : 
        begin
          activtregC =  1'b0;
          activrreg_iC =  1'b0;
          activgregC =  1'b0;
          sucftranoC =  1'b0;
          sucfrecvoC =  1'b0;
          transC =  1'b0;
          loadC =  1'b1;
          actvtsftC =  1'b1;
          actvtcapC =  1'b0;
          overflowoC =  1'b0;
          resettraC =  1'b1;
          resetallC =  1'b1;
          if (initreqrC==1'b1)
            NEXT_STATEC =  resetste;
          else
            NEXT_STATEC =  trawtosuc;
        end
      trawtosuc : 
        begin
          activtregC =  1'b0;
          activrreg_iC =  1'b0;
          activgregC =  1'b0;
          sucftranoC =  1'b0;
          sucfrecvoC =  1'b0;
          transC =  1'b1;
          loadC =  1'b0;
          actvtsftC =  1'b0;
          actvtcapC =  1'b0;
          overflowoC =  1'b0;
          resettraC =  1'b1;
          resetallC =  1'b1;
          if (initreqrC==1'b1)
            NEXT_STATEC =  resetste;
          else
            if (initreqrC==1'b0&&sucftrancC==1'b1&&sucfrecvcC==1'b0&&sucfrecvrC==1'b0)
              NEXT_STATEC =  trasetvall;
            else
              if (initreqrC==1'b0&&sucftrancC==1'b1&&sucfrecvcC==1'b0&&sucfrecvrC==1'b1)
                NEXT_STATEC =  trasetvalh;
              else
                if (sctrrcinC==2'b00&&sucfrecvcC==1'b1&&initreqrC==1'b0&&equalC==1'b1)
                  NEXT_STATEC =  recwrtmesll;
                else
                  if (sctrrcinC==2'b01&&sucfrecvcC==1'b1&&initreqrC==1'b0&&equalC==1'b1)
                    NEXT_STATEC =  recwrtmeshl;
                  else
                    if (sctrrcinC==2'b10&&sucfrecvcC==1'b1&&initreqrC==1'b0&&equalC==1'b1)
                      NEXT_STATEC =  recwrtmeshl;
                    else
                      if (sctrrcinC==2'b11&&sucfrecvcC==1'b1&&initreqrC==1'b0&&equalC==1'b1)
                        NEXT_STATEC =  recwrtmeshh;
                      else
                        NEXT_STATEC =  trawtosuc;
        end
      trasetvall : 
        begin
          activtregC =  1'b1;
          activrreg_iC =  1'b0;
          activgregC =  1'b1;
          sucftranoC =  1'b1;
          sucfrecvoC =  1'b0;
          transC =  1'b0;
          loadC =  1'b0;
          actvtsftC =  1'b0;
          actvtcapC =  1'b0;
          overflowoC =  1'b0;
          resettraC =  1'b1;
          resetallC =  1'b1;
          if (initreqrC==1'b1)
            NEXT_STATEC =  resetste;
          else
            NEXT_STATEC =  waitoact;
        end
      trasetvalh : 
        begin
          activtregC =  1'b1;
          activrreg_iC =  1'b0;
          activgregC =  1'b1;
          sucftranoC =  1'b1;
          sucfrecvoC =  1'b1;
          transC =  1'b0;
          loadC =  1'b0;
          actvtsftC =  1'b0;
          actvtcapC =  1'b0;
          overflowoC =  1'b0;
          resettraC =  1'b1;
          resetallC =  1'b1;
          if (initreqrC==1'b1)
            NEXT_STATEC =  resetste;
          else
            NEXT_STATEC =  waitoact;
        end
      recwrtmesll : 
        begin
          activtregC =  1'b0;
          activrreg_iC =  1'b1;
          activgregC =  1'b1;
          sucftranoC =  1'b0;
          sucfrecvoC =  1'b1;
          transC =  1'b0;
          loadC =  1'b0;
          actvtsftC =  1'b0;
          actvtcapC =  1'b0;
          resettraC =  1'b1;
          overflowoC =  1'b0;
          resetallC =  1'b1;
          if (initreqrC==1'b1)
            NEXT_STATEC =  resetste;
          else
            if (sucfrecvcC==1'b0)
              NEXT_STATEC =  waitoact;
            else
              NEXT_STATEC =  recwrtmesll;
        end
      recwrtmeslh : 
        begin
          activtregC =  1'b0;
          activrreg_iC =  1'b1;
          activgregC =  1'b1;
          sucftranoC =  1'b0;
          sucfrecvoC =  1'b1;
          transC =  1'b0;
          loadC =  1'b0;
          actvtsftC =  1'b0;
          actvtcapC =  1'b0;
          resettraC =  1'b1;
          overflowoC =  1'b1;
          resetallC =  1'b1;
          if (initreqrC==1'b1)
            NEXT_STATEC =  resetste;
          else
            if (sucfrecvcC==1'b0)
              NEXT_STATEC =  waitoact;
            else
              NEXT_STATEC =  recwrtmeslh;
        end
      recwrtmeshl : 
        begin
          activtregC =  1'b0;
          activrreg_iC =  1'b1;
          activgregC =  1'b1;
          sucftranoC =  1'b1;
          sucfrecvoC =  1'b1;
          transC =  1'b0;
          loadC =  1'b0;
          actvtsftC =  1'b0;
          actvtcapC =  1'b0;
          resettraC =  1'b1;
          overflowoC =  1'b0;
          resetallC =  1'b1;
          if (initreqrC==1'b1)
            NEXT_STATEC =  resetste;
          else
            if (sucfrecvcC==1'b0)
              NEXT_STATEC =  waitoact;
            else
              NEXT_STATEC =  recwrtmeshl;
        end
      recwrtmeshh : 
        begin
          activtregC =  1'b0;
          activrreg_iC =  1'b1;
          activgregC =  1'b1;
          sucftranoC =  1'b1;
          sucfrecvoC =  1'b1;
          transC =  1'b0;
          loadC =  1'b0;
          actvtsftC =  1'b0;
          actvtcapC =  1'b0;
          resettraC =  1'b1;
          overflowoC =  1'b1;
          resetallC =  1'b1;
          if (initreqrC==1'b1)
            NEXT_STATEC =  resetste;
          else
            if (sucfrecvcC==1'b0)
              NEXT_STATEC =  waitoact;
            else
              NEXT_STATEC =  recwrtmeshh;
        end
      default : 
        begin
          NEXT_STATEC =  CURRENT_STATEVotedC;
        end
    endcase
  end

majorityVoter #(.WIDTH(4)) CURRENT_STATEVoterA (
    .inA(CURRENT_STATEA),
    .inB(CURRENT_STATEB),
    .inC(CURRENT_STATEC),
    .out(CURRENT_STATEVotedA),
    .tmrErr(CURRENT_STATETmrErrorA)
    );

majorityVoter #(.WIDTH(4)) CURRENT_STATEVoterB (
    .inA(CURRENT_STATEA),
    .inB(CURRENT_STATEB),
    .inC(CURRENT_STATEC),
    .out(CURRENT_STATEVotedB),
    .tmrErr(CURRENT_STATETmrErrorB)
    );

majorityVoter #(.WIDTH(4)) CURRENT_STATEVoterC (
    .inA(CURRENT_STATEA),
    .inB(CURRENT_STATEB),
    .inC(CURRENT_STATEC),
    .out(CURRENT_STATEVotedC),
    .tmrErr(CURRENT_STATETmrErrorC)
    );
endmodule

