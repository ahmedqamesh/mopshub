//
// Module mopshub_triplicated.Control_SysTMR.struct
//
// Created:
//          by - dcs.dcs (localhost)
//          at - 09:18:04 05/10/22
//
// Generated by Mentor Graphics' HDL Designer(TM) 2019.4 (Build 4)
//


module Control_SysTMR( 
   // Port Declarations
   output  wire    [5:0]  FtrimA, 
   output  wire    [5:0]  FtrimB, 
   output  wire    [5:0]  FtrimC, 
   output  wire           readyA, 
   output  wire           readyB, 
   output  wire           readyC, 
   input   wire           CLKA, 
   input   wire           CLKB, 
   input   wire           CLKC, 
   input   wire    [3:0]  E1A, 
   input   wire    [3:0]  E1B, 
   input   wire    [3:0]  E1C, 
   input   wire    [7:0]  KdA, 
   input   wire    [7:0]  KdB, 
   input   wire    [7:0]  KdC, 
   input   wire    [7:0]  KiA, 
   input   wire    [7:0]  KiB, 
   input   wire    [7:0]  KiC, 
   input   wire    [7:0]  KpA, 
   input   wire    [7:0]  KpB, 
   input   wire    [7:0]  KpC, 
   input   wire           Prescale_EnA, 
   input   wire           Prescale_EnB, 
   input   wire           Prescale_EnC, 
   input   wire           PufferA, 
   input   wire           PufferB, 
   input   wire           PufferC, 
   input   wire           ResetA, 
   input   wire           ResetB, 
   input   wire           ResetC, 
   input   wire           RxA, 
   input   wire           RxB, 
   input   wire           RxC, 
   input   wire           activeA, 
   input   wire           activeB, 
   input   wire           activeC
);


// Internal Declarations


// Local declarations

// Internal signal declarations
wire  [7:0] EkA;
wire  [7:0] EkB;
wire  [7:0] EkC;
wire  [2:0] ctrlA;
wire  [2:0] ctrlB;
wire  [2:0] ctrlC;
wire  [3:0] Counter_CA;
wire  [3:0] Counter_CB;
wire  [3:0] Counter_CC;
wire        EnableA;
wire        EnableB;
wire        EnableC;


// Instances 
CLK_CounterTMR clk_counter0( 
   .clkA         (CLKA), 
   .clkB         (CLKB), 
   .clkC         (CLKC), 
   .resetA       (ResetA), 
   .resetB       (ResetB), 
   .resetC       (ResetC), 
   .pufferA      (PufferA), 
   .pufferB      (PufferB), 
   .pufferC      (PufferC), 
   .rxA          (RxA), 
   .rxB          (RxB), 
   .rxC          (RxC), 
   .Prescale_EnA (Prescale_EnA), 
   .Prescale_EnB (Prescale_EnB), 
   .Prescale_EnC (Prescale_EnC), 
   .Counter_CA   (Counter_CA), 
   .Counter_CB   (Counter_CB), 
   .Counter_CC   (Counter_CC)
); 

Control_FSMTMR control_fsm0( 
   .CLKA    (CLKA), 
   .CLKB    (CLKB), 
   .CLKC    (CLKC), 
   .ResetA  (ResetA), 
   .ResetB  (ResetB), 
   .ResetC  (ResetC), 
   .RxA     (RxA), 
   .RxB     (RxB), 
   .RxC     (RxC), 
   .PufferA (PufferA), 
   .PufferB (PufferB), 
   .PufferC (PufferC), 
   .activeA (activeA), 
   .activeB (activeB), 
   .activeC (activeC), 
   .E1A     (E1A), 
   .E1B     (E1B), 
   .E1C     (E1C), 
   .ctrlA   (ctrlA), 
   .ctrlB   (ctrlB), 
   .ctrlC   (ctrlC), 
   .EnableA (EnableA), 
   .EnableB (EnableB), 
   .EnableC (EnableC)
); 

PID_ReglerTMR pid_regler0( 
   .FTRIMA  (FtrimA), 
   .FTRIMB  (FtrimB), 
   .FTRIMC  (FtrimC), 
   .CLKA    (CLKA), 
   .CLKB    (CLKB), 
   .CLKC    (CLKC), 
   .EkA     (EkA), 
   .EkB     (EkB), 
   .EkC     (EkC), 
   .EnableA (EnableA), 
   .EnableB (EnableB), 
   .EnableC (EnableC), 
   .KdA     (KdA), 
   .KdB     (KdB), 
   .KdC     (KdC), 
   .KiA     (KiA), 
   .KiB     (KiB), 
   .KiC     (KiC), 
   .KpA     (KpA), 
   .KpB     (KpB), 
   .KpC     (KpC), 
   .ResetA  (ResetA), 
   .ResetB  (ResetB), 
   .ResetC  (ResetC), 
   .ctrlA   (ctrlA), 
   .ctrlB   (ctrlB), 
   .ctrlC   (ctrlC)
); 

Phasenfehler_RegTMR phasenfehler_reg0( 
   .clkA    (CLKA), 
   .clkB    (CLKB), 
   .clkC    (CLKC), 
   .ResetA  (ResetA), 
   .ResetB  (ResetB), 
   .ResetC  (ResetC), 
   .EnableA (EnableA), 
   .EnableB (EnableB), 
   .EnableC (EnableC), 
   .E2A     (Counter_CA), 
   .E2B     (Counter_CB), 
   .E2C     (Counter_CC), 
   .E1A     (E1A), 
   .E1B     (E1B), 
   .E1C     (E1C), 
   .ctrlA   (ctrlA), 
   .ctrlB   (ctrlB), 
   .ctrlC   (ctrlC), 
   .e_kA    (EkA), 
   .e_kB    (EkB), 
   .e_kC    (EkC)
); 

ready_counterTMR rdy_cnt0( 
   .clkA         (CLKA), 
   .clkB         (CLKB), 
   .clkC         (CLKC), 
   .rstnA        (ResetA), 
   .rstnB        (ResetB), 
   .rstnC        (ResetC), 
   .enableA      (EnableA), 
   .enableB      (EnableB), 
   .enableC      (EnableC), 
   .en_osc_trimA (activeA), 
   .en_osc_trimB (activeB), 
   .en_osc_trimC (activeC), 
   .readyA       (readyA), 
   .readyB       (readyB), 
   .readyC       (readyC)
); 


endmodule // Control_SysTMR

