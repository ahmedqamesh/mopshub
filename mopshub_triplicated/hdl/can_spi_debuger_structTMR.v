/****************************************************************************************************
 *                          ! THIS FILE WAS AUTO-GENERATED BY TMRG TOOL !                           *
 *                                   ! DO NOT EDIT IT MANUALLY !                                    *
 *                                                                                                  *
 * file    : ./output/can_spi_debuger_structTMR.v                                                   *
 *                                                                                                  *
 * user    : lucas                                                                                  *
 * host    : DESKTOP-BFDSFP2                                                                        *
 * date    : 16/08/2022 12:58:13                                                                    *
 *                                                                                                  *
 * workdir : /mnt/c/Users/Lucas/Desktop/mopshub_triplication/mopshub_top_board_canakari_ftrim/hdl   *
 * cmd     : /mnt/c/Users/Lucas/Desktop/mopshub_triplication/tmrg-master/bin/tmrg -c tmrg.cfg -vvv  *
 * tmrg rev:                                                                                        *
 *                                                                                                  *
 * src file: can_spi_debuger_struct.v                                                               *
 *           Git SHA           : File not in git repository!                                        *
 *           Modification time : 2022-08-16 09:55:51.374001                                         *
 *           File Size         : 2008                                                               *
 *           MD5 hash          : a46d465be744154c26a3da10c3b6ddb6                                   *
 *                                                                                                  *
 ****************************************************************************************************/

module can_spi_debugerTMR(
  input wire [7:0] Kchar_comma ,
  input wire [7:0] Kchar_eop ,
  input wire [7:0] Kchar_sop ,
  input wire  clk ,
  input wire [9:0] data_rec_can_10bitout ,
  input wire  rst ,
  input wire  spi_can_irq ,
  output wire [9:0] data_rec_spi_can_10bitout ,
  output wire  spi_can_mode 
);
wire spi_can_modeC;
wire spi_can_modeB;
wire spi_can_modeA;
wire spi_can_irqC;
wire spi_can_irqB;
wire spi_can_irqA;
wire rstC;
wire rstB;
wire rstA;
wire [9:0] data_rec_can_10bitoutC;
wire [9:0] data_rec_can_10bitoutB;
wire [9:0] data_rec_can_10bitoutA;
wire clkC;
wire clkB;
wire clkA;
wire [7:0] Kchar_eopC;
wire [7:0] Kchar_eopB;
wire [7:0] Kchar_eopA;
wire [7:0] Kchar_commaC;
wire [7:0] Kchar_commaB;
wire [7:0] Kchar_commaA;
wor spi_can_mode_regTmrError;
wire spi_can_mode_reg;
wor data_rec_spi_can_10bitout_regTmrError;
wire [9:0] data_rec_spi_can_10bitout_reg;
reg  [5:0] cnt_outA ;
reg  [5:0] cnt_outB ;
reg  [5:0] cnt_outC ;
reg  [9:0] data_rec_spi_can_10bitout_regA ;
reg  [9:0] data_rec_spi_can_10bitout_regB ;
reg  [9:0] data_rec_spi_can_10bitout_regC ;
reg  spi_can_mode_regA ;
reg  spi_can_mode_regB ;
reg  spi_can_mode_regC ;
assign data_rec_spi_can_10bitout =  data_rec_spi_can_10bitout_reg;
assign spi_can_mode =  spi_can_mode_reg;
initial
  spi_can_mode_regA =  1'b0;
initial
  spi_can_mode_regB =  1'b0;
initial
  spi_can_mode_regC =  1'b0;
initial
  cnt_outA =  6'b0;
initial
  cnt_outB =  6'b0;
initial
  cnt_outC =  6'b0;
initial
  data_rec_spi_can_10bitout_regA =  10'b0;
initial
  data_rec_spi_can_10bitout_regB =  10'b0;
initial
  data_rec_spi_can_10bitout_regC =  10'b0;

always @( posedge clkA )
  begin
    if (!rstA)
      cnt_outA <= 6'b0;
    if (spi_can_modeA==1'b0&&spi_can_irqA==1'b1)
      begin
        spi_can_mode_regA <= 1'b1;
        cnt_outA <= 6'b0;
      end
    else
      if (spi_can_modeA==1'b1||spi_can_irqA==1'b1)
        begin
          if (cnt_outA==6'h15)
            spi_can_mode_regA <= 1'b0;
          else
            cnt_outA <= cnt_outA+1'b1;
        end
      else
        cnt_outA <= 6'b0;
  end

always @( posedge clkB )
  begin
    if (!rstB)
      cnt_outB <= 6'b0;
    if (spi_can_modeB==1'b0&&spi_can_irqB==1'b1)
      begin
        spi_can_mode_regB <= 1'b1;
        cnt_outB <= 6'b0;
      end
    else
      if (spi_can_modeB==1'b1||spi_can_irqB==1'b1)
        begin
          if (cnt_outB==6'h15)
            spi_can_mode_regB <= 1'b0;
          else
            cnt_outB <= cnt_outB+1'b1;
        end
      else
        cnt_outB <= 6'b0;
  end

always @( posedge clkC )
  begin
    if (!rstC)
      cnt_outC <= 6'b0;
    if (spi_can_modeC==1'b0&&spi_can_irqC==1'b1)
      begin
        spi_can_mode_regC <= 1'b1;
        cnt_outC <= 6'b0;
      end
    else
      if (spi_can_modeC==1'b1||spi_can_irqC==1'b1)
        begin
          if (cnt_outC==6'h15)
            spi_can_mode_regC <= 1'b0;
          else
            cnt_outC <= cnt_outC+1'b1;
        end
      else
        cnt_outC <= 6'b0;
  end

always @( posedge clkA )
  begin
    if (!rstA)
      data_rec_spi_can_10bitout_regA <= 10'b0;
    else
      if (cnt_outA>6'h06&&cnt_outA<=6'h08)
        data_rec_spi_can_10bitout_regA <= {2'b01,Kchar_eopA};
      else
        if (cnt_outA>=6'h09&&cnt_outA<=6'h14)
          data_rec_spi_can_10bitout_regA <= {2'b11,Kchar_commaA};
        else
          data_rec_spi_can_10bitout_regA <= data_rec_can_10bitoutA;
  end

always @( posedge clkB )
  begin
    if (!rstB)
      data_rec_spi_can_10bitout_regB <= 10'b0;
    else
      if (cnt_outB>6'h06&&cnt_outB<=6'h08)
        data_rec_spi_can_10bitout_regB <= {2'b01,Kchar_eopB};
      else
        if (cnt_outB>=6'h09&&cnt_outB<=6'h14)
          data_rec_spi_can_10bitout_regB <= {2'b11,Kchar_commaB};
        else
          data_rec_spi_can_10bitout_regB <= data_rec_can_10bitoutB;
  end

always @( posedge clkC )
  begin
    if (!rstC)
      data_rec_spi_can_10bitout_regC <= 10'b0;
    else
      if (cnt_outC>6'h06&&cnt_outC<=6'h08)
        data_rec_spi_can_10bitout_regC <= {2'b01,Kchar_eopC};
      else
        if (cnt_outC>=6'h09&&cnt_outC<=6'h14)
          data_rec_spi_can_10bitout_regC <= {2'b11,Kchar_commaC};
        else
          data_rec_spi_can_10bitout_regC <= data_rec_can_10bitoutC;
  end

majorityVoter #(.WIDTH(10)) data_rec_spi_can_10bitout_regVoter (
    .inA(data_rec_spi_can_10bitout_regA),
    .inB(data_rec_spi_can_10bitout_regB),
    .inC(data_rec_spi_can_10bitout_regC),
    .out(data_rec_spi_can_10bitout_reg),
    .tmrErr(data_rec_spi_can_10bitout_regTmrError)
    );

majorityVoter spi_can_mode_regVoter (
    .inA(spi_can_mode_regA),
    .inB(spi_can_mode_regB),
    .inC(spi_can_mode_regC),
    .out(spi_can_mode_reg),
    .tmrErr(spi_can_mode_regTmrError)
    );

fanout #(.WIDTH(8)) Kchar_commaFanout (
    .in(Kchar_comma),
    .outA(Kchar_commaA),
    .outB(Kchar_commaB),
    .outC(Kchar_commaC)
    );

fanout #(.WIDTH(8)) Kchar_eopFanout (
    .in(Kchar_eop),
    .outA(Kchar_eopA),
    .outB(Kchar_eopB),
    .outC(Kchar_eopC)
    );

fanout clkFanout (
    .in(clk),
    .outA(clkA),
    .outB(clkB),
    .outC(clkC)
    );

fanout #(.WIDTH(10)) data_rec_can_10bitoutFanout (
    .in(data_rec_can_10bitout),
    .outA(data_rec_can_10bitoutA),
    .outB(data_rec_can_10bitoutB),
    .outC(data_rec_can_10bitoutC)
    );

fanout rstFanout (
    .in(rst),
    .outA(rstA),
    .outB(rstB),
    .outC(rstC)
    );

fanout spi_can_irqFanout (
    .in(spi_can_irq),
    .outA(spi_can_irqA),
    .outB(spi_can_irqB),
    .outC(spi_can_irqC)
    );

fanout spi_can_modeFanout (
    .in(spi_can_mode),
    .outA(spi_can_modeA),
    .outB(spi_can_modeB),
    .outC(spi_can_modeC)
    );
endmodule

