//
// Module mopshub_triplicated.interrupregister2TMR.struct
//
// Created:
//          by - dcs.dcs (localhost)
//          at - 09:18:05 05/10/22
//
// Generated by Mentor Graphics' HDL Designer(TM) 2019.4 (Build 4)
//


module interrupregister2TMR( 
   // Port Declarations
   input   wire            clkA, 
   input   wire            clkB, 
   input   wire            clkC, 
   input   wire            rstA, 
   input   wire            rstB, 
   input   wire            rstC, 
   input   wire            cpuA, 
   input   wire            cpuB, 
   input   wire            cpuC, 
   input   wire            canA, 
   input   wire            canB, 
   input   wire            canC, 
   input   wire            onoffninA, 
   input   wire            onoffninB, 
   input   wire            onoffninC, 
   input   wire            iestatuspA, 
   input   wire            iestatuspB, 
   input   wire            iestatuspC, 
   input   wire            iesuctrapA, 
   input   wire            iesuctrapB, 
   input   wire            iesuctrapC, 
   input   wire            iesucrecpA, 
   input   wire            iesucrecpB, 
   input   wire            iesucrecpC, 
   input   wire            irqstatuspA, 
   input   wire            irqstatuspB, 
   input   wire            irqstatuspC, 
   input   wire            irqsuctrapA, 
   input   wire            irqsuctrapB, 
   input   wire            irqsuctrapC, 
   input   wire            irqsucrecpA, 
   input   wire            irqsucrecpB, 
   input   wire            irqsucrecpC, 
   input   wire            irqstatuscA, 
   input   wire            irqstatuscB, 
   input   wire            irqstatuscC, 
   input   wire            irqsuctracA, 
   input   wire            irqsuctracB, 
   input   wire            irqsuctracC, 
   input   wire            irqsucreccA, 
   input   wire            irqsucreccB, 
   input   wire            irqsucreccC, 
   output  wire    [15:0]  registerA, 
   output  wire    [15:0]  registerB, 
   output  wire    [15:0]  registerC
);


// Internal Declarations


// Local declarations

// Internal signal declarations
wor          register_iTmrErrorC;
wire  [15:0] register_iVotedC;
wor          register_iTmrErrorB;
wire  [15:0] register_iVotedB;
wor          register_iTmrErrorA;
wire  [15:0] register_iVotedA;
reg   [15:0] register_iA;
reg   [15:0] register_iB;
reg   [15:0] register_iC;


// Instances 
majorityVoter #(16) register_iVoterA( 
   .inA    (register_iA), 
   .inB    (register_iB), 
   .inC    (register_iC), 
   .out    (register_iVotedA), 
   .tmrErr (register_iTmrErrorA)
); 

majorityVoter #(16) register_iVoterB( 
   .inA    (register_iA), 
   .inB    (register_iB), 
   .inC    (register_iC), 
   .out    (register_iVotedB), 
   .tmrErr (register_iTmrErrorB)
); 

majorityVoter #(16) register_iVoterC( 
   .inA    (register_iA), 
   .inB    (register_iB), 
   .inC    (register_iC), 
   .out    (register_iVotedC), 
   .tmrErr (register_iTmrErrorC)
); 

// HDL Embedded Text Block 1 eb1
assign registerA =  register_iVotedA;
assign registerB =  register_iVotedB;
assign registerC =  register_iVotedC;
// HDL Embedded Text Block 2 eb2
always @( posedge clkA )
  begin
    if (rstA==1'b0)
      begin
        register_iA <= 16'd0;
      end
    else
      if (canA==1'b1)
        begin
          if (irqstatuscA==1'b1)
            register_iA[2]  <= irqstatuscA;
          if (irqsuctracA==1'b1)
            register_iA[1]  <= irqsuctracA;
          if (irqsucreccA==1'b1)
            register_iA[0]  <= irqsucreccA;
        end
      else
        if (cpuA==1'b1)
          begin
            register_iA[15]  <= onoffninA;
            register_iA[6]  <= iestatuspA;
            register_iA[5]  <= iesuctrapA;
            register_iA[4]  <= iesucrecpA;
            if (irqstatuspA==1'b0)
              register_iA[2]  <= irqstatuspA;
            if (irqsuctrapA==1'b0)
              register_iA[1]  <= irqsuctrapA;
            if (irqsucrecpA==1'b0)
              register_iA[0]  <= irqsucrecpA;
          end
        else
          register_iA <= register_iVotedA;
  end
// HDL Embedded Text Block 3 eb3
always @( posedge clkB )
  begin
    if (rstB==1'b0)
      begin
        register_iB <= 16'd0;
      end
    else
      if (canB==1'b1)
        begin
          if (irqstatuscB==1'b1)
            register_iB[2]  <= irqstatuscB;
          if (irqsuctracB==1'b1)
            register_iB[1]  <= irqsuctracB;
          if (irqsucreccB==1'b1)
            register_iB[0]  <= irqsucreccB;
        end
      else
        if (cpuB==1'b1)
          begin
            register_iB[15]  <= onoffninB;
            register_iB[6]  <= iestatuspB;
            register_iB[5]  <= iesuctrapB;
            register_iB[4]  <= iesucrecpB;
            if (irqstatuspB==1'b0)
              register_iB[2]  <= irqstatuspB;
            if (irqsuctrapB==1'b0)
              register_iB[1]  <= irqsuctrapB;
            if (irqsucrecpB==1'b0)
              register_iB[0]  <= irqsucrecpB;
          end
        else
          register_iB <= register_iVotedB;
  end
// HDL Embedded Text Block 4 eb4
always @( posedge clkC )
  begin
    if (rstC==1'b0)
      begin
        register_iC <= 16'd0;
      end
    else
      if (canC==1'b1)
        begin
          if (irqstatuscC==1'b1)
            register_iC[2]  <= irqstatuscC;
          if (irqsuctracC==1'b1)
            register_iC[1]  <= irqsuctracC;
          if (irqsucreccC==1'b1)
            register_iC[0]  <= irqsucreccC;
        end
      else
        if (cpuC==1'b1)
          begin
            register_iC[15]  <= onoffninC;
            register_iC[6]  <= iestatuspC;
            register_iC[5]  <= iesuctrapC;
            register_iC[4]  <= iesucrecpC;
            if (irqstatuspC==1'b0)
              register_iC[2]  <= irqstatuspC;
            if (irqsuctrapC==1'b0)
              register_iC[1]  <= irqsuctrapC;
            if (irqsucrecpC==1'b0)
              register_iC[0]  <= irqsucrecpC;
          end
        else
          register_iC <= register_iVotedC;
  end

endmodule // interrupregister2TMR

