/****************************************************************************************************
 *                          ! THIS FILE WAS AUTO-GENERATED BY TMRG TOOL !                           *
 *                                   ! DO NOT EDIT IT MANUALLY !                                    *
 *                                                                                                  *
 * file    : ./output/interruptunit2TMR.v                                                           *
 *                                                                                                  *
 * user    : lucas                                                                                  *
 * host    : DESKTOP-BFDSFP2                                                                        *
 * date    : 06/10/2022 13:52:51                                                                    *
 *                                                                                                  *
 * workdir : /mnt/c/Users/Lucas/Documents/GitHub/mopshub_triplicated/triplicated/mopshub_top_board/hdl *
 * cmd     : /mnt/c/Users/Lucas/Desktop/mopshub_triplication/tmrg-master/bin/tmrg -vv -c tmrg.cfg   *
 * tmrg rev:                                                                                        *
 *                                                                                                  *
 * src file: interruptunit2.v                                                                       *
 *           Git SHA           : c110441b08b692cc54ebd4a3b84a2599430e8f93                           *
 *           Modification time : 2022-08-30 13:54:50                                                *
 *           File Size         : 5606                                                               *
 *           MD5 hash          : 3bd450d5cf14672891d7b79ef7c73670                                   *
 *                                                                                                  *
 ****************************************************************************************************/

module interruptunit2TMR(
  input wire  clock ,
  input wire  reset ,
  input wire [2:0] ienable ,
  input wire [2:0] irqstd ,
  input wire  irqsig ,
  input wire  sucfrec ,
  input wire  sucftra ,
  output reg  activintreg ,
  output reg  irqstatus ,
  output reg  irqsuctra ,
  output reg  irqsucrec ,
  output wire  irq 
);
parameter [1:0] waitoact =2'b00;
parameter [1:0] recind =2'b01;
parameter [1:0] traind =2'b10;
parameter [1:0] statind =2'b11;
wire resetC;
wire resetB;
wire resetA;
wire clockC;
wire clockB;
wire clockA;
wire [1:0] NEXT_STATEC;
wire [1:0] NEXT_STATEB;
wire [1:0] NEXT_STATEA;
wor CURRENT_STATETmrError;
wire [1:0] CURRENT_STATE;
reg  [1:0] CURRENT_STATEA ;
reg  [1:0] CURRENT_STATEB ;
reg  [1:0] CURRENT_STATEC ;
reg  [1:0] NEXT_STATE ;
assign irq =  (irqstd[0] |irqstd[1] |irqstd[2] );
wire [1:0] CURRENT_STATEV =  CURRENT_STATE;

always @( posedge clockA )
  begin
    if (resetA==1'b0)
      CURRENT_STATEA <= waitoact;
    else
      CURRENT_STATEA <= NEXT_STATEA;
  end

always @( posedge clockB )
  begin
    if (resetB==1'b0)
      CURRENT_STATEB <= waitoact;
    else
      CURRENT_STATEB <= NEXT_STATEB;
  end

always @( posedge clockC )
  begin
    if (resetC==1'b0)
      CURRENT_STATEC <= waitoact;
    else
      CURRENT_STATEC <= NEXT_STATEC;
  end

always @( CURRENT_STATEV or irqsig or sucfrec or sucftra or irqstd or ienable )
  begin
    case (CURRENT_STATEV)
      waitoact : 
        begin
          activintreg =  1'b0;
          irqstatus =  1'b0;
          irqsuctra =  1'b0;
          irqsucrec =  1'b0;
          if (sucfrec==1'b1&irqstd[0] ==1'b0&ienable[0] ==1'b1)
            NEXT_STATE =  recind;
          else
            if (sucftra==1'b1&irqstd[1] ==1'b0&ienable[1] ==1'b1)
              NEXT_STATE =  traind;
            else
              if (irqsig==1'b1&irqstd[2] ==1'b0&ienable[2] ==1'b1)
                NEXT_STATE =  statind;
              else
                NEXT_STATE =  waitoact;
        end
      recind : 
        begin
          activintreg =  1'b1;
          irqstatus =  1'b0;
          irqsuctra =  1'b0;
          irqsucrec =  1'b1;
          if (sucftra==1'b1&irqstd[1] ==1'b0&ienable[1] ==1'b1)
            NEXT_STATE =  traind;
          else
            if (irqsig==1'b1&irqstd[2] ==1'b0&ienable[2] ==1'b1)
              NEXT_STATE =  statind;
            else
              NEXT_STATE =  waitoact;
        end
      traind : 
        begin
          activintreg =  1'b1;
          irqstatus =  1'b0;
          irqsuctra =  1'b1;
          irqsucrec =  1'b0;
          if (sucfrec==1'b1&irqstd[0] ==1'b0&ienable[0] ==1'b1)
            NEXT_STATE =  recind;
          else
            if (irqsig==1'b1&irqstd[2] ==1'b0&ienable[2] ==1'b1)
              NEXT_STATE =  statind;
            else
              NEXT_STATE =  waitoact;
        end
      statind : 
        begin
          activintreg =  1'b1;
          irqstatus =  1'b1;
          irqsuctra =  1'b0;
          irqsucrec =  1'b0;
          if (sucfrec==1'b1&irqstd[0] ==1'b0&ienable[0] ==1'b1)
            NEXT_STATE =  recind;
          else
            if (sucftra==1'b1&irqstd[1] ==1'b0&ienable[1] ==1'b1)
              NEXT_STATE =  traind;
            else
              NEXT_STATE =  waitoact;
        end
      default : 
        begin
          activintreg =  1'b0;
          irqstatus =  1'b0;
          irqsuctra =  1'b0;
          irqsucrec =  1'b0;
          NEXT_STATE =  CURRENT_STATEV;
        end
    endcase
  end

majorityVoter #(.WIDTH(2)) CURRENT_STATEVoter (
    .inA(CURRENT_STATEA),
    .inB(CURRENT_STATEB),
    .inC(CURRENT_STATEC),
    .out(CURRENT_STATE),
    .tmrErr(CURRENT_STATETmrError)
    );

fanout #(.WIDTH(2)) NEXT_STATEFanout (
    .in(NEXT_STATE),
    .outA(NEXT_STATEA),
    .outB(NEXT_STATEB),
    .outC(NEXT_STATEC)
    );

fanout clockFanout (
    .in(clock),
    .outA(clockA),
    .outB(clockB),
    .outC(clockC)
    );

fanout resetFanout (
    .in(reset),
    .outA(resetA),
    .outB(resetB),
    .outC(resetC)
    );
endmodule

