/****************************************************************************************************
 *                          ! THIS FILE WAS AUTO-GENERATED BY TMRG TOOL !                           *
 *                                   ! DO NOT EDIT IT MANUALLY !                                    *
 *                                                                                                  *
 * file    : ./output/erbcount2TMR.v                                                                *
 *                                                                                                  *
 * user    : lucas                                                                                  *
 * host    : DESKTOP-BFDSFP2                                                                        *
 * date    : 05/12/2022 13:28:11                                                                    *
 *                                                                                                  *
 * workdir : /mnt/c/Users/Lucas/Documents/GitHub/mopshub_triplicated/triplicated/mopshub_top_board_16/hdl *
 * cmd     : /mnt/c/Users/Lucas/Documents/GitHub/mopshub_triplicated/tmrg-master/bin/tmrg -vv -c    *
 *           tmrg.cfg                                                                               *
 * tmrg rev: b25f042058e4e97751df2a0933c24aeadd5a78a5                                               *
 *                                                                                                  *
 * src file: erbcount2.v                                                                            *
 *           Git SHA           : b25f042058e4e97751df2a0933c24aeadd5a78a5 (?? erbcount2.v)          *
 *           Modification time : 2022-11-10 21:22:58                                                *
 *           File Size         : 2613                                                               *
 *           MD5 hash          : ee374b2cd430f03091fc91f7e91bb9e5                                   *
 *                                                                                                  *
 ****************************************************************************************************/

module erbcount2TMR(
  input wire  clock ,
  input wire  reset ,
  input wire  elevrecb ,
  output reg  erb_eq128 
);
wire resetC;
wire resetB;
wire resetA;
wire elevrecbC;
wire elevrecbB;
wire elevrecbA;
wire edgedVC;
wire edgedVB;
wire edgedVA;
wire [7:0] counterVC;
wire [7:0] counterVB;
wire [7:0] counterVA;
wire clockC;
wire clockB;
wire clockA;
wor edgedTmrError;
wire edged;
wor counterTmrError;
wire [7:0] counter;
reg  [7:0] counterA ;
reg  [7:0] counterB ;
reg  [7:0] counterC ;
reg  edgedA ;
reg  edgedB ;
reg  edgedC ;
wire [7:0] counterV =  counter;
wire edgedV =  edged;

always @( posedge clockA )
  begin
    if (resetA==1'b0)
      begin
        counterA <= 8'd0;
        edgedA <= 1'b0;
      end
    else
      begin
        counterA <= counterVA;
        edgedA <= edgedVA;
        if (elevrecbA==1'b1)
          begin
            if (edgedVA==1'b0)
              begin
                edgedA <= 1'b1;
                if (counterVA<8'd128)
                  counterA <= counterVA+1;
              end
          end
        else
          edgedA <= 1'b0;
      end
  end

always @( posedge clockB )
  begin
    if (resetB==1'b0)
      begin
        counterB <= 8'd0;
        edgedB <= 1'b0;
      end
    else
      begin
        counterB <= counterVB;
        edgedB <= edgedVB;
        if (elevrecbB==1'b1)
          begin
            if (edgedVB==1'b0)
              begin
                edgedB <= 1'b1;
                if (counterVB<8'd128)
                  counterB <= counterVB+1;
              end
          end
        else
          edgedB <= 1'b0;
      end
  end

always @( posedge clockC )
  begin
    if (resetC==1'b0)
      begin
        counterC <= 8'd0;
        edgedC <= 1'b0;
      end
    else
      begin
        counterC <= counterVC;
        edgedC <= edgedVC;
        if (elevrecbC==1'b1)
          begin
            if (edgedVC==1'b0)
              begin
                edgedC <= 1'b1;
                if (counterVC<8'd128)
                  counterC <= counterVC+1;
              end
          end
        else
          edgedC <= 1'b0;
      end
  end

always @( counterV )
  begin
    if (counterV==8'd128)
      erb_eq128 =  1'b1;
    else
      erb_eq128 =  1'b0;
  end

majorityVoter #(.WIDTH(8)) counterVoter (
    .inA(counterA),
    .inB(counterB),
    .inC(counterC),
    .out(counter),
    .tmrErr(counterTmrError)
    );

majorityVoter edgedVoter (
    .inA(edgedA),
    .inB(edgedB),
    .inC(edgedC),
    .out(edged),
    .tmrErr(edgedTmrError)
    );

fanout clockFanout (
    .in(clock),
    .outA(clockA),
    .outB(clockB),
    .outC(clockC)
    );

fanout #(.WIDTH(8)) counterVFanout (
    .in(counterV),
    .outA(counterVA),
    .outB(counterVB),
    .outC(counterVC)
    );

fanout edgedVFanout (
    .in(edgedV),
    .outA(edgedVA),
    .outB(edgedVB),
    .outC(edgedVC)
    );

fanout elevrecbFanout (
    .in(elevrecb),
    .outA(elevrecbA),
    .outB(elevrecbB),
    .outC(elevrecbC)
    );

fanout resetFanout (
    .in(reset),
    .outA(resetA),
    .outB(resetB),
    .outC(resetC)
    );
endmodule

