/****************************************************************************************************
 *                          ! THIS FILE WAS AUTO-GENERATED BY TMRG TOOL !                           *
 *                                   ! DO NOT EDIT IT MANUALLY !                                    *
 *                                                                                                  *
 * file    : ./output/erbcount2TMR.v                                                                *
 *                                                                                                  *
 * user    : lucas                                                                                  *
 * host    : DESKTOP-BFDSFP2                                                                        *
 * date    : 16/08/2022 12:58:18                                                                    *
 *                                                                                                  *
 * workdir : /mnt/c/Users/Lucas/Desktop/mopshub_triplication/mopshub_top_board_canakari_ftrim/hdl   *
 * cmd     : /mnt/c/Users/Lucas/Desktop/mopshub_triplication/tmrg-master/bin/tmrg -c tmrg.cfg -vvv  *
 * tmrg rev:                                                                                        *
 *                                                                                                  *
 * src file: erbcount2.v                                                                            *
 *           Git SHA           : File not in git repository!                                        *
 *           Modification time : 2022-03-29 13:49:21                                                *
 *           File Size         : 2619                                                               *
 *           MD5 hash          : a7d370571c47b682f08a3df5b7b606e4                                   *
 *                                                                                                  *
 ****************************************************************************************************/

module erbcount2TMR(
  input wire  clockA ,
  input wire  clockB ,
  input wire  clockC ,
  input wire  resetA ,
  input wire  resetB ,
  input wire  resetC ,
  input wire  elevrecbA ,
  input wire  elevrecbB ,
  input wire  elevrecbC ,
  output reg  erb_eq128A ,
  output reg  erb_eq128B ,
  output reg  erb_eq128C 
);
wor edgedTmrErrorC;
wire edgedVotedC;
wor counterTmrErrorC;
wire [7:0] counterVotedC;
wor edgedTmrErrorB;
wire edgedVotedB;
wor counterTmrErrorB;
wire [7:0] counterVotedB;
wor edgedTmrErrorA;
wire edgedVotedA;
wor counterTmrErrorA;
wire [7:0] counterVotedA;
reg  [7:0] counterA ;
reg  [7:0] counterB ;
reg  [7:0] counterC ;
reg  edgedA ;
reg  edgedB ;
reg  edgedC ;

always @( posedge clockA )
  begin
    if (resetA==1'b0)
      begin
        counterA <= 8'd0;
        edgedA <= 1'b0;
      end
    else
      begin
        counterA <= counterVotedA;
        edgedA <= edgedVotedA;
        if (elevrecbA==1'b1)
          begin
            if (edgedVotedA==1'b0)
              begin
                edgedA <= 1'b1;
                if (counterA<8'd128)
                  counterA <= counterVotedA+1;
              end
          end
        else
          edgedA <= 1'b0;
      end
  end

always @( posedge clockB )
  begin
    if (resetB==1'b0)
      begin
        counterB <= 8'd0;
        edgedB <= 1'b0;
      end
    else
      begin
        counterB <= counterVotedB;
        edgedB <= edgedVotedB;
        if (elevrecbB==1'b1)
          begin
            if (edgedVotedB==1'b0)
              begin
                edgedB <= 1'b1;
                if (counterB<8'd128)
                  counterB <= counterVotedB+1;
              end
          end
        else
          edgedB <= 1'b0;
      end
  end

always @( posedge clockC )
  begin
    if (resetC==1'b0)
      begin
        counterC <= 8'd0;
        edgedC <= 1'b0;
      end
    else
      begin
        counterC <= counterVotedC;
        edgedC <= edgedVotedC;
        if (elevrecbC==1'b1)
          begin
            if (edgedVotedC==1'b0)
              begin
                edgedC <= 1'b1;
                if (counterC<8'd128)
                  counterC <= counterVotedC+1;
              end
          end
        else
          edgedC <= 1'b0;
      end
  end

always @( counterVotedA )
  begin
    if (counterVotedA==8'd128)
      erb_eq128A =  1'b1;
    else
      erb_eq128A =  1'b0;
  end

always @( counterVotedB )
  begin
    if (counterVotedB==8'd128)
      erb_eq128B =  1'b1;
    else
      erb_eq128B =  1'b0;
  end

always @( counterVotedC )
  begin
    if (counterVotedC==8'd128)
      erb_eq128C =  1'b1;
    else
      erb_eq128C =  1'b0;
  end

majorityVoter #(.WIDTH(8)) counterVoterA (
    .inA(counterA),
    .inB(counterB),
    .inC(counterC),
    .out(counterVotedA),
    .tmrErr(counterTmrErrorA)
    );

majorityVoter edgedVoterA (
    .inA(edgedA),
    .inB(edgedB),
    .inC(edgedC),
    .out(edgedVotedA),
    .tmrErr(edgedTmrErrorA)
    );

majorityVoter #(.WIDTH(8)) counterVoterB (
    .inA(counterA),
    .inB(counterB),
    .inC(counterC),
    .out(counterVotedB),
    .tmrErr(counterTmrErrorB)
    );

majorityVoter edgedVoterB (
    .inA(edgedA),
    .inB(edgedB),
    .inC(edgedC),
    .out(edgedVotedB),
    .tmrErr(edgedTmrErrorB)
    );

majorityVoter #(.WIDTH(8)) counterVoterC (
    .inA(counterA),
    .inB(counterB),
    .inC(counterC),
    .out(counterVotedC),
    .tmrErr(counterTmrErrorC)
    );

majorityVoter edgedVoterC (
    .inA(edgedA),
    .inB(edgedB),
    .inC(edgedC),
    .out(edgedVotedC),
    .tmrErr(edgedTmrErrorC)
    );
endmodule

