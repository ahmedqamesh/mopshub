/****************************************************************************************************
 *                          ! THIS FILE WAS AUTO-GENERATED BY TMRG TOOL !                           *
 *                                   ! DO NOT EDIT IT MANUALLY !                                    *
 *                                                                                                  *
 * file    : ./output/rcrc_top2TMR.v                                                                *
 *                                                                                                  *
 * user    : lucas                                                                                  *
 * host    : DESKTOP-BFDSFP2                                                                        *
 * date    : 05/12/2022 13:28:30                                                                    *
 *                                                                                                  *
 * workdir : /mnt/c/Users/Lucas/Documents/GitHub/mopshub_triplicated/triplicated/mopshub_top_board_16/hdl *
 * cmd     : /mnt/c/Users/Lucas/Documents/GitHub/mopshub_triplicated/tmrg-master/bin/tmrg -vv -c    *
 *           tmrg.cfg                                                                               *
 * tmrg rev: b25f042058e4e97751df2a0933c24aeadd5a78a5                                               *
 *                                                                                                  *
 * src file: rcrc_top2.v                                                                            *
 *           Git SHA           : b25f042058e4e97751df2a0933c24aeadd5a78a5 (?? rcrc_top2.v)          *
 *           Modification time : 2022-11-10 21:22:58                                                *
 *           File Size         : 3488                                                               *
 *           MD5 hash          : 826335bf1b09d2c79ea581d980ab1c3d                                   *
 *                                                                                                  *
 ****************************************************************************************************/

module rcrc2TMR(
  input wire  clock ,
  input wire  bitin ,
  input wire  activ ,
  input wire  reset ,
  output reg  crc_ok 
);
wire resetC;
wire resetB;
wire resetA;
wire enable_iVC;
wire enable_iVB;
wire enable_iVA;
wire edgedVC;
wire edgedVB;
wire edgedVA;
wire clockC;
wire clockB;
wire clockA;
wire activC;
wire activB;
wire activA;
wor enable_iTmrError;
wire enable_i;
wor edgedTmrError;
wire edged;
reg  enable_iA ;
reg  enable_iB ;
reg  enable_iC ;
reg  edgedA ;
reg  edgedB ;
reg  edgedC ;
wire reset_i;
wire [14:0] q_out;
wire [14:0] inp;
assign reset_i =  reset;
wire enable_iV =  enable_i;
wire edgedV =  edged;
genvar i;

generate
  for(i =  0;i<15;i =  i+1)
    begin 

      rcrc_cell2TMR reg_i (
          .enable(enable_iV),
          .clock(clock),
          .reset(reset_i),
          .Input(inp[i] ),
          .q(q_out[i] )
          );
    end

endgenerate

always @( negedge clockA )
  begin
    if (resetA==1'b0)
      enable_iA <= 1'b1;
    else
      begin
        enable_iA <= enable_iVA;
        edgedA =  edgedVA;
        if (activA==1'b1)
          if (edgedVA==1'b0)
            begin
              edgedA =  1'b1;
              enable_iA <= 1'b1;
            end
          else
            edgedA =  1'b1;
        else
          begin
            edgedA =  1'b0;
            enable_iA <= 1'b0;
          end
      end
  end

always @( negedge clockB )
  begin
    if (resetB==1'b0)
      enable_iB <= 1'b1;
    else
      begin
        enable_iB <= enable_iVB;
        edgedB =  edgedVB;
        if (activB==1'b1)
          if (edgedVB==1'b0)
            begin
              edgedB =  1'b1;
              enable_iB <= 1'b1;
            end
          else
            edgedB =  1'b1;
        else
          begin
            edgedB =  1'b0;
            enable_iB <= 1'b0;
          end
      end
  end

always @( negedge clockC )
  begin
    if (resetC==1'b0)
      enable_iC <= 1'b1;
    else
      begin
        enable_iC <= enable_iVC;
        edgedC =  edgedVC;
        if (activC==1'b1)
          if (edgedVC==1'b0)
            begin
              edgedC =  1'b1;
              enable_iC <= 1'b1;
            end
          else
            edgedC =  1'b1;
        else
          begin
            edgedC =  1'b0;
            enable_iC <= 1'b0;
          end
      end
  end

always @( q_out )
  begin
    if (q_out==15'd0)
      crc_ok =  1'b1;
    else
      crc_ok =  1'b0;
  end
assign inp[0]  =  bitin^q_out[14] ;
assign inp[1]  =  q_out[0] ;
assign inp[2]  =  q_out[1] ;
assign inp[3]  =  q_out[2] ^q_out[14] ;
assign inp[4]  =  q_out[3] ^q_out[14] ;
assign inp[5]  =  q_out[4] ;
assign inp[6]  =  q_out[5] ;
assign inp[7]  =  q_out[6] ^q_out[14] ;
assign inp[8]  =  q_out[7] ^q_out[14] ;
assign inp[9]  =  q_out[8] ;
assign inp[10]  =  q_out[9] ^q_out[14] ;
assign inp[11]  =  q_out[10] ;
assign inp[12]  =  q_out[11] ;
assign inp[13]  =  q_out[12] ;
assign inp[14]  =  q_out[13] ^q_out[14] ;

majorityVoter edgedVoter (
    .inA(edgedA),
    .inB(edgedB),
    .inC(edgedC),
    .out(edged),
    .tmrErr(edgedTmrError)
    );

majorityVoter enable_iVoter (
    .inA(enable_iA),
    .inB(enable_iB),
    .inC(enable_iC),
    .out(enable_i),
    .tmrErr(enable_iTmrError)
    );

fanout activFanout (
    .in(activ),
    .outA(activA),
    .outB(activB),
    .outC(activC)
    );

fanout clockFanout (
    .in(clock),
    .outA(clockA),
    .outB(clockB),
    .outC(clockC)
    );

fanout edgedVFanout (
    .in(edgedV),
    .outA(edgedVA),
    .outB(edgedVB),
    .outC(edgedVC)
    );

fanout enable_iVFanout (
    .in(enable_iV),
    .outA(enable_iVA),
    .outB(enable_iVB),
    .outC(enable_iVC)
    );

fanout resetFanout (
    .in(reset),
    .outA(resetA),
    .outB(resetB),
    .outC(resetC)
    );
endmodule

