//
// Module mopshub_triplicated.prescale2TMR.struct
//
// Created:
//          by - dcs.dcs (localhost)
//          at - 09:18:09 05/10/22
//
// Generated by Mentor Graphics' HDL Designer(TM) 2019.4 (Build 4)
//


module prescale2TMR( 
   // Port Declarations
   input   wire           clockA, 
   input   wire           clockB, 
   input   wire           clockC, 
   input   wire           resetA, 
   input   wire           resetB, 
   input   wire           resetC, 
   input   wire    [3:0]  highA, 
   input   wire    [3:0]  highB, 
   input   wire    [3:0]  highC, 
   input   wire    [3:0]  lowA, 
   input   wire    [3:0]  lowB, 
   input   wire    [3:0]  lowC, 
   output  reg            Prescale_ENA, 
   output  reg            Prescale_ENB, 
   output  reg            Prescale_ENC
);


// Internal Declarations


// Local declarations

// Internal signal declarations
wor         lo_countTmrErrorC;
wire  [3:0] lo_countVotedC;
wor         hiloTmrErrorC;
wire        hiloVotedC;
wor         hi_countTmrErrorC;
wire  [3:0] hi_countVotedC;
wor         lo_countTmrErrorB;
wire  [3:0] lo_countVotedB;
wor         hiloTmrErrorB;
wire        hiloVotedB;
wor         hi_countTmrErrorB;
wire  [3:0] hi_countVotedB;
wor         lo_countTmrErrorA;
wire  [3:0] lo_countVotedA;
wor         hiloTmrErrorA;
wire        hiloVotedA;
wor         hi_countTmrErrorA;
wire  [3:0] hi_countVotedA;
reg   [3:0] lo_countA;
reg   [3:0] lo_countB;
reg   [3:0] lo_countC;
reg   [3:0] hi_countA;
reg   [3:0] hi_countB;
reg   [3:0] hi_countC;
reg         hiloA;
reg         hiloB;
reg         hiloC;


// Instances 
majorityVoter #(4) hi_countVoterA( 
   .inA    (hi_countA), 
   .inB    (hi_countB), 
   .inC    (hi_countC), 
   .out    (hi_countVotedA), 
   .tmrErr (hi_countTmrErrorA)
); 

majorityVoter #(4) hi_countVoterB( 
   .inA    (hi_countA), 
   .inB    (hi_countB), 
   .inC    (hi_countC), 
   .out    (hi_countVotedB), 
   .tmrErr (hi_countTmrErrorB)
); 

majorityVoter #(4) hi_countVoterC( 
   .inA    (hi_countA), 
   .inB    (hi_countB), 
   .inC    (hi_countC), 
   .out    (hi_countVotedC), 
   .tmrErr (hi_countTmrErrorC)
); 

majorityVoter hiloVoterA( 
   .inA    (hiloA), 
   .inB    (hiloB), 
   .inC    (hiloC), 
   .out    (hiloVotedA), 
   .tmrErr (hiloTmrErrorA)
); 

majorityVoter hiloVoterB( 
   .inA    (hiloA), 
   .inB    (hiloB), 
   .inC    (hiloC), 
   .out    (hiloVotedB), 
   .tmrErr (hiloTmrErrorB)
); 

majorityVoter hiloVoterC( 
   .inA    (hiloA), 
   .inB    (hiloB), 
   .inC    (hiloC), 
   .out    (hiloVotedC), 
   .tmrErr (hiloTmrErrorC)
); 

majorityVoter #(4) lo_countVoterA( 
   .inA    (lo_countA), 
   .inB    (lo_countB), 
   .inC    (lo_countC), 
   .out    (lo_countVotedA), 
   .tmrErr (lo_countTmrErrorA)
); 

majorityVoter #(4) lo_countVoterB( 
   .inA    (lo_countA), 
   .inB    (lo_countB), 
   .inC    (lo_countC), 
   .out    (lo_countVotedB), 
   .tmrErr (lo_countTmrErrorB)
); 

majorityVoter #(4) lo_countVoterC( 
   .inA    (lo_countA), 
   .inB    (lo_countB), 
   .inC    (lo_countC), 
   .out    (lo_countVotedC), 
   .tmrErr (lo_countTmrErrorC)
); 

// HDL Embedded Text Block 1 eb1
always @( posedge clockA or negedge resetA )
  begin
    if (resetA==1'b0)
      begin
        lo_countA <= 4'b0000;
        hi_countA <= 4'b0000;
        hiloA <= 1'b1;
        Prescale_ENA <= 1'b0;
      end
    else
      begin
        lo_countA <= lo_countVotedA;
        hi_countA <= hi_countVotedA;
        hiloA <= hiloVotedA;
        if (hiloVotedA==1'b1)
          begin
            Prescale_ENA <= 1'b0;
            if (hi_countVotedA==highA)
              begin
                hi_countA <= 4'b0000;
                hiloA <= 1'b0;
              end
            else
              hi_countA <= hi_countVotedA+1;
          end
        else
          begin
            if (lo_countVotedA==lowA)
              begin
                Prescale_ENA <= 1'b1;
                lo_countA <= 4'b0000;
                hiloA <= 1'b1;
              end
            else
              begin
                Prescale_ENA <= 1'b0;
                lo_countA <= lo_countVotedA+1;
              end
          end
      end
  end
// HDL Embedded Text Block 2 eb2
always @( posedge clockB or negedge resetB )
  begin
    if (resetB==1'b0)
      begin
        lo_countB <= 4'b0000;
        hi_countB <= 4'b0000;
        hiloB <= 1'b1;
        Prescale_ENB <= 1'b0;
      end
    else
      begin
        lo_countB <= lo_countVotedB;
        hi_countB <= hi_countVotedB;
        hiloB <= hiloVotedB;
        if (hiloVotedB==1'b1)
          begin
            Prescale_ENB <= 1'b0;
            if (hi_countVotedB==highB)
              begin
                hi_countB <= 4'b0000;
                hiloB <= 1'b0;
              end
            else
              hi_countB <= hi_countVotedB+1;
          end
        else
          begin
            if (lo_countVotedB==lowB)
              begin
                Prescale_ENB <= 1'b1;
                lo_countB <= 4'b0000;
                hiloB <= 1'b1;
              end
            else
              begin
                Prescale_ENB <= 1'b0;
                lo_countB <= lo_countVotedB+1;
              end
          end
      end
  end
// HDL Embedded Text Block 3 eb3
always @( posedge clockC or negedge resetC )
  begin
    if (resetC==1'b0)
      begin
        lo_countC <= 4'b0000;
        hi_countC <= 4'b0000;
        hiloC <= 1'b1;
        Prescale_ENC <= 1'b0;
      end
    else
      begin
        lo_countC <= lo_countVotedC;
        hi_countC <= hi_countVotedC;
        hiloC <= hiloVotedC;
        if (hiloVotedC==1'b1)
          begin
            Prescale_ENC <= 1'b0;
            if (hi_countVotedC==highC)
              begin
                hi_countC <= 4'b0000;
                hiloC <= 1'b0;
              end
            else
              hi_countC <= hi_countVotedC+1;
          end
        else
          begin
            if (lo_countVotedC==lowC)
              begin
                Prescale_ENC <= 1'b1;
                lo_countC <= 4'b0000;
                hiloC <= 1'b1;
              end
            else
              begin
                Prescale_ENC <= 1'b0;
                lo_countC <= lo_countVotedC+1;
              end
          end
      end
  end

endmodule // prescale2TMR

