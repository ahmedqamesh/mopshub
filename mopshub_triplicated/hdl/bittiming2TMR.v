/****************************************************************************************************
 *                          ! THIS FILE WAS AUTO-GENERATED BY TMRG TOOL !                           *
 *                                   ! DO NOT EDIT IT MANUALLY !                                    *
 *                                                                                                  *
 * file    : ./output/bittiming2TMR.v                                                               *
 *                                                                                                  *
 * user    : lucas                                                                                  *
 * host    : DESKTOP-BFDSFP2                                                                        *
 * date    : 05/12/2022 13:28:00                                                                    *
 *                                                                                                  *
 * workdir : /mnt/c/Users/Lucas/Documents/GitHub/mopshub_triplicated/triplicated/mopshub_top_board_16/hdl *
 * cmd     : /mnt/c/Users/Lucas/Documents/GitHub/mopshub_triplicated/tmrg-master/bin/tmrg -vv -c    *
 *           tmrg.cfg                                                                               *
 * tmrg rev: b25f042058e4e97751df2a0933c24aeadd5a78a5                                               *
 *                                                                                                  *
 * src file: bittiming2.v                                                                           *
 *           Git SHA           : b25f042058e4e97751df2a0933c24aeadd5a78a5 (?? bittiming2.v)         *
 *           Modification time : 2022-11-10 21:22:58                                                *
 *           File Size         : 8112                                                               *
 *           MD5 hash          : cb60e71f17db088057814d44b4734001                                   *
 *                                                                                                  *
 ****************************************************************************************************/

module bittiming2TMR(
  input wire  clock ,
  input wire  Prescale_EN ,
  input wire  reset ,
  input wire  hardsync ,
  input wire  rx ,
  input wire [2:0] tseg1 ,
  input wire [2:0] tseg2 ,
  input wire [2:0] sjw ,
  input wire  en_osc_trim ,
  input wire [7:0] Kd ,
  input wire [7:0] Kp ,
  input wire [7:0] Ki ,
  output wire [5:0] ftrim ,
  output wire  ready_osc ,
  output wire  sendpoint ,
  output wire  smplpoint ,
  output wire  smpledbit ,
  output wire [6:0] bitst 
);
wire rxC;
wire rxB;
wire rxA;
wire resetC;
wire resetB;
wire resetA;
wire clockC;
wire clockB;
wire clockA;
wor rxfTmrError;
wire rxf;
wire [4:0] tseg1pcount;
wire [4:0] tseg1p1psjw;
wire notnull;
wire gtsjwp1;
wire gttseg1p1;
wire cpsgetseg1ptseg2p2;
wire cetseg1ptseg2p1;
wire countesmpltime;
wire puffer;
wire [4:0] tseg1mpl;
wire increment;
wire setctzero;
wire setctotwo;
wire [3:0] count;
wire [1:0] smpldbit_reg_ctrl;
wire [1:0] tseg_reg_ctrl;
wire [2:0] deblatch;
reg  rxfA ;
reg  rxfB ;
reg  rxfC ;
wire rxfV =  rxf;

always @( posedge clockA or negedge resetA )
  begin
    if (resetA==1'b0)
      rxfA <= 1'b1;
    else
      rxfA <= rxA;
  end

always @( posedge clockB or negedge resetB )
  begin
    if (resetB==1'b0)
      rxfB <= 1'b1;
    else
      rxfB <= rxB;
  end

always @( posedge clockC or negedge resetC )
  begin
    if (resetC==1'b0)
      rxfC <= 1'b1;
    else
      rxfC <= rxC;
  end
assign deblatch[0]  =  Prescale_EN;
assign deblatch[2:1]  =  tseg_reg_ctrl;
assign bitst[6:4]  =  deblatch;

Control_SysTMR freqTrim (
    .Ftrim(ftrim),
    .ready(ready_osc),
    .CLK(clock),
    .E1(count),
    .Kd(Kd),
    .Ki(Ki),
    .Kp(Kp),
    .Prescale_En(Prescale_EN),
    .Puffer(puffer),
    .Reset(reset),
    .Rx(rx),
    .active(en_osc_trim)
    );

bittime2TMR bittiming (
    .clock(clock),
    .Prescale_EN(Prescale_EN),
    .reset(reset),
    .hardsync(hardsync),
    .notnull(notnull),
    .gtsjwp1(gtsjwp1),
    .gttseg1p1(gttseg1p1),
    .cpsgetseg1ptseg2p2(cpsgetseg1ptseg2p2),
    .cetseg1ptseg2p1(cetseg1ptseg2p1),
    .countesmpltime(countesmpltime),
    .puffer(puffer),
    .rx(rxfV),
    .increment(increment),
    .setctzero(setctzero),
    .setctotwo(setctotwo),
    .sendpoint(sendpoint),
    .smplpoint(smplpoint),
    .smpldbit_reg_ctrl(smpldbit_reg_ctrl),
    .tseg_reg_ctrl(tseg_reg_ctrl),
    .bitst(bitst[3:0] )
    );

sum2TMR aritmetic (
    .count(count),
    .tseg1org(tseg1),
    .tseg1mpl(tseg1mpl),
    .tseg2(tseg2),
    .sjw(sjw),
    .notnull(notnull),
    .gtsjwp1(gtsjwp1),
    .gttseg1p1(gttseg1p1),
    .cpsgetseg1ptseg2p2(cpsgetseg1ptseg2p2),
    .cetseg1ptseg2p1(cetseg1ptseg2p1),
    .countesmpltime(countesmpltime),
    .tseg1p1psjw(tseg1p1psjw),
    .tseg1pcount(tseg1pcount)
    );

timecount2TMR counter (
    .clock(clock),
    .Prescale_EN(Prescale_EN),
    .reset(reset),
    .increment(increment),
    .setctzero(setctzero),
    .setctotwo(setctotwo),
    .counto(count)
    );

edgepuffer2TMR flipflop (
    .clock(clock),
    .Prescale_EN(Prescale_EN),
    .reset(reset),
    .rx(rxfV),
    .puffer(puffer)
    );

smpldbit_reg2TMR smpldbit_reg_i (
    .clock(clock),
    .reset(reset),
    .ctrl(smpldbit_reg_ctrl),
    .smpldbit(smpledbit),
    .puffer(puffer)
    );

tseg_reg2TMR tseg_reg_i (
    .clock(clock),
    .reset(reset),
    .ctrl(tseg_reg_ctrl),
    .tseg1(tseg1),
    .tseg1pcount(tseg1pcount),
    .tseg1p1psjw(tseg1p1psjw),
    .tseg1mpl(tseg1mpl)
    );

majorityVoter rxfVoter (
    .inA(rxfA),
    .inB(rxfB),
    .inC(rxfC),
    .out(rxf),
    .tmrErr(rxfTmrError)
    );

fanout clockFanout (
    .in(clock),
    .outA(clockA),
    .outB(clockB),
    .outC(clockC)
    );

fanout resetFanout (
    .in(reset),
    .outA(resetA),
    .outB(resetB),
    .outC(resetC)
    );

fanout rxFanout (
    .in(rx),
    .outA(rxA),
    .outB(rxB),
    .outC(rxC)
    );
endmodule

