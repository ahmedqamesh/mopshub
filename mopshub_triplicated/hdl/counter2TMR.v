/****************************************************************************************************
 *                          ! THIS FILE WAS AUTO-GENERATED BY TMRG TOOL !                           *
 *                                   ! DO NOT EDIT IT MANUALLY !                                    *
 *                                                                                                  *
 * file    : ./output/counter2TMR.v                                                                 *
 *                                                                                                  *
 * user    : lucas                                                                                  *
 * host    : DESKTOP-BFDSFP2                                                                        *
 * date    : 05/12/2022 13:28:06                                                                    *
 *                                                                                                  *
 * workdir : /mnt/c/Users/Lucas/Documents/GitHub/mopshub_triplicated/triplicated/mopshub_top_board_16/hdl *
 * cmd     : /mnt/c/Users/Lucas/Documents/GitHub/mopshub_triplicated/tmrg-master/bin/tmrg -vv -c    *
 *           tmrg.cfg                                                                               *
 * tmrg rev: b25f042058e4e97751df2a0933c24aeadd5a78a5                                               *
 *                                                                                                  *
 * src file: counter2.v                                                                             *
 *           Git SHA           : b25f042058e4e97751df2a0933c24aeadd5a78a5 (?? counter2.v)           *
 *           Modification time : 2022-11-10 21:22:58                                                *
 *           File Size         : 3637                                                               *
 *           MD5 hash          : c1706e44bfc2e975b2d3852014c66d0f                                   *
 *                                                                                                  *
 ****************************************************************************************************/

module counter2TMR(
  input wire  clock ,
  input wire  Prescale_EN ,
  input wire  inc ,
  input wire  reset ,
  output reg  lt3 ,
  output reg  gt3 ,
  output reg  eq3 ,
  output reg  lt11 ,
  output reg  eq11 ,
  output wire [6:0] counto 
);
wire resetC;
wire resetB;
wire resetA;
wire inc_rise_merkerVC;
wire inc_rise_merkerVB;
wire inc_rise_merkerVA;
wire incC;
wire incB;
wire incA;
wire [6:0] countoC;
wire [6:0] countoB;
wire [6:0] countoA;
wire clockC;
wire clockB;
wire clockA;
wire Prescale_ENC;
wire Prescale_ENB;
wire Prescale_ENA;
wor inc_rise_merkerTmrError;
wire inc_rise_merker;
wor countTmrError;
wire [6:0] count;
reg  inc_rise_merkerA ;
reg  inc_rise_merkerB ;
reg  inc_rise_merkerC ;
reg  [6:0] countA ;
reg  [6:0] countB ;
reg  [6:0] countC ;
wire inc_rise_merkerV =  inc_rise_merker;
assign counto =  count;

always @( posedge clockA )
  begin
    countA <= countoA;
    inc_rise_merkerA <= inc_rise_merkerVA;
    if (Prescale_ENA==1'b1)
      begin
        if (resetA==1'b0)
          begin
            countA <= 7'd0;
            inc_rise_merkerA <= 1'b0;
          end
        else
          if (incA==1'b1)
            begin
              if (inc_rise_merkerVA==1'b0)
                begin
                  inc_rise_merkerA <= 1'b1;
                  if (countoA==7'd127)
                    countA <= 7'd0;
                  else
                    countA <= countoA+1;
                end
            end
          else
            inc_rise_merkerA <= 1'b0;
      end
  end

always @( posedge clockB )
  begin
    countB <= countoB;
    inc_rise_merkerB <= inc_rise_merkerVB;
    if (Prescale_ENB==1'b1)
      begin
        if (resetB==1'b0)
          begin
            countB <= 7'd0;
            inc_rise_merkerB <= 1'b0;
          end
        else
          if (incB==1'b1)
            begin
              if (inc_rise_merkerVB==1'b0)
                begin
                  inc_rise_merkerB <= 1'b1;
                  if (countoB==7'd127)
                    countB <= 7'd0;
                  else
                    countB <= countoB+1;
                end
            end
          else
            inc_rise_merkerB <= 1'b0;
      end
  end

always @( posedge clockC )
  begin
    countC <= countoC;
    inc_rise_merkerC <= inc_rise_merkerVC;
    if (Prescale_ENC==1'b1)
      begin
        if (resetC==1'b0)
          begin
            countC <= 7'd0;
            inc_rise_merkerC <= 1'b0;
          end
        else
          if (incC==1'b1)
            begin
              if (inc_rise_merkerVC==1'b0)
                begin
                  inc_rise_merkerC <= 1'b1;
                  if (countoC==7'd127)
                    countC <= 7'd0;
                  else
                    countC <= countoC+1;
                end
            end
          else
            inc_rise_merkerC <= 1'b0;
      end
  end

always @( counto )
  begin
    if (counto<3)
      begin
        lt3 =  1'b1;
        gt3 =  1'b0;
        eq3 =  1'b0;
      end
    else
      if (counto==3)
        begin
          lt3 =  1'b0;
          gt3 =  1'b0;
          eq3 =  1'b1;
        end
      else
        begin
          lt3 =  1'b0;
          gt3 =  1'b1;
          eq3 =  1'b0;
        end
  end

always @( counto )
  begin
    if (counto<11)
      begin
        lt11 =  1'b1;
        eq11 =  1'b0;
      end
    else
      if (counto==11)
        begin
          lt11 =  1'b0;
          eq11 =  1'b1;
        end
      else
        begin
          lt11 =  1'b0;
          eq11 =  1'b0;
        end
  end

majorityVoter #(.WIDTH(7)) countVoter (
    .inA(countA),
    .inB(countB),
    .inC(countC),
    .out(count),
    .tmrErr(countTmrError)
    );

majorityVoter inc_rise_merkerVoter (
    .inA(inc_rise_merkerA),
    .inB(inc_rise_merkerB),
    .inC(inc_rise_merkerC),
    .out(inc_rise_merker),
    .tmrErr(inc_rise_merkerTmrError)
    );

fanout Prescale_ENFanout (
    .in(Prescale_EN),
    .outA(Prescale_ENA),
    .outB(Prescale_ENB),
    .outC(Prescale_ENC)
    );

fanout clockFanout (
    .in(clock),
    .outA(clockA),
    .outB(clockB),
    .outC(clockC)
    );

fanout #(.WIDTH(7)) countoFanout (
    .in(counto),
    .outA(countoA),
    .outB(countoB),
    .outC(countoC)
    );

fanout incFanout (
    .in(inc),
    .outA(incA),
    .outB(incB),
    .outC(incC)
    );

fanout inc_rise_merkerVFanout (
    .in(inc_rise_merkerV),
    .outA(inc_rise_merkerVA),
    .outB(inc_rise_merkerVB),
    .outC(inc_rise_merkerVC)
    );

fanout resetFanout (
    .in(reset),
    .outA(resetA),
    .outB(resetB),
    .outC(resetC)
    );
endmodule

