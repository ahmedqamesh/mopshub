/****************************************************************************************************
 *                          ! THIS FILE WAS AUTO-GENERATED BY TMRG TOOL !                           *
 *                                   ! DO NOT EDIT IT MANUALLY !                                    *
 *                                                                                                  *
 * file    : ./output/buffer_tra_spiTMR.v                                                           *
 *                                                                                                  *
 * user    : lucas                                                                                  *
 * host    : DESKTOP-BFDSFP2                                                                        *
 * date    : 03/04/2022 20:08:31                                                                    *
 *                                                                                                  *
 * workdir : /mnt/c/Users/Lucas/Desktop/mopshub_triplication/triplicated/mopshub_top_canakari_ftrim/hdl *
 * cmd     : /mnt/c/Users/Lucas/Desktop/mopshub_triplication/tmrg-master/bin/tmrg -vv -c tmrg.cfg   *
 * tmrg rev:                                                                                        *
 *                                                                                                  *
 * src file: buffer_tra_spi.v                                                                       *
 *           Git SHA           : File not in git repository!                                        *
 *           Modification time : 2022-03-28 18:32:41                                                *
 *           File Size         : 1743                                                               *
 *           MD5 hash          : 2a46499405e90df9f01abfa34c63d0d3                                   *
 *                                                                                                  *
 ****************************************************************************************************/

module buffer_tra_spiTMR(
  input wire  clkA ,
  input wire  clkB ,
  input wire  clkC ,
  input wire [7:0] data_tra_8bitinA ,
  input wire [7:0] data_tra_8bitinB ,
  input wire [7:0] data_tra_8bitinC ,
  input wire  buffer_enA ,
  input wire  buffer_enB ,
  input wire  buffer_enC ,
  input wire  rstA ,
  input wire  rstB ,
  input wire  rstC ,
  input wire [4:0] addrA ,
  input wire [4:0] addrB ,
  input wire [4:0] addrC ,
  output wire [31:0] data_tra_outA ,
  output wire [31:0] data_tra_outB ,
  output wire [31:0] data_tra_outC 
);
reg  [7:0] b0A ;
reg  [7:0] b0B ;
reg  [7:0] b0C ;
reg  [7:0] b1A ;
reg  [7:0] b1B ;
reg  [7:0] b1C ;
reg  [7:0] b2A ;
reg  [7:0] b2B ;
reg  [7:0] b2C ;
reg  [7:0] b3A ;
reg  [7:0] b3B ;
reg  [7:0] b3C ;
initial
  begin
    b0A =  8'h00;
    b1A =  8'h00;
    b2A =  8'h00;
    b3A =  8'h00;
  end
initial
  begin
    b0B =  8'h00;
    b1B =  8'h00;
    b2B =  8'h00;
    b3B =  8'h00;
  end
initial
  begin
    b0C =  8'h00;
    b1C =  8'h00;
    b2C =  8'h00;
    b3C =  8'h00;
  end

always @( posedge clkA )
  begin
    if (!rstA)
      begin
        b0A <= 8'h00;
        b1A <= 8'h00;
        b2A <= 8'h00;
        b3A <= 8'h00;
      end
    if (buffer_enA)
      begin
        case (addrA)
          5'b00010 : b0A <= data_tra_8bitinA[7:0] ;
          5'b00011 : b1A <= data_tra_8bitinA[7:0] ;
          5'b00100 : b2A <= data_tra_8bitinA[7:0] ;
          5'b00101 : b3A <= data_tra_8bitinA[7:0] ;
          default begin
  b0A <= 8'h00;
  b1A <= 8'h00;
  b2A <= 8'h00;
  b3A <= 8'h00;
end 
        endcase
      end
    else
      begin
        b0A <= b0A;
        b1A <= b1A;
        b2A <= b2A;
        b3A <= b3A;
      end
  end

always @( posedge clkB )
  begin
    if (!rstB)
      begin
        b0B <= 8'h00;
        b1B <= 8'h00;
        b2B <= 8'h00;
        b3B <= 8'h00;
      end
    if (buffer_enB)
      begin
        case (addrB)
          5'b00010 : b0B <= data_tra_8bitinB[7:0] ;
          5'b00011 : b1B <= data_tra_8bitinB[7:0] ;
          5'b00100 : b2B <= data_tra_8bitinB[7:0] ;
          5'b00101 : b3B <= data_tra_8bitinB[7:0] ;
          default begin
  b0B <= 8'h00;
  b1B <= 8'h00;
  b2B <= 8'h00;
  b3B <= 8'h00;
end 
        endcase
      end
    else
      begin
        b0B <= b0B;
        b1B <= b1B;
        b2B <= b2B;
        b3B <= b3B;
      end
  end

always @( posedge clkC )
  begin
    if (!rstC)
      begin
        b0C <= 8'h00;
        b1C <= 8'h00;
        b2C <= 8'h00;
        b3C <= 8'h00;
      end
    if (buffer_enC)
      begin
        case (addrC)
          5'b00010 : b0C <= data_tra_8bitinC[7:0] ;
          5'b00011 : b1C <= data_tra_8bitinC[7:0] ;
          5'b00100 : b2C <= data_tra_8bitinC[7:0] ;
          5'b00101 : b3C <= data_tra_8bitinC[7:0] ;
          default begin
  b0C <= 8'h00;
  b1C <= 8'h00;
  b2C <= 8'h00;
  b3C <= 8'h00;
end 
        endcase
      end
    else
      begin
        b0C <= b0C;
        b1C <= b1C;
        b2C <= b2C;
        b3C <= b3C;
      end
  end
assign data_tra_outA =  {b0A,b1A,b2A,b3A};
assign data_tra_outB =  {b0B,b1B,b2B,b3B};
assign data_tra_outC =  {b0C,b1C,b2C,b3C};
endmodule

