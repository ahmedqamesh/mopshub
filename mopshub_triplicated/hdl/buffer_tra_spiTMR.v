/****************************************************************************************************
 *                          ! THIS FILE WAS AUTO-GENERATED BY TMRG TOOL !                           *
 *                                   ! DO NOT EDIT IT MANUALLY !                                    *
 *                                                                                                  *
 * file    : ./output/buffer_tra_spiTMR.v                                                           *
 *                                                                                                  *
 * user    : lucas                                                                                  *
 * host    : DESKTOP-BFDSFP2                                                                        *
 * date    : 16/08/2022 12:58:09                                                                    *
 *                                                                                                  *
 * workdir : /mnt/c/Users/Lucas/Desktop/mopshub_triplication/mopshub_top_board_canakari_ftrim/hdl   *
 * cmd     : /mnt/c/Users/Lucas/Desktop/mopshub_triplication/tmrg-master/bin/tmrg -c tmrg.cfg -vvv  *
 * tmrg rev:                                                                                        *
 *                                                                                                  *
 * src file: buffer_tra_spi.v                                                                       *
 *           Git SHA           : File not in git repository!                                        *
 *           Modification time : 2022-08-12 09:54:50                                                *
 *           File Size         : 1865                                                               *
 *           MD5 hash          : f1f0020d5fae34882168b98c109dea05                                   *
 *                                                                                                  *
 ****************************************************************************************************/

module buffer_tra_spiTMR(
  input wire  clk ,
  input wire [7:0] data_tra_8bitin ,
  input wire  buffer_en ,
  input wire  rst ,
  input wire [4:0] addr ,
  output wire [7:0] spi_id ,
  output wire [7:0] spi_reg ,
  output wire [7:0] spi_select ,
  output wire [7:0] data_tra_out 
);
wire rstC;
wire rstB;
wire rstA;
wire [7:0] data_tra_8bitinC;
wire [7:0] data_tra_8bitinB;
wire [7:0] data_tra_8bitinA;
wire clkC;
wire clkB;
wire clkA;
wire buffer_enC;
wire buffer_enB;
wire buffer_enA;
wire [7:0] b3_vC;
wire [7:0] b3_vB;
wire [7:0] b3_vA;
wire [7:0] b2_vC;
wire [7:0] b2_vB;
wire [7:0] b2_vA;
wire [7:0] b1_vC;
wire [7:0] b1_vB;
wire [7:0] b1_vA;
wire [7:0] b0_vC;
wire [7:0] b0_vB;
wire [7:0] b0_vA;
wire [4:0] addrC;
wire [4:0] addrB;
wire [4:0] addrA;
wor b3TmrError;
wire [7:0] b3;
wor b2TmrError;
wire [7:0] b2;
wor b1TmrError;
wire [7:0] b1;
wor b0TmrError;
wire [7:0] b0;
reg  [7:0] b0A ;
reg  [7:0] b0B ;
reg  [7:0] b0C ;
reg  [7:0] b1A ;
reg  [7:0] b1B ;
reg  [7:0] b1C ;
reg  [7:0] b2A ;
reg  [7:0] b2B ;
reg  [7:0] b2C ;
reg  [7:0] b3A ;
reg  [7:0] b3B ;
reg  [7:0] b3C ;
initial
  begin
    b0A =  8'h00;
    b1A =  8'h00;
    b2A =  8'h00;
    b3A =  8'h00;
  end
initial
  begin
    b0B =  8'h00;
    b1B =  8'h00;
    b2B =  8'h00;
    b3B =  8'h00;
  end
initial
  begin
    b0C =  8'h00;
    b1C =  8'h00;
    b2C =  8'h00;
    b3C =  8'h00;
  end
wire [7:0] b0_v =  b0;
wire [7:0] b1_v =  b1;
wire [7:0] b2_v =  b2;
wire [7:0] b3_v =  b3;

always @( posedge clkA )
  begin
    if (!rstA)
      begin
        b0A <= 8'h00;
        b1A <= 8'h00;
        b2A <= 8'h00;
        b3A <= 8'h00;
      end
    if (buffer_enA)
      begin
        case (addrA)
          5'b00010 : b0A <= data_tra_8bitinA[7:0] ;
          5'b00011 : b1A <= data_tra_8bitinA[7:0] ;
          5'b00100 : b2A <= data_tra_8bitinA[7:0] ;
          5'b00101 : b3A <= data_tra_8bitinA[7:0] ;
          default begin
  b0A <= 8'h00;
  b1A <= 8'h00;
  b2A <= 8'h00;
  b3A <= 8'h00;
end 
        endcase
      end
    else
      begin
        b0A <= b0_vA;
        b1A <= b1_vA;
        b2A <= b2_vA;
        b3A <= b3_vA;
      end
  end

always @( posedge clkB )
  begin
    if (!rstB)
      begin
        b0B <= 8'h00;
        b1B <= 8'h00;
        b2B <= 8'h00;
        b3B <= 8'h00;
      end
    if (buffer_enB)
      begin
        case (addrB)
          5'b00010 : b0B <= data_tra_8bitinB[7:0] ;
          5'b00011 : b1B <= data_tra_8bitinB[7:0] ;
          5'b00100 : b2B <= data_tra_8bitinB[7:0] ;
          5'b00101 : b3B <= data_tra_8bitinB[7:0] ;
          default begin
  b0B <= 8'h00;
  b1B <= 8'h00;
  b2B <= 8'h00;
  b3B <= 8'h00;
end 
        endcase
      end
    else
      begin
        b0B <= b0_vB;
        b1B <= b1_vB;
        b2B <= b2_vB;
        b3B <= b3_vB;
      end
  end

always @( posedge clkC )
  begin
    if (!rstC)
      begin
        b0C <= 8'h00;
        b1C <= 8'h00;
        b2C <= 8'h00;
        b3C <= 8'h00;
      end
    if (buffer_enC)
      begin
        case (addrC)
          5'b00010 : b0C <= data_tra_8bitinC[7:0] ;
          5'b00011 : b1C <= data_tra_8bitinC[7:0] ;
          5'b00100 : b2C <= data_tra_8bitinC[7:0] ;
          5'b00101 : b3C <= data_tra_8bitinC[7:0] ;
          default begin
  b0C <= 8'h00;
  b1C <= 8'h00;
  b2C <= 8'h00;
  b3C <= 8'h00;
end 
        endcase
      end
    else
      begin
        b0C <= b0_vC;
        b1C <= b1_vC;
        b2C <= b2_vC;
        b3C <= b3_vC;
      end
  end
assign data_tra_out =  b3;
assign spi_reg =  b2;
assign spi_select =  b1;
assign spi_id =  b0;

majorityVoter #(.WIDTH(8)) b0Voter (
    .inA(b0A),
    .inB(b0B),
    .inC(b0C),
    .out(b0),
    .tmrErr(b0TmrError)
    );

majorityVoter #(.WIDTH(8)) b1Voter (
    .inA(b1A),
    .inB(b1B),
    .inC(b1C),
    .out(b1),
    .tmrErr(b1TmrError)
    );

majorityVoter #(.WIDTH(8)) b2Voter (
    .inA(b2A),
    .inB(b2B),
    .inC(b2C),
    .out(b2),
    .tmrErr(b2TmrError)
    );

majorityVoter #(.WIDTH(8)) b3Voter (
    .inA(b3A),
    .inB(b3B),
    .inC(b3C),
    .out(b3),
    .tmrErr(b3TmrError)
    );

fanout #(.WIDTH(5)) addrFanout (
    .in(addr),
    .outA(addrA),
    .outB(addrB),
    .outC(addrC)
    );

fanout #(.WIDTH(8)) b0_vFanout (
    .in(b0_v),
    .outA(b0_vA),
    .outB(b0_vB),
    .outC(b0_vC)
    );

fanout #(.WIDTH(8)) b1_vFanout (
    .in(b1_v),
    .outA(b1_vA),
    .outB(b1_vB),
    .outC(b1_vC)
    );

fanout #(.WIDTH(8)) b2_vFanout (
    .in(b2_v),
    .outA(b2_vA),
    .outB(b2_vB),
    .outC(b2_vC)
    );

fanout #(.WIDTH(8)) b3_vFanout (
    .in(b3_v),
    .outA(b3_vA),
    .outB(b3_vB),
    .outC(b3_vC)
    );

fanout buffer_enFanout (
    .in(buffer_en),
    .outA(buffer_enA),
    .outB(buffer_enB),
    .outC(buffer_enC)
    );

fanout clkFanout (
    .in(clk),
    .outA(clkA),
    .outB(clkB),
    .outC(clkC)
    );

fanout #(.WIDTH(8)) data_tra_8bitinFanout (
    .in(data_tra_8bitin),
    .outA(data_tra_8bitinA),
    .outB(data_tra_8bitinB),
    .outC(data_tra_8bitinC)
    );

fanout rstFanout (
    .in(rst),
    .outA(rstA),
    .outB(rstB),
    .outC(rstC)
    );
endmodule

