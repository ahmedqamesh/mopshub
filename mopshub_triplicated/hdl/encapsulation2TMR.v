/****************************************************************************************************
 *                          ! THIS FILE WAS AUTO-GENERATED BY TMRG TOOL !                           *
 *                                   ! DO NOT EDIT IT MANUALLY !                                    *
 *                                                                                                  *
 * file    : ./output/encapsulation2TMR.v                                                           *
 *                                                                                                  *
 * user    : lucas                                                                                  *
 * host    : DESKTOP-BFDSFP2                                                                        *
 * date    : 05/12/2022 13:28:10                                                                    *
 *                                                                                                  *
 * workdir : /mnt/c/Users/Lucas/Documents/GitHub/mopshub_triplicated/triplicated/mopshub_top_board_16/hdl *
 * cmd     : /mnt/c/Users/Lucas/Documents/GitHub/mopshub_triplicated/tmrg-master/bin/tmrg -vv -c    *
 *           tmrg.cfg                                                                               *
 * tmrg rev: b25f042058e4e97751df2a0933c24aeadd5a78a5                                               *
 *                                                                                                  *
 * src file: encapsulation2.v                                                                       *
 *           Git SHA           : b25f042058e4e97751df2a0933c24aeadd5a78a5 (?? encapsulation2.v)     *
 *           Modification time : 2022-11-10 21:22:58                                                *
 *           File Size         : 3112                                                               *
 *           MD5 hash          : 09b64c1ab332c7be16f685acf82fbd0f                                   *
 *                                                                                                  *
 ****************************************************************************************************/

module encapsulation2TMR(
  input wire  clock ,
  input wire [28:0] identifier ,
  input wire  extended ,
  input wire  remote ,
  input wire  activ ,
  input wire  reset ,
  input wire [3:0] datalen ,
  output wire [3:0] tmlen ,
  output reg [38:0] message 
);
wire [3:0] tmlenC;
wire [3:0] tmlenB;
wire [3:0] tmlenA;
wire resetC;
wire resetB;
wire resetA;
wire remoteC;
wire remoteB;
wire remoteA;
wire remVC;
wire remVB;
wire remVA;
wire [3:0] datalenC;
wire [3:0] datalenB;
wire [3:0] datalenA;
wire clockC;
wire clockB;
wire clockA;
wire activC;
wire activB;
wire activA;
wor remTmrError;
wire rem;
wor datalen_bufTmrError;
wire [3:0] datalen_buf;
reg  [3:0] datalen_bufA ;
reg  [3:0] datalen_bufB ;
reg  [3:0] datalen_bufC ;
reg  remA ;
reg  remB ;
reg  remC ;
assign tmlen =  datalen_buf;
wire remV =  rem;

always @( posedge clockA )
  begin
    if (resetA==1'b0)
      begin
        datalen_bufA <= 4'b0000;
        remA <= 0;
      end
    else
      begin
        remA <= remVA;
        datalen_bufA <= tmlenA;
        if (activA==1'b1)
          begin
            if (remVA==1'b0)
              begin
                remA <= 1'b1;
                if (remoteA==1'b1)
                  datalen_bufA <= 4'b0000;
                else
                  datalen_bufA <= datalenA;
              end
          end
        else
          remA <= 1'b0;
      end
  end

always @( posedge clockB )
  begin
    if (resetB==1'b0)
      begin
        datalen_bufB <= 4'b0000;
        remB <= 0;
      end
    else
      begin
        remB <= remVB;
        datalen_bufB <= tmlenB;
        if (activB==1'b1)
          begin
            if (remVB==1'b0)
              begin
                remB <= 1'b1;
                if (remoteB==1'b1)
                  datalen_bufB <= 4'b0000;
                else
                  datalen_bufB <= datalenB;
              end
          end
        else
          remB <= 1'b0;
      end
  end

always @( posedge clockC )
  begin
    if (resetC==1'b0)
      begin
        datalen_bufC <= 4'b0000;
        remC <= 0;
      end
    else
      begin
        remC <= remVC;
        datalen_bufC <= tmlenC;
        if (activC==1'b1)
          begin
            if (remVC==1'b0)
              begin
                remC <= 1'b1;
                if (remoteC==1'b1)
                  datalen_bufC <= 4'b0000;
                else
                  datalen_bufC <= datalenC;
              end
          end
        else
          remC <= 1'b0;
      end
  end

always @( identifier or datalen or remote or extended )
  begin
    message[38]  =  1'b0;
    message[6]  =  remote;
    message[5:4]  =  2'b00;
    message[3:0]  =  datalen;
    if (extended==1'b1)
      begin
        message[37:27]  =  identifier[28:18] ;
        message[26:25]  =  2'b11;
        message[24:7]  =  identifier[17:0] ;
      end
    else
      begin
        message[37:18]  =  20'd0;
        message[17:7]  =  identifier[28:18] ;
      end
  end

majorityVoter #(.WIDTH(4)) datalen_bufVoter (
    .inA(datalen_bufA),
    .inB(datalen_bufB),
    .inC(datalen_bufC),
    .out(datalen_buf),
    .tmrErr(datalen_bufTmrError)
    );

majorityVoter remVoter (
    .inA(remA),
    .inB(remB),
    .inC(remC),
    .out(rem),
    .tmrErr(remTmrError)
    );

fanout activFanout (
    .in(activ),
    .outA(activA),
    .outB(activB),
    .outC(activC)
    );

fanout clockFanout (
    .in(clock),
    .outA(clockA),
    .outB(clockB),
    .outC(clockC)
    );

fanout #(.WIDTH(4)) datalenFanout (
    .in(datalen),
    .outA(datalenA),
    .outB(datalenB),
    .outC(datalenC)
    );

fanout remVFanout (
    .in(remV),
    .outA(remVA),
    .outB(remVB),
    .outC(remVC)
    );

fanout remoteFanout (
    .in(remote),
    .outA(remoteA),
    .outB(remoteB),
    .outC(remoteC)
    );

fanout resetFanout (
    .in(reset),
    .outA(resetA),
    .outB(resetB),
    .outC(resetC)
    );

fanout #(.WIDTH(4)) tmlenFanout (
    .in(tmlen),
    .outA(tmlenA),
    .outB(tmlenB),
    .outC(tmlenC)
    );
endmodule

