/****************************************************************************************************
 *                          ! THIS FILE WAS AUTO-GENERATED BY TMRG TOOL !                           *
 *                                   ! DO NOT EDIT IT MANUALLY !                                    *
 *                                                                                                  *
 * file    : ./output/elink_interface_rec_sm_fsmTMR.v                                               *
 *                                                                                                  *
 * user    : lucas                                                                                  *
 * host    : DESKTOP-BFDSFP2                                                                        *
 * date    : 06/10/2022 13:52:45                                                                    *
 *                                                                                                  *
 * workdir : /mnt/c/Users/Lucas/Documents/GitHub/mopshub_triplicated/triplicated/mopshub_top_board/hdl *
 * cmd     : /mnt/c/Users/Lucas/Desktop/mopshub_triplication/tmrg-master/bin/tmrg -vv -c tmrg.cfg   *
 * tmrg rev:                                                                                        *
 *                                                                                                  *
 * src file: elink_interface_rec_sm_fsm.v                                                           *
 *           Git SHA           : c110441b08b692cc54ebd4a3b84a2599430e8f93                           *
 *           Modification time : 2022-10-06 09:12:23                                                *
 *           File Size         : 12237                                                              *
 *           MD5 hash          : 6f0209ee6eb271927e4902fba380d417                                   *
 *                                                                                                  *
 ****************************************************************************************************/

module elink_interface_rec_SMTMR(
  input wire  abort ,
  input wire  clk ,
  input wire  rst ,
  input wire  start_write_elink ,
  input wire  start_write_elink_spi ,
  input wire  timeoutrst ,
  output reg [4:0] addr_write ,
  output reg  buffer_rec_en ,
  output reg  buffer_spi_rec_en ,
  output reg  cs_ewrite ,
  output reg  end_write_elink ,
  output reg  end_write_elink_spi ,
  output reg  entimeout ,
  output reg  irq_elink_rec ,
  output reg  spi_rec_mode ,
  output reg [5:0] statedeb 
);
parameter ST_waittoact =6'd0;
parameter ST_reset =6'd1;
parameter ST_end_write_en =6'd2;
parameter store_WB0 =6'd3;
parameter store_WB1 =6'd4;
parameter ST_wait_can_rq =6'd5;
parameter store_WB8 =6'd6;
parameter store_WB2 =6'd7;
parameter store_WB7 =6'd8;
parameter store_WB3 =6'd9;
parameter store_WB6 =6'd10;
parameter store_WB4 =6'd11;
parameter store_WB5 =6'd12;
parameter st_write_data =6'd13;
parameter store_SOP =6'd14;
parameter store_WB9 =6'd15;
parameter store_Eop =6'd16;
parameter WB0 =6'd17;
parameter WB1 =6'd18;
parameter WB2 =6'd19;
parameter WB3 =6'd20;
parameter WB4 =6'd21;
parameter WB5 =6'd22;
parameter WB6 =6'd23;
parameter WB7 =6'd24;
parameter WB8 =6'd25;
parameter WB9 =6'd26;
parameter W_SOP =6'd27;
parameter W_Eop =6'd28;
parameter ST_end_write_en1 =6'd29;
parameter store_SPI0 =6'd30;
parameter store_SPI1 =6'd31;
parameter ST_wait_eop2 =6'd32;
parameter store_SPI2 =6'd33;
parameter store_SPI3 =6'd34;
parameter st_write_data1 =6'd35;
parameter store_SOP1 =6'd36;
parameter store_Eop1 =6'd37;
parameter SPI0 =6'd38;
parameter SPI1 =6'd39;
parameter SPI2 =6'd40;
parameter SPI3 =6'd41;
parameter W_SOP1 =6'd42;
parameter W_Eop1 =6'd43;
parameter store_comma =6'd44;
parameter store_comma1 =6'd45;
reg  [5:0] current_state ;
reg  [5:0] next_state ;

always @( current_state or rst or start_write_elink or start_write_elink_spi )
  begin : next_state_block_proc
    case (current_state)
      ST_waittoact : 
        begin
          if (start_write_elink==1)
            next_state =  st_write_data;
          else
            if (start_write_elink_spi==1)
              next_state =  st_write_data1;
            else
              next_state =  ST_waittoact;
        end
      ST_reset : 
        begin
          if (rst==1)
            next_state =  ST_waittoact;
          else
            next_state =  ST_reset;
        end
      ST_end_write_en : 
        begin
          next_state =  ST_waittoact;
        end
      store_WB0 : 
        begin
          next_state =  WB1;
        end
      store_WB1 : 
        begin
          next_state =  WB2;
        end
      ST_wait_can_rq : 
        begin
          next_state =  ST_end_write_en;
        end
      store_WB8 : 
        begin
          next_state =  WB9;
        end
      store_WB2 : 
        begin
          next_state =  WB3;
        end
      store_WB7 : 
        begin
          next_state =  WB8;
        end
      store_WB3 : 
        begin
          next_state =  WB4;
        end
      store_WB6 : 
        begin
          next_state =  WB7;
        end
      store_WB4 : 
        begin
          next_state =  WB5;
        end
      store_WB5 : 
        begin
          next_state =  WB6;
        end
      st_write_data : 
        begin
          next_state =  W_SOP;
        end
      store_SOP : 
        begin
          next_state =  WB0;
        end
      store_WB9 : 
        begin
          next_state =  W_Eop;
        end
      store_Eop : 
        begin
          next_state =  store_comma;
        end
      WB0 : 
        begin
          next_state =  store_WB0;
        end
      WB1 : 
        begin
          next_state =  store_WB1;
        end
      WB2 : 
        begin
          next_state =  store_WB2;
        end
      WB3 : 
        begin
          next_state =  store_WB3;
        end
      WB4 : 
        begin
          next_state =  store_WB4;
        end
      WB5 : 
        begin
          next_state =  store_WB5;
        end
      WB6 : 
        begin
          next_state =  store_WB6;
        end
      WB7 : 
        begin
          next_state =  store_WB7;
        end
      WB8 : 
        begin
          next_state =  store_WB8;
        end
      WB9 : 
        begin
          next_state =  store_WB9;
        end
      W_SOP : 
        begin
          next_state =  store_SOP;
        end
      W_Eop : 
        begin
          next_state =  store_Eop;
        end
      ST_end_write_en1 : 
        begin
          next_state =  ST_waittoact;
        end
      store_SPI0 : 
        begin
          next_state =  SPI1;
        end
      store_SPI1 : 
        begin
          next_state =  SPI2;
        end
      ST_wait_eop2 : 
        begin
          next_state =  ST_end_write_en1;
        end
      store_SPI2 : 
        begin
          next_state =  SPI3;
        end
      store_SPI3 : 
        begin
          next_state =  W_Eop1;
        end
      st_write_data1 : 
        begin
          next_state =  W_SOP1;
        end
      store_SOP1 : 
        begin
          next_state =  SPI0;
        end
      store_Eop1 : 
        begin
          next_state =  store_comma1;
        end
      SPI0 : 
        begin
          next_state =  store_SPI0;
        end
      SPI1 : 
        begin
          next_state =  store_SPI1;
        end
      SPI2 : 
        begin
          next_state =  store_SPI2;
        end
      SPI3 : 
        begin
          next_state =  store_SPI3;
        end
      W_SOP1 : 
        begin
          next_state =  store_SOP1;
        end
      W_Eop1 : 
        begin
          next_state =  store_Eop1;
        end
      store_comma : 
        begin
          next_state =  ST_wait_can_rq;
        end
      store_comma1 : 
        begin
          next_state =  ST_wait_eop2;
        end
      default : next_state =  ST_reset;
    endcase
  end

always @( current_state )
  begin : output_block_proc
    addr_write =  5'b0;
    buffer_rec_en =  0;
    buffer_spi_rec_en =  0;
    cs_ewrite =  0;
    end_write_elink =  0;
    end_write_elink_spi =  0;
    entimeout =  1;
    irq_elink_rec =  0;
    spi_rec_mode =  0;
    case (current_state)
      ST_waittoact : 
        begin
          entimeout =  0;
        end
      ST_reset : 
        begin
          spi_rec_mode =  0;
          entimeout =  0;
        end
      ST_end_write_en : 
        begin
          end_write_elink =  1;
        end
      store_WB0 : 
        begin
          addr_write =  5'b00010;
          cs_ewrite =  1;
          buffer_rec_en =  1;
        end
      store_WB1 : 
        begin
          addr_write =  5'b00011;
          cs_ewrite =  1;
          buffer_rec_en =  1;
        end
      ST_wait_can_rq : 
        begin
          addr_write =  5'b00000;
          irq_elink_rec =  1;
        end
      store_WB8 : 
        begin
          addr_write =  5'b01010;
          cs_ewrite =  1;
          buffer_rec_en =  1;
        end
      store_WB2 : 
        begin
          addr_write =  5'b00100;
          cs_ewrite =  1;
          buffer_rec_en =  1;
        end
      store_WB7 : 
        begin
          addr_write =  5'b01001;
          cs_ewrite =  1;
          buffer_rec_en =  1;
        end
      store_WB3 : 
        begin
          addr_write =  5'b00101;
          cs_ewrite =  1;
          buffer_rec_en =  1;
        end
      store_WB6 : 
        begin
          addr_write =  5'b01000;
          cs_ewrite =  1;
          buffer_rec_en =  1;
        end
      store_WB4 : 
        begin
          addr_write =  5'b00110;
          cs_ewrite =  1;
          buffer_rec_en =  1;
        end
      store_WB5 : 
        begin
          addr_write =  5'b00111;
          cs_ewrite =  1;
          buffer_rec_en =  1;
        end
      store_SOP : 
        begin
          addr_write =  5'b00001;
          cs_ewrite =  1;
        end
      store_WB9 : 
        begin
          addr_write =  5'b01011;
          cs_ewrite =  1;
          buffer_rec_en =  1;
        end
      store_Eop : 
        begin
          addr_write =  5'b01100;
          cs_ewrite =  1;
        end
      WB0 : 
        begin
          addr_write =  5'b00010;
        end
      WB1 : 
        begin
          addr_write =  5'b00011;
        end
      WB2 : 
        begin
          addr_write =  5'b00100;
        end
      WB3 : 
        begin
          addr_write =  5'b00101;
        end
      WB4 : 
        begin
          addr_write =  5'b00110;
        end
      WB5 : 
        begin
          addr_write =  5'b00111;
        end
      WB6 : 
        begin
          addr_write =  5'b01000;
        end
      WB7 : 
        begin
          addr_write =  5'b01001;
        end
      WB8 : 
        begin
          addr_write =  5'b01010;
        end
      WB9 : 
        begin
          addr_write =  5'b01011;
        end
      W_SOP : 
        begin
          addr_write =  5'b00001;
        end
      W_Eop : 
        begin
          addr_write =  5'b01100;
        end
      ST_end_write_en1 : 
        begin
          end_write_elink_spi =  1;
          spi_rec_mode =  1;
        end
      store_SPI0 : 
        begin
          addr_write =  5'b00010;
          cs_ewrite =  1;
          buffer_spi_rec_en =  1;
          spi_rec_mode =  1;
        end
      store_SPI1 : 
        begin
          addr_write =  5'b00011;
          cs_ewrite =  1;
          buffer_spi_rec_en =  1;
          spi_rec_mode =  1;
        end
      ST_wait_eop2 : 
        begin
          addr_write =  5'b00000;
          irq_elink_rec =  1;
          spi_rec_mode =  1;
        end
      store_SPI2 : 
        begin
          addr_write =  5'b00100;
          cs_ewrite =  1;
          buffer_spi_rec_en =  1;
          spi_rec_mode =  1;
        end
      store_SPI3 : 
        begin
          addr_write =  5'b00101;
          cs_ewrite =  1;
          buffer_spi_rec_en =  1;
          spi_rec_mode =  1;
        end
      st_write_data1 : 
        begin
          spi_rec_mode =  1;
        end
      store_SOP1 : 
        begin
          addr_write =  5'b00001;
          cs_ewrite =  1;
          spi_rec_mode =  1;
        end
      store_Eop1 : 
        begin
          addr_write =  5'b01100;
          cs_ewrite =  1;
          spi_rec_mode =  1;
        end
      SPI0 : 
        begin
          addr_write =  5'b00010;
          spi_rec_mode =  1;
        end
      SPI1 : 
        begin
          addr_write =  5'b00011;
          spi_rec_mode =  1;
        end
      SPI2 : 
        begin
          addr_write =  5'b00100;
          spi_rec_mode =  1;
        end
      SPI3 : 
        begin
          addr_write =  5'b00101;
          spi_rec_mode =  1;
        end
      W_SOP1 : 
        begin
          addr_write =  5'b00001;
          spi_rec_mode =  1;
        end
      W_Eop1 : 
        begin
          addr_write =  5'b01100;
          spi_rec_mode =  1;
        end
      store_comma : 
        begin
          addr_write =  5'b00000;
          cs_ewrite =  1;
        end
      store_comma1 : 
        begin
          addr_write =  5'b00000;
          cs_ewrite =  1;
          spi_rec_mode =  1;
        end
    endcase
  end

always @( posedge clk )
  begin : clocked_block_proc
    if (!rst)
      begin
        current_state <= ST_reset;
      end
    else
      if (timeoutrst)
        begin
          current_state <= ST_reset;
        end
      else
        if (abort)
          begin
            current_state <= ST_reset;
          end
        else
          begin
            current_state <= next_state;
          end
  end

always @( current_state )
  statedeb =  current_state;
endmodule

