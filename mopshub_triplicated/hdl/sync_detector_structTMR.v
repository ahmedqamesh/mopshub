/****************************************************************************************************
 *                          ! THIS FILE WAS AUTO-GENERATED BY TMRG TOOL !                           *
 *                                   ! DO NOT EDIT IT MANUALLY !                                    *
 *                                                                                                  *
 * file    : ./output/sync_detector_structTMR.v                                                     *
 *                                                                                                  *
 * user    : lucas                                                                                  *
 * host    : DESKTOP-BFDSFP2                                                                        *
 * date    : 03/04/2022 20:08:56                                                                    *
 *                                                                                                  *
 * workdir : /mnt/c/Users/Lucas/Desktop/mopshub_triplication/triplicated/mopshub_top_canakari_ftrim/hdl *
 * cmd     : /mnt/c/Users/Lucas/Desktop/mopshub_triplication/tmrg-master/bin/tmrg -vv -c tmrg.cfg   *
 * tmrg rev:                                                                                        *
 *                                                                                                  *
 * src file: sync_detector_struct.v                                                                 *
 *           Git SHA           : File not in git repository!                                        *
 *           Modification time : 2022-03-28 21:55:54                                                *
 *           File Size         : 4525                                                               *
 *           MD5 hash          : abc9c431ce69fb28e867a8837da5694a                                   *
 *                                                                                                  *
 ****************************************************************************************************/

module sync_detectorTMR(
  input wire [10:0] bitstream_inA ,
  input wire [10:0] bitstream_inB ,
  input wire [10:0] bitstream_inC ,
  input wire  clkA ,
  input wire  clkB ,
  input wire  clkC ,
  input wire  rstA ,
  input wire  rstB ,
  input wire  rstC ,
  output wire [9:0] word10bA ,
  output wire [9:0] word10bB ,
  output wire [9:0] word10bC ,
  output wire  word10b_rdyA ,
  output wire  word10b_rdyB ,
  output wire  word10b_rdyC ,
  input wire [9:0] COMMApA ,
  input wire [9:0] COMMApB ,
  input wire [9:0] COMMApC ,
  input wire [9:0] COMMAnA ,
  input wire [9:0] COMMAnB ,
  input wire [9:0] COMMAnC 
);
wire [9:0] bitstream_align0A;
wire [9:0] bitstream_align0B;
wire [9:0] bitstream_align0C;
wire [1:0] comma_valid_bitsA;
wire [1:0] comma_valid_bitsB;
wire [1:0] comma_valid_bitsC;
wire [9:0] bitstream_align1A;
wire [9:0] bitstream_align1B;
wire [9:0] bitstream_align1C;
reg  [4:0] alignment_regA ;
reg  [4:0] alignment_regB ;
reg  [4:0] alignment_regC ;
wire comma_valid_bits_orA;
wire comma_valid_bits_orB;
wire comma_valid_bits_orC;
reg  align_selectA ;
reg  align_selectB ;
reg  align_selectC ;
reg  [9:0] word10b_regA ;
reg  [9:0] word10b_regB ;
reg  [9:0] word10b_regC ;
initial
  begin
    word10b_regA =  10'b0;
    align_selectA =  0;
    alignment_regA =  5'b0;
  end
initial
  begin
    word10b_regB =  10'b0;
    align_selectB =  0;
    alignment_regB =  5'b0;
  end
initial
  begin
    word10b_regC =  10'b0;
    align_selectC =  0;
    alignment_regC =  5'b0;
  end
assign comma_valid_bits_orA =  (comma_valid_bitsA[1] |comma_valid_bitsA[0] );
assign comma_valid_bits_orB =  (comma_valid_bitsB[1] |comma_valid_bitsB[0] );
assign comma_valid_bits_orC =  (comma_valid_bitsC[1] |comma_valid_bitsC[0] );

always @( posedge clkA )
  if (!rstA)
    begin
      align_selectA <= 2'b0;
      alignment_regA <= 5'b0;
    end
  else
    begin
      if (comma_valid_bits_orA==1)
        begin
          alignment_regA <= 5'b10000;
          case (comma_valid_bitsA)
            2'b01 : align_selectA <= 1'b0;
            2'b10 : align_selectA <= 1'b1;
          endcase
        end
      else
        begin
          alignment_regA <= {alignment_regA[0] ,alignment_regA[4:1] };
          align_selectA <= align_selectA;
        end
    end

always @( posedge clkB )
  if (!rstB)
    begin
      align_selectB <= 2'b0;
      alignment_regB <= 5'b0;
    end
  else
    begin
      if (comma_valid_bits_orB==1)
        begin
          alignment_regB <= 5'b10000;
          case (comma_valid_bitsB)
            2'b01 : align_selectB <= 1'b0;
            2'b10 : align_selectB <= 1'b1;
          endcase
        end
      else
        begin
          alignment_regB <= {alignment_regB[0] ,alignment_regB[4:1] };
          align_selectB <= align_selectB;
        end
    end

always @( posedge clkC )
  if (!rstC)
    begin
      align_selectC <= 2'b0;
      alignment_regC <= 5'b0;
    end
  else
    begin
      if (comma_valid_bits_orC==1)
        begin
          alignment_regC <= 5'b10000;
          case (comma_valid_bitsC)
            2'b01 : align_selectC <= 1'b0;
            2'b10 : align_selectC <= 1'b1;
          endcase
        end
      else
        begin
          alignment_regC <= {alignment_regC[0] ,alignment_regC[4:1] };
          align_selectC <= align_selectC;
        end
    end
assign word10b_rdyA =  alignment_regA[4] ;
assign word10b_rdyB =  alignment_regB[4] ;
assign word10b_rdyC =  alignment_regC[4] ;
assign word10bA =  word10b_regA;
assign word10bB =  word10b_regB;
assign word10bC =  word10b_regC;

always @( posedge clkA )
  if (!rstA)
    word10b_regA <= COMMAnA;
  else
    begin
      if (alignment_regA[0] ==1)
        case (align_selectA)
          1'b0 : word10b_regA <= bitstream_align0A;
          1'b1 : word10b_regA <= bitstream_align1A;
          default : word10b_regA <= COMMAnA;
        endcase
      else
        word10b_regA <= word10b_regA;
    end

always @( posedge clkB )
  if (!rstB)
    word10b_regB <= COMMAnB;
  else
    begin
      if (alignment_regB[0] ==1)
        case (align_selectB)
          1'b0 : word10b_regB <= bitstream_align0B;
          1'b1 : word10b_regB <= bitstream_align1B;
          default : word10b_regB <= COMMAnB;
        endcase
      else
        word10b_regB <= word10b_regB;
    end

always @( posedge clkC )
  if (!rstC)
    word10b_regC <= COMMAnC;
  else
    begin
      if (alignment_regC[0] ==1)
        case (align_selectC)
          1'b0 : word10b_regC <= bitstream_align0C;
          1'b1 : word10b_regC <= bitstream_align1C;
          default : word10b_regC <= COMMAnC;
        endcase
      else
        word10b_regC <= word10b_regC;
    end
assign bitstream_align0A =  bitstream_inA[9:0] ;
assign bitstream_align0B =  bitstream_inB[9:0] ;
assign bitstream_align0C =  bitstream_inC[9:0] ;
assign bitstream_align1A =  bitstream_inA[1+9:1+0] ;
assign bitstream_align1B =  bitstream_inB[1+9:1+0] ;
assign bitstream_align1C =  bitstream_inC[1+9:1+0] ;
assign comma_valid_bitsA[0]  =  (bitstream_align0A==COMMApA||bitstream_align0A==COMMAnA) ? 1 : 0;
assign comma_valid_bitsB[0]  =  (bitstream_align0B==COMMApB||bitstream_align0B==COMMAnB) ? 1 : 0;
assign comma_valid_bitsC[0]  =  (bitstream_align0C==COMMApC||bitstream_align0C==COMMAnC) ? 1 : 0;
assign comma_valid_bitsA[1]  =  (bitstream_align1A==COMMApA||bitstream_align1A==COMMAnA) ? 1 : 0;
assign comma_valid_bitsB[1]  =  (bitstream_align1B==COMMApB||bitstream_align1B==COMMAnB) ? 1 : 0;
assign comma_valid_bitsC[1]  =  (bitstream_align1C==COMMApC||bitstream_align1C==COMMAnC) ? 1 : 0;
endmodule

