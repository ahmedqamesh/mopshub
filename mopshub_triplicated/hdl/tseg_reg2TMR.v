/****************************************************************************************************
 *                          ! THIS FILE WAS AUTO-GENERATED BY TMRG TOOL !                           *
 *                                   ! DO NOT EDIT IT MANUALLY !                                    *
 *                                                                                                  *
 * file    : ./output/tseg_reg2TMR.v                                                                *
 *                                                                                                  *
 * user    : lucas                                                                                  *
 * host    : DESKTOP-BFDSFP2                                                                        *
 * date    : 06/10/2022 13:53:08                                                                    *
 *                                                                                                  *
 * workdir : /mnt/c/Users/Lucas/Documents/GitHub/mopshub_triplicated/triplicated/mopshub_top_board/hdl *
 * cmd     : /mnt/c/Users/Lucas/Desktop/mopshub_triplication/tmrg-master/bin/tmrg -vv -c tmrg.cfg   *
 * tmrg rev:                                                                                        *
 *                                                                                                  *
 * src file: tseg_reg2.v                                                                            *
 *           Git SHA           : c110441b08b692cc54ebd4a3b84a2599430e8f93                           *
 *           Modification time : 2022-08-25 11:05:33                                                *
 *           File Size         : 2173                                                               *
 *           MD5 hash          : 455263157183046a2bec8106b6d3b3b8                                   *
 *                                                                                                  *
 ****************************************************************************************************/

module tseg_reg2TMR(
  input wire  clock ,
  input wire  reset ,
  input wire [1:0] ctrl ,
  input wire [2:0] tseg1 ,
  input wire [4:0] tseg1pcount ,
  input wire [4:0] tseg1p1psjw ,
  output wire [4:0] tseg1mpl 
);
wire [4:0] tseg1pcountC;
wire [4:0] tseg1pcountB;
wire [4:0] tseg1pcountA;
wire [4:0] tseg1p1psjwC;
wire [4:0] tseg1p1psjwB;
wire [4:0] tseg1p1psjwA;
wire [4:0] tseg1mplC;
wire [4:0] tseg1mplB;
wire [4:0] tseg1mplA;
wire [2:0] tseg1C;
wire [2:0] tseg1B;
wire [2:0] tseg1A;
wire resetC;
wire resetB;
wire resetA;
wire [1:0] ctrlC;
wire [1:0] ctrlB;
wire [1:0] ctrlA;
wire clockC;
wire clockB;
wire clockA;
wor tseg1mpl_iTmrError;
wire [4:0] tseg1mpl_i;
reg  [4:0] tseg1mpl_iA ;
reg  [4:0] tseg1mpl_iB ;
reg  [4:0] tseg1mpl_iC ;
assign tseg1mpl =  tseg1mpl_i;

always @( posedge clockA or negedge resetA )
  begin
    if (resetA==1'b0)
      tseg1mpl_iA <= 5'b00000;
    else
      begin
        case (ctrlA)
          2'b01 : tseg1mpl_iA <= {2'b00,tseg1A};
          2'b10 : tseg1mpl_iA <= tseg1pcountA;
          2'b11 : tseg1mpl_iA <= tseg1p1psjwA;
          default : tseg1mpl_iA <= tseg1mplA;
        endcase
      end
  end

always @( posedge clockB or negedge resetB )
  begin
    if (resetB==1'b0)
      tseg1mpl_iB <= 5'b00000;
    else
      begin
        case (ctrlB)
          2'b01 : tseg1mpl_iB <= {2'b00,tseg1B};
          2'b10 : tseg1mpl_iB <= tseg1pcountB;
          2'b11 : tseg1mpl_iB <= tseg1p1psjwB;
          default : tseg1mpl_iB <= tseg1mplB;
        endcase
      end
  end

always @( posedge clockC or negedge resetC )
  begin
    if (resetC==1'b0)
      tseg1mpl_iC <= 5'b00000;
    else
      begin
        case (ctrlC)
          2'b01 : tseg1mpl_iC <= {2'b00,tseg1C};
          2'b10 : tseg1mpl_iC <= tseg1pcountC;
          2'b11 : tseg1mpl_iC <= tseg1p1psjwC;
          default : tseg1mpl_iC <= tseg1mplC;
        endcase
      end
  end

majorityVoter #(.WIDTH(5)) tseg1mpl_iVoter (
    .inA(tseg1mpl_iA),
    .inB(tseg1mpl_iB),
    .inC(tseg1mpl_iC),
    .out(tseg1mpl_i),
    .tmrErr(tseg1mpl_iTmrError)
    );

fanout clockFanout (
    .in(clock),
    .outA(clockA),
    .outB(clockB),
    .outC(clockC)
    );

fanout #(.WIDTH(2)) ctrlFanout (
    .in(ctrl),
    .outA(ctrlA),
    .outB(ctrlB),
    .outC(ctrlC)
    );

fanout resetFanout (
    .in(reset),
    .outA(resetA),
    .outB(resetB),
    .outC(resetC)
    );

fanout #(.WIDTH(3)) tseg1Fanout (
    .in(tseg1),
    .outA(tseg1A),
    .outB(tseg1B),
    .outC(tseg1C)
    );

fanout #(.WIDTH(5)) tseg1mplFanout (
    .in(tseg1mpl),
    .outA(tseg1mplA),
    .outB(tseg1mplB),
    .outC(tseg1mplC)
    );

fanout #(.WIDTH(5)) tseg1p1psjwFanout (
    .in(tseg1p1psjw),
    .outA(tseg1p1psjwA),
    .outB(tseg1p1psjwB),
    .outC(tseg1p1psjwC)
    );

fanout #(.WIDTH(5)) tseg1pcountFanout (
    .in(tseg1pcount),
    .outA(tseg1pcountA),
    .outB(tseg1pcountB),
    .outC(tseg1pcountC)
    );
endmodule

