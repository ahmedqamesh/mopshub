//
// Module mopshub_triplicated.mac2TMR.struct
//
// Created:
//          by - dcs.dcs (localhost)
//          at - 09:18:09 05/10/22
//
// Generated by Mentor Graphics' HDL Designer(TM) 2019.4 (Build 4)
//


module mac2TMR( 
   // Port Declarations
   input   wire            clockA, 
   input   wire            clockB, 
   input   wire            clockC, 
   input   wire            Prescale_ENA, 
   input   wire            Prescale_ENB, 
   input   wire            Prescale_ENC, 
   input   wire            resetA, 
   input   wire            resetB, 
   input   wire            resetC, 
   input   wire            sendpointA, 
   input   wire            sendpointB, 
   input   wire            sendpointC, 
   input   wire            smplpointA, 
   input   wire            smplpointB, 
   input   wire            smplpointC, 
   input   wire            inbitA, 
   input   wire            inbitB, 
   input   wire            inbitC, 
   input   wire            transA, 
   input   wire            transB, 
   input   wire            transC, 
   input   wire            erroractivA, 
   input   wire            erroractivB, 
   input   wire            erroractivC, 
   input   wire            errorpassivA, 
   input   wire            errorpassivB, 
   input   wire            errorpassivC, 
   input   wire            busofA, 
   input   wire            busofB, 
   input   wire            busofC, 
   input   wire            loadA, 
   input   wire            loadB, 
   input   wire            loadC, 
   input   wire            actvtsftllcA, 
   input   wire            actvtsftllcB, 
   input   wire            actvtsftllcC, 
   input   wire            actvtcapA, 
   input   wire            actvtcapB, 
   input   wire            actvtcapC, 
   input   wire            resettraA, 
   input   wire            resettraB, 
   input   wire            resettraC, 
   input   wire    [28:0]  identifierrA, 
   input   wire    [28:0]  identifierrB, 
   input   wire    [28:0]  identifierrC, 
   input   wire    [7:0]   data1rA, 
   input   wire    [7:0]   data1rB, 
   input   wire    [7:0]   data1rC, 
   input   wire    [7:0]   data2rA, 
   input   wire    [7:0]   data2rB, 
   input   wire    [7:0]   data2rC, 
   input   wire    [7:0]   data3rA, 
   input   wire    [7:0]   data3rB, 
   input   wire    [7:0]   data3rC, 
   input   wire    [7:0]   data4rA, 
   input   wire    [7:0]   data4rB, 
   input   wire    [7:0]   data4rC, 
   input   wire    [7:0]   data5rA, 
   input   wire    [7:0]   data5rB, 
   input   wire    [7:0]   data5rC, 
   input   wire    [7:0]   data6rA, 
   input   wire    [7:0]   data6rB, 
   input   wire    [7:0]   data6rC, 
   input   wire    [7:0]   data7rA, 
   input   wire    [7:0]   data7rB, 
   input   wire    [7:0]   data7rC, 
   input   wire    [7:0]   data8rA, 
   input   wire    [7:0]   data8rB, 
   input   wire    [7:0]   data8rC, 
   input   wire            extendedrA, 
   input   wire            extendedrB, 
   input   wire            extendedrC, 
   input   wire            remoterA, 
   input   wire            remoterB, 
   input   wire            remoterC, 
   input   wire    [3:0]   datalenrA, 
   input   wire    [3:0]   datalenrB, 
   input   wire    [3:0]   datalenrC, 
   output  wire    [28:0]  identifierwA, 
   output  wire    [28:0]  identifierwB, 
   output  wire    [28:0]  identifierwC, 
   output  wire    [7:0]   data1wA, 
   output  wire    [7:0]   data1wB, 
   output  wire    [7:0]   data1wC, 
   output  wire    [7:0]   data2wA, 
   output  wire    [7:0]   data2wB, 
   output  wire    [7:0]   data2wC, 
   output  wire    [7:0]   data3wA, 
   output  wire    [7:0]   data3wB, 
   output  wire    [7:0]   data3wC, 
   output  wire    [7:0]   data4wA, 
   output  wire    [7:0]   data4wB, 
   output  wire    [7:0]   data4wC, 
   output  wire    [7:0]   data5wA, 
   output  wire    [7:0]   data5wB, 
   output  wire    [7:0]   data5wC, 
   output  wire    [7:0]   data6wA, 
   output  wire    [7:0]   data6wB, 
   output  wire    [7:0]   data6wC, 
   output  wire    [7:0]   data7wA, 
   output  wire    [7:0]   data7wB, 
   output  wire    [7:0]   data7wC, 
   output  wire    [7:0]   data8wA, 
   output  wire    [7:0]   data8wB, 
   output  wire    [7:0]   data8wC, 
   output  wire            remotewA, 
   output  wire            remotewB, 
   output  wire            remotewC, 
   output  wire    [3:0]   datalenwA, 
   output  wire    [3:0]   datalenwB, 
   output  wire    [3:0]   datalenwC, 
   output  wire            inconerecA, 
   output  wire            inconerecB, 
   output  wire            inconerecC, 
   output  wire            incegtrecA, 
   output  wire            incegtrecB, 
   output  wire            incegtrecC, 
   output  wire            incegttraA, 
   output  wire            incegttraB, 
   output  wire            incegttraC, 
   output  wire            decrecA, 
   output  wire            decrecB, 
   output  wire            decrecC, 
   output  wire            dectraA, 
   output  wire            dectraB, 
   output  wire            dectraC, 
   output  wire            elevrecbA, 
   output  wire            elevrecbB, 
   output  wire            elevrecbC, 
   output  wire            hardsyncA, 
   output  wire            hardsyncB, 
   output  wire            hardsyncC, 
   output  wire            outbitA, 
   output  wire            outbitB, 
   output  wire            outbitC, 
   output  wire    [7:0]   statedebA, 
   output  wire    [7:0]   statedebB, 
   output  wire    [7:0]   statedebC
);


// Internal Declarations


// Local declarations

// Internal signal declarations
wire          stufftA;
wire          stufftB;
wire          stufftC;
wire          stuffrA;
wire          stuffrB;
wire          stuffrC;
wire          biterrorA;
wire          biterrorB;
wire          biterrorC;
wire          stferrorA;
wire          stferrorB;
wire          stferrorC;
wire  [6:0]   countA;
wire  [6:0]   countB;
wire  [6:0]   countC;
wire  [3:0]   rmlbA;
wire  [3:0]   rmlbB;
wire  [3:0]   rmlbC;
wire  [2:0]   setrmlenoA;
wire  [2:0]   setrmlenoB;
wire  [2:0]   setrmlenoC;
wire          actvrmlnA;
wire          actvrmlnB;
wire          actvrmlnC;
wire          actvtcrcA;
wire          actvtcrcB;
wire          actvtcrcC;
wire          actvrcrcA;
wire          actvrcrcB;
wire          actvrcrcC;
wire          actvtstfA;
wire          actvtstfB;
wire          actvtstfC;
wire          actvrstfA;
wire          actvrstfB;
wire          actvrstfC;
wire          actvtsftA;
wire          actvtsftB;
wire          actvtsftC;
wire          actvrsftA;
wire          actvrsftB;
wire          actvrsftC;
wire          actvtdctA;
wire          actvtdctB;
wire          actvtdctC;
wire          actvrdctA;
wire          actvrdctB;
wire          actvrdctC;
wire          actvtbedA;
wire          actvtbedB;
wire          actvtbedC;
wire          setbdomA;
wire          setbdomB;
wire          setbdomC;
wire          setbrecA;
wire          setbrecB;
wire          setbrecC;
wire          lcrcA;
wire          lcrcB;
wire          lcrcC;
wire          lmsgA;
wire          lmsgB;
wire          lmsgC;
wire          tshiftA;
wire          tshiftB;
wire          tshiftC;
wire          inccountA;
wire          inccountB;
wire          inccountC;
wire          resrmlenA;
wire          resrmlenB;
wire          resrmlenC;
wire          rescountA;
wire          rescountB;
wire          rescountC;
wire          resetdstA;
wire          resetdstB;
wire          resetdstC;
wire          resetstfA;
wire          resetstfB;
wire          resetstfC;
wire          bitoutA;
wire          bitoutB;
wire          bitoutC;
wire  [67:0]  mesout_aA;
wire  [67:0]  mesout_aB;
wire  [67:0]  mesout_aC;
wire  [17:0]  mesout_bA;
wire  [17:0]  mesout_bB;
wire  [17:0]  mesout_bC;
wire  [10:0]  mesout_cA;
wire  [10:0]  mesout_cB;
wire  [10:0]  mesout_cC;
wire  [102:0] mesinA;
wire  [102:0] mesinB;
wire  [102:0] mesinC;
wire          bittosendA;
wire          bittosendB;
wire          bittosendC;
wire          receivedbitA;
wire          receivedbitB;
wire          receivedbitC;
wire          actvtsftsigA;
wire          actvtsftsigB;
wire          actvtsftsigC;
wire          resetsigA;
wire          resetsigB;
wire          resetsigC;
wire          resetstfsigA;
wire          resetstfsigB;
wire          resetstfsigC;
wire          rescountsigA;
wire          rescountsigB;
wire          rescountsigC;
wire          resrmlensigA;
wire          resrmlensigB;
wire          resrmlensigC;
wire          resetdstsigA;
wire          resetdstsigB;
wire          resetdstsigC;
wire          loaderA;
wire          loaderB;
wire          loaderC;
wire  [14:0]  crc_pre_load_sig_extA;
wire  [14:0]  crc_pre_load_sig_extB;
wire  [14:0]  crc_pre_load_sig_extC;
wire  [14:0]  crc_pre_load_sig_remA;
wire  [14:0]  crc_pre_load_sig_remB;
wire  [14:0]  crc_pre_load_sig_remC;
wire          crc_out_bitA;
wire          crc_out_bitB;
wire          crc_out_bitC;
wire          crc_okA;
wire          crc_okB;
wire          crc_okC;
wire  [1:0]   ackerror_set_iA;
wire  [1:0]   ackerror_set_iB;
wire  [1:0]   ackerror_set_iC;
wire  [1:0]   onarbit_set_iA;
wire  [1:0]   onarbit_set_iB;
wire  [1:0]   onarbit_set_iC;
wire  [1:0]   transmitter_set_iA;
wire  [1:0]   transmitter_set_iB;
wire  [1:0]   transmitter_set_iC;
wire  [1:0]   receiver_set_iA;
wire  [1:0]   receiver_set_iB;
wire  [1:0]   receiver_set_iC;
wire  [1:0]   error_set_iA;
wire  [1:0]   error_set_iB;
wire  [1:0]   error_set_iC;
wire  [1:0]   first_set_iA;
wire  [1:0]   first_set_iB;
wire  [1:0]   first_set_iC;
wire  [1:0]   puffer_set_iA;
wire  [1:0]   puffer_set_iB;
wire  [1:0]   puffer_set_iC;
wire  [1:0]   rext_set_iA;
wire  [1:0]   rext_set_iB;
wire  [1:0]   rext_set_iC;
wire  [1:0]   rrtr_set_iA;
wire  [1:0]   rrtr_set_iB;
wire  [1:0]   rrtr_set_iC;
wire          ackerror_iA;
wire          ackerror_iB;
wire          ackerror_iC;
wire          onarbit_iA;
wire          onarbit_iB;
wire          onarbit_iC;
wire          transmitter_iA;
wire          transmitter_iB;
wire          transmitter_iC;
wire          receiver_iA;
wire          receiver_iB;
wire          receiver_iC;
wire          error_iA;
wire          error_iB;
wire          error_iC;
wire          first_iA;
wire          first_iB;
wire          first_iC;
wire          puffer_iA;
wire          puffer_iB;
wire          puffer_iC;
wire          rextA;
wire          rextB;
wire          rextC;
wire          rrtrA;
wire          rrtrB;
wire          rrtrC;
wire          rmzeroA;
wire          rmzeroB;
wire          rmzeroC;
wire          lt3_iA;
wire          gt3_iA;
wire          eq3_iA;
wire          lt3_iB;
wire          gt3_iB;
wire          eq3_iB;
wire          lt3_iC;
wire          gt3_iC;
wire          eq3_iC;
wire          lt11_iA;
wire          eq11_iA;
wire          lt11_iB;
wire          eq11_iB;
wire          lt11_iC;
wire          eq11_iC;
wire          activatefastA;
wire          activatefastB;
wire          activatefastC;
wire          directshiftA;
wire          directshiftB;
wire          directshiftC;
wire          setzeroA;
wire          setzeroB;
wire          setzeroC;
wire          crc_shft_outA;
wire          crc_shft_outB;
wire          crc_shft_outC;
wire          crc_tosendA;
wire          crc_tosendB;
wire          crc_tosendC;
wire          stuff_inbitA;
wire          stuff_inbitB;
wire          stuff_inbitC;
wire  [3:0]   tmlenA;
wire  [3:0]   tmlenB;
wire  [3:0]   tmlenC;
wire          startrcrc_iA;
wire          startrcrc_iB;
wire          startrcrc_iC;
wire          starttcrc_iA;
wire          starttcrc_iB;
wire          starttcrc_iC;
wire          zerointcrc_iA;
wire          zerointcrc_iB;
wire          zerointcrc_iC;
wire          en_zerointcrcA;
wire          en_zerointcrcB;
wire          en_zerointcrcC;
wire          sync_reset_iA;
wire          sync_reset_iB;
wire          sync_reset_iC;


// Instances 
biterrordetect2TMR errordetect( 
   .clockA    (clockA), 
   .clockB    (clockB), 
   .clockC    (clockC), 
   .bitinA    (inbitA), 
   .bitinB    (inbitB), 
   .bitinC    (inbitC), 
   .bitoutA   (bitoutA), 
   .bitoutB   (bitoutB), 
   .bitoutC   (bitoutC), 
   .activA    (actvtbedA), 
   .activB    (actvtbedB), 
   .activC    (actvtbedC), 
   .resetA    (sync_reset_iA), 
   .resetB    (sync_reset_iB), 
   .resetC    (sync_reset_iC), 
   .biterrorA (biterrorA), 
   .biterrorB (biterrorB), 
   .biterrorC (biterrorC)
); 

counter2TMR counting( 
   .clockA       (clockA), 
   .clockB       (clockB), 
   .clockC       (clockC), 
   .Prescale_ENA (Prescale_ENA), 
   .Prescale_ENB (Prescale_ENB), 
   .Prescale_ENC (Prescale_ENC), 
   .incA         (inccountA), 
   .incB         (inccountB), 
   .incC         (inccountC), 
   .resetA       (rescountsigA), 
   .resetB       (rescountsigB), 
   .resetC       (rescountsigC), 
   .lt3A         (lt3_iA), 
   .lt3B         (lt3_iB), 
   .lt3C         (lt3_iC), 
   .gt3A         (gt3_iA), 
   .gt3B         (gt3_iB), 
   .gt3C         (gt3_iC), 
   .eq3A         (eq3_iA), 
   .eq3B         (eq3_iB), 
   .eq3C         (eq3_iC), 
   .lt11A        (lt11_iA), 
   .lt11B        (lt11_iB), 
   .lt11C        (lt11_iC), 
   .eq11A        (eq11_iA), 
   .eq11B        (eq11_iB), 
   .eq11C        (eq11_iC), 
   .countoA      (countA), 
   .countoB      (countB), 
   .countoC      (countC)
); 

decapsulation2TMR decaps( 
   .message_bA  (mesout_bA), 
   .message_bB  (mesout_bB), 
   .message_bC  (mesout_bC), 
   .message_cA  (mesout_cA), 
   .message_cB  (mesout_cB), 
   .message_cC  (mesout_cC), 
   .extendedA   (rextA), 
   .extendedB   (rextB), 
   .extendedC   (rextC), 
   .identifierA (identifierwA), 
   .identifierB (identifierwB), 
   .identifierC (identifierwC)
); 

destuffing2TMR destuff( 
   .clockA  (clockA), 
   .clockB  (clockB), 
   .clockC  (clockC), 
   .bitinA  (inbitA), 
   .bitinB  (inbitB), 
   .bitinC  (inbitC), 
   .activA  (actvrstfA), 
   .activB  (actvrstfB), 
   .activC  (actvrstfC), 
   .resetA  (resetdstsigA), 
   .resetB  (resetdstsigB), 
   .resetC  (resetdstsigC), 
   .directA (actvrdctA), 
   .directB (actvrdctB), 
   .directC (actvrdctC), 
   .stferA  (stferrorA), 
   .stferB  (stferrorB), 
   .stferC  (stferrorC), 
   .stuffA  (stuffrA), 
   .stuffB  (stuffrB), 
   .stuffC  (stuffrC), 
   .bitoutA (receivedbitA), 
   .bitoutB (receivedbitB), 
   .bitoutC (receivedbitC)
); 

encapsulation2TMR encaps( 
   .clockA      (clockA), 
   .clockB      (clockB), 
   .clockC      (clockC), 
   .identifierA (identifierrA), 
   .identifierB (identifierrB), 
   .identifierC (identifierrC), 
   .extendedA   (extendedrA), 
   .extendedB   (extendedrB), 
   .extendedC   (extendedrC), 
   .remoteA     (remoterA), 
   .remoteB     (remoterB), 
   .remoteC     (remoterC), 
   .activA      (actvtcapA), 
   .activB      (actvtcapB), 
   .activC      (actvtcapC), 
   .resetA      (resetsigA), 
   .resetB      (resetsigB), 
   .resetC      (resetsigC), 
   .datalenA    (datalenrA), 
   .datalenB    (datalenrB), 
   .datalenC    (datalenrC), 
   .tmlenA      (tmlenA), 
   .tmlenB      (tmlenB), 
   .tmlenC      (tmlenC), 
   .messageA    (mesinA[102:64]), 
   .messageB    (mesinB[102:64]), 
   .messageC    (mesinC[102:64])
); 

fastshift2TMR frshift( 
   .resetA       (resrmlensigA), 
   .resetB       (resrmlensigB), 
   .resetC       (resrmlensigC), 
   .clockA       (clockA), 
   .clockB       (clockB), 
   .clockC       (clockC), 
   .activateA    (activatefastA), 
   .activateB    (activatefastB), 
   .activateC    (activatefastC), 
   .rmlbA        (rmlbA), 
   .rmlbB        (rmlbB), 
   .rmlbC        (rmlbC), 
   .setzeroA     (setzeroA), 
   .setzeroB     (setzeroB), 
   .setzeroC     (setzeroC), 
   .directshiftA (directshiftA), 
   .directshiftB (directshiftB), 
   .directshiftC (directshiftC)
); 

fsm_register2TMR fsm_regs( 
   .clockA           (clockA), 
   .clockB           (clockB), 
   .clockC           (clockC), 
   .resetA           (sync_reset_iA), 
   .resetB           (sync_reset_iB), 
   .resetC           (sync_reset_iC), 
   .ackerror_setA    (ackerror_set_iA), 
   .ackerror_setB    (ackerror_set_iB), 
   .ackerror_setC    (ackerror_set_iC), 
   .onarbit_setA     (onarbit_set_iA), 
   .onarbit_setB     (onarbit_set_iB), 
   .onarbit_setC     (onarbit_set_iC), 
   .transmitter_setA (transmitter_set_iA), 
   .transmitter_setB (transmitter_set_iB), 
   .transmitter_setC (transmitter_set_iC), 
   .receiver_setA    (receiver_set_iA), 
   .receiver_setB    (receiver_set_iB), 
   .receiver_setC    (receiver_set_iC), 
   .error_setA       (error_set_iA), 
   .error_setB       (error_set_iB), 
   .error_setC       (error_set_iC), 
   .first_setA       (first_set_iA), 
   .first_setB       (first_set_iB), 
   .first_setC       (first_set_iC), 
   .puffer_setA      (puffer_set_iA), 
   .puffer_setB      (puffer_set_iB), 
   .puffer_setC      (puffer_set_iC), 
   .rext_setA        (rext_set_iA), 
   .rext_setB        (rext_set_iB), 
   .rext_setC        (rext_set_iC), 
   .rrtr_setA        (rrtr_set_iA), 
   .rrtr_setB        (rrtr_set_iB), 
   .rrtr_setC        (rrtr_set_iC), 
   .ackerrorA        (ackerror_iA), 
   .ackerrorB        (ackerror_iB), 
   .ackerrorC        (ackerror_iC), 
   .onarbitA         (onarbit_iA), 
   .onarbitB         (onarbit_iB), 
   .onarbitC         (onarbit_iC), 
   .transmitterA     (transmitter_iA), 
   .transmitterB     (transmitter_iB), 
   .transmitterC     (transmitter_iC), 
   .receiverA        (receiver_iA), 
   .receiverB        (receiver_iB), 
   .receiverC        (receiver_iC), 
   .errorA           (error_iA), 
   .errorB           (error_iB), 
   .errorC           (error_iC), 
   .firstA           (first_iA), 
   .firstB           (first_iB), 
   .firstC           (first_iC), 
   .pufferA          (puffer_iA), 
   .pufferB          (puffer_iB), 
   .pufferC          (puffer_iC), 
   .rextA            (rextA), 
   .rextB            (rextB), 
   .rextC            (rextC), 
   .rrtrA            (rrtrA), 
   .rrtrB            (rrtrB), 
   .rrtrC            (rrtrC)
); 

macfsm2TMR fsm( 
   .clockA           (clockA), 
   .clockB           (clockB), 
   .clockC           (clockC), 
   .Prescale_ENA     (Prescale_ENA), 
   .Prescale_ENB     (Prescale_ENB), 
   .Prescale_ENC     (Prescale_ENC), 
   .resetA           (sync_reset_iA), 
   .resetB           (sync_reset_iB), 
   .resetC           (sync_reset_iC), 
   .sendpointA       (sendpointA), 
   .sendpointB       (sendpointB), 
   .sendpointC       (sendpointC), 
   .smplpointA       (smplpointA), 
   .smplpointB       (smplpointB), 
   .smplpointC       (smplpointC), 
   .crc_okA          (crc_okA), 
   .crc_okB          (crc_okB), 
   .crc_okC          (crc_okC), 
   .inbitA           (receivedbitA), 
   .inbitB           (receivedbitB), 
   .inbitC           (receivedbitC), 
   .stufftA          (stufftA), 
   .stufftB          (stufftB), 
   .stufftC          (stufftC), 
   .stuffrA          (stuffrA), 
   .stuffrB          (stuffrB), 
   .stuffrC          (stuffrC), 
   .biterrorA        (biterrorA), 
   .biterrorB        (biterrorB), 
   .biterrorC        (biterrorC), 
   .stferrorA        (stferrorA), 
   .stferrorB        (stferrorB), 
   .stferrorC        (stferrorC), 
   .transA           (transA), 
   .transB           (transB), 
   .transC           (transC), 
   .textA            (extendedrA), 
   .textB            (extendedrB), 
   .textC            (extendedrC), 
   .erroractivA      (erroractivA), 
   .erroractivB      (erroractivB), 
   .erroractivC      (erroractivC), 
   .errorpassivA     (errorpassivA), 
   .errorpassivB     (errorpassivB), 
   .errorpassivC     (errorpassivC), 
   .busofA           (busofA), 
   .busofB           (busofB), 
   .busofC           (busofC), 
   .ackerrorA        (ackerror_iA), 
   .ackerrorB        (ackerror_iB), 
   .ackerrorC        (ackerror_iC), 
   .onarbitA         (onarbit_iA), 
   .onarbitB         (onarbit_iB), 
   .onarbitC         (onarbit_iC), 
   .transmitterA     (transmitter_iA), 
   .transmitterB     (transmitter_iB), 
   .transmitterC     (transmitter_iC), 
   .receiverA        (receiver_iA), 
   .receiverB        (receiver_iB), 
   .receiverC        (receiver_iC), 
   .errorA           (error_iA), 
   .errorB           (error_iB), 
   .errorC           (error_iC), 
   .firstA           (first_iA), 
   .firstB           (first_iB), 
   .firstC           (first_iC), 
   .pufferA          (puffer_iA), 
   .pufferB          (puffer_iB), 
   .pufferC          (puffer_iC), 
   .rextA            (rextA), 
   .rextB            (rextB), 
   .rextC            (rextC), 
   .rrtrA            (rrtrA), 
   .rrtrB            (rrtrB), 
   .rrtrC            (rrtrC), 
   .lt3A             (lt3_iA), 
   .lt3B             (lt3_iB), 
   .lt3C             (lt3_iC), 
   .gt3A             (gt3_iA), 
   .gt3B             (gt3_iB), 
   .gt3C             (gt3_iC), 
   .eq3A             (eq3_iA), 
   .eq3B             (eq3_iB), 
   .eq3C             (eq3_iC), 
   .lt11A            (lt11_iA), 
   .lt11B            (lt11_iB), 
   .lt11C            (lt11_iC), 
   .eq11A            (eq11_iA), 
   .eq11B            (eq11_iB), 
   .eq11C            (eq11_iC), 
   .startrcrcA       (startrcrc_iA), 
   .startrcrcB       (startrcrc_iB), 
   .startrcrcC       (startrcrc_iC), 
   .rmzeroA          (rmzeroA), 
   .rmzeroB          (rmzeroB), 
   .rmzeroC          (rmzeroC), 
   .starttcrcA       (starttcrc_iA), 
   .starttcrcB       (starttcrc_iB), 
   .starttcrcC       (starttcrc_iC), 
   .ackerror_setA    (ackerror_set_iA), 
   .ackerror_setB    (ackerror_set_iB), 
   .ackerror_setC    (ackerror_set_iC), 
   .onarbit_setA     (onarbit_set_iA), 
   .onarbit_setB     (onarbit_set_iB), 
   .onarbit_setC     (onarbit_set_iC), 
   .transmitter_setA (transmitter_set_iA), 
   .transmitter_setB (transmitter_set_iB), 
   .transmitter_setC (transmitter_set_iC), 
   .receiver_setA    (receiver_set_iA), 
   .receiver_setB    (receiver_set_iB), 
   .receiver_setC    (receiver_set_iC), 
   .error_setA       (error_set_iA), 
   .error_setB       (error_set_iB), 
   .error_setC       (error_set_iC), 
   .first_setA       (first_set_iA), 
   .first_setB       (first_set_iB), 
   .first_setC       (first_set_iC), 
   .puffer_setA      (puffer_set_iA), 
   .puffer_setB      (puffer_set_iB), 
   .puffer_setC      (puffer_set_iC), 
   .rext_setA        (rext_set_iA), 
   .rext_setB        (rext_set_iB), 
   .rext_setC        (rext_set_iC), 
   .rrtr_setA        (rrtr_set_iA), 
   .rrtr_setB        (rrtr_set_iB), 
   .rrtr_setC        (rrtr_set_iC), 
   .countA           (countA), 
   .countB           (countB), 
   .countC           (countC), 
   .setrmlenoA       (setrmlenoA), 
   .setrmlenoB       (setrmlenoB), 
   .setrmlenoC       (setrmlenoC), 
   .actvrmlnA        (actvrmlnA), 
   .actvrmlnB        (actvrmlnB), 
   .actvrmlnC        (actvrmlnC), 
   .actvtcrcA        (actvtcrcA), 
   .actvtcrcB        (actvtcrcB), 
   .actvtcrcC        (actvtcrcC), 
   .actvrcrcA        (actvrcrcA), 
   .actvrcrcB        (actvrcrcB), 
   .actvrcrcC        (actvrcrcC), 
   .actvtstfA        (actvtstfA), 
   .actvtstfB        (actvtstfB), 
   .actvtstfC        (actvtstfC), 
   .actvrstfA        (actvrstfA), 
   .actvrstfB        (actvrstfB), 
   .actvrstfC        (actvrstfC), 
   .actvtsftA        (actvtsftA), 
   .actvtsftB        (actvtsftB), 
   .actvtsftC        (actvtsftC), 
   .actvrsftA        (actvrsftA), 
   .actvrsftB        (actvrsftB), 
   .actvrsftC        (actvrsftC), 
   .actvtdctA        (actvtdctA), 
   .actvtdctB        (actvtdctB), 
   .actvtdctC        (actvtdctC), 
   .actvrdctA        (actvrdctA), 
   .actvrdctB        (actvrdctB), 
   .actvrdctC        (actvrdctC), 
   .actvtbedA        (actvtbedA), 
   .actvtbedB        (actvtbedB), 
   .actvtbedC        (actvtbedC), 
   .setbdomA         (setbdomA), 
   .setbdomB         (setbdomB), 
   .setbdomC         (setbdomC), 
   .setbrecA         (setbrecA), 
   .setbrecB         (setbrecB), 
   .setbrecC         (setbrecC), 
   .lcrcA            (lcrcA), 
   .lcrcB            (lcrcB), 
   .lcrcC            (lcrcC), 
   .lmsgA            (lmsgA), 
   .lmsgB            (lmsgB), 
   .lmsgC            (lmsgC), 
   .tshiftA          (tshiftA), 
   .tshiftB          (tshiftB), 
   .tshiftC          (tshiftC), 
   .inconerecA       (inconerecA), 
   .inconerecB       (inconerecB), 
   .inconerecC       (inconerecC), 
   .incegtrecA       (incegtrecA), 
   .incegtrecB       (incegtrecB), 
   .incegtrecC       (incegtrecC), 
   .incegttraA       (incegttraA), 
   .incegttraB       (incegttraB), 
   .incegttraC       (incegttraC), 
   .decrecA          (decrecA), 
   .decrecB          (decrecB), 
   .decrecC          (decrecC), 
   .dectraA          (dectraA), 
   .dectraB          (dectraB), 
   .dectraC          (dectraC), 
   .elevrecbA        (elevrecbA), 
   .elevrecbB        (elevrecbB), 
   .elevrecbC        (elevrecbC), 
   .hardsyncA        (hardsyncA), 
   .hardsyncB        (hardsyncB), 
   .hardsyncC        (hardsyncC), 
   .inccountA        (inccountA), 
   .inccountB        (inccountB), 
   .inccountC        (inccountC), 
   .resrmlenA        (resrmlenA), 
   .resrmlenB        (resrmlenB), 
   .resrmlenC        (resrmlenC), 
   .rescountA        (rescountA), 
   .rescountB        (rescountB), 
   .rescountC        (rescountC), 
   .resetdstA        (resetdstA), 
   .resetdstB        (resetdstB), 
   .resetdstC        (resetdstC), 
   .resetstfA        (resetstfA), 
   .resetstfB        (resetstfB), 
   .resetstfC        (resetstfC), 
   .activatefastA    (activatefastA), 
   .activatefastB    (activatefastB), 
   .activatefastC    (activatefastC), 
   .crc_shft_outA    (crc_shft_outA), 
   .crc_shft_outB    (crc_shft_outB), 
   .crc_shft_outC    (crc_shft_outC), 
   .en_zerointcrcA   (en_zerointcrcA), 
   .en_zerointcrcB   (en_zerointcrcB), 
   .en_zerointcrcC   (en_zerointcrcC), 
   .statedebA        (statedebA), 
   .statedebB        (statedebB), 
   .statedebC        (statedebC)
); 

meslencompare2TMR comparator( 
   .countA         (countA), 
   .countB         (countB), 
   .countC         (countC), 
   .rmlenA         (rmlbA), 
   .rmlenB         (rmlbB), 
   .rmlenC         (rmlbC), 
   .tmlenA         (tmlenA), 
   .tmlenB         (tmlenB), 
   .tmlenC         (tmlenC), 
   .ext_rA         (rextA), 
   .ext_rB         (rextB), 
   .ext_rC         (rextC), 
   .ext_tA         (extendedrA), 
   .ext_tB         (extendedrB), 
   .ext_tC         (extendedrC), 
   .en_zerointcrcA (en_zerointcrcA), 
   .en_zerointcrcB (en_zerointcrcB), 
   .en_zerointcrcC (en_zerointcrcC), 
   .startrcrcA     (startrcrc_iA), 
   .startrcrcB     (startrcrc_iB), 
   .startrcrcC     (startrcrc_iC), 
   .rmzeroA        (rmzeroA), 
   .rmzeroB        (rmzeroB), 
   .rmzeroC        (rmzeroC), 
   .starttcrcA     (starttcrc_iA), 
   .starttcrcB     (starttcrc_iB), 
   .starttcrcC     (starttcrc_iC), 
   .zerointcrcA    (zerointcrc_iA), 
   .zerointcrcB    (zerointcrc_iB), 
   .zerointcrcC    (zerointcrc_iC)
); 

rcrc2TMR receivecrc( 
   .clockA  (clockA), 
   .clockB  (clockB), 
   .clockC  (clockC), 
   .bitinA  (receivedbitA), 
   .bitinB  (receivedbitB), 
   .bitinC  (receivedbitC), 
   .activA  (actvrcrcA), 
   .activB  (actvrcrcB), 
   .activC  (actvrcrcC), 
   .resetA  (resrmlensigA), 
   .resetB  (resrmlensigB), 
   .resetC  (resrmlensigC), 
   .crc_okA (crc_okA), 
   .crc_okB (crc_okB), 
   .crc_okC (crc_okC)
); 

recmeslen2TMR recmlen( 
   .clockA    (clockA), 
   .clockB    (clockB), 
   .clockC    (clockC), 
   .activA    (actvrmlnA), 
   .activB    (actvrmlnB), 
   .activC    (actvrmlnC), 
   .resetA    (resrmlensigA), 
   .resetB    (resrmlensigB), 
   .resetC    (resrmlensigC), 
   .setrmlenA (setrmlenoA), 
   .setrmlenB (setrmlenoB), 
   .setrmlenC (setrmlenoC), 
   .rmlbA     (rmlbA), 
   .rmlbB     (rmlbB), 
   .rmlbC     (rmlbC)
); 

reset_mac2TMR reset_mac_i( 
   .resetA      (resetA), 
   .resetB      (resetB), 
   .resetC      (resetC), 
   .clockA      (clockA), 
   .clockB      (clockB), 
   .clockC      (clockC), 
   .prescalerA  (Prescale_ENA), 
   .prescalerB  (Prescale_ENB), 
   .prescalerC  (Prescale_ENC), 
   .sync_resetA (sync_reset_iA), 
   .sync_resetB (sync_reset_iB), 
   .sync_resetC (sync_reset_iC)
); 

rshiftreg2TMR recshift( 
   .clockA       (clockA), 
   .clockB       (clockB), 
   .clockC       (clockC), 
   .bitinA       (receivedbitA), 
   .bitinB       (receivedbitB), 
   .bitinC       (receivedbitC), 
   .activA       (actvrsftA), 
   .activB       (actvrsftB), 
   .activC       (actvrsftC), 
   .resetA       (sync_reset_iA), 
   .resetB       (sync_reset_iB), 
   .resetC       (sync_reset_iC), 
   .lcrcA        (lcrcA), 
   .lcrcB        (lcrcB), 
   .lcrcC        (lcrcC), 
   .setzeroA     (setzeroA), 
   .setzeroB     (setzeroB), 
   .setzeroC     (setzeroC), 
   .directshiftA (directshiftA), 
   .directshiftB (directshiftB), 
   .directshiftC (directshiftC), 
   .mesout_aA    (mesout_aA), 
   .mesout_aB    (mesout_aB), 
   .mesout_aC    (mesout_aC), 
   .mesout_bA    (mesout_bA), 
   .mesout_bB    (mesout_bB), 
   .mesout_bC    (mesout_bC), 
   .mesout_cA    (mesout_cA), 
   .mesout_cB    (mesout_cB), 
   .mesout_cC    (mesout_cC)
); 

stuffing2TMR stuff( 
   .clockA  (clockA), 
   .clockB  (clockB), 
   .clockC  (clockC), 
   .bitinA  (stuff_inbitA), 
   .bitinB  (stuff_inbitB), 
   .bitinC  (stuff_inbitC), 
   .activA  (actvtstfA), 
   .activB  (actvtstfB), 
   .activC  (actvtstfC), 
   .resetA  (resetstfsigA), 
   .resetB  (resetstfsigB), 
   .resetC  (resetstfsigC), 
   .directA (actvtdctA), 
   .directB (actvtdctB), 
   .directC (actvtdctC), 
   .setdomA (setbdomA), 
   .setdomB (setbdomB), 
   .setdomC (setbdomC), 
   .setrecA (setbrecA), 
   .setrecB (setbrecB), 
   .setrecC (setbrecC), 
   .bitoutA (bitoutA), 
   .bitoutB (bitoutB), 
   .bitoutC (bitoutC), 
   .stuffA  (stufftA), 
   .stuffB  (stufftB), 
   .stuffC  (stufftC)
); 

tcrc2TMR transmitcrc( 
   .clockA            (clockA), 
   .clockB            (clockB), 
   .clockC            (clockC), 
   .bitinA            (crc_out_bitA), 
   .bitinB            (crc_out_bitB), 
   .bitinC            (crc_out_bitC), 
   .activA            (actvtcrcA), 
   .activB            (actvtcrcB), 
   .activC            (actvtcrcC), 
   .resetA            (resetsigA), 
   .resetB            (resetsigB), 
   .resetC            (resetsigC), 
   .crc_pre_load_extA (crc_pre_load_sig_extA), 
   .crc_pre_load_extB (crc_pre_load_sig_extB), 
   .crc_pre_load_extC (crc_pre_load_sig_extC), 
   .crc_pre_load_remA (crc_pre_load_sig_remA), 
   .crc_pre_load_remB (crc_pre_load_sig_remB), 
   .crc_pre_load_remC (crc_pre_load_sig_remC), 
   .extendedA         (extendedrA), 
   .extendedB         (extendedrB), 
   .extendedC         (extendedrC), 
   .loadA             (loaderA), 
   .loadB             (loaderB), 
   .loadC             (loaderC), 
   .load_activA       (actvtsftsigA), 
   .load_activB       (actvtsftsigB), 
   .load_activC       (actvtsftsigC), 
   .crc_shft_outA     (crc_shft_outA), 
   .crc_shft_outB     (crc_shft_outB), 
   .crc_shft_outC     (crc_shft_outC), 
   .zerointcrcA       (zerointcrc_iA), 
   .zerointcrcB       (zerointcrc_iB), 
   .zerointcrcC       (zerointcrc_iC), 
   .crc_tosendA       (crc_tosendA), 
   .crc_tosendB       (crc_tosendB), 
   .crc_tosendC       (crc_tosendC)
); 

tshiftreg2TMR transhift( 
   .clockA       (clockA), 
   .clockB       (clockB), 
   .clockC       (clockC), 
   .mesinA       (mesinA), 
   .mesinB       (mesinB), 
   .mesinC       (mesinC), 
   .activA       (actvtsftsigA), 
   .activB       (actvtsftsigB), 
   .activC       (actvtsftsigC), 
   .resetA       (resetsigA), 
   .resetB       (resetsigB), 
   .resetC       (resetsigC), 
   .loadA        (loaderA), 
   .loadB        (loaderB), 
   .loadC        (loaderC), 
   .shiftA       (tshiftA), 
   .shiftB       (tshiftB), 
   .shiftC       (tshiftC), 
   .extendedA    (extendedrA), 
   .extendedB    (extendedrB), 
   .extendedC    (extendedrC), 
   .bitoutA      (bittosendA), 
   .bitoutB      (bittosendB), 
   .bitoutC      (bittosendC), 
   .crc_out_bitA (crc_out_bitA), 
   .crc_out_bitB (crc_out_bitB), 
   .crc_out_bitC (crc_out_bitC)
); 

// HDL Embedded Text Block 1 eb1
assign remotewA =  rrtrA;
assign remotewB =  rrtrB;
assign remotewC =  rrtrC;
assign datalenwA =  mesout_aA[67:64] ;
assign datalenwB =  mesout_aB[67:64] ;
assign datalenwC =  mesout_aC[67:64] ;
assign data1wA =  mesout_aA[63:56] ;
assign data1wB =  mesout_aB[63:56] ;
assign data1wC =  mesout_aC[63:56] ;
assign data2wA =  mesout_aA[55:48] ;
assign data2wB =  mesout_aB[55:48] ;
assign data2wC =  mesout_aC[55:48] ;
assign data3wA =  mesout_aA[47:40] ;
assign data3wB =  mesout_aB[47:40] ;
assign data3wC =  mesout_aC[47:40] ;
assign data4wA =  mesout_aA[39:32] ;
assign data4wB =  mesout_aB[39:32] ;
assign data4wC =  mesout_aC[39:32] ;
assign data5wA =  mesout_aA[31:24] ;
assign data5wB =  mesout_aB[31:24] ;
assign data5wC =  mesout_aC[31:24] ;
assign data6wA =  mesout_aA[23:16] ;
assign data6wB =  mesout_aB[23:16] ;
assign data6wC =  mesout_aC[23:16] ;
assign data7wA =  mesout_aA[15:8] ;
assign data7wB =  mesout_aB[15:8] ;
assign data7wC =  mesout_aC[15:8] ;
assign remotewA =  rrtrA;
assign remotewB =  rrtrB;
assign remotewC =  rrtrC;
assign datalenwA =  mesout_aA[67:64] ;
assign datalenwB =  mesout_aB[67:64] ;
assign datalenwC =  mesout_aC[67:64] ;
assign data1wA =  mesout_aA[63:56] ;
assign data1wB =  mesout_aB[63:56] ;
assign data1wC =  mesout_aC[63:56] ;
assign data2wA =  mesout_aA[55:48] ;
assign data2wB =  mesout_aB[55:48] ;
assign data2wC =  mesout_aC[55:48] ;
assign data3wA =  mesout_aA[47:40] ;
assign data3wB =  mesout_aB[47:40] ;
assign data3wC =  mesout_aC[47:40] ;
assign data4wA =  mesout_aA[39:32] ;
assign data4wB =  mesout_aB[39:32] ;
assign data4wC =  mesout_aC[39:32] ;
assign data5wA =  mesout_aA[31:24] ;
assign data5wB =  mesout_aB[31:24] ;
assign data5wC =  mesout_aC[31:24] ;
assign data6wA =  mesout_aA[23:16] ;
assign data6wB =  mesout_aB[23:16] ;
assign data6wC =  mesout_aC[23:16] ;
assign data7wA =  mesout_aA[15:8] ;
assign data7wB =  mesout_aB[15:8] ;
assign data7wC =  mesout_aC[15:8] ;
assign data8wA =  mesout_aA[7:0] ;
assign data8wB =  mesout_aB[7:0] ;
assign data8wC =  mesout_aC[7:0] ;
assign data8wA =  mesout_aA[7:0] ;
assign data8wB =  mesout_aB[7:0] ;
assign data8wC =  mesout_aC[7:0] ;
assign stuff_inbitA =  (crc_shft_outA&crc_tosendA)|((~ crc_shft_outA )&bittosendA);
assign stuff_inbitB =  (crc_shft_outB&crc_tosendB)|((~ crc_shft_outB )&bittosendB);
assign stuff_inbitC =  (crc_shft_outC&crc_tosendC)|((~ crc_shft_outC )&bittosendC);
assign mesinA[63:0]  =  {data1rA,data2rA,data3rA,data4rA,data5rA,data6rA,data7rA,data8rA};
assign mesinB[63:0]  =  {data1rB,data2rB,data3rB,data4rB,data5rB,data6rB,data7rB,data8rB};
assign mesinC[63:0]  =  {data1rC,data2rC,data3rC,data4rC,data5rC,data6rC,data7rC,data8rC};
assign crc_pre_load_sig_extA =  mesinA[102:88] ;
assign crc_pre_load_sig_extB =  mesinB[102:88] ;
assign crc_pre_load_sig_extC =  mesinC[102:88] ;
assign crc_pre_load_sig_remA =  mesinA[82:68] ;
assign crc_pre_load_sig_remB =  mesinB[82:68] ;
assign crc_pre_load_sig_remC =  mesinC[82:68] ;
assign actvtsftsigA =  actvtsftA|actvtsftllcA;
assign actvtsftsigB =  actvtsftB|actvtsftllcB;
assign actvtsftsigC =  actvtsftC|actvtsftllcC;
assign resetsigA =  sync_reset_iA&resettraA;
assign resetsigB =  sync_reset_iB&resettraB;
assign resetsigC =  sync_reset_iC&resettraC;
assign resetstfsigA =  sync_reset_iA&resettraA&resetstfA;
assign resetstfsigB =  sync_reset_iB&resettraB&resetstfB;
assign resetstfsigC =  sync_reset_iC&resettraC&resetstfC;
assign rescountsigA =  sync_reset_iA&rescountA;
assign rescountsigB =  sync_reset_iB&rescountB;
assign rescountsigC =  sync_reset_iC&rescountC;
assign resrmlensigA =  sync_reset_iA&resrmlenA;
assign resrmlensigB =  sync_reset_iB&resrmlenB;
assign resrmlensigC =  sync_reset_iC&resrmlenC;
assign resetdstsigA =  sync_reset_iA&resetdstA;
assign resetdstsigB =  sync_reset_iB&resetdstB;
assign resetdstsigC =  sync_reset_iC&resetdstC;
assign outbitA =  bitoutA;
assign outbitB =  bitoutB;
assign outbitC =  bitoutC;
assign loaderA =  loadA|lmsgA;
assign loaderB =  loadB|lmsgB;
assign loaderC =  loadC|lmsgC;

endmodule // mac2TMR

