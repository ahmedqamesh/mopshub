/****************************************************************************************************
 *                          ! THIS FILE WAS AUTO-GENERATED BY TMRG TOOL !                           *
 *                                   ! DO NOT EDIT IT MANUALLY !                                    *
 *                                                                                                  *
 * file    : ./output/fastshift2TMR.v                                                               *
 *                                                                                                  *
 * user    : lucas                                                                                  *
 * host    : DESKTOP-BFDSFP2                                                                        *
 * date    : 06/10/2022 13:52:48                                                                    *
 *                                                                                                  *
 * workdir : /mnt/c/Users/Lucas/Documents/GitHub/mopshub_triplicated/triplicated/mopshub_top_board/hdl *
 * cmd     : /mnt/c/Users/Lucas/Desktop/mopshub_triplication/tmrg-master/bin/tmrg -vv -c tmrg.cfg   *
 * tmrg rev:                                                                                        *
 *                                                                                                  *
 * src file: fastshift2.v                                                                           *
 *           Git SHA           : c110441b08b692cc54ebd4a3b84a2599430e8f93                           *
 *           Modification time : 2022-08-25 11:44:11                                                *
 *           File Size         : 3818                                                               *
 *           MD5 hash          : 9d2b87ac42f17953e4756b01cba63650                                   *
 *                                                                                                  *
 ****************************************************************************************************/

module fastshift2TMR(
  input wire  reset ,
  input wire  clock ,
  input wire  activate ,
  input wire [3:0] rmlb ,
  output wire  setzero ,
  output wire  directshift 
);
wire setzeroC;
wire setzeroB;
wire setzeroA;
wire [3:0] rmlbC;
wire [3:0] rmlbB;
wire [3:0] rmlbA;
wire reset_iC;
wire reset_iB;
wire reset_iA;
wire directshiftC;
wire directshiftB;
wire directshiftA;
wire [7:0] countVC;
wire [7:0] countVB;
wire [7:0] countVA;
wire clockC;
wire clockB;
wire clockA;
wire activateC;
wire activateB;
wire activateA;
wor workingTmrError;
wire working;
wor directshift_iTmrError;
wire directshift_i;
wor countTmrError;
wire [7:0] count;
wire reset_i;
assign reset_i =  reset;
reg  directshift_iA ;
reg  directshift_iB ;
reg  directshift_iC ;
reg  workingA ;
reg  workingB ;
reg  workingC ;
reg  [7:0] countA ;
reg  [7:0] countB ;
reg  [7:0] countC ;
reg  [3:0] upper4countA ;
reg  [3:0] lower4countA ;
reg  [3:0] upper4countB ;
reg  [3:0] lower4countB ;
reg  [3:0] upper4countC ;
reg  [3:0] lower4countC ;
reg  [3:0] rmlb_usA ;
reg  [3:0] rmlb_usB ;
reg  [3:0] rmlb_usC ;
reg  [7:0] count_usA ;
reg  [7:0] count_usB ;
reg  [7:0] count_usC ;
assign directshift =  directshift_i;
assign setzero =  ~working;
wire [7:0] countV =  count;

always @( posedge clockA )
  begin
    directshift_iA <= directshiftA;
    workingA <= ~setzeroA;
    countA <= countVA;
    if (reset_iA==1'b0)
      begin
        workingA <= 1'b0;
        countA <= 8'd128;
        directshift_iA <= 1'b0;
      end
    else
      if (activateA==1'b1)
        begin
          workingA <= 1'b1;
        end
      else
        if (~setzeroA==1'b1)
          begin
            if (!((rmlb_usA==upper4countA)&&(lower4countA==4'd0)))
              begin
                directshift_iA <= ~directshiftA;
                countA <= countVA-1;
              end
            else
              workingA <= 1'b0;
          end
  end

always @( posedge clockB )
  begin
    directshift_iB <= directshiftB;
    workingB <= ~setzeroB;
    countB <= countVB;
    if (reset_iB==1'b0)
      begin
        workingB <= 1'b0;
        countB <= 8'd128;
        directshift_iB <= 1'b0;
      end
    else
      if (activateB==1'b1)
        begin
          workingB <= 1'b1;
        end
      else
        if (~setzeroB==1'b1)
          begin
            if (!((rmlb_usB==upper4countB)&&(lower4countB==4'd0)))
              begin
                directshift_iB <= ~directshiftB;
                countB <= countVB-1;
              end
            else
              workingB <= 1'b0;
          end
  end

always @( posedge clockC )
  begin
    directshift_iC <= directshiftC;
    workingC <= ~setzeroC;
    countC <= countVC;
    if (reset_iC==1'b0)
      begin
        workingC <= 1'b0;
        countC <= 8'd128;
        directshift_iC <= 1'b0;
      end
    else
      if (activateC==1'b1)
        begin
          workingC <= 1'b1;
        end
      else
        if (~setzeroC==1'b1)
          begin
            if (!((rmlb_usC==upper4countC)&&(lower4countC==4'd0)))
              begin
                directshift_iC <= ~directshiftC;
                countC <= countVC-1;
              end
            else
              workingC <= 1'b0;
          end
  end

always @( countVA or rmlbA )
  begin
    count_usA =  countVA;
    upper4countA =  count_usA[7:4] ;
    lower4countA =  count_usA[3:0] ;
    rmlb_usA =  rmlbA;
  end

always @( countVB or rmlbB )
  begin
    count_usB =  countVB;
    upper4countB =  count_usB[7:4] ;
    lower4countB =  count_usB[3:0] ;
    rmlb_usB =  rmlbB;
  end

always @( countVC or rmlbC )
  begin
    count_usC =  countVC;
    upper4countC =  count_usC[7:4] ;
    lower4countC =  count_usC[3:0] ;
    rmlb_usC =  rmlbC;
  end

majorityVoter #(.WIDTH(8)) countVoter (
    .inA(countA),
    .inB(countB),
    .inC(countC),
    .out(count),
    .tmrErr(countTmrError)
    );

majorityVoter directshift_iVoter (
    .inA(directshift_iA),
    .inB(directshift_iB),
    .inC(directshift_iC),
    .out(directshift_i),
    .tmrErr(directshift_iTmrError)
    );

majorityVoter workingVoter (
    .inA(workingA),
    .inB(workingB),
    .inC(workingC),
    .out(working),
    .tmrErr(workingTmrError)
    );

fanout activateFanout (
    .in(activate),
    .outA(activateA),
    .outB(activateB),
    .outC(activateC)
    );

fanout clockFanout (
    .in(clock),
    .outA(clockA),
    .outB(clockB),
    .outC(clockC)
    );

fanout #(.WIDTH(8)) countVFanout (
    .in(countV),
    .outA(countVA),
    .outB(countVB),
    .outC(countVC)
    );

fanout directshiftFanout (
    .in(directshift),
    .outA(directshiftA),
    .outB(directshiftB),
    .outC(directshiftC)
    );

fanout reset_iFanout (
    .in(reset_i),
    .outA(reset_iA),
    .outB(reset_iB),
    .outC(reset_iC)
    );

fanout #(.WIDTH(4)) rmlbFanout (
    .in(rmlb),
    .outA(rmlbA),
    .outB(rmlbB),
    .outC(rmlbC)
    );

fanout setzeroFanout (
    .in(setzero),
    .outA(setzeroA),
    .outB(setzeroB),
    .outC(setzeroC)
    );
endmodule

