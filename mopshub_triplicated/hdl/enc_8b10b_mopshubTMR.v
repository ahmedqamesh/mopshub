/****************************************************************************************************
 *                          ! THIS FILE WAS AUTO-GENERATED BY TMRG TOOL !                           *
 *                                   ! DO NOT EDIT IT MANUALLY !                                    *
 *                                                                                                  *
 * file    : ./output/enc_8b10b_mopshubTMR.v                                                        *
 *                                                                                                  *
 * user    : lucas                                                                                  *
 * host    : DESKTOP-BFDSFP2                                                                        *
 * date    : 16/08/2022 12:58:18                                                                    *
 *                                                                                                  *
 * workdir : /mnt/c/Users/Lucas/Desktop/mopshub_triplication/mopshub_top_board_canakari_ftrim/hdl   *
 * cmd     : /mnt/c/Users/Lucas/Desktop/mopshub_triplication/tmrg-master/bin/tmrg -c tmrg.cfg -vvv  *
 * tmrg rev:                                                                                        *
 *                                                                                                  *
 * src file: enc_8b10b_mopshub.v                                                                    *
 *           Git SHA           : File not in git repository!                                        *
 *           Modification time : 2022-08-12 11:03:01                                                *
 *           File Size         : 4825                                                               *
 *           MD5 hash          : 7e3f3c0b8ebdb3279455c19a17f534c4                                   *
 *                                                                                                  *
 ****************************************************************************************************/

module enc_8b10b_mopshubTMR(
  input  rst ,
  input  clk ,
  input  ena ,
  input  ki ,
  input [7:0] datain ,
  output [9:0] dataout 
);
wire rstC;
wire rstB;
wire rstA;
wire joC;
wire joB;
wire joA;
wire ioC;
wire ioB;
wire ioA;
wire hoC;
wire hoB;
wire hoA;
wire goC;
wire goB;
wire goA;
wire foC;
wire foB;
wire foA;
wire eoC;
wire eoB;
wire eoA;
wire enaC;
wire enaB;
wire enaA;
wire doC;
wire doB;
wire doA;
wire dispoutC;
wire dispoutB;
wire dispoutA;
wire dispin_vC;
wire dispin_vB;
wire dispin_vA;
wire [9:0] dataout_vC;
wire [9:0] dataout_vB;
wire [9:0] dataout_vA;
wire compls6C;
wire compls6B;
wire compls6A;
wire compls4C;
wire compls4B;
wire compls4A;
wire coC;
wire coB;
wire coA;
wire clkC;
wire clkB;
wire clkA;
wire boC;
wire boB;
wire boA;
wire aoC;
wire aoB;
wire aoA;
wor dispin_rTmrError;
wire dispin_r;
wor dataout_rTmrError;
wire [9:0] dataout_r;
reg  dispin_rA ;
reg  dispin_rB ;
reg  dispin_rC ;
reg  [9:0] dataout_rA ;
reg  [9:0] dataout_rB ;
reg  [9:0] dataout_rC ;
wire dispin =  dispin_r;
wire ai =  datain[0] ;
wire bi =  datain[1] ;
wire ci =  datain[2] ;
wire di =  datain[3] ;
wire ei =  datain[4] ;
wire fi =  datain[5] ;
wire gi =  datain[6] ;
wire hi =  datain[7] ;
wire aeqb =  (ai&bi)|(! ai & ! bi );
wire ceqd =  (ci&di)|(! ci & ! di );
wire l22 =  (ai&bi&!ci&!di)|(ci&di&!ai&!bi)|(! aeqb & ! ceqd );
wire l40 =  ai&bi&ci&di;
wire l04 =  !ai&!bi&!ci&!di;
wire l13 =  (! aeqb & ! ci & ! di )|(! ceqd & ! ai & ! bi );
wire l31 =  (! aeqb & ci & di )|(! ceqd & ai & bi );
wire ao =  ai;
wire bo =  (bi&!l40)|l04;
wire co =  l04|ci|(ei&di&!ci&!bi&!ai);
wire do =  di&(! ( ai&bi&ci ) );
wire eo =  (ei|l13)&!(ei&di&!ci&!bi&!ai);
wire io =  (l22&!ei)|(ei&!di&!ci&!(ai&bi))|(ei&l40)|(ki&ei&di&ci&!bi&!ai)|(ei&!di&ci&!bi&!ai);
wire pd1s6 =  (ei&di&!ci&!bi&!ai)|(! ei & ! l22 & ! l31 );
wire nd1s6 =  ki|(ei&!l22&!l13)|(! ei & ! di & ci & bi & ai );
wire ndos6 =  pd1s6;
wire pdos6 =  ki|(ei&!l22&!l13);
wire alt7 =  dispin ? (fi&gi&hi&(ki|(! ei & di & 131 ))) : (fi&gi&hi&(ki|(ei&!di&131)));
wire fo =  fi&!alt7;
wire go =  gi|(! fi & ! gi & ! hi );
wire ho =  hi;
wire jo =  (! hi & ( gi^fi ) )|alt7;
wire nd1s4 =  fi&gi;
wire pd1s4 =  (! fi & ! gi )|(ki&((fi&!gi)|(! fi & gi )));
wire ndos4 =  (! fi & ! gi );
wire pdos4 =  fi&gi&hi;
wire compls6 =  (pd1s6&!dispin)|(nd1s6&dispin);
wire disp6 =  dispin^(ndos6|pdos6);
wire compls4 =  (pd1s4&!disp6)|(nd1s4&disp6);
wire dispout =  disp6^(ndos4|pdos4);
wire dispin_v =  dispin;
wire [9:0] dataout_v =  dataout_r;

always @( posedge clkA or negedge rstA )
  begin : disp_procA
    if (rstA==0)
      begin
        dispin_rA <= 0;
        dataout_rA <= 0;
      end
    else
      if (enaA==1)
        begin
          dispin_rA <= dispoutA;
          dataout_rA =  {(aoA^compls6A),(boA^compls6A),(coA^compls6A),(doA^compls6A),(eoA^compls6A),(ioA^compls6A),(foA^compls4A),(goA^compls4A),(hoA^compls4A),(joA^compls4A)};
        end
      else
        begin
          dispin_rA <= dispin_vA;
          dataout_rA <= dataout_vA;
        end
  end

always @( posedge clkB or negedge rstB )
  begin : disp_procB
    if (rstB==0)
      begin
        dispin_rB <= 0;
        dataout_rB <= 0;
      end
    else
      if (enaB==1)
        begin
          dispin_rB <= dispoutB;
          dataout_rB =  {(aoB^compls6B),(boB^compls6B),(coB^compls6B),(doB^compls6B),(eoB^compls6B),(ioB^compls6B),(foB^compls4B),(goB^compls4B),(hoB^compls4B),(joB^compls4B)};
        end
      else
        begin
          dispin_rB <= dispin_vB;
          dataout_rB <= dataout_vB;
        end
  end

always @( posedge clkC or negedge rstC )
  begin : disp_procC
    if (rstC==0)
      begin
        dispin_rC <= 0;
        dataout_rC <= 0;
      end
    else
      if (enaC==1)
        begin
          dispin_rC <= dispoutC;
          dataout_rC =  {(aoC^compls6C),(boC^compls6C),(coC^compls6C),(doC^compls6C),(eoC^compls6C),(ioC^compls6C),(foC^compls4C),(goC^compls4C),(hoC^compls4C),(joC^compls4C)};
        end
      else
        begin
          dispin_rC <= dispin_vC;
          dataout_rC <= dataout_vC;
        end
  end
assign dataout =  dataout_r;

majorityVoter #(.WIDTH(10)) dataout_rVoter (
    .inA(dataout_rA),
    .inB(dataout_rB),
    .inC(dataout_rC),
    .out(dataout_r),
    .tmrErr(dataout_rTmrError)
    );

majorityVoter dispin_rVoter (
    .inA(dispin_rA),
    .inB(dispin_rB),
    .inC(dispin_rC),
    .out(dispin_r),
    .tmrErr(dispin_rTmrError)
    );

fanout aoFanout (
    .in(ao),
    .outA(aoA),
    .outB(aoB),
    .outC(aoC)
    );

fanout boFanout (
    .in(bo),
    .outA(boA),
    .outB(boB),
    .outC(boC)
    );

fanout clkFanout (
    .in(clk),
    .outA(clkA),
    .outB(clkB),
    .outC(clkC)
    );

fanout coFanout (
    .in(co),
    .outA(coA),
    .outB(coB),
    .outC(coC)
    );

fanout compls4Fanout (
    .in(compls4),
    .outA(compls4A),
    .outB(compls4B),
    .outC(compls4C)
    );

fanout compls6Fanout (
    .in(compls6),
    .outA(compls6A),
    .outB(compls6B),
    .outC(compls6C)
    );

fanout #(.WIDTH(10)) dataout_vFanout (
    .in(dataout_v),
    .outA(dataout_vA),
    .outB(dataout_vB),
    .outC(dataout_vC)
    );

fanout dispin_vFanout (
    .in(dispin_v),
    .outA(dispin_vA),
    .outB(dispin_vB),
    .outC(dispin_vC)
    );

fanout dispoutFanout (
    .in(dispout),
    .outA(dispoutA),
    .outB(dispoutB),
    .outC(dispoutC)
    );

fanout doFanout (
    .in(do),
    .outA(doA),
    .outB(doB),
    .outC(doC)
    );

fanout enaFanout (
    .in(ena),
    .outA(enaA),
    .outB(enaB),
    .outC(enaC)
    );

fanout eoFanout (
    .in(eo),
    .outA(eoA),
    .outB(eoB),
    .outC(eoC)
    );

fanout foFanout (
    .in(fo),
    .outA(foA),
    .outB(foB),
    .outC(foC)
    );

fanout goFanout (
    .in(go),
    .outA(goA),
    .outB(goB),
    .outC(goC)
    );

fanout hoFanout (
    .in(ho),
    .outA(hoA),
    .outB(hoB),
    .outC(hoC)
    );

fanout ioFanout (
    .in(io),
    .outA(ioA),
    .outB(ioB),
    .outC(ioC)
    );

fanout joFanout (
    .in(jo),
    .outA(joA),
    .outB(joB),
    .outC(joC)
    );

fanout rstFanout (
    .in(rst),
    .outA(rstA),
    .outB(rstB),
    .outC(rstC)
    );
endmodule

