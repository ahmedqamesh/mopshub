/****************************************************************************************************
 *                          ! THIS FILE WAS AUTO-GENERATED BY TMRG TOOL !                           *
 *                                   ! DO NOT EDIT IT MANUALLY !                                    *
 *                                                                                                  *
 * file    : ./output/spi_masterTMR.v                                                               *
 *                                                                                                  *
 * user    : lucas                                                                                  *
 * host    : DESKTOP-BFDSFP2                                                                        *
 * date    : 05/12/2022 13:28:34                                                                    *
 *                                                                                                  *
 * workdir : /mnt/c/Users/Lucas/Documents/GitHub/mopshub_triplicated/triplicated/mopshub_top_board_16/hdl *
 * cmd     : /mnt/c/Users/Lucas/Documents/GitHub/mopshub_triplicated/tmrg-master/bin/tmrg -vv -c    *
 *           tmrg.cfg                                                                               *
 * tmrg rev: b25f042058e4e97751df2a0933c24aeadd5a78a5                                               *
 *                                                                                                  *
 * src file: spi_master.v                                                                           *
 *           Git SHA           : b25f042058e4e97751df2a0933c24aeadd5a78a5 (?? spi_master.v)         *
 *           Modification time : 2022-12-04 17:08:28                                                *
 *           File Size         : 8596                                                               *
 *           MD5 hash          : 0ba8a9a2ac260daa27f6a62ef25bc62c                                   *
 *                                                                                                  *
 ****************************************************************************************************/

module spi_masterTMR #(
  parameter  CLKS_PER_HALF_BIT  = 2
)(
  input  i_Rst_L ,
  input  i_Clk ,
  input  SPI_MODE ,
  input [7:0] i_TX_Byte ,
  input  i_TX_DV ,
  output  o_TX_ReadyW ,
  output  o_RX_DVW ,
  output [7:0] o_RX_ByteW ,
  output  o_SPI_ClkW ,
  input  i_SPI_MISO ,
  output  o_SPI_MOSIW 
);
wire w_CPOLC;
wire w_CPOLB;
wire w_CPOLA;
wire w_CPHAC;
wire w_CPHAB;
wire w_CPHAA;
wire i_TX_DVC;
wire i_TX_DVB;
wire i_TX_DVA;
wire [7:0] i_TX_ByteC;
wire [7:0] i_TX_ByteB;
wire [7:0] i_TX_ByteA;
wire i_SPI_MISOC;
wire i_SPI_MISOB;
wire i_SPI_MISOA;
wire i_Rst_LC;
wire i_Rst_LB;
wire i_Rst_LA;
wire i_ClkC;
wire i_ClkB;
wire i_ClkA;
wor r_Trailing_EdgeTmrError;
wire r_Trailing_Edge;
wor r_TX_DVTmrError;
wire r_TX_DV;
wor r_TX_ByteTmrError;
wire [7:0] r_TX_Byte;
wor r_TX_Bit_CountTmrError;
wire [2:0] r_TX_Bit_Count;
wor r_SPI_Clk_EdgesTmrError;
wire [4:0] r_SPI_Clk_Edges;
wor r_SPI_Clk_CountTmrError;
wire [$clog2(CLKS_PER_HALF_BIT*2)-1:0] r_SPI_Clk_Count;
wor r_SPI_ClkTmrError;
wire r_SPI_Clk;
wor r_RX_Bit_CountTmrError;
wire [2:0] r_RX_Bit_Count;
wor r_Leading_EdgeTmrError;
wire r_Leading_Edge;
wor o_TX_ReadyTmrError;
wire o_TX_Ready;
wor o_SPI_MOSITmrError;
wire o_SPI_MOSI;
wor o_SPI_ClkTmrError;
wire o_SPI_Clk;
wor o_RX_DVTmrError;
wire o_RX_DV;
wor o_RX_ByteTmrError;
wire [7:0] o_RX_Byte;
wire w_CPOL;
wire w_CPHA;
reg  [$clog2(CLKS_PER_HALF_BIT*2)-1:0] r_SPI_Clk_CountA ;
reg  [$clog2(CLKS_PER_HALF_BIT*2)-1:0] r_SPI_Clk_CountB ;
reg  [$clog2(CLKS_PER_HALF_BIT*2)-1:0] r_SPI_Clk_CountC ;
reg  r_SPI_ClkA ;
reg  r_SPI_ClkB ;
reg  r_SPI_ClkC ;
reg  [4:0] r_SPI_Clk_EdgesA ;
reg  [4:0] r_SPI_Clk_EdgesB ;
reg  [4:0] r_SPI_Clk_EdgesC ;
reg  r_Leading_EdgeA ;
reg  r_Leading_EdgeB ;
reg  r_Leading_EdgeC ;
reg  r_Trailing_EdgeA ;
reg  r_Trailing_EdgeB ;
reg  r_Trailing_EdgeC ;
reg  r_TX_DVA ;
reg  r_TX_DVB ;
reg  r_TX_DVC ;
reg  [7:0] r_TX_ByteA ;
reg  [7:0] r_TX_ByteB ;
reg  [7:0] r_TX_ByteC ;
reg  [2:0] r_RX_Bit_CountA ;
reg  [2:0] r_RX_Bit_CountB ;
reg  [2:0] r_RX_Bit_CountC ;
reg  [2:0] r_TX_Bit_CountA ;
reg  [2:0] r_TX_Bit_CountB ;
reg  [2:0] r_TX_Bit_CountC ;
assign w_CPOL =  (SPI_MODE==2)|(SPI_MODE==3);
assign w_CPHA =  (SPI_MODE==1)|(SPI_MODE==3);
reg  o_TX_ReadyA ;
reg  o_TX_ReadyB ;
reg  o_TX_ReadyC ;
reg  o_RX_DVA ;
reg  o_RX_DVB ;
reg  o_RX_DVC ;
reg  [7:0] o_RX_ByteA ;
reg  [7:0] o_RX_ByteB ;
reg  [7:0] o_RX_ByteC ;
reg  o_SPI_ClkA ;
reg  o_SPI_ClkB ;
reg  o_SPI_ClkC ;
reg  o_SPI_MOSIA ;
reg  o_SPI_MOSIB ;
reg  o_SPI_MOSIC ;
wire o_SPI_ClkV =  o_SPI_Clk;
wire o_SPI_MOSIV =  o_SPI_MOSI;
wire o_TX_ReadyV =  o_TX_Ready;
wire [$clog2(CLKS_PER_HALF_BIT*2)-1:0] r_SPI_Clk_CountV =  r_SPI_Clk_Count;
wire [4:0] r_SPI_Clk_EdgesV =  r_SPI_Clk_Edges;
wire r_SPI_ClkV =  r_SPI_Clk;
wire [2:0] r_TX_Bit_CountV =  r_TX_Bit_Count;
wire [7:0] r_TX_ByteV =  r_TX_Byte;
wire r_TX_DVV =  r_TX_DV;
wire r_Trailing_EdgeV =  r_Trailing_Edge;
wire [7:0] o_RX_ByteV =  o_RX_Byte;
wire o_RX_DVV =  o_RX_DV;
wire r_Leading_EdgeV =  r_Leading_Edge;
wire [2:0] r_RX_Bit_CountV =  r_RX_Bit_Count;
assign o_TX_ReadyW =  o_TX_Ready;
assign o_RX_DVW =  o_RX_DV;
assign o_RX_ByteW =  o_RX_Byte;
assign o_SPI_ClkW =  o_SPI_Clk;
assign o_SPI_MOSIW =  o_SPI_MOSI;

always @( posedge i_ClkA or negedge i_Rst_LA )
  begin
    if (~i_Rst_LA)
      begin
        o_TX_ReadyA <= 1'b0;
        r_SPI_Clk_EdgesA <= 0;
        r_Leading_EdgeA <= 1'b0;
        r_Trailing_EdgeA <= 1'b0;
        r_SPI_ClkA <= w_CPOLA;
        r_SPI_Clk_CountA <= 0;
      end
    else
      begin
        r_Leading_EdgeA <= 1'b0;
        r_Trailing_EdgeA <= 1'b0;
        if (i_TX_DVA)
          begin
            o_TX_ReadyA <= 1'b0;
            r_SPI_Clk_EdgesA <= 16;
          end
        else
          if (r_SPI_Clk_EdgesA>0)
            begin
              o_TX_ReadyA <= 1'b0;
              if (r_SPI_Clk_CountA==CLKS_PER_HALF_BIT*2-1)
                begin
                  r_SPI_Clk_EdgesA <= r_SPI_Clk_EdgesA-1'b1;
                  r_Trailing_EdgeA <= 1'b1;
                  r_SPI_Clk_CountA <= 0;
                  r_SPI_ClkA <= ~r_SPI_ClkA;
                end
              else
                if (r_SPI_Clk_CountA==CLKS_PER_HALF_BIT-1)
                  begin
                    r_SPI_Clk_EdgesA <= r_SPI_Clk_EdgesA-1'b1;
                    r_Leading_EdgeA <= 1'b1;
                    r_SPI_Clk_CountA <= r_SPI_Clk_CountA+1'b1;
                    r_SPI_ClkA <= ~r_SPI_ClkA;
                  end
                else
                  begin
                    r_SPI_Clk_CountA <= r_SPI_Clk_CountA+1'b1;
                  end
            end
          else
            begin
              o_TX_ReadyA <= 1'b1;
            end
      end
  end

always @( posedge i_ClkB or negedge i_Rst_LB )
  begin
    if (~i_Rst_LB)
      begin
        o_TX_ReadyB <= 1'b0;
        r_SPI_Clk_EdgesB <= 0;
        r_Leading_EdgeB <= 1'b0;
        r_Trailing_EdgeB <= 1'b0;
        r_SPI_ClkB <= w_CPOLB;
        r_SPI_Clk_CountB <= 0;
      end
    else
      begin
        r_Leading_EdgeB <= 1'b0;
        r_Trailing_EdgeB <= 1'b0;
        if (i_TX_DVB)
          begin
            o_TX_ReadyB <= 1'b0;
            r_SPI_Clk_EdgesB <= 16;
          end
        else
          if (r_SPI_Clk_EdgesB>0)
            begin
              o_TX_ReadyB <= 1'b0;
              if (r_SPI_Clk_CountB==CLKS_PER_HALF_BIT*2-1)
                begin
                  r_SPI_Clk_EdgesB <= r_SPI_Clk_EdgesB-1'b1;
                  r_Trailing_EdgeB <= 1'b1;
                  r_SPI_Clk_CountB <= 0;
                  r_SPI_ClkB <= ~r_SPI_ClkB;
                end
              else
                if (r_SPI_Clk_CountB==CLKS_PER_HALF_BIT-1)
                  begin
                    r_SPI_Clk_EdgesB <= r_SPI_Clk_EdgesB-1'b1;
                    r_Leading_EdgeB <= 1'b1;
                    r_SPI_Clk_CountB <= r_SPI_Clk_CountB+1'b1;
                    r_SPI_ClkB <= ~r_SPI_ClkB;
                  end
                else
                  begin
                    r_SPI_Clk_CountB <= r_SPI_Clk_CountB+1'b1;
                  end
            end
          else
            begin
              o_TX_ReadyB <= 1'b1;
            end
      end
  end

always @( posedge i_ClkC or negedge i_Rst_LC )
  begin
    if (~i_Rst_LC)
      begin
        o_TX_ReadyC <= 1'b0;
        r_SPI_Clk_EdgesC <= 0;
        r_Leading_EdgeC <= 1'b0;
        r_Trailing_EdgeC <= 1'b0;
        r_SPI_ClkC <= w_CPOLC;
        r_SPI_Clk_CountC <= 0;
      end
    else
      begin
        r_Leading_EdgeC <= 1'b0;
        r_Trailing_EdgeC <= 1'b0;
        if (i_TX_DVC)
          begin
            o_TX_ReadyC <= 1'b0;
            r_SPI_Clk_EdgesC <= 16;
          end
        else
          if (r_SPI_Clk_EdgesC>0)
            begin
              o_TX_ReadyC <= 1'b0;
              if (r_SPI_Clk_CountC==CLKS_PER_HALF_BIT*2-1)
                begin
                  r_SPI_Clk_EdgesC <= r_SPI_Clk_EdgesC-1'b1;
                  r_Trailing_EdgeC <= 1'b1;
                  r_SPI_Clk_CountC <= 0;
                  r_SPI_ClkC <= ~r_SPI_ClkC;
                end
              else
                if (r_SPI_Clk_CountC==CLKS_PER_HALF_BIT-1)
                  begin
                    r_SPI_Clk_EdgesC <= r_SPI_Clk_EdgesC-1'b1;
                    r_Leading_EdgeC <= 1'b1;
                    r_SPI_Clk_CountC <= r_SPI_Clk_CountC+1'b1;
                    r_SPI_ClkC <= ~r_SPI_ClkC;
                  end
                else
                  begin
                    r_SPI_Clk_CountC <= r_SPI_Clk_CountC+1'b1;
                  end
            end
          else
            begin
              o_TX_ReadyC <= 1'b1;
            end
      end
  end

always @( posedge i_ClkA or negedge i_Rst_LA )
  begin
    if (~i_Rst_LA)
      begin
        r_TX_ByteA <= 8'h00;
        r_TX_DVA <= 1'b0;
      end
    else
      begin
        r_TX_DVA <= i_TX_DVA;
        if (i_TX_DVA)
          begin
            r_TX_ByteA <= i_TX_ByteA;
          end
      end
  end

always @( posedge i_ClkB or negedge i_Rst_LB )
  begin
    if (~i_Rst_LB)
      begin
        r_TX_ByteB <= 8'h00;
        r_TX_DVB <= 1'b0;
      end
    else
      begin
        r_TX_DVB <= i_TX_DVB;
        if (i_TX_DVB)
          begin
            r_TX_ByteB <= i_TX_ByteB;
          end
      end
  end

always @( posedge i_ClkC or negedge i_Rst_LC )
  begin
    if (~i_Rst_LC)
      begin
        r_TX_ByteC <= 8'h00;
        r_TX_DVC <= 1'b0;
      end
    else
      begin
        r_TX_DVC <= i_TX_DVC;
        if (i_TX_DVC)
          begin
            r_TX_ByteC <= i_TX_ByteC;
          end
      end
  end

always @( posedge i_ClkA or negedge i_Rst_LA )
  begin
    if (~i_Rst_LA)
      begin
        o_SPI_MOSIA <= 1'b0;
        r_TX_Bit_CountA <= 3'b111;
      end
    else
      begin
        if (o_TX_ReadyA)
          begin
            r_TX_Bit_CountA <= 3'b111;
          end
        else
          if (r_TX_DVA&~w_CPHAA)
            begin
              o_SPI_MOSIA <= r_TX_ByteA[3'b111] ;
              r_TX_Bit_CountA <= 3'b110;
            end
          else
            if ((r_Leading_EdgeA&w_CPHAA)|(r_Trailing_EdgeA&~w_CPHAA))
              begin
                r_TX_Bit_CountA <= r_TX_Bit_CountA-1'b1;
                o_SPI_MOSIA <= r_TX_ByteA[r_TX_Bit_CountA] ;
              end
      end
  end

always @( posedge i_ClkB or negedge i_Rst_LB )
  begin
    if (~i_Rst_LB)
      begin
        o_SPI_MOSIB <= 1'b0;
        r_TX_Bit_CountB <= 3'b111;
      end
    else
      begin
        if (o_TX_ReadyB)
          begin
            r_TX_Bit_CountB <= 3'b111;
          end
        else
          if (r_TX_DVB&~w_CPHAB)
            begin
              o_SPI_MOSIB <= r_TX_ByteB[3'b111] ;
              r_TX_Bit_CountB <= 3'b110;
            end
          else
            if ((r_Leading_EdgeB&w_CPHAB)|(r_Trailing_EdgeB&~w_CPHAB))
              begin
                r_TX_Bit_CountB <= r_TX_Bit_CountB-1'b1;
                o_SPI_MOSIB <= r_TX_ByteB[r_TX_Bit_CountB] ;
              end
      end
  end

always @( posedge i_ClkC or negedge i_Rst_LC )
  begin
    if (~i_Rst_LC)
      begin
        o_SPI_MOSIC <= 1'b0;
        r_TX_Bit_CountC <= 3'b111;
      end
    else
      begin
        if (o_TX_ReadyC)
          begin
            r_TX_Bit_CountC <= 3'b111;
          end
        else
          if (r_TX_DVC&~w_CPHAC)
            begin
              o_SPI_MOSIC <= r_TX_ByteC[3'b111] ;
              r_TX_Bit_CountC <= 3'b110;
            end
          else
            if ((r_Leading_EdgeC&w_CPHAC)|(r_Trailing_EdgeC&~w_CPHAC))
              begin
                r_TX_Bit_CountC <= r_TX_Bit_CountC-1'b1;
                o_SPI_MOSIC <= r_TX_ByteC[r_TX_Bit_CountC] ;
              end
      end
  end

always @( posedge i_ClkA or negedge i_Rst_LA )
  begin
    if (~i_Rst_LA)
      begin
        o_RX_ByteA <= 8'h00;
        o_RX_DVA <= 1'b0;
        r_RX_Bit_CountA <= 3'b111;
      end
    else
      begin
        o_RX_DVA <= 1'b0;
        if (o_TX_ReadyA)
          begin
            r_RX_Bit_CountA <= 3'b111;
          end
        else
          if ((r_Leading_EdgeA&~w_CPHAA)|(r_Trailing_EdgeA&w_CPHAA))
            begin
              o_RX_ByteA[r_RX_Bit_CountA]  <= i_SPI_MISOA;
              r_RX_Bit_CountA <= r_RX_Bit_CountA-1'b1;
              if (r_RX_Bit_CountA==3'b000)
                begin
                  o_RX_DVA <= 1'b1;
                end
            end
      end
  end

always @( posedge i_ClkB or negedge i_Rst_LB )
  begin
    if (~i_Rst_LB)
      begin
        o_RX_ByteB <= 8'h00;
        o_RX_DVB <= 1'b0;
        r_RX_Bit_CountB <= 3'b111;
      end
    else
      begin
        o_RX_DVB <= 1'b0;
        if (o_TX_ReadyB)
          begin
            r_RX_Bit_CountB <= 3'b111;
          end
        else
          if ((r_Leading_EdgeB&~w_CPHAB)|(r_Trailing_EdgeB&w_CPHAB))
            begin
              o_RX_ByteB[r_RX_Bit_CountB]  <= i_SPI_MISOB;
              r_RX_Bit_CountB <= r_RX_Bit_CountB-1'b1;
              if (r_RX_Bit_CountB==3'b000)
                begin
                  o_RX_DVB <= 1'b1;
                end
            end
      end
  end

always @( posedge i_ClkC or negedge i_Rst_LC )
  begin
    if (~i_Rst_LC)
      begin
        o_RX_ByteC <= 8'h00;
        o_RX_DVC <= 1'b0;
        r_RX_Bit_CountC <= 3'b111;
      end
    else
      begin
        o_RX_DVC <= 1'b0;
        if (o_TX_ReadyC)
          begin
            r_RX_Bit_CountC <= 3'b111;
          end
        else
          if ((r_Leading_EdgeC&~w_CPHAC)|(r_Trailing_EdgeC&w_CPHAC))
            begin
              o_RX_ByteC[r_RX_Bit_CountC]  <= i_SPI_MISOC;
              r_RX_Bit_CountC <= r_RX_Bit_CountC-1'b1;
              if (r_RX_Bit_CountC==3'b000)
                begin
                  o_RX_DVC <= 1'b1;
                end
            end
      end
  end

always @( posedge i_ClkA or negedge i_Rst_LA )
  begin
    if (~i_Rst_LA)
      begin
        o_SPI_ClkA <= w_CPOLA;
      end
    else
      begin
        o_SPI_ClkA <= r_SPI_ClkA;
      end
  end

always @( posedge i_ClkB or negedge i_Rst_LB )
  begin
    if (~i_Rst_LB)
      begin
        o_SPI_ClkB <= w_CPOLB;
      end
    else
      begin
        o_SPI_ClkB <= r_SPI_ClkB;
      end
  end

always @( posedge i_ClkC or negedge i_Rst_LC )
  begin
    if (~i_Rst_LC)
      begin
        o_SPI_ClkC <= w_CPOLC;
      end
    else
      begin
        o_SPI_ClkC <= r_SPI_ClkC;
      end
  end

majorityVoter #(.WIDTH(8)) o_RX_ByteVoter (
    .inA(o_RX_ByteA),
    .inB(o_RX_ByteB),
    .inC(o_RX_ByteC),
    .out(o_RX_Byte),
    .tmrErr(o_RX_ByteTmrError)
    );

majorityVoter o_RX_DVVoter (
    .inA(o_RX_DVA),
    .inB(o_RX_DVB),
    .inC(o_RX_DVC),
    .out(o_RX_DV),
    .tmrErr(o_RX_DVTmrError)
    );

majorityVoter o_SPI_ClkVoter (
    .inA(o_SPI_ClkA),
    .inB(o_SPI_ClkB),
    .inC(o_SPI_ClkC),
    .out(o_SPI_Clk),
    .tmrErr(o_SPI_ClkTmrError)
    );

majorityVoter o_SPI_MOSIVoter (
    .inA(o_SPI_MOSIA),
    .inB(o_SPI_MOSIB),
    .inC(o_SPI_MOSIC),
    .out(o_SPI_MOSI),
    .tmrErr(o_SPI_MOSITmrError)
    );

majorityVoter o_TX_ReadyVoter (
    .inA(o_TX_ReadyA),
    .inB(o_TX_ReadyB),
    .inC(o_TX_ReadyC),
    .out(o_TX_Ready),
    .tmrErr(o_TX_ReadyTmrError)
    );

majorityVoter r_Leading_EdgeVoter (
    .inA(r_Leading_EdgeA),
    .inB(r_Leading_EdgeB),
    .inC(r_Leading_EdgeC),
    .out(r_Leading_Edge),
    .tmrErr(r_Leading_EdgeTmrError)
    );

majorityVoter #(.WIDTH(3)) r_RX_Bit_CountVoter (
    .inA(r_RX_Bit_CountA),
    .inB(r_RX_Bit_CountB),
    .inC(r_RX_Bit_CountC),
    .out(r_RX_Bit_Count),
    .tmrErr(r_RX_Bit_CountTmrError)
    );

majorityVoter r_SPI_ClkVoter (
    .inA(r_SPI_ClkA),
    .inB(r_SPI_ClkB),
    .inC(r_SPI_ClkC),
    .out(r_SPI_Clk),
    .tmrErr(r_SPI_ClkTmrError)
    );

majorityVoter #(.WIDTH((($clog2(CLKS_PER_HALF_BIT*2)-1)>(0)) ? (($clog2(CLKS_PER_HALF_BIT*2)-1)-(0)+1) : ((0)-($clog2(CLKS_PER_HALF_BIT*2)-1)+1))) r_SPI_Clk_CountVoter (
    .inA(r_SPI_Clk_CountA),
    .inB(r_SPI_Clk_CountB),
    .inC(r_SPI_Clk_CountC),
    .out(r_SPI_Clk_Count),
    .tmrErr(r_SPI_Clk_CountTmrError)
    );

majorityVoter #(.WIDTH(5)) r_SPI_Clk_EdgesVoter (
    .inA(r_SPI_Clk_EdgesA),
    .inB(r_SPI_Clk_EdgesB),
    .inC(r_SPI_Clk_EdgesC),
    .out(r_SPI_Clk_Edges),
    .tmrErr(r_SPI_Clk_EdgesTmrError)
    );

majorityVoter #(.WIDTH(3)) r_TX_Bit_CountVoter (
    .inA(r_TX_Bit_CountA),
    .inB(r_TX_Bit_CountB),
    .inC(r_TX_Bit_CountC),
    .out(r_TX_Bit_Count),
    .tmrErr(r_TX_Bit_CountTmrError)
    );

majorityVoter #(.WIDTH(8)) r_TX_ByteVoter (
    .inA(r_TX_ByteA),
    .inB(r_TX_ByteB),
    .inC(r_TX_ByteC),
    .out(r_TX_Byte),
    .tmrErr(r_TX_ByteTmrError)
    );

majorityVoter r_TX_DVVoter (
    .inA(r_TX_DVA),
    .inB(r_TX_DVB),
    .inC(r_TX_DVC),
    .out(r_TX_DV),
    .tmrErr(r_TX_DVTmrError)
    );

majorityVoter r_Trailing_EdgeVoter (
    .inA(r_Trailing_EdgeA),
    .inB(r_Trailing_EdgeB),
    .inC(r_Trailing_EdgeC),
    .out(r_Trailing_Edge),
    .tmrErr(r_Trailing_EdgeTmrError)
    );

fanout i_ClkFanout (
    .in(i_Clk),
    .outA(i_ClkA),
    .outB(i_ClkB),
    .outC(i_ClkC)
    );

fanout i_Rst_LFanout (
    .in(i_Rst_L),
    .outA(i_Rst_LA),
    .outB(i_Rst_LB),
    .outC(i_Rst_LC)
    );

fanout i_SPI_MISOFanout (
    .in(i_SPI_MISO),
    .outA(i_SPI_MISOA),
    .outB(i_SPI_MISOB),
    .outC(i_SPI_MISOC)
    );

fanout #(.WIDTH(8)) i_TX_ByteFanout (
    .in(i_TX_Byte),
    .outA(i_TX_ByteA),
    .outB(i_TX_ByteB),
    .outC(i_TX_ByteC)
    );

fanout i_TX_DVFanout (
    .in(i_TX_DV),
    .outA(i_TX_DVA),
    .outB(i_TX_DVB),
    .outC(i_TX_DVC)
    );

fanout w_CPHAFanout (
    .in(w_CPHA),
    .outA(w_CPHAA),
    .outB(w_CPHAB),
    .outC(w_CPHAC)
    );

fanout w_CPOLFanout (
    .in(w_CPOL),
    .outA(w_CPOLA),
    .outB(w_CPOLB),
    .outC(w_CPOLC)
    );
endmodule

