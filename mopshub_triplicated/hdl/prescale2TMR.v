/****************************************************************************************************
 *                          ! THIS FILE WAS AUTO-GENERATED BY TMRG TOOL !                           *
 *                                   ! DO NOT EDIT IT MANUALLY !                                    *
 *                                                                                                  *
 * file    : ./output/prescale2TMR.v                                                                *
 *                                                                                                  *
 * user    : lucas                                                                                  *
 * host    : DESKTOP-BFDSFP2                                                                        *
 * date    : 05/12/2022 13:28:30                                                                    *
 *                                                                                                  *
 * workdir : /mnt/c/Users/Lucas/Documents/GitHub/mopshub_triplicated/triplicated/mopshub_top_board_16/hdl *
 * cmd     : /mnt/c/Users/Lucas/Documents/GitHub/mopshub_triplicated/tmrg-master/bin/tmrg -vv -c    *
 *           tmrg.cfg                                                                               *
 * tmrg rev: b25f042058e4e97751df2a0933c24aeadd5a78a5                                               *
 *                                                                                                  *
 * src file: prescale2.v                                                                            *
 *           Git SHA           : b25f042058e4e97751df2a0933c24aeadd5a78a5 (?? prescale2.v)          *
 *           Modification time : 2022-11-10 21:22:58                                                *
 *           File Size         : 2868                                                               *
 *           MD5 hash          : a49d3eb288dfbd27fa0472c7772b53fa                                   *
 *                                                                                                  *
 ****************************************************************************************************/

module prescale2TMR(
  input wire  clock ,
  input wire  reset ,
  input wire [3:0] high ,
  input wire [3:0] low ,
  output wire  Prescale_EN 
);
wire resetC;
wire resetB;
wire resetA;
wire [3:0] lowC;
wire [3:0] lowB;
wire [3:0] lowA;
wire [3:0] lo_countVC;
wire [3:0] lo_countVB;
wire [3:0] lo_countVA;
wire [3:0] hiloVC;
wire [3:0] hiloVB;
wire [3:0] hiloVA;
wire [3:0] highC;
wire [3:0] highB;
wire [3:0] highA;
wire [3:0] hi_countVC;
wire [3:0] hi_countVB;
wire [3:0] hi_countVA;
wire clockC;
wire clockB;
wire clockA;
wire Prescale_ENC;
wire Prescale_ENB;
wire Prescale_ENA;
wor lo_countTmrError;
wire [3:0] lo_count;
wor hiloTmrError;
wire hilo;
wor hi_countTmrError;
wire [3:0] hi_count;
wor Prescale_EN_iTmrError;
wire Prescale_EN_i;
reg  [3:0] lo_countA ;
reg  [3:0] lo_countB ;
reg  [3:0] lo_countC ;
reg  [3:0] hi_countA ;
reg  [3:0] hi_countB ;
reg  [3:0] hi_countC ;
reg  hiloA ;
reg  hiloB ;
reg  hiloC ;
reg  Prescale_EN_iA ;
reg  Prescale_EN_iB ;
reg  Prescale_EN_iC ;
assign Prescale_EN =  Prescale_EN_i;
wire [3:0] lo_countV =  lo_count;
wire [3:0] hi_countV =  hi_count;
wire [3:0] hiloV =  hilo;

always @( posedge clockA or negedge resetA )
  begin
    if (resetA==1'b0)
      begin
        lo_countA <= 4'b0000;
        hi_countA <= 4'b0000;
        hiloA <= 1'b1;
        Prescale_EN_iA <= 1'b0;
      end
    else
      begin
        lo_countA <= lo_countVA;
        hi_countA <= hi_countVA;
        hiloA <= hiloVA;
        Prescale_EN_iA <= Prescale_ENA;
        if (hiloVA==1'b1)
          begin
            Prescale_EN_iA <= 1'b0;
            if (hi_countVA==highA)
              begin
                hi_countA <= 4'b0000;
                hiloA <= 1'b0;
              end
            else
              hi_countA <= hi_countVA+1;
          end
        else
          begin
            if (lo_countVA==lowA)
              begin
                Prescale_EN_iA <= 1'b1;
                lo_countA <= 4'b0000;
                hiloA <= 1'b1;
              end
            else
              begin
                Prescale_EN_iA <= 1'b0;
                lo_countA <= lo_countVA+1;
              end
          end
      end
  end

always @( posedge clockB or negedge resetB )
  begin
    if (resetB==1'b0)
      begin
        lo_countB <= 4'b0000;
        hi_countB <= 4'b0000;
        hiloB <= 1'b1;
        Prescale_EN_iB <= 1'b0;
      end
    else
      begin
        lo_countB <= lo_countVB;
        hi_countB <= hi_countVB;
        hiloB <= hiloVB;
        Prescale_EN_iB <= Prescale_ENB;
        if (hiloVB==1'b1)
          begin
            Prescale_EN_iB <= 1'b0;
            if (hi_countVB==highB)
              begin
                hi_countB <= 4'b0000;
                hiloB <= 1'b0;
              end
            else
              hi_countB <= hi_countVB+1;
          end
        else
          begin
            if (lo_countVB==lowB)
              begin
                Prescale_EN_iB <= 1'b1;
                lo_countB <= 4'b0000;
                hiloB <= 1'b1;
              end
            else
              begin
                Prescale_EN_iB <= 1'b0;
                lo_countB <= lo_countVB+1;
              end
          end
      end
  end

always @( posedge clockC or negedge resetC )
  begin
    if (resetC==1'b0)
      begin
        lo_countC <= 4'b0000;
        hi_countC <= 4'b0000;
        hiloC <= 1'b1;
        Prescale_EN_iC <= 1'b0;
      end
    else
      begin
        lo_countC <= lo_countVC;
        hi_countC <= hi_countVC;
        hiloC <= hiloVC;
        Prescale_EN_iC <= Prescale_ENC;
        if (hiloVC==1'b1)
          begin
            Prescale_EN_iC <= 1'b0;
            if (hi_countVC==highC)
              begin
                hi_countC <= 4'b0000;
                hiloC <= 1'b0;
              end
            else
              hi_countC <= hi_countVC+1;
          end
        else
          begin
            if (lo_countVC==lowC)
              begin
                Prescale_EN_iC <= 1'b1;
                lo_countC <= 4'b0000;
                hiloC <= 1'b1;
              end
            else
              begin
                Prescale_EN_iC <= 1'b0;
                lo_countC <= lo_countVC+1;
              end
          end
      end
  end

majorityVoter Prescale_EN_iVoter (
    .inA(Prescale_EN_iA),
    .inB(Prescale_EN_iB),
    .inC(Prescale_EN_iC),
    .out(Prescale_EN_i),
    .tmrErr(Prescale_EN_iTmrError)
    );

majorityVoter #(.WIDTH(4)) hi_countVoter (
    .inA(hi_countA),
    .inB(hi_countB),
    .inC(hi_countC),
    .out(hi_count),
    .tmrErr(hi_countTmrError)
    );

majorityVoter hiloVoter (
    .inA(hiloA),
    .inB(hiloB),
    .inC(hiloC),
    .out(hilo),
    .tmrErr(hiloTmrError)
    );

majorityVoter #(.WIDTH(4)) lo_countVoter (
    .inA(lo_countA),
    .inB(lo_countB),
    .inC(lo_countC),
    .out(lo_count),
    .tmrErr(lo_countTmrError)
    );

fanout Prescale_ENFanout (
    .in(Prescale_EN),
    .outA(Prescale_ENA),
    .outB(Prescale_ENB),
    .outC(Prescale_ENC)
    );

fanout clockFanout (
    .in(clock),
    .outA(clockA),
    .outB(clockB),
    .outC(clockC)
    );

fanout #(.WIDTH(4)) hi_countVFanout (
    .in(hi_countV),
    .outA(hi_countVA),
    .outB(hi_countVB),
    .outC(hi_countVC)
    );

fanout #(.WIDTH(4)) highFanout (
    .in(high),
    .outA(highA),
    .outB(highB),
    .outC(highC)
    );

fanout #(.WIDTH(4)) hiloVFanout (
    .in(hiloV),
    .outA(hiloVA),
    .outB(hiloVB),
    .outC(hiloVC)
    );

fanout #(.WIDTH(4)) lo_countVFanout (
    .in(lo_countV),
    .outA(lo_countVA),
    .outB(lo_countVB),
    .outC(lo_countVC)
    );

fanout #(.WIDTH(4)) lowFanout (
    .in(low),
    .outA(lowA),
    .outB(lowB),
    .outC(lowC)
    );

fanout resetFanout (
    .in(reset),
    .outA(resetA),
    .outB(resetB),
    .outC(resetC)
    );
endmodule

