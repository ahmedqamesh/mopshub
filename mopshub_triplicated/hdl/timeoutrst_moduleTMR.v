/****************************************************************************************************
 *                          ! THIS FILE WAS AUTO-GENERATED BY TMRG TOOL !                           *
 *                                   ! DO NOT EDIT IT MANUALLY !                                    *
 *                                                                                                  *
 * file    : ./output/timeoutrst_moduleTMR.v                                                        *
 *                                                                                                  *
 * user    : lucas                                                                                  *
 * host    : DESKTOP-BFDSFP2                                                                        *
 * date    : 03/04/2022 20:08:57                                                                    *
 *                                                                                                  *
 * workdir : /mnt/c/Users/Lucas/Desktop/mopshub_triplication/triplicated/mopshub_top_canakari_ftrim/hdl *
 * cmd     : /mnt/c/Users/Lucas/Desktop/mopshub_triplication/tmrg-master/bin/tmrg -vv -c tmrg.cfg   *
 * tmrg rev:                                                                                        *
 *                                                                                                  *
 * src file: timeoutrst_module.v                                                                    *
 *           Git SHA           : File not in git repository!                                        *
 *           Modification time : 2022-03-28 18:42:43                                                *
 *           File Size         : 854                                                                *
 *           MD5 hash          : f40cb05eb68c7e91007699a6f5753fdb                                   *
 *                                                                                                  *
 ****************************************************************************************************/

module timout_rstTMR(
  input wire  clkA ,
  input wire  clkB ,
  input wire  clkC ,
  input wire  entimeoutA ,
  input wire  entimeoutB ,
  input wire  entimeoutC ,
  input wire [31:0] time_limitA ,
  input wire [31:0] time_limitB ,
  input wire [31:0] time_limitC ,
  input wire  rstA ,
  input wire  rstB ,
  input wire  rstC ,
  output wire  timeoutrstA ,
  output wire  timeoutrstB ,
  output wire  timeoutrstC 
);
wor timeoutrstregTmrErrorC;
wire timeoutrstregVotedC;
wor counterTmrErrorC;
wire [31:0] counterVotedC;
wor timeoutrstregTmrErrorB;
wire timeoutrstregVotedB;
wor counterTmrErrorB;
wire [31:0] counterVotedB;
wor timeoutrstregTmrErrorA;
wire timeoutrstregVotedA;
wor counterTmrErrorA;
wire [31:0] counterVotedA;
reg  [31:0] counterA ;
reg  [31:0] counterB ;
reg  [31:0] counterC ;
reg  timeoutrstregA ;
reg  timeoutrstregB ;
reg  timeoutrstregC ;
assign timeoutrstA =  timeoutrstregVotedA;
assign timeoutrstB =  timeoutrstregVotedB;
assign timeoutrstC =  timeoutrstregVotedC;

always @( posedge clkA )
  begin
    if (!rstA)
      begin
        counterA <= 0;
      end
    else
      begin
        if (entimeoutA&!timeoutrstA)
          counterA <= {counterVotedA+1};
        else
          begin
            counterA <= 0;
          end
      end
  end

always @( posedge clkB )
  begin
    if (!rstB)
      begin
        counterB <= 0;
      end
    else
      begin
        if (entimeoutB&!timeoutrstB)
          counterB <= {counterVotedB+1};
        else
          begin
            counterB <= 0;
          end
      end
  end

always @( posedge clkC )
  begin
    if (!rstC)
      begin
        counterC <= 0;
      end
    else
      begin
        if (entimeoutC&!timeoutrstC)
          counterC <= {counterVotedC+1};
        else
          begin
            counterC <= 0;
          end
      end
  end

always @( posedge clkA )
  begin
    if (counterVotedA>=time_limitA)
      timeoutrstregA <= 1'b1;
    else
      timeoutrstregA <= 1'b0;
  end

always @( posedge clkB )
  begin
    if (counterVotedB>=time_limitB)
      timeoutrstregB <= 1'b1;
    else
      timeoutrstregB <= 1'b0;
  end

always @( posedge clkC )
  begin
    if (counterVotedC>=time_limitC)
      timeoutrstregC <= 1'b1;
    else
      timeoutrstregC <= 1'b0;
  end

majorityVoter #(.WIDTH(32)) counterVoterA (
    .inA(counterA),
    .inB(counterB),
    .inC(counterC),
    .out(counterVotedA),
    .tmrErr(counterTmrErrorA)
    );

majorityVoter timeoutrstregVoterA (
    .inA(timeoutrstregA),
    .inB(timeoutrstregB),
    .inC(timeoutrstregC),
    .out(timeoutrstregVotedA),
    .tmrErr(timeoutrstregTmrErrorA)
    );

majorityVoter #(.WIDTH(32)) counterVoterB (
    .inA(counterA),
    .inB(counterB),
    .inC(counterC),
    .out(counterVotedB),
    .tmrErr(counterTmrErrorB)
    );

majorityVoter timeoutrstregVoterB (
    .inA(timeoutrstregA),
    .inB(timeoutrstregB),
    .inC(timeoutrstregC),
    .out(timeoutrstregVotedB),
    .tmrErr(timeoutrstregTmrErrorB)
    );

majorityVoter #(.WIDTH(32)) counterVoterC (
    .inA(counterA),
    .inB(counterB),
    .inC(counterC),
    .out(counterVotedC),
    .tmrErr(counterTmrErrorC)
    );

majorityVoter timeoutrstregVoterC (
    .inA(timeoutrstregA),
    .inB(timeoutrstregB),
    .inC(timeoutrstregC),
    .out(timeoutrstregVotedC),
    .tmrErr(timeoutrstregTmrErrorC)
    );
endmodule

