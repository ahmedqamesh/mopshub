/****************************************************************************************************
 *                          ! THIS FILE WAS AUTO-GENERATED BY TMRG TOOL !                           *
 *                                   ! DO NOT EDIT IT MANUALLY !                                    *
 *                                                                                                  *
 * file    : ./output/tec2TMR.v                                                                     *
 *                                                                                                  *
 * user    : lucas                                                                                  *
 * host    : DESKTOP-BFDSFP2                                                                        *
 * date    : 06/10/2022 13:53:05                                                                    *
 *                                                                                                  *
 * workdir : /mnt/c/Users/Lucas/Documents/GitHub/mopshub_triplicated/triplicated/mopshub_top_board/hdl *
 * cmd     : /mnt/c/Users/Lucas/Desktop/mopshub_triplication/tmrg-master/bin/tmrg -vv -c tmrg.cfg   *
 * tmrg rev:                                                                                        *
 *                                                                                                  *
 * src file: tec2.v                                                                                 *
 *           Git SHA           : c110441b08b692cc54ebd4a3b84a2599430e8f93                           *
 *           Modification time : 2022-08-30 13:14:53                                                *
 *           File Size         : 3503                                                               *
 *           MD5 hash          : cfeb6c1ea05f942bf60714a515eebaf0                                   *
 *                                                                                                  *
 ****************************************************************************************************/

module tec2TMR(
  input wire  reset ,
  input wire  clock ,
  input wire  incegttra ,
  input wire  dectra ,
  output reg  tec_lt96 ,
  output reg  tec_ge96 ,
  output reg  tec_ge128 ,
  output reg  tec_ge256 ,
  output wire [7:0] teccount 
);
wire resetC;
wire resetB;
wire resetA;
wire incegttraC;
wire incegttraB;
wire incegttraA;
wire edgedVC;
wire edgedVB;
wire edgedVA;
wire dectraC;
wire dectraB;
wire dectraA;
wire [8:0] counterVC;
wire [8:0] counterVB;
wire [8:0] counterVA;
wire clockC;
wire clockB;
wire clockA;
wire actionC;
wire actionB;
wire actionA;
wor edgedTmrError;
wire edged;
wor counterTmrError;
wire [8:0] counter;
reg  [8:0] counterA ;
reg  [8:0] counterB ;
reg  [8:0] counterC ;
reg  edgedA ;
reg  edgedB ;
reg  edgedC ;
wire action;
assign action =  incegttra|dectra;
wire [8:0] counterV =  counter;
wire edgedV =  edged;
assign teccount =  counterV[7:0] ;

always @( posedge clockA )
  begin
    if (resetA==1'b0)
      begin
        counterA <= 9'd0;
        edgedA <= 1'b0;
      end
    else
      begin
        counterA <= counterVA;
        edgedA <= edgedVA;
        if (actionA==1'b1)
          begin
            if (edgedVA==1'b0)
              begin
                edgedA <= 1'b1;
                if (counterVA<=9'd255&&incegttraA==1'b1)
                  counterA <= counterVA+8;
                else
                  if (counterVA!=9'd0&&dectraA==1'b1)
                    counterA <= counterVA-1;
              end
          end
        else
          edgedA <= 1'b0;
      end
  end

always @( posedge clockB )
  begin
    if (resetB==1'b0)
      begin
        counterB <= 9'd0;
        edgedB <= 1'b0;
      end
    else
      begin
        counterB <= counterVB;
        edgedB <= edgedVB;
        if (actionB==1'b1)
          begin
            if (edgedVB==1'b0)
              begin
                edgedB <= 1'b1;
                if (counterVB<=9'd255&&incegttraB==1'b1)
                  counterB <= counterVB+8;
                else
                  if (counterVB!=9'd0&&dectraB==1'b1)
                    counterB <= counterVB-1;
              end
          end
        else
          edgedB <= 1'b0;
      end
  end

always @( posedge clockC )
  begin
    if (resetC==1'b0)
      begin
        counterC <= 9'd0;
        edgedC <= 1'b0;
      end
    else
      begin
        counterC <= counterVC;
        edgedC <= edgedVC;
        if (actionC==1'b1)
          begin
            if (edgedVC==1'b0)
              begin
                edgedC <= 1'b1;
                if (counterVC<=9'd255&&incegttraC==1'b1)
                  counterC <= counterVC+8;
                else
                  if (counterVC!=9'd0&&dectraC==1'b1)
                    counterC <= counterVC-1;
              end
          end
        else
          edgedC <= 1'b0;
      end
  end

always @( counterV )
  begin
    if (counterV>=9'd256)
      begin
        tec_lt96 <= 1'b0;
        tec_ge96 <= 1'b1;
        tec_ge128 <= 1'b1;
        tec_ge256 <= 1'b1;
      end
    else
      if (counterV>=9'd128&&counterV<9'd256)
        begin
          tec_lt96 <= 1'b0;
          tec_ge96 <= 1'b1;
          tec_ge128 <= 1'b1;
          tec_ge256 <= 1'b0;
        end
      else
        if (counterV<=9'd127&&counterV>=9'd96)
          begin
            tec_lt96 <= 1'b0;
            tec_ge96 <= 1'b1;
            tec_ge128 <= 1'b0;
            tec_ge256 <= 1'b0;
          end
        else
          begin
            tec_lt96 <= 1'b1;
            tec_ge96 <= 1'b0;
            tec_ge128 <= 1'b0;
            tec_ge256 <= 1'b0;
          end
  end

majorityVoter #(.WIDTH(9)) counterVoter (
    .inA(counterA),
    .inB(counterB),
    .inC(counterC),
    .out(counter),
    .tmrErr(counterTmrError)
    );

majorityVoter edgedVoter (
    .inA(edgedA),
    .inB(edgedB),
    .inC(edgedC),
    .out(edged),
    .tmrErr(edgedTmrError)
    );

fanout actionFanout (
    .in(action),
    .outA(actionA),
    .outB(actionB),
    .outC(actionC)
    );

fanout clockFanout (
    .in(clock),
    .outA(clockA),
    .outB(clockB),
    .outC(clockC)
    );

fanout #(.WIDTH(9)) counterVFanout (
    .in(counterV),
    .outA(counterVA),
    .outB(counterVB),
    .outC(counterVC)
    );

fanout dectraFanout (
    .in(dectra),
    .outA(dectraA),
    .outB(dectraB),
    .outC(dectraC)
    );

fanout edgedVFanout (
    .in(edgedV),
    .outA(edgedVA),
    .outB(edgedVB),
    .outC(edgedVC)
    );

fanout incegttraFanout (
    .in(incegttra),
    .outA(incegttraA),
    .outB(incegttraB),
    .outC(incegttraC)
    );

fanout resetFanout (
    .in(reset),
    .outA(resetA),
    .outB(resetB),
    .outC(resetC)
    );
endmodule

