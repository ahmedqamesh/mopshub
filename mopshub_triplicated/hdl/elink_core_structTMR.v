/****************************************************************************************************
 *                          ! THIS FILE WAS AUTO-GENERATED BY TMRG TOOL !                           *
 *                                   ! DO NOT EDIT IT MANUALLY !                                    *
 *                                                                                                  *
 * file    : ./output/elink_core_structTMR.v                                                        *
 *                                                                                                  *
 * user    : lucas                                                                                  *
 * host    : DESKTOP-BFDSFP2                                                                        *
 * date    : 05/12/2022 13:28:08                                                                    *
 *                                                                                                  *
 * workdir : /mnt/c/Users/Lucas/Documents/GitHub/mopshub_triplicated/triplicated/mopshub_top_board_16/hdl *
 * cmd     : /mnt/c/Users/Lucas/Documents/GitHub/mopshub_triplicated/tmrg-master/bin/tmrg -vv -c    *
 *           tmrg.cfg                                                                               *
 * tmrg rev: b25f042058e4e97751df2a0933c24aeadd5a78a5                                               *
 *                                                                                                  *
 * src file: elink_core_struct.v                                                                    *
 *           Git SHA           : b25f042058e4e97751df2a0933c24aeadd5a78a5 (?? elink_core_struct.v)  *
 *           Modification time : 2022-12-04 15:41:31.652210                                         *
 *           File Size         : 15553                                                              *
 *           MD5 hash          : 9d848b017b6712471e2025714cb8dde1                                   *
 *                                                                                                  *
 ****************************************************************************************************/

`resetall 
`timescale  1ns/10ps
module elink_coreTMR(
  input wire  clk ,
  input wire  rst ,
  output wire  rx_fifo_full ,
  input wire [75:0] data_rec_uplink ,
  input wire  start_write_elink ,
  output wire  tx_efifo_full ,
  output wire  irq_elink_rec ,
  output wire  irq_elink_tra ,
  output wire  end_write_elink ,
  input wire  start_read_elink ,
  output wire  end_read_elink ,
  input wire [1:0] data_2bit_in ,
  output wire [1:0] data_2bit_out ,
  input wire  fifo_flush ,
  output wire  tx_data_rdy ,
  output wire  rx_data_rdy ,
  output wire [75:0] data_tra_out ,
  output wire  buffer_tra_en ,
  output wire [7:0] data_tra_mon_spi ,
  output wire  irq_spi_tra ,
  input wire [31:0] data_rec_spi_in ,
  output wire  end_write_elink_spi ,
  input wire  start_write_elink_spi ,
  input wire  timeoutrst ,
  output wire [7:0] spi_tra_mon_reg ,
  input wire  abort ,
  input wire [9:0] data_10bit_in_dbg ,
  input wire  dbg_elink ,
  input wire  rdy_dbg ,
  output wire [7:0] spi_id ,
  output wire [7:0] spi_tra_mon_select ,
  input wire  spi_read_mode ,
  input wire  dbg_spi ,
  output wire  word10b_rdy ,
  input wire  start_write_elink_dbg ,
  input wire [75:0] data_rec_dbg_in ,
  output wire  end_write_elink_dbg 
);
wire buffer_spi_tra_en;
wire timeoutrst_elink_tra;
wire [4:0] addr_write;
wire cs_ewrite;
wire [9:0] data_rec_10bitout;
wire [9:0] data_rec_spi_10bitout_Active;
wire [9:0] data_rec_can_10bitout;
wire [9:0] data_rec_dbg_10bitout;
wire [9:0] data_rec_spi_10bitout;
wire cs_eread;
reg  fifo_data_packet ;
reg  fifo_data_sop ;
reg  fifo_data_eop ;
reg  spi_power_reg ;
reg  spi_mon_reg ;
reg  can_id_reg ;
wire [4:0] addr_read;
wire [9:0] data_tra_10bitin;
wire buffer_elink_en;
wire [6:0] statedeb_rec;
wire [6:0] statedeb_tra;
wire buffer_rec_en;
wire rx_fifo_empty;
wire tx_fifo_empty;
wire can_id;
wire spi_mon_id;
wire buffer_elink_spi_en;
wire buffer_spi_rec_en;
wire [9:0] data_rec_spi_can_10bitout;
wire spi_rec_mode;
wire spi_power;
wire entimeout_elink_rec;
wire entimeout_elink_tra;
reg  [31:0] time_limit_trim ;
reg  [7:0] Kchar_comma ;
reg  [7:0] Kchar_eop ;
reg  [7:0] Kchar_sop ;
reg  [9:0] COMMAn ;
reg  [9:0] COMMAp ;
wire spi_tra_mode;
wire spi_mode;
wire spi_can_irq;
wire spi_can_mode;
wire spi_can_id;
reg  spi_can_reg ;
wire dbg_rec_mode;
wire can_rec_buf0 =  1'b0;
wire spi_rec_signal;

buffer_rec_elinkTMR buffer_rec_elink_dbg (
    .clk(clk),
    .rst(rst),
    .data_rec_in(data_rec_dbg_in),
    .addr(addr_write),
    .data_rec_10bitout(data_rec_dbg_10bitout),
    .Kchar_sop(Kchar_sop),
    .Kchar_eop(Kchar_eop),
    .Kchar_comma(Kchar_comma)
    );

buffer_rec_elinkTMR rec_elink_buf0 (
    .clk(clk),
    .rst(rst),
    .data_rec_in(data_rec_uplink),
    .addr(addr_write),
    .data_rec_10bitout(data_rec_can_10bitout),
    .Kchar_sop(Kchar_sop),
    .Kchar_eop(Kchar_eop),
    .Kchar_comma(Kchar_comma)
    );

buffer_rec_elink_spiTMR buffer_rec_elink_spi0 (
    .clk(clk),
    .rst(rst),
    .data_rec_in(data_rec_spi_in),
    .addr(addr_write),
    .data_rec_10bitout(data_rec_spi_10bitout),
    .Kchar_sop(Kchar_sop),
    .Kchar_eop(Kchar_eop),
    .Kchar_comma(Kchar_comma)
    );

buffer_tra_elinkTMR tra_elink_buf0 (
    .clk(clk),
    .data_tra_8bitin(data_tra_10bitin[7:0] ),
    .buffer_en(buffer_elink_en),
    .rst(rst),
    .addr(addr_read),
    .data_tra_out(data_tra_out)
    );

buffer_tra_elink_spiTMR buffer_tra_spi0 (
    .clk(clk),
    .data_tra_8bitin(data_tra_10bitin[7:0] ),
    .buffer_en(buffer_elink_spi_en),
    .rst(rst),
    .addr(addr_read),
    .spi_id(spi_id),
    .spi_reg(spi_tra_mon_reg),
    .spi_select(spi_tra_mon_select),
    .data_tra_out(data_tra_mon_spi)
    );

buffer_tristate_elinkTMR buffer_tristate_elink0 (
    .clk(clk),
    .rst(rst),
    .data_tra_in0(data_rec_can_10bitout),
    .data_tra_in1(data_rec_spi_10bitout_Active),
    .data_tra_in2(data_rec_dbg_10bitout),
    .buffer_en0(can_rec_buf0),
    .buffer_en1(spi_rec_signal),
    .buffer_en2(dbg_rec_mode),
    .Kchar_comma(Kchar_comma),
    .data_tra_out(data_rec_10bitout)
    );

can_spi_debugerTMR can_spi_debuger (
    .Kchar_comma(Kchar_comma),
    .Kchar_eop(Kchar_eop),
    .Kchar_sop(Kchar_sop),
    .clk(clk),
    .data_rec_can_10bitout(data_rec_can_10bitout),
    .rst(rst),
    .spi_can_irq(spi_can_irq),
    .data_rec_spi_can_10bitout(data_rec_spi_can_10bitout),
    .spi_can_mode(spi_can_mode)
    );

elink_interface_rec_SMTMR elink_interface_rec_SM0 (
    .abort(abort),
    .clk(clk),
    .rst(rst),
    .start_write_elink(start_write_elink),
    .start_write_elink_dbg(start_write_elink_dbg),
    .start_write_elink_spi(start_write_elink_spi),
    .timeoutrst(timeoutrst),
    .addr_write(addr_write),
    .buffer_rec_en(buffer_rec_en),
    .buffer_spi_rec_en(buffer_spi_rec_en),
    .cs_ewrite(cs_ewrite),
    .dbg_rec_mode(dbg_rec_mode),
    .end_write_elink(end_write_elink),
    .end_write_elink_dbg(end_write_elink_dbg),
    .end_write_elink_spi(end_write_elink_spi),
    .entimeout(entimeout_elink_rec),
    .irq_elink_rec(irq_elink_rec),
    .spi_rec_mode(spi_rec_mode),
    .statedeb(statedeb_rec)
    );

elink_interface_tra_SMTMR elink_interface_tra_SM0 (
    .abort(abort),
    .can_id(can_id),
    .clk(clk),
    .fifo_data_eop(fifo_data_eop),
    .fifo_data_sop(fifo_data_sop),
    .fifo_elink_rdy(rx_data_rdy),
    .fifo_packet_rdy(fifo_data_packet),
    .rst(rst),
    .spi_can_id(spi_can_id),
    .spi_mon_id(spi_mon_id),
    .start_read_elink(start_read_elink),
    .timeoutrst(timeoutrst_elink_tra),
    .addr_read(addr_read),
    .buffer_elink_en(buffer_elink_en),
    .buffer_elink_spi_en(buffer_elink_spi_en),
    .buffer_spi_en(buffer_spi_tra_en),
    .buffer_tra_en(buffer_tra_en),
    .cs_eread(cs_eread),
    .end_read_elink(end_read_elink),
    .entimeout(entimeout_elink_tra),
    .irq_elink_tra(irq_elink_tra),
    .irq_spi_tra(irq_spi_tra),
    .spi_tra_mode(spi_tra_mode),
    .statedeb(statedeb_tra)
    );

elink_to_fifoTMR elink_to_fifo0 (
    .fifo_flush(fifo_flush),
    .fifo_full(rx_fifo_full),
    .fifo_dout(data_tra_10bitin),
    .clk(clk),
    .fifo_rd_en(cs_eread),
    .data_2bit_in(data_2bit_in),
    .rst(rst),
    .rx_fifo_empty(rx_fifo_empty),
    .COMMAn(COMMAn),
    .COMMAp(COMMAp),
    .Kchar_comma(Kchar_comma),
    .Kchar_eop(Kchar_eop),
    .Kchar_sop(Kchar_sop),
    .word10b_rdy(word10b_rdy)
    );

fifo_to_elinkTMR fifo_to_elink0 (
    .fifo_wr_en(cs_ewrite),
    .clk(clk),
    .fifo_din(data_rec_10bitout),
    .fifo_flush(fifo_flush),
    .data_2bit_out(data_2bit_out),
    .efifo_empty(tx_fifo_empty),
    .efifo_full(tx_efifo_full),
    .rst(rst),
    .Kchar_comma(Kchar_comma),
    .Kchar_sop(Kchar_sop),
    .Kchar_eop(Kchar_eop),
    .data_10bit_in_dbg(data_10bit_in_dbg),
    .COMMAn(COMMAn),
    .COMMAp(COMMAp),
    .rdy_dbg(rdy_dbg),
    .dbg_elink(dbg_elink)
    );

timout_rstTMR timout_rst1 (
    .clk(clk),
    .entimeout(entimeout_elink_tra),
    .time_limit(time_limit_trim),
    .rst(rst),
    .timeoutrst(timeoutrst_elink_tra)
    );
initial
  begin
    fifo_data_sop =  1'b0;
    fifo_data_eop =  1'b0;
    fifo_data_packet =  1'b0;
    spi_power_reg =  1'b0;
    spi_mon_reg =  1'b0;
    spi_can_reg =  1'b0;
    can_id_reg =  1'b0;
    time_limit_trim =  32'd1000000;
  end
assign can_id =  can_id_reg;
assign spi_mon_id =  spi_mon_reg;
assign spi_power =  spi_power_reg;
assign spi_can_id =  spi_can_reg;

always @( * )
  begin
    if (cs_eread&&data_tra_10bitin=={2'b10,Kchar_sop})
      begin
        fifo_data_sop =  1'b1;
        fifo_data_eop =  1'b0;
        fifo_data_packet =  1'b0;
        can_id_reg =  1'b0;
        spi_mon_reg =  1'b0;
        spi_power_reg =  1'b0;
        spi_can_reg =  1'b0;
      end
    else
      if (cs_eread&&data_tra_10bitin!={2'b10,Kchar_sop}&&data_tra_10bitin!={2'b01,Kchar_eop}&&data_tra_10bitin[9:8] ==2'b00)
        begin
          fifo_data_sop =  1'b0;
          fifo_data_eop =  1'b0;
          fifo_data_packet =  1'b1;
          if (addr_read==5'h02)
            case (data_tra_10bitin[7:0] )
              8'h20 : 
                begin
                  can_id_reg =  1'b0;
                  spi_power_reg =  1'b0;
                  if (dbg_spi)
                    begin
                      spi_can_reg =  1'b1;
                      spi_mon_reg =  1'b0;
                    end
                  else
                    begin
                      spi_mon_reg =  1'b1;
                      spi_can_reg =  1'b0;
                    end
                end
              8'h90 : 
                begin
                  spi_mon_reg =  1'b0;
                  spi_can_reg =  1'b0;
                  can_id_reg =  1'b0;
                  spi_power_reg =  1'b1;
                end
              8'h00 : 
                begin
                  can_id_reg =  1'b1;
                  spi_mon_reg =  1'b0;
                  spi_power_reg =  1'b1;
                  spi_can_reg =  1'b0;
                end
              default : 
                begin
                  can_id_reg =  1'b1;
                  spi_mon_reg =  1'b0;
                  spi_power_reg =  1'b0;
                  spi_can_reg =  1'b0;
                end
            endcase
          else
            begin
              can_id_reg =  1'b0;
              spi_mon_reg =  1'b0;
              spi_power_reg =  1'b0;
              spi_can_reg =  1'b0;
            end
        end
      else
        if (cs_eread&&data_tra_10bitin=={2'b01,Kchar_eop})
          begin
            fifo_data_sop =  1'b0;
            fifo_data_eop =  1'b1;
            can_id_reg =  1'b0;
            spi_mon_reg =  1'b0;
            spi_can_reg =  1'b0;
            spi_power_reg =  1'b0;
            fifo_data_packet =  1'b0;
          end
        else
          begin
            can_id_reg =  1'b0;
            spi_can_reg =  1'b0;
            spi_mon_reg =  1'b0;
            spi_power_reg =  1'b0;
            fifo_data_sop =  1'b0;
            fifo_data_eop =  1'b0;
            fifo_data_packet =  1'b0;
          end
  end
assign rx_data_rdy =  !rx_fifo_empty;
assign tx_data_rdy =  !tx_fifo_empty;
assign spi_mode =  spi_tra_mode||spi_rec_mode||spi_read_mode||spi_can_mode;
assign spi_can_irq =  (addr_write==5'h02&&data_rec_can_10bitout=={2'b00,8'h20});
assign data_rec_spi_10bitout_Active =  (spi_can_mode==1||spi_can_irq==1) ? data_rec_spi_can_10bitout : data_rec_spi_10bitout;
assign spi_rec_signal =  spi_rec_mode==1||spi_can_mode==1||spi_can_irq==1;
initial
  begin
    Kchar_comma =  8'b10111100;
    Kchar_eop =  8'b11011100;
    Kchar_sop =  8'b00111100;
    COMMAn =  10'b1100000101;
    COMMAp =  10'b0011111010;
  end
endmodule

