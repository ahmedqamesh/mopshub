/****************************************************************************************************
 *                          ! THIS FILE WAS AUTO-GENERATED BY TMRG TOOL !                           *
 *                                   ! DO NOT EDIT IT MANUALLY !                                    *
 *                                                                                                  *
 * file    : ./output/elink_data_gen_sm_fsmTMR.v                                                    *
 *                                                                                                  *
 * user    : lucas                                                                                  *
 * host    : DESKTOP-BFDSFP2                                                                        *
 * date    : 16/08/2022 12:58:17                                                                    *
 *                                                                                                  *
 * workdir : /mnt/c/Users/Lucas/Desktop/mopshub_triplication/mopshub_top_board_canakari_ftrim/hdl   *
 * cmd     : /mnt/c/Users/Lucas/Desktop/mopshub_triplication/tmrg-master/bin/tmrg -c tmrg.cfg -vvv  *
 * tmrg rev:                                                                                        *
 *                                                                                                  *
 * src file: elink_data_gen_sm_fsm.v                                                                *
 *           Git SHA           : File not in git repository!                                        *
 *           Modification time : 2022-08-11 10:33:14                                                *
 *           File Size         : 14499                                                              *
 *           MD5 hash          : 0172e99a9eab1936105bb75b82b41ca8                                   *
 *                                                                                                  *
 ****************************************************************************************************/

module elink_data_gen_SMTMR #(
  parameter  Kchar_eop  = 8'b11011100,
  parameter  Kchar_sop  = 8'b00111100,
  parameter  Kchar_comma  = 8'b10111100
)(
  input wire  clk ,
  input wire  rst ,
  output reg  irq_elink_traA ,
  output reg  irq_elink_traB ,
  output reg  irq_elink_traC ,
  output reg [3:0] state_oA ,
  output reg [3:0] state_oB ,
  output reg [3:0] state_oC ,
  input wire  start_read_elink ,
  output reg  end_read_elinkA ,
  output reg  end_read_elinkB ,
  output reg  end_read_elinkC ,
  input wire  cnt_done ,
  output reg  buffer_enA ,
  output reg  buffer_enB ,
  output reg  buffer_enC ,
  output reg [75:0] data_tra_inA ,
  output reg [75:0] data_tra_inB ,
  output reg [75:0] data_tra_inC ,
  output reg  rst_cntA ,
  output reg  rst_cntB ,
  output reg  rst_cntC ,
  output reg  counter_gen_enA ,
  output reg  counter_gen_enB ,
  output reg  counter_gen_enC ,
  input wire  test_can_core ,
  output reg [9:0] data_10bit_in_dbgA ,
  output reg [9:0] data_10bit_in_dbgB ,
  output reg [9:0] data_10bit_in_dbgC ,
  output reg  rdy_dbgA ,
  output reg  rdy_dbgB ,
  output reg  rdy_dbgC ,
  output reg  irq_elink_dbgA ,
  output reg  irq_elink_dbgB ,
  output reg  irq_elink_dbgC 
);
parameter ST_Reset =6'd0;
parameter ST_WAIT =6'd1;
parameter ST_Done_Wait =6'd2;
parameter ST_Loop_cnt =6'd3;
parameter ST_Rst_Cnt2 =6'd4;
parameter ST_counter_Wait1 =6'd5;
parameter ST_En_Buffer1 =6'd6;
parameter ST_End_Read1 =6'd7;
parameter ST_Bus_cnt2 =6'd8;
parameter ST_start_test =6'd9;
parameter ST_End_Read2 =6'd10;
parameter choose_test =6'd11;
parameter ST_Done_Wait1 =6'd12;
parameter s1 =6'd13;
parameter ST_SOP =6'd14;
parameter ST_EOP1 =6'd15;
parameter ST_Set_DATA1 =6'd16;
parameter ST_DATA1 =6'd17;
parameter ST_DATA3 =6'd18;
parameter ST_Set_DATA3 =6'd19;
parameter ST_Set_DATA2 =6'd20;
parameter ST_DATA2 =6'd21;
parameter ST_Set_DATA4 =6'd22;
parameter ST_Set_DATA5 =6'd23;
parameter ST_irq_sig =6'd24;
parameter ST_DATA4 =6'd25;
parameter ST_DATA5 =6'd26;
parameter ST_EOP =6'd27;
parameter ST_Set_DATA6 =6'd28;
parameter ST_SET_EOP =6'd29;
parameter ST_DATA8 =6'd30;
parameter ST_DATA6 =6'd31;
parameter ST_Set_DATA7 =6'd32;
parameter ST_DATA7 =6'd33;
parameter ST_Set_DATA8 =6'd34;
wire test_can_coreC;
wire test_can_coreB;
wire test_can_coreA;
wire start_read_elinkC;
wire start_read_elinkB;
wire start_read_elinkA;
wire rstC;
wire rstB;
wire rstA;
wire cnt_doneC;
wire cnt_doneB;
wire cnt_doneA;
wire clkC;
wire clkB;
wire clkA;
reg  [5:0] current_stateA ;
reg  [5:0] next_stateA ;
reg  [5:0] current_stateB ;
reg  [5:0] next_stateB ;
reg  [5:0] current_stateC ;
reg  [5:0] next_stateC ;
reg  [23:0] csm_timerA ;
reg  [23:0] csm_timerB ;
reg  [23:0] csm_timerC ;
reg  [23:0] csm_next_timerA ;
reg  [23:0] csm_next_timerB ;
reg  [23:0] csm_next_timerC ;
reg  csm_timeoutA ;
reg  csm_timeoutB ;
reg  csm_timeoutC ;
reg  csm_to_ST_WAITA ;
reg  csm_to_ST_WAITB ;
reg  csm_to_ST_WAITC ;
reg  csm_to_ST_Done_WaitA ;
reg  csm_to_ST_Done_WaitB ;
reg  csm_to_ST_Done_WaitC ;
reg  csm_to_ST_counter_Wait1A ;
reg  csm_to_ST_counter_Wait1B ;
reg  csm_to_ST_counter_Wait1C ;
reg  csm_to_ST_End_Read2A ;
reg  csm_to_ST_End_Read2B ;
reg  csm_to_ST_End_Read2C ;
reg  csm_to_ST_Done_Wait1A ;
reg  csm_to_ST_Done_Wait1B ;
reg  csm_to_ST_Done_Wait1C ;
reg  csm_to_ST_EOP1A ;
reg  csm_to_ST_EOP1B ;
reg  csm_to_ST_EOP1C ;
reg  csm_to_ST_DATA1A ;
reg  csm_to_ST_DATA1B ;
reg  csm_to_ST_DATA1C ;
reg  csm_to_ST_DATA3A ;
reg  csm_to_ST_DATA3B ;
reg  csm_to_ST_DATA3C ;
reg  csm_to_ST_DATA2A ;
reg  csm_to_ST_DATA2B ;
reg  csm_to_ST_DATA2C ;
reg  csm_to_ST_DATA4A ;
reg  csm_to_ST_DATA4B ;
reg  csm_to_ST_DATA4C ;
reg  csm_to_ST_DATA5A ;
reg  csm_to_ST_DATA5B ;
reg  csm_to_ST_DATA5C ;
reg  csm_to_ST_EOPA ;
reg  csm_to_ST_EOPB ;
reg  csm_to_ST_EOPC ;
reg  csm_to_ST_DATA8A ;
reg  csm_to_ST_DATA8B ;
reg  csm_to_ST_DATA8C ;
reg  csm_to_ST_DATA6A ;
reg  csm_to_ST_DATA6B ;
reg  csm_to_ST_DATA6C ;
reg  csm_to_ST_DATA7A ;
reg  csm_to_ST_DATA7B ;
reg  csm_to_ST_DATA7C ;

always @( cnt_doneA or csm_timeoutA or current_stateA or start_read_elinkA or test_can_coreA )
  begin : next_state_block_procA
    csm_to_ST_WAITA =  1'b0;
    csm_to_ST_Done_WaitA =  1'b0;
    csm_to_ST_counter_Wait1A =  1'b0;
    csm_to_ST_End_Read2A =  1'b0;
    csm_to_ST_Done_Wait1A =  1'b0;
    csm_to_ST_EOP1A =  1'b0;
    csm_to_ST_DATA1A =  1'b0;
    csm_to_ST_DATA3A =  1'b0;
    csm_to_ST_DATA2A =  1'b0;
    csm_to_ST_DATA4A =  1'b0;
    csm_to_ST_DATA5A =  1'b0;
    csm_to_ST_EOPA =  1'b0;
    csm_to_ST_DATA8A =  1'b0;
    csm_to_ST_DATA6A =  1'b0;
    csm_to_ST_DATA7A =  1'b0;
    case (current_stateA)
      ST_Reset : 
        begin
          next_stateA =  ST_WAIT;
          csm_to_ST_WAITA =  1'b1;
        end
      ST_WAIT : 
        begin
          if (csm_timeoutA)
            next_stateA =  choose_test;
          else
            next_stateA =  ST_WAIT;
        end
      ST_Done_Wait : 
        begin
          if (csm_timeoutA)
            next_stateA =  s1;
          else
            next_stateA =  ST_Done_Wait;
        end
      ST_Loop_cnt : 
        begin
          next_stateA =  ST_counter_Wait1;
          csm_to_ST_counter_Wait1A =  1'b1;
        end
      ST_Rst_Cnt2 : 
        begin
          next_stateA =  ST_Reset;
        end
      ST_counter_Wait1 : 
        begin
          if (csm_timeoutA)
            next_stateA =  ST_start_test;
          else
            next_stateA =  ST_counter_Wait1;
        end
      ST_En_Buffer1 : 
        begin
          next_stateA =  ST_End_Read1;
        end
      ST_End_Read1 : 
        begin
          next_stateA =  ST_End_Read2;
          csm_to_ST_End_Read2A =  1'b1;
        end
      ST_Bus_cnt2 : 
        begin
          next_stateA =  ST_En_Buffer1;
        end
      ST_start_test : 
        begin
          if (start_read_elinkA==1)
            next_stateA =  ST_Bus_cnt2;
          else
            next_stateA =  ST_start_test;
        end
      ST_End_Read2 : 
        begin
          next_stateA =  ST_Done_Wait;
          csm_to_ST_Done_WaitA =  1'b1;
        end
      choose_test : 
        begin
          if (test_can_coreA==1)
            next_stateA =  ST_start_test;
          else
            next_stateA =  ST_SOP;
        end
      ST_Done_Wait1 : 
        begin
          if (csm_timeoutA)
            next_stateA =  ST_Reset;
          else
            next_stateA =  ST_Done_Wait1;
        end
      s1 : 
        begin
          if (cnt_doneA==1)
            next_stateA =  ST_Rst_Cnt2;
          else
            next_stateA =  ST_Loop_cnt;
        end
      ST_SOP : 
        begin
          next_stateA =  ST_EOP1;
          csm_to_ST_EOP1A =  1'b1;
        end
      ST_EOP1 : 
        begin
          if (csm_timeoutA)
            next_stateA =  ST_Set_DATA1;
          else
            next_stateA =  ST_EOP1;
        end
      ST_Set_DATA1 : 
        begin
          next_stateA =  ST_DATA1;
          csm_to_ST_DATA1A =  1'b1;
        end
      ST_DATA1 : 
        begin
          if (csm_timeoutA)
            next_stateA =  ST_Set_DATA2;
          else
            next_stateA =  ST_DATA1;
        end
      ST_DATA3 : 
        begin
          if (csm_timeoutA)
            next_stateA =  ST_Set_DATA4;
          else
            next_stateA =  ST_DATA3;
        end
      ST_Set_DATA3 : 
        begin
          next_stateA =  ST_DATA3;
          csm_to_ST_DATA3A =  1'b1;
        end
      ST_Set_DATA2 : 
        begin
          next_stateA =  ST_DATA2;
          csm_to_ST_DATA2A =  1'b1;
        end
      ST_DATA2 : 
        begin
          if (csm_timeoutA)
            next_stateA =  ST_Set_DATA3;
          else
            next_stateA =  ST_DATA2;
        end
      ST_Set_DATA4 : 
        begin
          next_stateA =  ST_DATA4;
          csm_to_ST_DATA4A =  1'b1;
        end
      ST_Set_DATA5 : 
        begin
          next_stateA =  ST_DATA5;
          csm_to_ST_DATA5A =  1'b1;
        end
      ST_irq_sig : 
        begin
          next_stateA =  ST_Done_Wait1;
          csm_to_ST_Done_Wait1A =  1'b1;
        end
      ST_DATA4 : 
        begin
          if (csm_timeoutA)
            next_stateA =  ST_Set_DATA5;
          else
            next_stateA =  ST_DATA4;
        end
      ST_DATA5 : 
        begin
          if (csm_timeoutA)
            next_stateA =  ST_Set_DATA6;
          else
            next_stateA =  ST_DATA5;
        end
      ST_EOP : 
        begin
          if (csm_timeoutA)
            next_stateA =  ST_irq_sig;
          else
            next_stateA =  ST_EOP;
        end
      ST_Set_DATA6 : 
        begin
          next_stateA =  ST_DATA6;
          csm_to_ST_DATA6A =  1'b1;
        end
      ST_SET_EOP : 
        begin
          next_stateA =  ST_EOP;
          csm_to_ST_EOPA =  1'b1;
        end
      ST_DATA8 : 
        begin
          if (csm_timeoutA)
            next_stateA =  ST_SET_EOP;
          else
            next_stateA =  ST_DATA8;
        end
      ST_DATA6 : 
        begin
          if (csm_timeoutA)
            next_stateA =  ST_Set_DATA7;
          else
            next_stateA =  ST_DATA6;
        end
      ST_Set_DATA7 : 
        begin
          next_stateA =  ST_DATA7;
          csm_to_ST_DATA7A =  1'b1;
        end
      ST_DATA7 : 
        begin
          if (csm_timeoutA)
            next_stateA =  ST_Set_DATA8;
          else
            next_stateA =  ST_DATA7;
        end
      ST_Set_DATA8 : 
        begin
          next_stateA =  ST_DATA8;
          csm_to_ST_DATA8A =  1'b1;
        end
      default : next_stateA =  ST_Reset;
    endcase
  end

always @( cnt_doneB or csm_timeoutB or current_stateB or start_read_elinkB or test_can_coreB )
  begin : next_state_block_procB
    csm_to_ST_WAITB =  1'b0;
    csm_to_ST_Done_WaitB =  1'b0;
    csm_to_ST_counter_Wait1B =  1'b0;
    csm_to_ST_End_Read2B =  1'b0;
    csm_to_ST_Done_Wait1B =  1'b0;
    csm_to_ST_EOP1B =  1'b0;
    csm_to_ST_DATA1B =  1'b0;
    csm_to_ST_DATA3B =  1'b0;
    csm_to_ST_DATA2B =  1'b0;
    csm_to_ST_DATA4B =  1'b0;
    csm_to_ST_DATA5B =  1'b0;
    csm_to_ST_EOPB =  1'b0;
    csm_to_ST_DATA8B =  1'b0;
    csm_to_ST_DATA6B =  1'b0;
    csm_to_ST_DATA7B =  1'b0;
    case (current_stateB)
      ST_Reset : 
        begin
          next_stateB =  ST_WAIT;
          csm_to_ST_WAITB =  1'b1;
        end
      ST_WAIT : 
        begin
          if (csm_timeoutB)
            next_stateB =  choose_test;
          else
            next_stateB =  ST_WAIT;
        end
      ST_Done_Wait : 
        begin
          if (csm_timeoutB)
            next_stateB =  s1;
          else
            next_stateB =  ST_Done_Wait;
        end
      ST_Loop_cnt : 
        begin
          next_stateB =  ST_counter_Wait1;
          csm_to_ST_counter_Wait1B =  1'b1;
        end
      ST_Rst_Cnt2 : 
        begin
          next_stateB =  ST_Reset;
        end
      ST_counter_Wait1 : 
        begin
          if (csm_timeoutB)
            next_stateB =  ST_start_test;
          else
            next_stateB =  ST_counter_Wait1;
        end
      ST_En_Buffer1 : 
        begin
          next_stateB =  ST_End_Read1;
        end
      ST_End_Read1 : 
        begin
          next_stateB =  ST_End_Read2;
          csm_to_ST_End_Read2B =  1'b1;
        end
      ST_Bus_cnt2 : 
        begin
          next_stateB =  ST_En_Buffer1;
        end
      ST_start_test : 
        begin
          if (start_read_elinkB==1)
            next_stateB =  ST_Bus_cnt2;
          else
            next_stateB =  ST_start_test;
        end
      ST_End_Read2 : 
        begin
          next_stateB =  ST_Done_Wait;
          csm_to_ST_Done_WaitB =  1'b1;
        end
      choose_test : 
        begin
          if (test_can_coreB==1)
            next_stateB =  ST_start_test;
          else
            next_stateB =  ST_SOP;
        end
      ST_Done_Wait1 : 
        begin
          if (csm_timeoutB)
            next_stateB =  ST_Reset;
          else
            next_stateB =  ST_Done_Wait1;
        end
      s1 : 
        begin
          if (cnt_doneB==1)
            next_stateB =  ST_Rst_Cnt2;
          else
            next_stateB =  ST_Loop_cnt;
        end
      ST_SOP : 
        begin
          next_stateB =  ST_EOP1;
          csm_to_ST_EOP1B =  1'b1;
        end
      ST_EOP1 : 
        begin
          if (csm_timeoutB)
            next_stateB =  ST_Set_DATA1;
          else
            next_stateB =  ST_EOP1;
        end
      ST_Set_DATA1 : 
        begin
          next_stateB =  ST_DATA1;
          csm_to_ST_DATA1B =  1'b1;
        end
      ST_DATA1 : 
        begin
          if (csm_timeoutB)
            next_stateB =  ST_Set_DATA2;
          else
            next_stateB =  ST_DATA1;
        end
      ST_DATA3 : 
        begin
          if (csm_timeoutB)
            next_stateB =  ST_Set_DATA4;
          else
            next_stateB =  ST_DATA3;
        end
      ST_Set_DATA3 : 
        begin
          next_stateB =  ST_DATA3;
          csm_to_ST_DATA3B =  1'b1;
        end
      ST_Set_DATA2 : 
        begin
          next_stateB =  ST_DATA2;
          csm_to_ST_DATA2B =  1'b1;
        end
      ST_DATA2 : 
        begin
          if (csm_timeoutB)
            next_stateB =  ST_Set_DATA3;
          else
            next_stateB =  ST_DATA2;
        end
      ST_Set_DATA4 : 
        begin
          next_stateB =  ST_DATA4;
          csm_to_ST_DATA4B =  1'b1;
        end
      ST_Set_DATA5 : 
        begin
          next_stateB =  ST_DATA5;
          csm_to_ST_DATA5B =  1'b1;
        end
      ST_irq_sig : 
        begin
          next_stateB =  ST_Done_Wait1;
          csm_to_ST_Done_Wait1B =  1'b1;
        end
      ST_DATA4 : 
        begin
          if (csm_timeoutB)
            next_stateB =  ST_Set_DATA5;
          else
            next_stateB =  ST_DATA4;
        end
      ST_DATA5 : 
        begin
          if (csm_timeoutB)
            next_stateB =  ST_Set_DATA6;
          else
            next_stateB =  ST_DATA5;
        end
      ST_EOP : 
        begin
          if (csm_timeoutB)
            next_stateB =  ST_irq_sig;
          else
            next_stateB =  ST_EOP;
        end
      ST_Set_DATA6 : 
        begin
          next_stateB =  ST_DATA6;
          csm_to_ST_DATA6B =  1'b1;
        end
      ST_SET_EOP : 
        begin
          next_stateB =  ST_EOP;
          csm_to_ST_EOPB =  1'b1;
        end
      ST_DATA8 : 
        begin
          if (csm_timeoutB)
            next_stateB =  ST_SET_EOP;
          else
            next_stateB =  ST_DATA8;
        end
      ST_DATA6 : 
        begin
          if (csm_timeoutB)
            next_stateB =  ST_Set_DATA7;
          else
            next_stateB =  ST_DATA6;
        end
      ST_Set_DATA7 : 
        begin
          next_stateB =  ST_DATA7;
          csm_to_ST_DATA7B =  1'b1;
        end
      ST_DATA7 : 
        begin
          if (csm_timeoutB)
            next_stateB =  ST_Set_DATA8;
          else
            next_stateB =  ST_DATA7;
        end
      ST_Set_DATA8 : 
        begin
          next_stateB =  ST_DATA8;
          csm_to_ST_DATA8B =  1'b1;
        end
      default : next_stateB =  ST_Reset;
    endcase
  end

always @( cnt_doneC or csm_timeoutC or current_stateC or start_read_elinkC or test_can_coreC )
  begin : next_state_block_procC
    csm_to_ST_WAITC =  1'b0;
    csm_to_ST_Done_WaitC =  1'b0;
    csm_to_ST_counter_Wait1C =  1'b0;
    csm_to_ST_End_Read2C =  1'b0;
    csm_to_ST_Done_Wait1C =  1'b0;
    csm_to_ST_EOP1C =  1'b0;
    csm_to_ST_DATA1C =  1'b0;
    csm_to_ST_DATA3C =  1'b0;
    csm_to_ST_DATA2C =  1'b0;
    csm_to_ST_DATA4C =  1'b0;
    csm_to_ST_DATA5C =  1'b0;
    csm_to_ST_EOPC =  1'b0;
    csm_to_ST_DATA8C =  1'b0;
    csm_to_ST_DATA6C =  1'b0;
    csm_to_ST_DATA7C =  1'b0;
    case (current_stateC)
      ST_Reset : 
        begin
          next_stateC =  ST_WAIT;
          csm_to_ST_WAITC =  1'b1;
        end
      ST_WAIT : 
        begin
          if (csm_timeoutC)
            next_stateC =  choose_test;
          else
            next_stateC =  ST_WAIT;
        end
      ST_Done_Wait : 
        begin
          if (csm_timeoutC)
            next_stateC =  s1;
          else
            next_stateC =  ST_Done_Wait;
        end
      ST_Loop_cnt : 
        begin
          next_stateC =  ST_counter_Wait1;
          csm_to_ST_counter_Wait1C =  1'b1;
        end
      ST_Rst_Cnt2 : 
        begin
          next_stateC =  ST_Reset;
        end
      ST_counter_Wait1 : 
        begin
          if (csm_timeoutC)
            next_stateC =  ST_start_test;
          else
            next_stateC =  ST_counter_Wait1;
        end
      ST_En_Buffer1 : 
        begin
          next_stateC =  ST_End_Read1;
        end
      ST_End_Read1 : 
        begin
          next_stateC =  ST_End_Read2;
          csm_to_ST_End_Read2C =  1'b1;
        end
      ST_Bus_cnt2 : 
        begin
          next_stateC =  ST_En_Buffer1;
        end
      ST_start_test : 
        begin
          if (start_read_elinkC==1)
            next_stateC =  ST_Bus_cnt2;
          else
            next_stateC =  ST_start_test;
        end
      ST_End_Read2 : 
        begin
          next_stateC =  ST_Done_Wait;
          csm_to_ST_Done_WaitC =  1'b1;
        end
      choose_test : 
        begin
          if (test_can_coreC==1)
            next_stateC =  ST_start_test;
          else
            next_stateC =  ST_SOP;
        end
      ST_Done_Wait1 : 
        begin
          if (csm_timeoutC)
            next_stateC =  ST_Reset;
          else
            next_stateC =  ST_Done_Wait1;
        end
      s1 : 
        begin
          if (cnt_doneC==1)
            next_stateC =  ST_Rst_Cnt2;
          else
            next_stateC =  ST_Loop_cnt;
        end
      ST_SOP : 
        begin
          next_stateC =  ST_EOP1;
          csm_to_ST_EOP1C =  1'b1;
        end
      ST_EOP1 : 
        begin
          if (csm_timeoutC)
            next_stateC =  ST_Set_DATA1;
          else
            next_stateC =  ST_EOP1;
        end
      ST_Set_DATA1 : 
        begin
          next_stateC =  ST_DATA1;
          csm_to_ST_DATA1C =  1'b1;
        end
      ST_DATA1 : 
        begin
          if (csm_timeoutC)
            next_stateC =  ST_Set_DATA2;
          else
            next_stateC =  ST_DATA1;
        end
      ST_DATA3 : 
        begin
          if (csm_timeoutC)
            next_stateC =  ST_Set_DATA4;
          else
            next_stateC =  ST_DATA3;
        end
      ST_Set_DATA3 : 
        begin
          next_stateC =  ST_DATA3;
          csm_to_ST_DATA3C =  1'b1;
        end
      ST_Set_DATA2 : 
        begin
          next_stateC =  ST_DATA2;
          csm_to_ST_DATA2C =  1'b1;
        end
      ST_DATA2 : 
        begin
          if (csm_timeoutC)
            next_stateC =  ST_Set_DATA3;
          else
            next_stateC =  ST_DATA2;
        end
      ST_Set_DATA4 : 
        begin
          next_stateC =  ST_DATA4;
          csm_to_ST_DATA4C =  1'b1;
        end
      ST_Set_DATA5 : 
        begin
          next_stateC =  ST_DATA5;
          csm_to_ST_DATA5C =  1'b1;
        end
      ST_irq_sig : 
        begin
          next_stateC =  ST_Done_Wait1;
          csm_to_ST_Done_Wait1C =  1'b1;
        end
      ST_DATA4 : 
        begin
          if (csm_timeoutC)
            next_stateC =  ST_Set_DATA5;
          else
            next_stateC =  ST_DATA4;
        end
      ST_DATA5 : 
        begin
          if (csm_timeoutC)
            next_stateC =  ST_Set_DATA6;
          else
            next_stateC =  ST_DATA5;
        end
      ST_EOP : 
        begin
          if (csm_timeoutC)
            next_stateC =  ST_irq_sig;
          else
            next_stateC =  ST_EOP;
        end
      ST_Set_DATA6 : 
        begin
          next_stateC =  ST_DATA6;
          csm_to_ST_DATA6C =  1'b1;
        end
      ST_SET_EOP : 
        begin
          next_stateC =  ST_EOP;
          csm_to_ST_EOPC =  1'b1;
        end
      ST_DATA8 : 
        begin
          if (csm_timeoutC)
            next_stateC =  ST_SET_EOP;
          else
            next_stateC =  ST_DATA8;
        end
      ST_DATA6 : 
        begin
          if (csm_timeoutC)
            next_stateC =  ST_Set_DATA7;
          else
            next_stateC =  ST_DATA6;
        end
      ST_Set_DATA7 : 
        begin
          next_stateC =  ST_DATA7;
          csm_to_ST_DATA7C =  1'b1;
        end
      ST_DATA7 : 
        begin
          if (csm_timeoutC)
            next_stateC =  ST_Set_DATA8;
          else
            next_stateC =  ST_DATA7;
        end
      ST_Set_DATA8 : 
        begin
          next_stateC =  ST_DATA8;
          csm_to_ST_DATA8C =  1'b1;
        end
      default : next_stateC =  ST_Reset;
    endcase
  end

always @( current_stateA )
  begin : output_block_procA
    irq_elink_traA =  0;
    state_oA =  0;
    end_read_elinkA =  0;
    buffer_enA =  0;
    data_tra_inA =  0;
    rst_cntA =  0;
    counter_gen_enA =  0;
    data_10bit_in_dbgA =  {2'b11,Kchar_comma};
    rdy_dbgA =  0;
    irq_elink_dbgA =  0;
    case (current_stateA)
      ST_Reset : 
        begin
          state_oA =  4'b000;
          irq_elink_traA =  0;
          buffer_enA =  0;
          end_read_elinkA =  0;
          rst_cntA =  0;
          irq_elink_dbgA =  1'b0;
          data_10bit_in_dbgA =  {2'b11,Kchar_comma};
        end
      ST_Loop_cnt : 
        begin
          state_oA =  4'b010;
          counter_gen_enA =  1;
        end
      ST_Rst_Cnt2 : 
        begin
          rst_cntA =  1;
        end
      ST_En_Buffer1 : 
        begin
          state_oA =  4'b011;
          buffer_enA =  1;
          data_tra_inA =  {5'h0C,7'h1,16'h4010,16'h2301,8'h0,8'h0,16'h0};
        end
      ST_End_Read1 : 
        begin
          state_oA =  4'b100;
          end_read_elinkA =  1;
        end
      ST_Bus_cnt2 : 
        begin
          state_oA =  4'b010;
          data_tra_inA =  {5'h0C,7'h1,16'h4010,16'h2301,8'h0,8'h0,16'h0};
        end
      ST_start_test : 
        begin
          state_oA =  4'b001;
          irq_elink_traA =  1;
          data_tra_inA =  {5'h0C,7'h1,16'h4010,16'h2301,8'h0,8'h0,16'h0};
        end
      ST_SOP : 
        begin
          data_10bit_in_dbgA =  {2'b10,Kchar_sop};
          rdy_dbgA =  1;
        end
      ST_EOP1 : 
        begin
          data_10bit_in_dbgA =  {2'b10,Kchar_sop};
        end
      ST_Set_DATA1 : 
        begin
          data_10bit_in_dbgA =  {2'b00,8'hDE};
          rdy_dbgA =  1;
        end
      ST_DATA1 : 
        begin
          data_10bit_in_dbgA =  {2'b00,8'hDE};
        end
      ST_DATA3 : 
        begin
          data_10bit_in_dbgA =  {2'b00,8'hBE};
        end
      ST_Set_DATA3 : 
        begin
          data_10bit_in_dbgA =  {2'b00,8'hBE};
          rdy_dbgA =  1;
        end
      ST_Set_DATA2 : 
        begin
          data_10bit_in_dbgA =  {2'b00,8'hAD};
          rdy_dbgA =  1;
        end
      ST_DATA2 : 
        begin
          data_10bit_in_dbgA =  {2'b00,8'hAD};
        end
      ST_Set_DATA4 : 
        begin
          data_10bit_in_dbgA =  {2'b00,8'hEF};
          rdy_dbgA =  1;
        end
      ST_Set_DATA5 : 
        begin
          data_10bit_in_dbgA =  {2'b00,8'hDE};
          rdy_dbgA =  1;
        end
      ST_irq_sig : 
        begin
          irq_elink_dbgA =  1'b1;
        end
      ST_DATA4 : 
        begin
          data_10bit_in_dbgA =  {2'b00,8'hEF};
        end
      ST_DATA5 : 
        begin
          data_10bit_in_dbgA =  {2'b00,8'hDE};
        end
      ST_EOP : 
        begin
          data_10bit_in_dbgA =  {2'b01,Kchar_eop};
        end
      ST_Set_DATA6 : 
        begin
          data_10bit_in_dbgA =  {2'b00,8'hAD};
          rdy_dbgA =  1;
        end
      ST_SET_EOP : 
        begin
          data_10bit_in_dbgA =  {2'b01,Kchar_eop};
          rdy_dbgA =  1;
        end
      ST_DATA8 : 
        begin
          data_10bit_in_dbgA =  {2'b00,8'h0};
        end
      ST_DATA6 : 
        begin
          data_10bit_in_dbgA =  {2'b00,8'hAD};
        end
      ST_Set_DATA7 : 
        begin
          data_10bit_in_dbgA =  {2'b00,8'hBE};
          rdy_dbgA =  1;
        end
      ST_DATA7 : 
        begin
          data_10bit_in_dbgA =  {2'b00,8'hBE};
        end
      ST_Set_DATA8 : 
        begin
          data_10bit_in_dbgA =  {2'b00,8'h0};
          rdy_dbgA =  1;
        end
    endcase
  end

always @( current_stateB )
  begin : output_block_procB
    irq_elink_traB =  0;
    state_oB =  0;
    end_read_elinkB =  0;
    buffer_enB =  0;
    data_tra_inB =  0;
    rst_cntB =  0;
    counter_gen_enB =  0;
    data_10bit_in_dbgB =  {2'b11,Kchar_comma};
    rdy_dbgB =  0;
    irq_elink_dbgB =  0;
    case (current_stateB)
      ST_Reset : 
        begin
          state_oB =  4'b000;
          irq_elink_traB =  0;
          buffer_enB =  0;
          end_read_elinkB =  0;
          rst_cntB =  0;
          irq_elink_dbgB =  1'b0;
          data_10bit_in_dbgB =  {2'b11,Kchar_comma};
        end
      ST_Loop_cnt : 
        begin
          state_oB =  4'b010;
          counter_gen_enB =  1;
        end
      ST_Rst_Cnt2 : 
        begin
          rst_cntB =  1;
        end
      ST_En_Buffer1 : 
        begin
          state_oB =  4'b011;
          buffer_enB =  1;
          data_tra_inB =  {5'h0C,7'h1,16'h4010,16'h2301,8'h0,8'h0,16'h0};
        end
      ST_End_Read1 : 
        begin
          state_oB =  4'b100;
          end_read_elinkB =  1;
        end
      ST_Bus_cnt2 : 
        begin
          state_oB =  4'b010;
          data_tra_inB =  {5'h0C,7'h1,16'h4010,16'h2301,8'h0,8'h0,16'h0};
        end
      ST_start_test : 
        begin
          state_oB =  4'b001;
          irq_elink_traB =  1;
          data_tra_inB =  {5'h0C,7'h1,16'h4010,16'h2301,8'h0,8'h0,16'h0};
        end
      ST_SOP : 
        begin
          data_10bit_in_dbgB =  {2'b10,Kchar_sop};
          rdy_dbgB =  1;
        end
      ST_EOP1 : 
        begin
          data_10bit_in_dbgB =  {2'b10,Kchar_sop};
        end
      ST_Set_DATA1 : 
        begin
          data_10bit_in_dbgB =  {2'b00,8'hDE};
          rdy_dbgB =  1;
        end
      ST_DATA1 : 
        begin
          data_10bit_in_dbgB =  {2'b00,8'hDE};
        end
      ST_DATA3 : 
        begin
          data_10bit_in_dbgB =  {2'b00,8'hBE};
        end
      ST_Set_DATA3 : 
        begin
          data_10bit_in_dbgB =  {2'b00,8'hBE};
          rdy_dbgB =  1;
        end
      ST_Set_DATA2 : 
        begin
          data_10bit_in_dbgB =  {2'b00,8'hAD};
          rdy_dbgB =  1;
        end
      ST_DATA2 : 
        begin
          data_10bit_in_dbgB =  {2'b00,8'hAD};
        end
      ST_Set_DATA4 : 
        begin
          data_10bit_in_dbgB =  {2'b00,8'hEF};
          rdy_dbgB =  1;
        end
      ST_Set_DATA5 : 
        begin
          data_10bit_in_dbgB =  {2'b00,8'hDE};
          rdy_dbgB =  1;
        end
      ST_irq_sig : 
        begin
          irq_elink_dbgB =  1'b1;
        end
      ST_DATA4 : 
        begin
          data_10bit_in_dbgB =  {2'b00,8'hEF};
        end
      ST_DATA5 : 
        begin
          data_10bit_in_dbgB =  {2'b00,8'hDE};
        end
      ST_EOP : 
        begin
          data_10bit_in_dbgB =  {2'b01,Kchar_eop};
        end
      ST_Set_DATA6 : 
        begin
          data_10bit_in_dbgB =  {2'b00,8'hAD};
          rdy_dbgB =  1;
        end
      ST_SET_EOP : 
        begin
          data_10bit_in_dbgB =  {2'b01,Kchar_eop};
          rdy_dbgB =  1;
        end
      ST_DATA8 : 
        begin
          data_10bit_in_dbgB =  {2'b00,8'h0};
        end
      ST_DATA6 : 
        begin
          data_10bit_in_dbgB =  {2'b00,8'hAD};
        end
      ST_Set_DATA7 : 
        begin
          data_10bit_in_dbgB =  {2'b00,8'hBE};
          rdy_dbgB =  1;
        end
      ST_DATA7 : 
        begin
          data_10bit_in_dbgB =  {2'b00,8'hBE};
        end
      ST_Set_DATA8 : 
        begin
          data_10bit_in_dbgB =  {2'b00,8'h0};
          rdy_dbgB =  1;
        end
    endcase
  end

always @( current_stateC )
  begin : output_block_procC
    irq_elink_traC =  0;
    state_oC =  0;
    end_read_elinkC =  0;
    buffer_enC =  0;
    data_tra_inC =  0;
    rst_cntC =  0;
    counter_gen_enC =  0;
    data_10bit_in_dbgC =  {2'b11,Kchar_comma};
    rdy_dbgC =  0;
    irq_elink_dbgC =  0;
    case (current_stateC)
      ST_Reset : 
        begin
          state_oC =  4'b000;
          irq_elink_traC =  0;
          buffer_enC =  0;
          end_read_elinkC =  0;
          rst_cntC =  0;
          irq_elink_dbgC =  1'b0;
          data_10bit_in_dbgC =  {2'b11,Kchar_comma};
        end
      ST_Loop_cnt : 
        begin
          state_oC =  4'b010;
          counter_gen_enC =  1;
        end
      ST_Rst_Cnt2 : 
        begin
          rst_cntC =  1;
        end
      ST_En_Buffer1 : 
        begin
          state_oC =  4'b011;
          buffer_enC =  1;
          data_tra_inC =  {5'h0C,7'h1,16'h4010,16'h2301,8'h0,8'h0,16'h0};
        end
      ST_End_Read1 : 
        begin
          state_oC =  4'b100;
          end_read_elinkC =  1;
        end
      ST_Bus_cnt2 : 
        begin
          state_oC =  4'b010;
          data_tra_inC =  {5'h0C,7'h1,16'h4010,16'h2301,8'h0,8'h0,16'h0};
        end
      ST_start_test : 
        begin
          state_oC =  4'b001;
          irq_elink_traC =  1;
          data_tra_inC =  {5'h0C,7'h1,16'h4010,16'h2301,8'h0,8'h0,16'h0};
        end
      ST_SOP : 
        begin
          data_10bit_in_dbgC =  {2'b10,Kchar_sop};
          rdy_dbgC =  1;
        end
      ST_EOP1 : 
        begin
          data_10bit_in_dbgC =  {2'b10,Kchar_sop};
        end
      ST_Set_DATA1 : 
        begin
          data_10bit_in_dbgC =  {2'b00,8'hDE};
          rdy_dbgC =  1;
        end
      ST_DATA1 : 
        begin
          data_10bit_in_dbgC =  {2'b00,8'hDE};
        end
      ST_DATA3 : 
        begin
          data_10bit_in_dbgC =  {2'b00,8'hBE};
        end
      ST_Set_DATA3 : 
        begin
          data_10bit_in_dbgC =  {2'b00,8'hBE};
          rdy_dbgC =  1;
        end
      ST_Set_DATA2 : 
        begin
          data_10bit_in_dbgC =  {2'b00,8'hAD};
          rdy_dbgC =  1;
        end
      ST_DATA2 : 
        begin
          data_10bit_in_dbgC =  {2'b00,8'hAD};
        end
      ST_Set_DATA4 : 
        begin
          data_10bit_in_dbgC =  {2'b00,8'hEF};
          rdy_dbgC =  1;
        end
      ST_Set_DATA5 : 
        begin
          data_10bit_in_dbgC =  {2'b00,8'hDE};
          rdy_dbgC =  1;
        end
      ST_irq_sig : 
        begin
          irq_elink_dbgC =  1'b1;
        end
      ST_DATA4 : 
        begin
          data_10bit_in_dbgC =  {2'b00,8'hEF};
        end
      ST_DATA5 : 
        begin
          data_10bit_in_dbgC =  {2'b00,8'hDE};
        end
      ST_EOP : 
        begin
          data_10bit_in_dbgC =  {2'b01,Kchar_eop};
        end
      ST_Set_DATA6 : 
        begin
          data_10bit_in_dbgC =  {2'b00,8'hAD};
          rdy_dbgC =  1;
        end
      ST_SET_EOP : 
        begin
          data_10bit_in_dbgC =  {2'b01,Kchar_eop};
          rdy_dbgC =  1;
        end
      ST_DATA8 : 
        begin
          data_10bit_in_dbgC =  {2'b00,8'h0};
        end
      ST_DATA6 : 
        begin
          data_10bit_in_dbgC =  {2'b00,8'hAD};
        end
      ST_Set_DATA7 : 
        begin
          data_10bit_in_dbgC =  {2'b00,8'hBE};
          rdy_dbgC =  1;
        end
      ST_DATA7 : 
        begin
          data_10bit_in_dbgC =  {2'b00,8'hBE};
        end
      ST_Set_DATA8 : 
        begin
          data_10bit_in_dbgC =  {2'b00,8'h0};
          rdy_dbgC =  1;
        end
    endcase
  end

always @( posedge clkA )
  begin : clocked_block_procA
    if (!rstA)
      begin
        current_stateA <= ST_Reset;
        csm_timerA <= 24'd0;
      end
    else
      begin
        current_stateA <= next_stateA;
        csm_timerA <= csm_next_timerA;
      end
  end

always @( posedge clkB )
  begin : clocked_block_procB
    if (!rstB)
      begin
        current_stateB <= ST_Reset;
        csm_timerB <= 24'd0;
      end
    else
      begin
        current_stateB <= next_stateB;
        csm_timerB <= csm_next_timerB;
      end
  end

always @( posedge clkC )
  begin : clocked_block_procC
    if (!rstC)
      begin
        current_stateC <= ST_Reset;
        csm_timerC <= 24'd0;
      end
    else
      begin
        current_stateC <= next_stateC;
        csm_timerC <= csm_next_timerC;
      end
  end

always @( csm_timerA or csm_to_ST_WAITA or csm_to_ST_Done_WaitA or csm_to_ST_counter_Wait1A or csm_to_ST_End_Read2A or csm_to_ST_Done_Wait1A or csm_to_ST_EOP1A or csm_to_ST_DATA1A or csm_to_ST_DATA3A or csm_to_ST_DATA2A or csm_to_ST_DATA4A or csm_to_ST_DATA5A or csm_to_ST_EOPA or csm_to_ST_DATA8A or csm_to_ST_DATA6A or csm_to_ST_DATA7A )
  begin : csm_wait_block_procA
    csm_timeoutA =  (csm_timerA==24'd0);
    if (csm_to_ST_WAITA==1'b1)
      begin
        csm_next_timerA =  24'd9999999;
      end
    else
      if (csm_to_ST_Done_WaitA==1'b1)
        begin
          csm_next_timerA =  24'd9999999;
        end
      else
        if (csm_to_ST_counter_Wait1A==1'b1)
          begin
            csm_next_timerA =  24'd1999;
          end
        else
          if (csm_to_ST_End_Read2A==1'b1)
            begin
              csm_next_timerA =  24'd9999999;
            end
          else
            if (csm_to_ST_Done_Wait1A==1'b1)
              begin
                csm_next_timerA =  24'd9999999;
              end
            else
              if (csm_to_ST_EOP1A==1'b1)
                begin
                  csm_next_timerA =  24'd4;
                end
              else
                if (csm_to_ST_DATA1A==1'b1)
                  begin
                    csm_next_timerA =  24'd4;
                  end
                else
                  if (csm_to_ST_DATA3A==1'b1)
                    begin
                      csm_next_timerA =  24'd4;
                    end
                  else
                    if (csm_to_ST_DATA2A==1'b1)
                      begin
                        csm_next_timerA =  24'd4;
                      end
                    else
                      if (csm_to_ST_DATA4A==1'b1)
                        begin
                          csm_next_timerA =  24'd4;
                        end
                      else
                        if (csm_to_ST_DATA5A==1'b1)
                          begin
                            csm_next_timerA =  24'd4;
                          end
                        else
                          if (csm_to_ST_EOPA==1'b1)
                            begin
                              csm_next_timerA =  24'd4;
                            end
                          else
                            if (csm_to_ST_DATA8A==1'b1)
                              begin
                                csm_next_timerA =  24'd4;
                              end
                            else
                              if (csm_to_ST_DATA6A==1'b1)
                                begin
                                  csm_next_timerA =  24'd4;
                                end
                              else
                                if (csm_to_ST_DATA7A==1'b1)
                                  begin
                                    csm_next_timerA =  24'd4;
                                  end
                                else
                                  begin
                                    csm_next_timerA =  (csm_timeoutA) ? 24'd0 : (csm_timerA-24'd1);
                                  end
  end

always @( csm_timerB or csm_to_ST_WAITB or csm_to_ST_Done_WaitB or csm_to_ST_counter_Wait1B or csm_to_ST_End_Read2B or csm_to_ST_Done_Wait1B or csm_to_ST_EOP1B or csm_to_ST_DATA1B or csm_to_ST_DATA3B or csm_to_ST_DATA2B or csm_to_ST_DATA4B or csm_to_ST_DATA5B or csm_to_ST_EOPB or csm_to_ST_DATA8B or csm_to_ST_DATA6B or csm_to_ST_DATA7B )
  begin : csm_wait_block_procB
    csm_timeoutB =  (csm_timerB==24'd0);
    if (csm_to_ST_WAITB==1'b1)
      begin
        csm_next_timerB =  24'd9999999;
      end
    else
      if (csm_to_ST_Done_WaitB==1'b1)
        begin
          csm_next_timerB =  24'd9999999;
        end
      else
        if (csm_to_ST_counter_Wait1B==1'b1)
          begin
            csm_next_timerB =  24'd1999;
          end
        else
          if (csm_to_ST_End_Read2B==1'b1)
            begin
              csm_next_timerB =  24'd9999999;
            end
          else
            if (csm_to_ST_Done_Wait1B==1'b1)
              begin
                csm_next_timerB =  24'd9999999;
              end
            else
              if (csm_to_ST_EOP1B==1'b1)
                begin
                  csm_next_timerB =  24'd4;
                end
              else
                if (csm_to_ST_DATA1B==1'b1)
                  begin
                    csm_next_timerB =  24'd4;
                  end
                else
                  if (csm_to_ST_DATA3B==1'b1)
                    begin
                      csm_next_timerB =  24'd4;
                    end
                  else
                    if (csm_to_ST_DATA2B==1'b1)
                      begin
                        csm_next_timerB =  24'd4;
                      end
                    else
                      if (csm_to_ST_DATA4B==1'b1)
                        begin
                          csm_next_timerB =  24'd4;
                        end
                      else
                        if (csm_to_ST_DATA5B==1'b1)
                          begin
                            csm_next_timerB =  24'd4;
                          end
                        else
                          if (csm_to_ST_EOPB==1'b1)
                            begin
                              csm_next_timerB =  24'd4;
                            end
                          else
                            if (csm_to_ST_DATA8B==1'b1)
                              begin
                                csm_next_timerB =  24'd4;
                              end
                            else
                              if (csm_to_ST_DATA6B==1'b1)
                                begin
                                  csm_next_timerB =  24'd4;
                                end
                              else
                                if (csm_to_ST_DATA7B==1'b1)
                                  begin
                                    csm_next_timerB =  24'd4;
                                  end
                                else
                                  begin
                                    csm_next_timerB =  (csm_timeoutB) ? 24'd0 : (csm_timerB-24'd1);
                                  end
  end

always @( csm_timerC or csm_to_ST_WAITC or csm_to_ST_Done_WaitC or csm_to_ST_counter_Wait1C or csm_to_ST_End_Read2C or csm_to_ST_Done_Wait1C or csm_to_ST_EOP1C or csm_to_ST_DATA1C or csm_to_ST_DATA3C or csm_to_ST_DATA2C or csm_to_ST_DATA4C or csm_to_ST_DATA5C or csm_to_ST_EOPC or csm_to_ST_DATA8C or csm_to_ST_DATA6C or csm_to_ST_DATA7C )
  begin : csm_wait_block_procC
    csm_timeoutC =  (csm_timerC==24'd0);
    if (csm_to_ST_WAITC==1'b1)
      begin
        csm_next_timerC =  24'd9999999;
      end
    else
      if (csm_to_ST_Done_WaitC==1'b1)
        begin
          csm_next_timerC =  24'd9999999;
        end
      else
        if (csm_to_ST_counter_Wait1C==1'b1)
          begin
            csm_next_timerC =  24'd1999;
          end
        else
          if (csm_to_ST_End_Read2C==1'b1)
            begin
              csm_next_timerC =  24'd9999999;
            end
          else
            if (csm_to_ST_Done_Wait1C==1'b1)
              begin
                csm_next_timerC =  24'd9999999;
              end
            else
              if (csm_to_ST_EOP1C==1'b1)
                begin
                  csm_next_timerC =  24'd4;
                end
              else
                if (csm_to_ST_DATA1C==1'b1)
                  begin
                    csm_next_timerC =  24'd4;
                  end
                else
                  if (csm_to_ST_DATA3C==1'b1)
                    begin
                      csm_next_timerC =  24'd4;
                    end
                  else
                    if (csm_to_ST_DATA2C==1'b1)
                      begin
                        csm_next_timerC =  24'd4;
                      end
                    else
                      if (csm_to_ST_DATA4C==1'b1)
                        begin
                          csm_next_timerC =  24'd4;
                        end
                      else
                        if (csm_to_ST_DATA5C==1'b1)
                          begin
                            csm_next_timerC =  24'd4;
                          end
                        else
                          if (csm_to_ST_EOPC==1'b1)
                            begin
                              csm_next_timerC =  24'd4;
                            end
                          else
                            if (csm_to_ST_DATA8C==1'b1)
                              begin
                                csm_next_timerC =  24'd4;
                              end
                            else
                              if (csm_to_ST_DATA6C==1'b1)
                                begin
                                  csm_next_timerC =  24'd4;
                                end
                              else
                                if (csm_to_ST_DATA7C==1'b1)
                                  begin
                                    csm_next_timerC =  24'd4;
                                  end
                                else
                                  begin
                                    csm_next_timerC =  (csm_timeoutC) ? 24'd0 : (csm_timerC-24'd1);
                                  end
  end

fanout clkFanout (
    .in(clk),
    .outA(clkA),
    .outB(clkB),
    .outC(clkC)
    );

fanout cnt_doneFanout (
    .in(cnt_done),
    .outA(cnt_doneA),
    .outB(cnt_doneB),
    .outC(cnt_doneC)
    );

fanout rstFanout (
    .in(rst),
    .outA(rstA),
    .outB(rstB),
    .outC(rstC)
    );

fanout start_read_elinkFanout (
    .in(start_read_elink),
    .outA(start_read_elinkA),
    .outB(start_read_elinkB),
    .outC(start_read_elinkC)
    );

fanout test_can_coreFanout (
    .in(test_can_core),
    .outA(test_can_coreA),
    .outB(test_can_coreB),
    .outC(test_can_coreC)
    );
endmodule

