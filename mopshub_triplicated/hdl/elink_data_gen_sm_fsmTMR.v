/****************************************************************************************************
 *                          ! THIS FILE WAS AUTO-GENERATED BY TMRG TOOL !                           *
 *                                   ! DO NOT EDIT IT MANUALLY !                                    *
 *                                                                                                  *
 * file    : ./output/elink_data_gen_sm_fsmTMR.v                                                    *
 *                                                                                                  *
 * user    : lucas                                                                                  *
 * host    : DESKTOP-BFDSFP2                                                                        *
 * date    : 05/12/2022 13:28:08                                                                    *
 *                                                                                                  *
 * workdir : /mnt/c/Users/Lucas/Documents/GitHub/mopshub_triplicated/triplicated/mopshub_top_board_16/hdl *
 * cmd     : /mnt/c/Users/Lucas/Documents/GitHub/mopshub_triplicated/tmrg-master/bin/tmrg -vv -c    *
 *           tmrg.cfg                                                                               *
 * tmrg rev: b25f042058e4e97751df2a0933c24aeadd5a78a5                                               *
 *                                                                                                  *
 * src file: elink_data_gen_sm_fsm.v                                                                *
 *           Git SHA           : b25f042058e4e97751df2a0933c24aeadd5a78a5 (?? elink_data_gen_sm_fsm.v) *
 *           Modification time : 2022-12-04 15:57:22.740461                                         *
 *           File Size         : 17742                                                              *
 *           MD5 hash          : 66af16824105e548e1297dfcb12b3d90                                   *
 *                                                                                                  *
 ****************************************************************************************************/

`resetall 
`timescale  1ns/10ps
module elink_data_gen_SMTMR #(
  parameter  Kchar_eop  = 8'b11011100,
  parameter  Kchar_sop  = 8'b00111100,
  parameter  Kchar_comma  = 8'b10111100
)(
  input wire  clk ,
  input wire  rst ,
  output reg  irq_elink_tra ,
  output reg [3:0] state_o ,
  input wire  start_read_elink ,
  output reg  end_read_elink ,
  input wire  cnt_done ,
  output reg  buffer_en ,
  output reg [75:0] data_tra_in ,
  output reg  rst_cnt ,
  output reg  counter_gen_en ,
  input wire  test_can_core ,
  input wire  test_uart_core ,
  input wire  tx_uart_ready ,
  output reg [9:0] data_10bit_in_dbg ,
  output reg  rdy_dbg ,
  output reg  irq_elink_dbg ,
  output reg  tx_uart_valid ,
  output reg [31:0] tx_uart_data ,
  output reg [3:0] tx_uart_addr ,
  input wire  rx_uart_valid ,
  output reg  rx_uart_addr_valid ,
  output reg  rx_uart_ready ,
  input wire  rx_uart_addr_ready ,
  output reg [3:0] rx_uart_addr 
);
parameter ST_Reset =6'd0;
parameter ST_WAIT =6'd1;
parameter ST_Done_Wait =6'd2;
parameter ST_Loop_cnt =6'd3;
parameter ST_Rst_Cnt2 =6'd4;
parameter ST_counter_Wait1 =6'd5;
parameter ST_En_Buffer1 =6'd6;
parameter ST_End_Read1 =6'd7;
parameter ST_Bus_cnt2 =6'd8;
parameter ST_start_test =6'd9;
parameter ST_End_Read2 =6'd10;
parameter choose_test =6'd11;
parameter ST_Done_Wait1 =6'd12;
parameter s1 =6'd13;
parameter ST_SOP =6'd14;
parameter ST_EOP1 =6'd15;
parameter ST_Set_DATA1 =6'd16;
parameter ST_DATA1 =6'd17;
parameter ST_DATA3 =6'd18;
parameter ST_Set_DATA3 =6'd19;
parameter ST_Set_DATA2 =6'd20;
parameter ST_DATA2 =6'd21;
parameter ST_Set_DATA4 =6'd22;
parameter ST_Set_DATA5 =6'd23;
parameter ST_irq_sig =6'd24;
parameter ST_DATA4 =6'd25;
parameter ST_DATA5 =6'd26;
parameter ST_EOP =6'd27;
parameter ST_Set_DATA6 =6'd28;
parameter ST_SET_EOP =6'd29;
parameter ST_DATA8 =6'd30;
parameter ST_DATA6 =6'd31;
parameter ST_Set_DATA7 =6'd32;
parameter ST_DATA7 =6'd33;
parameter ST_Set_DATA8 =6'd34;
parameter Send_tx0_0 =6'd35;
parameter Enable_rx =6'd36;
parameter Ack_uart_rx =6'd37;
parameter wait_slave =6'd38;
parameter Send_tx0_1 =6'd39;
parameter Send_tx0_2 =6'd40;
parameter Send_tx0_3 =6'd41;
reg  [5:0] current_state ;
reg  [5:0] next_state ;
reg  [23:0] csm_timer ;
reg  [23:0] csm_next_timer ;
reg  csm_timeout ;
reg  csm_to_ST_WAIT ;
reg  csm_to_ST_Done_Wait ;
reg  csm_to_ST_counter_Wait1 ;
reg  csm_to_ST_End_Read2 ;
reg  csm_to_ST_Done_Wait1 ;
reg  csm_to_ST_EOP1 ;
reg  csm_to_ST_DATA1 ;
reg  csm_to_ST_DATA3 ;
reg  csm_to_ST_DATA2 ;
reg  csm_to_ST_DATA4 ;
reg  csm_to_ST_DATA5 ;
reg  csm_to_ST_EOP ;
reg  csm_to_ST_DATA8 ;
reg  csm_to_ST_DATA6 ;
reg  csm_to_ST_DATA7 ;

always @( cnt_done or csm_timeout or current_state or rx_uart_addr_ready or rx_uart_valid or start_read_elink or test_can_core or test_uart_core or tx_uart_ready )
  begin : next_state_block_proc
    csm_to_ST_WAIT =  1'b0;
    csm_to_ST_Done_Wait =  1'b0;
    csm_to_ST_counter_Wait1 =  1'b0;
    csm_to_ST_End_Read2 =  1'b0;
    csm_to_ST_Done_Wait1 =  1'b0;
    csm_to_ST_EOP1 =  1'b0;
    csm_to_ST_DATA1 =  1'b0;
    csm_to_ST_DATA3 =  1'b0;
    csm_to_ST_DATA2 =  1'b0;
    csm_to_ST_DATA4 =  1'b0;
    csm_to_ST_DATA5 =  1'b0;
    csm_to_ST_EOP =  1'b0;
    csm_to_ST_DATA8 =  1'b0;
    csm_to_ST_DATA6 =  1'b0;
    csm_to_ST_DATA7 =  1'b0;
    case (current_state)
      ST_Reset : 
        begin
          next_state =  ST_WAIT;
          csm_to_ST_WAIT =  1'b1;
        end
      ST_WAIT : 
        begin
          if (csm_timeout)
            next_state =  choose_test;
          else
            next_state =  ST_WAIT;
        end
      ST_Done_Wait : 
        begin
          if (csm_timeout)
            next_state =  s1;
          else
            next_state =  ST_Done_Wait;
        end
      ST_Loop_cnt : 
        begin
          next_state =  ST_counter_Wait1;
          csm_to_ST_counter_Wait1 =  1'b1;
        end
      ST_Rst_Cnt2 : 
        begin
          next_state =  ST_Reset;
        end
      ST_counter_Wait1 : 
        begin
          if (csm_timeout)
            next_state =  ST_start_test;
          else
            next_state =  ST_counter_Wait1;
        end
      ST_En_Buffer1 : 
        begin
          next_state =  ST_End_Read1;
        end
      ST_End_Read1 : 
        begin
          next_state =  ST_End_Read2;
          csm_to_ST_End_Read2 =  1'b1;
        end
      ST_Bus_cnt2 : 
        begin
          next_state =  ST_En_Buffer1;
        end
      ST_start_test : 
        begin
          if (start_read_elink==1)
            next_state =  ST_Bus_cnt2;
          else
            next_state =  ST_start_test;
        end
      ST_End_Read2 : 
        begin
          next_state =  ST_Done_Wait;
          csm_to_ST_Done_Wait =  1'b1;
        end
      choose_test : 
        begin
          if (test_can_core==1)
            next_state =  ST_start_test;
          else
            if (test_uart_core==1)
              next_state =  Send_tx0_0;
            else
              next_state =  ST_SOP;
        end
      ST_Done_Wait1 : 
        begin
          if (csm_timeout)
            next_state =  ST_Reset;
          else
            next_state =  ST_Done_Wait1;
        end
      s1 : 
        begin
          if (cnt_done==1)
            next_state =  ST_Rst_Cnt2;
          else
            next_state =  ST_Loop_cnt;
        end
      ST_SOP : 
        begin
          next_state =  ST_EOP1;
          csm_to_ST_EOP1 =  1'b1;
        end
      ST_EOP1 : 
        begin
          if (csm_timeout)
            next_state =  ST_Set_DATA1;
          else
            next_state =  ST_EOP1;
        end
      ST_Set_DATA1 : 
        begin
          next_state =  ST_DATA1;
          csm_to_ST_DATA1 =  1'b1;
        end
      ST_DATA1 : 
        begin
          if (csm_timeout)
            next_state =  ST_Set_DATA2;
          else
            next_state =  ST_DATA1;
        end
      ST_DATA3 : 
        begin
          if (csm_timeout)
            next_state =  ST_Set_DATA4;
          else
            next_state =  ST_DATA3;
        end
      ST_Set_DATA3 : 
        begin
          next_state =  ST_DATA3;
          csm_to_ST_DATA3 =  1'b1;
        end
      ST_Set_DATA2 : 
        begin
          next_state =  ST_DATA2;
          csm_to_ST_DATA2 =  1'b1;
        end
      ST_DATA2 : 
        begin
          if (csm_timeout)
            next_state =  ST_Set_DATA3;
          else
            next_state =  ST_DATA2;
        end
      ST_Set_DATA4 : 
        begin
          next_state =  ST_DATA4;
          csm_to_ST_DATA4 =  1'b1;
        end
      ST_Set_DATA5 : 
        begin
          next_state =  ST_DATA5;
          csm_to_ST_DATA5 =  1'b1;
        end
      ST_irq_sig : 
        begin
          next_state =  ST_Done_Wait1;
          csm_to_ST_Done_Wait1 =  1'b1;
        end
      ST_DATA4 : 
        begin
          if (csm_timeout)
            next_state =  ST_Set_DATA5;
          else
            next_state =  ST_DATA4;
        end
      ST_DATA5 : 
        begin
          if (csm_timeout)
            next_state =  ST_Set_DATA6;
          else
            next_state =  ST_DATA5;
        end
      ST_EOP : 
        begin
          if (csm_timeout)
            next_state =  ST_irq_sig;
          else
            next_state =  ST_EOP;
        end
      ST_Set_DATA6 : 
        begin
          next_state =  ST_DATA6;
          csm_to_ST_DATA6 =  1'b1;
        end
      ST_SET_EOP : 
        begin
          next_state =  ST_EOP;
          csm_to_ST_EOP =  1'b1;
        end
      ST_DATA8 : 
        begin
          if (csm_timeout)
            next_state =  ST_SET_EOP;
          else
            next_state =  ST_DATA8;
        end
      ST_DATA6 : 
        begin
          if (csm_timeout)
            next_state =  ST_Set_DATA7;
          else
            next_state =  ST_DATA6;
        end
      ST_Set_DATA7 : 
        begin
          next_state =  ST_DATA7;
          csm_to_ST_DATA7 =  1'b1;
        end
      ST_DATA7 : 
        begin
          if (csm_timeout)
            next_state =  ST_Set_DATA8;
          else
            next_state =  ST_DATA7;
        end
      ST_Set_DATA8 : 
        begin
          next_state =  ST_DATA8;
          csm_to_ST_DATA8 =  1'b1;
        end
      Send_tx0_0 : 
        begin
          if (tx_uart_ready==1)
            next_state =  Send_tx0_1;
          else
            next_state =  Send_tx0_0;
        end
      Enable_rx : 
        begin
          if (rx_uart_addr_ready==1)
            next_state =  wait_slave;
          else
            next_state =  Enable_rx;
        end
      Ack_uart_rx : 
        begin
          next_state =  ST_Reset;
        end
      wait_slave : 
        begin
          if (rx_uart_valid==1)
            next_state =  Ack_uart_rx;
          else
            next_state =  wait_slave;
        end
      Send_tx0_1 : 
        begin
          if (tx_uart_ready==0)
            next_state =  Send_tx0_2;
          else
            next_state =  Send_tx0_1;
        end
      Send_tx0_2 : 
        begin
          if (tx_uart_ready==1)
            next_state =  Send_tx0_3;
          else
            next_state =  Send_tx0_2;
        end
      Send_tx0_3 : 
        begin
          if (tx_uart_ready==0)
            next_state =  Enable_rx;
          else
            next_state =  Send_tx0_3;
        end
      default : next_state =  ST_Reset;
    endcase
  end

always @( current_state )
  begin : output_block_proc
    irq_elink_tra =  0;
    state_o =  0;
    end_read_elink =  0;
    buffer_en =  0;
    data_tra_in =  0;
    rst_cnt =  0;
    counter_gen_en =  0;
    data_10bit_in_dbg =  {2'b11,Kchar_comma};
    rdy_dbg =  0;
    irq_elink_dbg =  0;
    tx_uart_valid =  0;
    tx_uart_data =  8'b0;
    tx_uart_addr =  4'b0;
    rx_uart_addr_valid =  0;
    rx_uart_ready =  0;
    rx_uart_addr =  0;
    case (current_state)
      ST_Reset : 
        begin
          state_o =  4'b000;
          irq_elink_tra =  0;
          buffer_en =  0;
          end_read_elink =  0;
          rst_cnt =  0;
          irq_elink_dbg =  1'b0;
          data_10bit_in_dbg =  {2'b11,Kchar_comma};
        end
      ST_Loop_cnt : 
        begin
          state_o =  4'b010;
          counter_gen_en =  1;
        end
      ST_Rst_Cnt2 : 
        begin
          rst_cnt =  1;
        end
      ST_En_Buffer1 : 
        begin
          state_o =  4'b011;
          buffer_en =  1;
          data_tra_in =  {5'h0C,7'h1,16'h4010,16'h2301,8'h0,8'h0,16'h0};
        end
      ST_End_Read1 : 
        begin
          state_o =  4'b100;
          end_read_elink =  1;
        end
      ST_Bus_cnt2 : 
        begin
          state_o =  4'b010;
          data_tra_in =  {5'h0C,7'h1,16'h4010,16'h2301,8'h0,8'h0,16'h0};
        end
      ST_start_test : 
        begin
          state_o =  4'b001;
          irq_elink_tra =  1;
          data_tra_in =  {5'h0C,7'h1,16'h4010,16'h2301,8'h0,8'h0,16'h0};
        end
      ST_SOP : 
        begin
          data_10bit_in_dbg =  {2'b10,Kchar_sop};
          rdy_dbg =  1;
        end
      ST_EOP1 : 
        begin
          data_10bit_in_dbg =  {2'b10,Kchar_sop};
        end
      ST_Set_DATA1 : 
        begin
          data_10bit_in_dbg =  {2'b00,8'hDE};
          rdy_dbg =  1;
        end
      ST_DATA1 : 
        begin
          data_10bit_in_dbg =  {2'b00,8'hDE};
        end
      ST_DATA3 : 
        begin
          data_10bit_in_dbg =  {2'b00,8'hBE};
        end
      ST_Set_DATA3 : 
        begin
          data_10bit_in_dbg =  {2'b00,8'hBE};
          rdy_dbg =  1;
        end
      ST_Set_DATA2 : 
        begin
          data_10bit_in_dbg =  {2'b00,8'hAD};
          rdy_dbg =  1;
        end
      ST_DATA2 : 
        begin
          data_10bit_in_dbg =  {2'b00,8'hAD};
        end
      ST_Set_DATA4 : 
        begin
          data_10bit_in_dbg =  {2'b00,8'hEF};
          rdy_dbg =  1;
        end
      ST_Set_DATA5 : 
        begin
          data_10bit_in_dbg =  {2'b00,8'hDE};
          rdy_dbg =  1;
        end
      ST_irq_sig : 
        begin
          irq_elink_dbg =  1'b1;
        end
      ST_DATA4 : 
        begin
          data_10bit_in_dbg =  {2'b00,8'hEF};
        end
      ST_DATA5 : 
        begin
          data_10bit_in_dbg =  {2'b00,8'hDE};
        end
      ST_EOP : 
        begin
          data_10bit_in_dbg =  {2'b01,Kchar_eop};
        end
      ST_Set_DATA6 : 
        begin
          data_10bit_in_dbg =  {2'b00,8'hAD};
          rdy_dbg =  1;
        end
      ST_SET_EOP : 
        begin
          data_10bit_in_dbg =  {2'b01,Kchar_eop};
          rdy_dbg =  1;
        end
      ST_DATA8 : 
        begin
          data_10bit_in_dbg =  {2'b00,8'h0};
        end
      ST_DATA6 : 
        begin
          data_10bit_in_dbg =  {2'b00,8'hAD};
        end
      ST_Set_DATA7 : 
        begin
          data_10bit_in_dbg =  {2'b00,8'hBE};
          rdy_dbg =  1;
        end
      ST_DATA7 : 
        begin
          data_10bit_in_dbg =  {2'b00,8'hBE};
        end
      ST_Set_DATA8 : 
        begin
          data_10bit_in_dbg =  {2'b00,8'h0};
          rdy_dbg =  1;
        end
      Send_tx0_0 : 
        begin
          tx_uart_data =  32'hDE;
          tx_uart_valid =  1;
          tx_uart_addr =  4'h04;
        end
      Enable_rx : 
        begin
          rx_uart_addr_valid =  1;
          rx_uart_addr =  4'h00;
        end
      Ack_uart_rx : 
        begin
          rx_uart_ready =  1;
          rx_uart_addr =  4'h0;
        end
      wait_slave : 
        begin
          rx_uart_ready =  1;
          rx_uart_addr =  4'h0;
        end
      Send_tx0_1 : 
        begin
          tx_uart_data =  32'hDE;
        end
      Send_tx0_2 : 
        begin
          tx_uart_data =  32'hAD;
          tx_uart_valid =  1;
          tx_uart_addr =  4'h04;
        end
      Send_tx0_3 : 
        begin
          tx_uart_data =  32'hAD;
        end
    endcase
  end

always @( posedge clk )
  begin : clocked_block_proc
    if (!rst)
      begin
        current_state <= ST_Reset;
        csm_timer <= 24'd0;
      end
    else
      begin
        current_state <= next_state;
        csm_timer <= csm_next_timer;
      end
  end

always @( csm_timer or csm_to_ST_WAIT or csm_to_ST_Done_Wait or csm_to_ST_counter_Wait1 or csm_to_ST_End_Read2 or csm_to_ST_Done_Wait1 or csm_to_ST_EOP1 or csm_to_ST_DATA1 or csm_to_ST_DATA3 or csm_to_ST_DATA2 or csm_to_ST_DATA4 or csm_to_ST_DATA5 or csm_to_ST_EOP or csm_to_ST_DATA8 or csm_to_ST_DATA6 or csm_to_ST_DATA7 )
  begin : csm_wait_block_proc
    csm_timeout =  (csm_timer==24'd0);
    if (csm_to_ST_WAIT==1'b1)
      begin
        csm_next_timer =  24'd9999999;
      end
    else
      if (csm_to_ST_Done_Wait==1'b1)
        begin
          csm_next_timer =  24'd9999999;
        end
      else
        if (csm_to_ST_counter_Wait1==1'b1)
          begin
            csm_next_timer =  24'd1999;
          end
        else
          if (csm_to_ST_End_Read2==1'b1)
            begin
              csm_next_timer =  24'd9999999;
            end
          else
            if (csm_to_ST_Done_Wait1==1'b1)
              begin
                csm_next_timer =  24'd9999999;
              end
            else
              if (csm_to_ST_EOP1==1'b1)
                begin
                  csm_next_timer =  24'd4;
                end
              else
                if (csm_to_ST_DATA1==1'b1)
                  begin
                    csm_next_timer =  24'd4;
                  end
                else
                  if (csm_to_ST_DATA3==1'b1)
                    begin
                      csm_next_timer =  24'd4;
                    end
                  else
                    if (csm_to_ST_DATA2==1'b1)
                      begin
                        csm_next_timer =  24'd4;
                      end
                    else
                      if (csm_to_ST_DATA4==1'b1)
                        begin
                          csm_next_timer =  24'd4;
                        end
                      else
                        if (csm_to_ST_DATA5==1'b1)
                          begin
                            csm_next_timer =  24'd4;
                          end
                        else
                          if (csm_to_ST_EOP==1'b1)
                            begin
                              csm_next_timer =  24'd4;
                            end
                          else
                            if (csm_to_ST_DATA8==1'b1)
                              begin
                                csm_next_timer =  24'd4;
                              end
                            else
                              if (csm_to_ST_DATA6==1'b1)
                                begin
                                  csm_next_timer =  24'd4;
                                end
                              else
                                if (csm_to_ST_DATA7==1'b1)
                                  begin
                                    csm_next_timer =  24'd4;
                                  end
                                else
                                  begin
                                    csm_next_timer =  (csm_timeout) ? 24'd0 : (csm_timer-24'd1);
                                  end
  end
endmodule

