/****************************************************************************************************
 *                          ! THIS FILE WAS AUTO-GENERATED BY TMRG TOOL !                           *
 *                                   ! DO NOT EDIT IT MANUALLY !                                    *
 *                                                                                                  *
 * file    : ./output/bus_rec_sm_fsmTMR.v                                                           *
 *                                                                                                  *
 * user    : lucas                                                                                  *
 * host    : DESKTOP-BFDSFP2                                                                        *
 * date    : 06/10/2022 13:52:39                                                                    *
 *                                                                                                  *
 * workdir : /mnt/c/Users/Lucas/Documents/GitHub/mopshub_triplicated/triplicated/mopshub_top_board/hdl *
 * cmd     : /mnt/c/Users/Lucas/Desktop/mopshub_triplication/tmrg-master/bin/tmrg -vv -c tmrg.cfg   *
 * tmrg rev:                                                                                        *
 *                                                                                                  *
 * src file: bus_rec_sm_fsm.v                                                                       *
 *           Git SHA           : c110441b08b692cc54ebd4a3b84a2599430e8f93                           *
 *           Modification time : 2022-10-06 08:59:22                                                *
 *           File Size         : 12674                                                              *
 *           MD5 hash          : 18246c2ff0095f26d7b749ff29986fd6                                   *
 *                                                                                                  *
 ****************************************************************************************************/

module bus_rec_SMTMR(
  output reg [4:0] bus_rec_select ,
  output reg  entimeout ,
  input wire [15:0] can_rec ,
  output reg  irq_can_rec ,
  input wire  clk ,
  output reg  end_choose_bus ,
  input wire  endwait ,
  output reg  start_bus_loop ,
  input wire  ireqsucrec ,
  input wire  rst ,
  output reg  done_bus_loop ,
  output reg  read_irqsucrec ,
  input wire  timeoutrst ,
  input wire  end_can_proc ,
  output reg  fifo_read_en 
);
parameter ST_Bus_Loop =6'd0;
parameter ST_Reset_Bus =6'd1;
parameter ST_Reset_Loop =6'd2;
parameter ST_Wait_Suc_Rec =6'd3;
parameter canbus1 =6'd4;
parameter donebus1 =6'd5;
parameter canbus2 =6'd6;
parameter donebus2 =6'd7;
parameter canbus3 =6'd8;
parameter canbus4 =6'd9;
parameter donebus4 =6'd10;
parameter canbus5 =6'd11;
parameter donebus5 =6'd12;
parameter canbus6 =6'd13;
parameter donebus6 =6'd14;
parameter canbus7 =6'd15;
parameter donebus7 =6'd16;
parameter canbus8 =6'd17;
parameter donebus8 =6'd18;
parameter canbus9 =6'd19;
parameter donebus9 =6'd20;
parameter canbus10 =6'd21;
parameter donebus10 =6'd22;
parameter canbus11 =6'd23;
parameter donebus11 =6'd24;
parameter canbus12 =6'd25;
parameter donebus12 =6'd26;
parameter canbus13 =6'd27;
parameter donebus13 =6'd28;
parameter canbus14 =6'd29;
parameter donebus14 =6'd30;
parameter canbus15 =6'd31;
parameter donebus15 =6'd32;
parameter canbus0 =6'd33;
parameter donebus0 =6'd34;
parameter donebus32 =6'd35;
parameter ST_Wait_Suc_Rec1 =6'd36;
parameter s32 =6'd37;
reg  [5:0] current_state ;
reg  [5:0] next_state ;

always @( can_rec or current_state or end_can_proc or ireqsucrec or rst )
  begin : next_state_block_proc
    case (current_state)
      ST_Bus_Loop : 
        begin
          if (can_rec[0] )
            next_state =  canbus0;
          else
            if (can_rec==16'b0)
              next_state =  ST_Wait_Suc_Rec;
            else
              if (can_rec[1] )
                next_state =  canbus1;
              else
                if (can_rec[2] )
                  next_state =  canbus2;
                else
                  if (can_rec[3] )
                    next_state =  canbus3;
                  else
                    if (can_rec[4] )
                      next_state =  canbus4;
                    else
                      if (can_rec[5] )
                        next_state =  canbus5;
                      else
                        if (can_rec[6] )
                          next_state =  canbus6;
                        else
                          if (can_rec[7] )
                            next_state =  canbus7;
                          else
                            if (can_rec[8] )
                              next_state =  canbus8;
                            else
                              if (can_rec[9] )
                                next_state =  canbus9;
                              else
                                if (can_rec[10] )
                                  next_state =  canbus10;
                                else
                                  if (can_rec[11] )
                                    next_state =  canbus11;
                                  else
                                    if (can_rec[12] )
                                      next_state =  canbus12;
                                    else
                                      if (can_rec[13] )
                                        next_state =  canbus13;
                                      else
                                        if (can_rec[14] )
                                          next_state =  canbus14;
                                        else
                                          if (can_rec[15] )
                                            next_state =  canbus15;
                                          else
                                            next_state =  ST_Bus_Loop;
        end
      ST_Reset_Bus : 
        begin
          next_state =  ST_Bus_Loop;
        end
      ST_Reset_Loop : 
        begin
          if (rst==1)
            next_state =  ST_Wait_Suc_Rec;
          else
            next_state =  ST_Reset_Loop;
        end
      ST_Wait_Suc_Rec : 
        begin
          next_state =  ST_Wait_Suc_Rec1;
        end
      canbus1 : 
        begin
          if (end_can_proc==1)
            next_state =  donebus1;
          else
            next_state =  canbus1;
        end
      donebus1 : 
        begin
          next_state =  ST_Bus_Loop;
        end
      canbus2 : 
        begin
          if (end_can_proc==1)
            next_state =  donebus2;
          else
            next_state =  canbus2;
        end
      donebus2 : 
        begin
          next_state =  ST_Bus_Loop;
        end
      canbus3 : 
        begin
          if (end_can_proc==1)
            next_state =  donebus32;
          else
            next_state =  canbus3;
        end
      canbus4 : 
        begin
          if (end_can_proc==1)
            next_state =  donebus4;
          else
            next_state =  canbus4;
        end
      donebus4 : 
        begin
          next_state =  ST_Bus_Loop;
        end
      canbus5 : 
        begin
          if (end_can_proc==1)
            next_state =  donebus5;
          else
            next_state =  canbus5;
        end
      donebus5 : 
        begin
          next_state =  ST_Bus_Loop;
        end
      canbus6 : 
        begin
          if (end_can_proc==1)
            next_state =  donebus6;
          else
            next_state =  canbus6;
        end
      donebus6 : 
        begin
          next_state =  ST_Bus_Loop;
        end
      canbus7 : 
        begin
          if (end_can_proc==1)
            next_state =  donebus7;
          else
            next_state =  canbus7;
        end
      donebus7 : 
        begin
          next_state =  ST_Bus_Loop;
        end
      canbus8 : 
        begin
          if (end_can_proc==1)
            next_state =  donebus8;
          else
            next_state =  canbus8;
        end
      donebus8 : 
        begin
          next_state =  ST_Bus_Loop;
        end
      canbus9 : 
        begin
          if (end_can_proc==1)
            next_state =  donebus9;
          else
            next_state =  canbus9;
        end
      donebus9 : 
        begin
          next_state =  ST_Bus_Loop;
        end
      canbus10 : 
        begin
          if (end_can_proc==1)
            next_state =  donebus10;
          else
            next_state =  canbus10;
        end
      donebus10 : 
        begin
          next_state =  ST_Bus_Loop;
        end
      canbus11 : 
        begin
          if (end_can_proc==1)
            next_state =  donebus11;
          else
            next_state =  canbus11;
        end
      donebus11 : 
        begin
          next_state =  ST_Bus_Loop;
        end
      canbus12 : 
        begin
          if (end_can_proc==1)
            next_state =  donebus12;
          else
            next_state =  canbus12;
        end
      donebus12 : 
        begin
          next_state =  ST_Bus_Loop;
        end
      canbus13 : 
        begin
          if (end_can_proc==1)
            next_state =  donebus13;
          else
            next_state =  canbus13;
        end
      donebus13 : 
        begin
          next_state =  ST_Bus_Loop;
        end
      canbus14 : 
        begin
          if (end_can_proc==1)
            next_state =  donebus14;
          else
            next_state =  canbus14;
        end
      donebus14 : 
        begin
          next_state =  ST_Bus_Loop;
        end
      canbus15 : 
        begin
          if (end_can_proc==1)
            next_state =  donebus15;
          else
            next_state =  canbus15;
        end
      donebus15 : 
        begin
          next_state =  ST_Bus_Loop;
        end
      canbus0 : 
        begin
          if (end_can_proc==1)
            next_state =  donebus0;
          else
            next_state =  canbus0;
        end
      donebus0 : 
        begin
          next_state =  ST_Bus_Loop;
        end
      donebus32 : 
        begin
          next_state =  ST_Bus_Loop;
        end
      ST_Wait_Suc_Rec1 : 
        begin
          if (ireqsucrec==1)
            next_state =  s32;
          else
            next_state =  ST_Wait_Suc_Rec1;
        end
      s32 : 
        begin
          next_state =  ST_Reset_Bus;
        end
      default : next_state =  ST_Reset_Loop;
    endcase
  end

always @( current_state )
  begin : output_block_proc
    bus_rec_select =  5'b0;
    entimeout =  1;
    irq_can_rec =  0;
    end_choose_bus =  0;
    start_bus_loop =  0;
    done_bus_loop =  0;
    read_irqsucrec =  0;
    fifo_read_en =  0;
    case (current_state)
      ST_Bus_Loop : 
        begin
          start_bus_loop =  1;
        end
      ST_Reset_Bus : 
        begin
          read_irqsucrec =  1;
          done_bus_loop =  0;
          end_choose_bus =  0;
        end
      ST_Reset_Loop : 
        begin
          start_bus_loop =  0;
          done_bus_loop =  0;
          entimeout =  0;
          end_choose_bus =  0;
          read_irqsucrec =  0;
        end
      ST_Wait_Suc_Rec : 
        begin
          done_bus_loop =  1;
        end
      canbus1 : 
        begin
          bus_rec_select =  5'b00001;
          irq_can_rec =  1;
        end
      donebus1 : 
        begin
          end_choose_bus =  1;
          bus_rec_select =  5'b1;
        end
      canbus2 : 
        begin
          bus_rec_select =  5'd2;
          irq_can_rec =  1;
        end
      donebus2 : 
        begin
          end_choose_bus =  1;
          bus_rec_select =  5'd2;
        end
      canbus3 : 
        begin
          bus_rec_select =  5'd3;
          irq_can_rec =  1;
        end
      canbus4 : 
        begin
          bus_rec_select =  5'd4;
          irq_can_rec =  1;
        end
      donebus4 : 
        begin
          end_choose_bus =  1;
          bus_rec_select =  5'd4;
        end
      canbus5 : 
        begin
          bus_rec_select =  5'd5;
          irq_can_rec =  1;
        end
      donebus5 : 
        begin
          end_choose_bus =  1;
          bus_rec_select =  5'd5;
        end
      canbus6 : 
        begin
          bus_rec_select =  5'd6;
          irq_can_rec =  1;
        end
      donebus6 : 
        begin
          end_choose_bus =  1;
          bus_rec_select =  5'd6;
        end
      canbus7 : 
        begin
          bus_rec_select =  5'd7;
          irq_can_rec =  1;
        end
      donebus7 : 
        begin
          end_choose_bus =  1;
          bus_rec_select =  5'd7;
        end
      canbus8 : 
        begin
          bus_rec_select =  5'd8;
          irq_can_rec =  1;
        end
      donebus8 : 
        begin
          end_choose_bus =  1;
          bus_rec_select =  5'd8;
        end
      canbus9 : 
        begin
          bus_rec_select =  5'd9;
          irq_can_rec =  1;
        end
      donebus9 : 
        begin
          bus_rec_select =  5'd9;
          end_choose_bus =  1;
        end
      canbus10 : 
        begin
          bus_rec_select =  5'd10;
          irq_can_rec =  1;
        end
      donebus10 : 
        begin
          bus_rec_select =  5'd10;
          end_choose_bus =  1;
        end
      canbus11 : 
        begin
          bus_rec_select =  5'd11;
          irq_can_rec =  1;
        end
      donebus11 : 
        begin
          end_choose_bus =  1;
          bus_rec_select =  5'd11;
        end
      canbus12 : 
        begin
          bus_rec_select =  5'd12;
          irq_can_rec =  1;
        end
      donebus12 : 
        begin
          end_choose_bus =  1;
          bus_rec_select =  5'd12;
        end
      canbus13 : 
        begin
          bus_rec_select =  5'd13;
          irq_can_rec =  1;
        end
      donebus13 : 
        begin
          end_choose_bus =  1;
          bus_rec_select =  5'd13;
        end
      canbus14 : 
        begin
          bus_rec_select =  5'd14;
          irq_can_rec =  1;
        end
      donebus14 : 
        begin
          end_choose_bus =  1;
          bus_rec_select =  5'd14;
        end
      canbus15 : 
        begin
          bus_rec_select =  5'd15;
          irq_can_rec =  1;
        end
      donebus15 : 
        begin
          end_choose_bus =  1;
          bus_rec_select =  5'd15;
        end
      canbus0 : 
        begin
          irq_can_rec =  1;
          bus_rec_select =  5'b0;
        end
      donebus0 : 
        begin
          end_choose_bus =  1;
          bus_rec_select =  5'b0;
        end
      donebus32 : 
        begin
          end_choose_bus =  1;
          bus_rec_select =  5'd3;
        end
      ST_Wait_Suc_Rec1 : 
        begin
          entimeout =  0;
        end
      s32 : 
        begin
          fifo_read_en =  1;
        end
    endcase
  end

always @( posedge clk or posedge endwait )
  begin : clocked_block_proc
    if (endwait)
      begin
        current_state <= ST_Wait_Suc_Rec;
      end
    else
      begin
        if (!rst)
          begin
            current_state <= ST_Reset_Loop;
          end
        else
          if (timeoutrst)
            begin
              current_state <= ST_Reset_Loop;
            end
          else
            begin
              current_state <= next_state;
            end
      end
  end
endmodule

