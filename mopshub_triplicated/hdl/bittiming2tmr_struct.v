//
// Module mopshub_triplicated.bittiming2TMR.struct
//
// Created:
//          by - dcs.dcs (localhost)
//          at - 09:18:05 05/10/22
//
// Generated by Mentor Graphics' HDL Designer(TM) 2019.4 (Build 4)
//


module bittiming2TMR( 
   // Port Declarations
   input   wire           clockA, 
   input   wire           clockB, 
   input   wire           clockC, 
   input   wire           Prescale_ENA, 
   input   wire           Prescale_ENB, 
   input   wire           Prescale_ENC, 
   input   wire           resetA, 
   input   wire           resetB, 
   input   wire           resetC, 
   input   wire           hardsyncA, 
   input   wire           hardsyncB, 
   input   wire           hardsyncC, 
   input   wire           rxA, 
   input   wire           rxB, 
   input   wire           rxC, 
   input   wire    [2:0]  tseg1A, 
   input   wire    [2:0]  tseg1B, 
   input   wire    [2:0]  tseg1C, 
   input   wire    [2:0]  tseg2A, 
   input   wire    [2:0]  tseg2B, 
   input   wire    [2:0]  tseg2C, 
   input   wire    [2:0]  sjwA, 
   input   wire    [2:0]  sjwB, 
   input   wire    [2:0]  sjwC, 
   input   wire           en_osc_trimA, 
   input   wire           en_osc_trimB, 
   input   wire           en_osc_trimC, 
   input   wire    [7:0]  KdA, 
   input   wire    [7:0]  KdB, 
   input   wire    [7:0]  KdC, 
   input   wire    [7:0]  KpA, 
   input   wire    [7:0]  KpB, 
   input   wire    [7:0]  KpC, 
   input   wire    [7:0]  KiA, 
   input   wire    [7:0]  KiB, 
   input   wire    [7:0]  KiC, 
   output  wire    [5:0]  ftrimA, 
   output  wire    [5:0]  ftrimB, 
   output  wire    [5:0]  ftrimC, 
   output  wire           ready_oscA, 
   output  wire           ready_oscB, 
   output  wire           ready_oscC, 
   output  wire           sendpointA, 
   output  wire           sendpointB, 
   output  wire           sendpointC, 
   output  wire           smplpointA, 
   output  wire           smplpointB, 
   output  wire           smplpointC, 
   output  wire           smpledbitA, 
   output  wire           smpledbitB, 
   output  wire           smpledbitC, 
   output  wire    [6:0]  bitstA, 
   output  wire    [6:0]  bitstB, 
   output  wire    [6:0]  bitstC
);


// Internal Declarations


// Local declarations

// Internal signal declarations
wor         rxfTmrErrorC;
wire        rxfVotedC;
wor         rxfTmrErrorB;
wire        rxfVotedB;
wor         rxfTmrErrorA;
wire        rxfVotedA;
wire  [4:0] tseg1pcountA;
wire  [4:0] tseg1pcountB;
wire  [4:0] tseg1pcountC;
wire  [4:0] tseg1p1psjwA;
wire  [4:0] tseg1p1psjwB;
wire  [4:0] tseg1p1psjwC;
wire        notnullA;
wire        notnullB;
wire        notnullC;
wire        gtsjwp1A;
wire        gtsjwp1B;
wire        gtsjwp1C;
wire        gttseg1p1A;
wire        gttseg1p1B;
wire        gttseg1p1C;
wire        cpsgetseg1ptseg2p2A;
wire        cpsgetseg1ptseg2p2B;
wire        cpsgetseg1ptseg2p2C;
wire        cetseg1ptseg2p1A;
wire        cetseg1ptseg2p1B;
wire        cetseg1ptseg2p1C;
wire        countesmpltimeA;
wire        countesmpltimeB;
wire        countesmpltimeC;
wire        pufferA;
wire        pufferB;
wire        pufferC;
wire  [4:0] tseg1mplA;
wire  [4:0] tseg1mplB;
wire  [4:0] tseg1mplC;
wire        incrementA;
wire        incrementB;
wire        incrementC;
wire        setctzeroA;
wire        setctzeroB;
wire        setctzeroC;
wire        setctotwoA;
wire        setctotwoB;
wire        setctotwoC;
wire  [3:0] countA;
wire  [3:0] countB;
wire  [3:0] countC;
wire  [1:0] smpldbit_reg_ctrlA;
wire  [1:0] smpldbit_reg_ctrlB;
wire  [1:0] smpldbit_reg_ctrlC;
wire  [1:0] tseg_reg_ctrlA;
wire  [1:0] tseg_reg_ctrlB;
wire  [1:0] tseg_reg_ctrlC;
wire  [2:0] deblatchA;
wire  [2:0] deblatchB;
wire  [2:0] deblatchC;
reg         rxfA;
reg         rxfB;
reg         rxfC;


// Instances 
Control_SysTMR freqTrim( 
   .FtrimA       (ftrimA), 
   .FtrimB       (ftrimB), 
   .FtrimC       (ftrimC), 
   .readyA       (ready_oscA), 
   .readyB       (ready_oscB), 
   .readyC       (ready_oscC), 
   .CLKA         (clockA), 
   .CLKB         (clockB), 
   .CLKC         (clockC), 
   .E1A          (countA), 
   .E1B          (countB), 
   .E1C          (countC), 
   .KdA          (KdA), 
   .KdB          (KdB), 
   .KdC          (KdC), 
   .KiA          (KiA), 
   .KiB          (KiB), 
   .KiC          (KiC), 
   .KpA          (KpA), 
   .KpB          (KpB), 
   .KpC          (KpC), 
   .Prescale_EnA (Prescale_ENA), 
   .Prescale_EnB (Prescale_ENB), 
   .Prescale_EnC (Prescale_ENC), 
   .PufferA      (pufferA), 
   .PufferB      (pufferB), 
   .PufferC      (pufferC), 
   .ResetA       (resetA), 
   .ResetB       (resetB), 
   .ResetC       (resetC), 
   .RxA          (rxA), 
   .RxB          (rxB), 
   .RxC          (rxC), 
   .activeA      (en_osc_trimA), 
   .activeB      (en_osc_trimB), 
   .activeC      (en_osc_trimC)
); 

bittime2TMR bittiming( 
   .clockA              (clockA), 
   .clockB              (clockB), 
   .clockC              (clockC), 
   .Prescale_ENA        (Prescale_ENA), 
   .Prescale_ENB        (Prescale_ENB), 
   .Prescale_ENC        (Prescale_ENC), 
   .resetA              (resetA), 
   .resetB              (resetB), 
   .resetC              (resetC), 
   .hardsyncA           (hardsyncA), 
   .hardsyncB           (hardsyncB), 
   .hardsyncC           (hardsyncC), 
   .notnullA            (notnullA), 
   .notnullB            (notnullB), 
   .notnullC            (notnullC), 
   .gtsjwp1A            (gtsjwp1A), 
   .gtsjwp1B            (gtsjwp1B), 
   .gtsjwp1C            (gtsjwp1C), 
   .gttseg1p1A          (gttseg1p1A), 
   .gttseg1p1B          (gttseg1p1B), 
   .gttseg1p1C          (gttseg1p1C), 
   .cpsgetseg1ptseg2p2A (cpsgetseg1ptseg2p2A), 
   .cpsgetseg1ptseg2p2B (cpsgetseg1ptseg2p2B), 
   .cpsgetseg1ptseg2p2C (cpsgetseg1ptseg2p2C), 
   .cetseg1ptseg2p1A    (cetseg1ptseg2p1A), 
   .cetseg1ptseg2p1B    (cetseg1ptseg2p1B), 
   .cetseg1ptseg2p1C    (cetseg1ptseg2p1C), 
   .countesmpltimeA     (countesmpltimeA), 
   .countesmpltimeB     (countesmpltimeB), 
   .countesmpltimeC     (countesmpltimeC), 
   .pufferA             (pufferA), 
   .pufferB             (pufferB), 
   .pufferC             (pufferC), 
   .rxA                 (rxfVotedA), 
   .rxB                 (rxfVotedB), 
   .rxC                 (rxfVotedC), 
   .incrementA          (incrementA), 
   .incrementB          (incrementB), 
   .incrementC          (incrementC), 
   .setctzeroA          (setctzeroA), 
   .setctzeroB          (setctzeroB), 
   .setctzeroC          (setctzeroC), 
   .setctotwoA          (setctotwoA), 
   .setctotwoB          (setctotwoB), 
   .setctotwoC          (setctotwoC), 
   .sendpointA          (sendpointA), 
   .sendpointB          (sendpointB), 
   .sendpointC          (sendpointC), 
   .smplpointA          (smplpointA), 
   .smplpointB          (smplpointB), 
   .smplpointC          (smplpointC), 
   .smpldbit_reg_ctrlA  (smpldbit_reg_ctrlA), 
   .smpldbit_reg_ctrlB  (smpldbit_reg_ctrlB), 
   .smpldbit_reg_ctrlC  (smpldbit_reg_ctrlC), 
   .tseg_reg_ctrlA      (tseg_reg_ctrlA), 
   .tseg_reg_ctrlB      (tseg_reg_ctrlB), 
   .tseg_reg_ctrlC      (tseg_reg_ctrlC), 
   .bitstA              (bitstA[3:0]), 
   .bitstB              (bitstB[3:0]), 
   .bitstC              (bitstC[3:0])
); 

edgepuffer2TMR flipflop( 
   .clockA       (clockA), 
   .clockB       (clockB), 
   .clockC       (clockC), 
   .Prescale_ENA (Prescale_ENA), 
   .Prescale_ENB (Prescale_ENB), 
   .Prescale_ENC (Prescale_ENC), 
   .resetA       (resetA), 
   .resetB       (resetB), 
   .resetC       (resetC), 
   .rxA          (rxfVotedA), 
   .rxB          (rxfVotedB), 
   .rxC          (rxfVotedC), 
   .pufferA      (pufferA), 
   .pufferB      (pufferB), 
   .pufferC      (pufferC)
); 

majorityVoter rxfVoterA( 
   .inA    (rxfA), 
   .inB    (rxfB), 
   .inC    (rxfC), 
   .out    (rxfVotedA), 
   .tmrErr (rxfTmrErrorA)
); 

majorityVoter rxfVoterB( 
   .inA    (rxfA), 
   .inB    (rxfB), 
   .inC    (rxfC), 
   .out    (rxfVotedB), 
   .tmrErr (rxfTmrErrorB)
); 

majorityVoter rxfVoterC( 
   .inA    (rxfA), 
   .inB    (rxfB), 
   .inC    (rxfC), 
   .out    (rxfVotedC), 
   .tmrErr (rxfTmrErrorC)
); 

smpldbit_reg2TMR smpldbit_reg_i( 
   .clockA    (clockA), 
   .clockB    (clockB), 
   .clockC    (clockC), 
   .resetA    (resetA), 
   .resetB    (resetB), 
   .resetC    (resetC), 
   .ctrlA     (smpldbit_reg_ctrlA), 
   .ctrlB     (smpldbit_reg_ctrlB), 
   .ctrlC     (smpldbit_reg_ctrlC), 
   .smpldbitA (smpledbitA), 
   .smpldbitB (smpledbitB), 
   .smpldbitC (smpledbitC), 
   .pufferA   (pufferA), 
   .pufferB   (pufferB), 
   .pufferC   (pufferC)
); 

sum2TMR aritmetic( 
   .countA              (countA), 
   .countB              (countB), 
   .countC              (countC), 
   .tseg1orgA           (tseg1A), 
   .tseg1orgB           (tseg1B), 
   .tseg1orgC           (tseg1C), 
   .tseg1mplA           (tseg1mplA), 
   .tseg1mplB           (tseg1mplB), 
   .tseg1mplC           (tseg1mplC), 
   .tseg2A              (tseg2A), 
   .tseg2B              (tseg2B), 
   .tseg2C              (tseg2C), 
   .sjwA                (sjwA), 
   .sjwB                (sjwB), 
   .sjwC                (sjwC), 
   .notnullA            (notnullA), 
   .notnullB            (notnullB), 
   .notnullC            (notnullC), 
   .gtsjwp1A            (gtsjwp1A), 
   .gtsjwp1B            (gtsjwp1B), 
   .gtsjwp1C            (gtsjwp1C), 
   .gttseg1p1A          (gttseg1p1A), 
   .gttseg1p1B          (gttseg1p1B), 
   .gttseg1p1C          (gttseg1p1C), 
   .cpsgetseg1ptseg2p2A (cpsgetseg1ptseg2p2A), 
   .cpsgetseg1ptseg2p2B (cpsgetseg1ptseg2p2B), 
   .cpsgetseg1ptseg2p2C (cpsgetseg1ptseg2p2C), 
   .cetseg1ptseg2p1A    (cetseg1ptseg2p1A), 
   .cetseg1ptseg2p1B    (cetseg1ptseg2p1B), 
   .cetseg1ptseg2p1C    (cetseg1ptseg2p1C), 
   .countesmpltimeA     (countesmpltimeA), 
   .countesmpltimeB     (countesmpltimeB), 
   .countesmpltimeC     (countesmpltimeC), 
   .tseg1p1psjwA        (tseg1p1psjwA), 
   .tseg1p1psjwB        (tseg1p1psjwB), 
   .tseg1p1psjwC        (tseg1p1psjwC), 
   .tseg1pcountA        (tseg1pcountA), 
   .tseg1pcountB        (tseg1pcountB), 
   .tseg1pcountC        (tseg1pcountC)
); 

timecount2TMR counter( 
   .clockA       (clockA), 
   .clockB       (clockB), 
   .clockC       (clockC), 
   .Prescale_ENA (Prescale_ENA), 
   .Prescale_ENB (Prescale_ENB), 
   .Prescale_ENC (Prescale_ENC), 
   .resetA       (resetA), 
   .resetB       (resetB), 
   .resetC       (resetC), 
   .incrementA   (incrementA), 
   .incrementB   (incrementB), 
   .incrementC   (incrementC), 
   .setctzeroA   (setctzeroA), 
   .setctzeroB   (setctzeroB), 
   .setctzeroC   (setctzeroC), 
   .setctotwoA   (setctotwoA), 
   .setctotwoB   (setctotwoB), 
   .setctotwoC   (setctotwoC), 
   .countoA      (countA), 
   .countoB      (countB), 
   .countoC      (countC)
); 

tseg_reg2TMR tseg_reg_i( 
   .clockA       (clockA), 
   .clockB       (clockB), 
   .clockC       (clockC), 
   .resetA       (resetA), 
   .resetB       (resetB), 
   .resetC       (resetC), 
   .ctrlA        (tseg_reg_ctrlA), 
   .ctrlB        (tseg_reg_ctrlB), 
   .ctrlC        (tseg_reg_ctrlC), 
   .tseg1A       (tseg1A), 
   .tseg1B       (tseg1B), 
   .tseg1C       (tseg1C), 
   .tseg1pcountA (tseg1pcountA), 
   .tseg1pcountB (tseg1pcountB), 
   .tseg1pcountC (tseg1pcountC), 
   .tseg1p1psjwA (tseg1p1psjwA), 
   .tseg1p1psjwB (tseg1p1psjwB), 
   .tseg1p1psjwC (tseg1p1psjwC), 
   .tseg1mplA    (tseg1mplA), 
   .tseg1mplB    (tseg1mplB), 
   .tseg1mplC    (tseg1mplC)
); 

// HDL Embedded Text Block 1 eb1
always @( posedge clockA or negedge resetA )
  begin
    if (resetA==1'b0)
      rxfA <= 1'b1;
    else
      rxfA <= rxA;
  end
// HDL Embedded Text Block 2 eb2
always @( posedge clockB or negedge resetB )
  begin
    if (resetB==1'b0)
      rxfB <= 1'b1;
    else
      rxfB <= rxB;
  end
// HDL Embedded Text Block 3 eb3
always @( posedge clockC or negedge resetC )
  begin
    if (resetC==1'b0)
      rxfC <= 1'b1;
    else
      rxfC <= rxC;
  end
// HDL Embedded Text Block 4 eb4
assign deblatchA[0]  =  Prescale_ENA;
assign deblatchB[0]  =  Prescale_ENB;
assign deblatchC[0]  =  Prescale_ENC;
assign deblatchA[2:1]  =  tseg_reg_ctrlA;
assign deblatchB[2:1]  =  tseg_reg_ctrlB;
assign deblatchC[2:1]  =  tseg_reg_ctrlC;
assign bitstA[6:4]  =  deblatchA;
assign bitstB[6:4]  =  deblatchB;
assign bitstC[6:4]  =  deblatchC;

endmodule // bittiming2TMR

