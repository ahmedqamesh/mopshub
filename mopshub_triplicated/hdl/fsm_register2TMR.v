/****************************************************************************************************
 *                          ! THIS FILE WAS AUTO-GENERATED BY TMRG TOOL !                           *
 *                                   ! DO NOT EDIT IT MANUALLY !                                    *
 *                                                                                                  *
 * file    : ./output/fsm_register2TMR.v                                                            *
 *                                                                                                  *
 * user    : lucas                                                                                  *
 * host    : DESKTOP-BFDSFP2                                                                        *
 * date    : 16/08/2022 12:58:21                                                                    *
 *                                                                                                  *
 * workdir : /mnt/c/Users/Lucas/Desktop/mopshub_triplication/mopshub_top_board_canakari_ftrim/hdl   *
 * cmd     : /mnt/c/Users/Lucas/Desktop/mopshub_triplication/tmrg-master/bin/tmrg -c tmrg.cfg -vvv  *
 * tmrg rev:                                                                                        *
 *                                                                                                  *
 * src file: fsm_register2.v                                                                        *
 *           Git SHA           : File not in git repository!                                        *
 *           Modification time : 2022-03-29 13:49:21                                                *
 *           File Size         : 6562                                                               *
 *           MD5 hash          : 7caeef3428e531616e3bce617dc5a4b6                                   *
 *                                                                                                  *
 ****************************************************************************************************/

module fsm_register2TMR(
  input wire  clockA ,
  input wire  clockB ,
  input wire  clockC ,
  input wire  resetA ,
  input wire  resetB ,
  input wire  resetC ,
  input wire [1:0] ackerror_setA ,
  input wire [1:0] ackerror_setB ,
  input wire [1:0] ackerror_setC ,
  input wire [1:0] onarbit_setA ,
  input wire [1:0] onarbit_setB ,
  input wire [1:0] onarbit_setC ,
  input wire [1:0] transmitter_setA ,
  input wire [1:0] transmitter_setB ,
  input wire [1:0] transmitter_setC ,
  input wire [1:0] receiver_setA ,
  input wire [1:0] receiver_setB ,
  input wire [1:0] receiver_setC ,
  input wire [1:0] error_setA ,
  input wire [1:0] error_setB ,
  input wire [1:0] error_setC ,
  input wire [1:0] first_setA ,
  input wire [1:0] first_setB ,
  input wire [1:0] first_setC ,
  input wire [1:0] puffer_setA ,
  input wire [1:0] puffer_setB ,
  input wire [1:0] puffer_setC ,
  input wire [1:0] rext_setA ,
  input wire [1:0] rext_setB ,
  input wire [1:0] rext_setC ,
  input wire [1:0] rrtr_setA ,
  input wire [1:0] rrtr_setB ,
  input wire [1:0] rrtr_setC ,
  output wire  ackerrorA ,
  output wire  ackerrorB ,
  output wire  ackerrorC ,
  output wire  onarbitA ,
  output wire  onarbitB ,
  output wire  onarbitC ,
  output wire  transmitterA ,
  output wire  transmitterB ,
  output wire  transmitterC ,
  output wire  receiverA ,
  output wire  receiverB ,
  output wire  receiverC ,
  output wire  errorA ,
  output wire  errorB ,
  output wire  errorC ,
  output wire  firstA ,
  output wire  firstB ,
  output wire  firstC ,
  output wire  pufferA ,
  output wire  pufferB ,
  output wire  pufferC ,
  output wire  rextA ,
  output wire  rextB ,
  output wire  rextC ,
  output wire  rrtrA ,
  output wire  rrtrB ,
  output wire  rrtrC 
);
wor transmitter_iTmrErrorC;
wire transmitter_iVotedC;
wor rrtr_iTmrErrorC;
wire rrtr_iVotedC;
wor rext_iTmrErrorC;
wire rext_iVotedC;
wor receiver_iTmrErrorC;
wire receiver_iVotedC;
wor puffer_iTmrErrorC;
wire puffer_iVotedC;
wor onarbit_iTmrErrorC;
wire onarbit_iVotedC;
wor first_iTmrErrorC;
wire first_iVotedC;
wor error_iTmrErrorC;
wire error_iVotedC;
wor ackerror_iTmrErrorC;
wire ackerror_iVotedC;
wor transmitter_iTmrErrorB;
wire transmitter_iVotedB;
wor rrtr_iTmrErrorB;
wire rrtr_iVotedB;
wor rext_iTmrErrorB;
wire rext_iVotedB;
wor receiver_iTmrErrorB;
wire receiver_iVotedB;
wor puffer_iTmrErrorB;
wire puffer_iVotedB;
wor onarbit_iTmrErrorB;
wire onarbit_iVotedB;
wor first_iTmrErrorB;
wire first_iVotedB;
wor error_iTmrErrorB;
wire error_iVotedB;
wor ackerror_iTmrErrorB;
wire ackerror_iVotedB;
wor transmitter_iTmrErrorA;
wire transmitter_iVotedA;
wor rrtr_iTmrErrorA;
wire rrtr_iVotedA;
wor rext_iTmrErrorA;
wire rext_iVotedA;
wor receiver_iTmrErrorA;
wire receiver_iVotedA;
wor puffer_iTmrErrorA;
wire puffer_iVotedA;
wor onarbit_iTmrErrorA;
wire onarbit_iVotedA;
wor first_iTmrErrorA;
wire first_iVotedA;
wor error_iTmrErrorA;
wire error_iVotedA;
wor ackerror_iTmrErrorA;
wire ackerror_iVotedA;
reg  ackerror_iA ;
reg  ackerror_iB ;
reg  ackerror_iC ;
reg  onarbit_iA ;
reg  onarbit_iB ;
reg  onarbit_iC ;
reg  transmitter_iA ;
reg  transmitter_iB ;
reg  transmitter_iC ;
reg  receiver_iA ;
reg  receiver_iB ;
reg  receiver_iC ;
reg  error_iA ;
reg  error_iB ;
reg  error_iC ;
reg  first_iA ;
reg  first_iB ;
reg  first_iC ;
reg  puffer_iA ;
reg  puffer_iB ;
reg  puffer_iC ;
reg  rext_iA ;
reg  rext_iB ;
reg  rext_iC ;
reg  rrtr_iA ;
reg  rrtr_iB ;
reg  rrtr_iC ;
assign ackerrorA =  ackerror_iVotedA;
assign ackerrorB =  ackerror_iVotedB;
assign ackerrorC =  ackerror_iVotedC;
assign onarbitA =  onarbit_iVotedA;
assign onarbitB =  onarbit_iVotedB;
assign onarbitC =  onarbit_iVotedC;
assign transmitterA =  transmitter_iVotedA;
assign transmitterB =  transmitter_iVotedB;
assign transmitterC =  transmitter_iVotedC;
assign receiverA =  receiver_iVotedA;
assign receiverB =  receiver_iVotedB;
assign receiverC =  receiver_iVotedC;
assign errorA =  error_iVotedA;
assign errorB =  error_iVotedB;
assign errorC =  error_iVotedC;
assign firstA =  first_iVotedA;
assign firstB =  first_iVotedB;
assign firstC =  first_iVotedC;
assign pufferA =  puffer_iVotedA;
assign pufferB =  puffer_iVotedB;
assign pufferC =  puffer_iVotedC;
assign rextA =  rext_iVotedA;
assign rextB =  rext_iVotedB;
assign rextC =  rext_iVotedC;
assign rrtrA =  rrtr_iVotedA;
assign rrtrB =  rrtr_iVotedB;
assign rrtrC =  rrtr_iVotedC;

always @( posedge clockA )
  begin
    if (resetA==1'b0)
      ackerror_iA <= 1'b0;
    else
      case (ackerror_setA)
        2'b11 : ackerror_iA <= 1'b1;
        2'b10 : ackerror_iA <= 1'b0;
        default : ackerror_iA <= ackerror_iVotedA;
      endcase
  end

always @( posedge clockB )
  begin
    if (resetB==1'b0)
      ackerror_iB <= 1'b0;
    else
      case (ackerror_setB)
        2'b11 : ackerror_iB <= 1'b1;
        2'b10 : ackerror_iB <= 1'b0;
        default : ackerror_iB <= ackerror_iVotedB;
      endcase
  end

always @( posedge clockC )
  begin
    if (resetC==1'b0)
      ackerror_iC <= 1'b0;
    else
      case (ackerror_setC)
        2'b11 : ackerror_iC <= 1'b1;
        2'b10 : ackerror_iC <= 1'b0;
        default : ackerror_iC <= ackerror_iVotedC;
      endcase
  end

always @( posedge clockA )
  begin
    if (resetA==1'b0)
      case (onarbit_setA)
        2'b11 : onarbit_iA <= 1'b1;
        2'b10 : onarbit_iA <= 1'b0;
        default : onarbit_iA <= 1'b0;
      endcase
  end

always @( posedge clockB )
  begin
    if (resetB==1'b0)
      case (onarbit_setB)
        2'b11 : onarbit_iB <= 1'b1;
        2'b10 : onarbit_iB <= 1'b0;
        default : onarbit_iB <= 1'b0;
      endcase
  end

always @( posedge clockC )
  begin
    if (resetC==1'b0)
      case (onarbit_setC)
        2'b11 : onarbit_iC <= 1'b1;
        2'b10 : onarbit_iC <= 1'b0;
        default : onarbit_iC <= 1'b0;
      endcase
  end

always @( posedge clockA )
  begin
    if (resetA==1'b0)
      transmitter_iA <= 1'b0;
    else
      case (transmitter_setA)
        2'b11 : transmitter_iA <= 1'b1;
        2'b10 : transmitter_iA <= 1'b0;
        default : transmitter_iA <= transmitter_iVotedA;
      endcase
  end

always @( posedge clockB )
  begin
    if (resetB==1'b0)
      transmitter_iB <= 1'b0;
    else
      case (transmitter_setB)
        2'b11 : transmitter_iB <= 1'b1;
        2'b10 : transmitter_iB <= 1'b0;
        default : transmitter_iB <= transmitter_iVotedB;
      endcase
  end

always @( posedge clockC )
  begin
    if (resetC==1'b0)
      transmitter_iC <= 1'b0;
    else
      case (transmitter_setC)
        2'b11 : transmitter_iC <= 1'b1;
        2'b10 : transmitter_iC <= 1'b0;
        default : transmitter_iC <= transmitter_iVotedC;
      endcase
  end

always @( posedge clockA )
  begin
    if (resetA==1'b0)
      receiver_iA <= 1'b0;
    else
      case (receiver_setA)
        2'b11 : receiver_iA <= 1'b1;
        2'b10 : receiver_iA <= 1'b0;
        default : receiver_iA <= receiver_iVotedA;
      endcase
  end

always @( posedge clockB )
  begin
    if (resetB==1'b0)
      receiver_iB <= 1'b0;
    else
      case (receiver_setB)
        2'b11 : receiver_iB <= 1'b1;
        2'b10 : receiver_iB <= 1'b0;
        default : receiver_iB <= receiver_iVotedB;
      endcase
  end

always @( posedge clockC )
  begin
    if (resetC==1'b0)
      receiver_iC <= 1'b0;
    else
      case (receiver_setC)
        2'b11 : receiver_iC <= 1'b1;
        2'b10 : receiver_iC <= 1'b0;
        default : receiver_iC <= receiver_iVotedC;
      endcase
  end

always @( posedge clockA )
  begin
    if (resetA==1'b0)
      error_iA <= 1'b0;
    else
      case (error_setA)
        2'b11 : error_iA <= 1'b1;
        2'b10 : error_iA <= 1'b0;
        default : error_iA <= error_iVotedA;
      endcase
  end

always @( posedge clockB )
  begin
    if (resetB==1'b0)
      error_iB <= 1'b0;
    else
      case (error_setB)
        2'b11 : error_iB <= 1'b1;
        2'b10 : error_iB <= 1'b0;
        default : error_iB <= error_iVotedB;
      endcase
  end

always @( posedge clockC )
  begin
    if (resetC==1'b0)
      error_iC <= 1'b0;
    else
      case (error_setC)
        2'b11 : error_iC <= 1'b1;
        2'b10 : error_iC <= 1'b0;
        default : error_iC <= error_iVotedC;
      endcase
  end

always @( posedge clockA )
  begin
    if (resetA==1'b0)
      first_iA <= 1'b0;
    else
      case (first_setA)
        2'b11 : first_iA <= 1'b1;
        2'b10 : first_iA <= 1'b0;
        default : first_iA <= first_iVotedA;
      endcase
  end

always @( posedge clockB )
  begin
    if (resetB==1'b0)
      first_iB <= 1'b0;
    else
      case (first_setB)
        2'b11 : first_iB <= 1'b1;
        2'b10 : first_iB <= 1'b0;
        default : first_iB <= first_iVotedB;
      endcase
  end

always @( posedge clockC )
  begin
    if (resetC==1'b0)
      first_iC <= 1'b0;
    else
      case (first_setC)
        2'b11 : first_iC <= 1'b1;
        2'b10 : first_iC <= 1'b0;
        default : first_iC <= first_iVotedC;
      endcase
  end

always @( posedge clockA )
  begin
    if (resetA==1'b0)
      puffer_iA <= 1'b0;
    else
      case (puffer_setA)
        2'b11 : puffer_iA <= 1'b1;
        2'b10 : puffer_iA <= 1'b0;
        default : puffer_iA <= puffer_iVotedA;
      endcase
  end

always @( posedge clockB )
  begin
    if (resetB==1'b0)
      puffer_iB <= 1'b0;
    else
      case (puffer_setB)
        2'b11 : puffer_iB <= 1'b1;
        2'b10 : puffer_iB <= 1'b0;
        default : puffer_iB <= puffer_iVotedB;
      endcase
  end

always @( posedge clockC )
  begin
    if (resetC==1'b0)
      puffer_iC <= 1'b0;
    else
      case (puffer_setC)
        2'b11 : puffer_iC <= 1'b1;
        2'b10 : puffer_iC <= 1'b0;
        default : puffer_iC <= puffer_iVotedC;
      endcase
  end

always @( posedge clockA )
  begin
    if (resetA==1'b0)
      rext_iA <= 1'b0;
    else
      case (rext_setA)
        2'b11 : rext_iA <= 1'b1;
        2'b10 : rext_iA <= 1'b0;
        default : rext_iA <= rext_iVotedA;
      endcase
  end

always @( posedge clockB )
  begin
    if (resetB==1'b0)
      rext_iB <= 1'b0;
    else
      case (rext_setB)
        2'b11 : rext_iB <= 1'b1;
        2'b10 : rext_iB <= 1'b0;
        default : rext_iB <= rext_iVotedB;
      endcase
  end

always @( posedge clockC )
  begin
    if (resetC==1'b0)
      rext_iC <= 1'b0;
    else
      case (rext_setC)
        2'b11 : rext_iC <= 1'b1;
        2'b10 : rext_iC <= 1'b0;
        default : rext_iC <= rext_iVotedC;
      endcase
  end

always @( posedge clockA )
  begin
    if (resetA==1'b0)
      rrtr_iA <= 1'b0;
    else
      case (rrtr_setA)
        2'b11 : rrtr_iA <= 1'b1;
        2'b10 : rrtr_iA <= 1'b0;
        default : rrtr_iA <= rrtr_iVotedA;
      endcase
  end

always @( posedge clockB )
  begin
    if (resetB==1'b0)
      rrtr_iB <= 1'b0;
    else
      case (rrtr_setB)
        2'b11 : rrtr_iB <= 1'b1;
        2'b10 : rrtr_iB <= 1'b0;
        default : rrtr_iB <= rrtr_iVotedB;
      endcase
  end

always @( posedge clockC )
  begin
    if (resetC==1'b0)
      rrtr_iC <= 1'b0;
    else
      case (rrtr_setC)
        2'b11 : rrtr_iC <= 1'b1;
        2'b10 : rrtr_iC <= 1'b0;
        default : rrtr_iC <= rrtr_iVotedC;
      endcase
  end

majorityVoter ackerror_iVoterA (
    .inA(ackerror_iA),
    .inB(ackerror_iB),
    .inC(ackerror_iC),
    .out(ackerror_iVotedA),
    .tmrErr(ackerror_iTmrErrorA)
    );

majorityVoter error_iVoterA (
    .inA(error_iA),
    .inB(error_iB),
    .inC(error_iC),
    .out(error_iVotedA),
    .tmrErr(error_iTmrErrorA)
    );

majorityVoter first_iVoterA (
    .inA(first_iA),
    .inB(first_iB),
    .inC(first_iC),
    .out(first_iVotedA),
    .tmrErr(first_iTmrErrorA)
    );

majorityVoter onarbit_iVoterA (
    .inA(onarbit_iA),
    .inB(onarbit_iB),
    .inC(onarbit_iC),
    .out(onarbit_iVotedA),
    .tmrErr(onarbit_iTmrErrorA)
    );

majorityVoter puffer_iVoterA (
    .inA(puffer_iA),
    .inB(puffer_iB),
    .inC(puffer_iC),
    .out(puffer_iVotedA),
    .tmrErr(puffer_iTmrErrorA)
    );

majorityVoter receiver_iVoterA (
    .inA(receiver_iA),
    .inB(receiver_iB),
    .inC(receiver_iC),
    .out(receiver_iVotedA),
    .tmrErr(receiver_iTmrErrorA)
    );

majorityVoter rext_iVoterA (
    .inA(rext_iA),
    .inB(rext_iB),
    .inC(rext_iC),
    .out(rext_iVotedA),
    .tmrErr(rext_iTmrErrorA)
    );

majorityVoter rrtr_iVoterA (
    .inA(rrtr_iA),
    .inB(rrtr_iB),
    .inC(rrtr_iC),
    .out(rrtr_iVotedA),
    .tmrErr(rrtr_iTmrErrorA)
    );

majorityVoter transmitter_iVoterA (
    .inA(transmitter_iA),
    .inB(transmitter_iB),
    .inC(transmitter_iC),
    .out(transmitter_iVotedA),
    .tmrErr(transmitter_iTmrErrorA)
    );

majorityVoter ackerror_iVoterB (
    .inA(ackerror_iA),
    .inB(ackerror_iB),
    .inC(ackerror_iC),
    .out(ackerror_iVotedB),
    .tmrErr(ackerror_iTmrErrorB)
    );

majorityVoter error_iVoterB (
    .inA(error_iA),
    .inB(error_iB),
    .inC(error_iC),
    .out(error_iVotedB),
    .tmrErr(error_iTmrErrorB)
    );

majorityVoter first_iVoterB (
    .inA(first_iA),
    .inB(first_iB),
    .inC(first_iC),
    .out(first_iVotedB),
    .tmrErr(first_iTmrErrorB)
    );

majorityVoter onarbit_iVoterB (
    .inA(onarbit_iA),
    .inB(onarbit_iB),
    .inC(onarbit_iC),
    .out(onarbit_iVotedB),
    .tmrErr(onarbit_iTmrErrorB)
    );

majorityVoter puffer_iVoterB (
    .inA(puffer_iA),
    .inB(puffer_iB),
    .inC(puffer_iC),
    .out(puffer_iVotedB),
    .tmrErr(puffer_iTmrErrorB)
    );

majorityVoter receiver_iVoterB (
    .inA(receiver_iA),
    .inB(receiver_iB),
    .inC(receiver_iC),
    .out(receiver_iVotedB),
    .tmrErr(receiver_iTmrErrorB)
    );

majorityVoter rext_iVoterB (
    .inA(rext_iA),
    .inB(rext_iB),
    .inC(rext_iC),
    .out(rext_iVotedB),
    .tmrErr(rext_iTmrErrorB)
    );

majorityVoter rrtr_iVoterB (
    .inA(rrtr_iA),
    .inB(rrtr_iB),
    .inC(rrtr_iC),
    .out(rrtr_iVotedB),
    .tmrErr(rrtr_iTmrErrorB)
    );

majorityVoter transmitter_iVoterB (
    .inA(transmitter_iA),
    .inB(transmitter_iB),
    .inC(transmitter_iC),
    .out(transmitter_iVotedB),
    .tmrErr(transmitter_iTmrErrorB)
    );

majorityVoter ackerror_iVoterC (
    .inA(ackerror_iA),
    .inB(ackerror_iB),
    .inC(ackerror_iC),
    .out(ackerror_iVotedC),
    .tmrErr(ackerror_iTmrErrorC)
    );

majorityVoter error_iVoterC (
    .inA(error_iA),
    .inB(error_iB),
    .inC(error_iC),
    .out(error_iVotedC),
    .tmrErr(error_iTmrErrorC)
    );

majorityVoter first_iVoterC (
    .inA(first_iA),
    .inB(first_iB),
    .inC(first_iC),
    .out(first_iVotedC),
    .tmrErr(first_iTmrErrorC)
    );

majorityVoter onarbit_iVoterC (
    .inA(onarbit_iA),
    .inB(onarbit_iB),
    .inC(onarbit_iC),
    .out(onarbit_iVotedC),
    .tmrErr(onarbit_iTmrErrorC)
    );

majorityVoter puffer_iVoterC (
    .inA(puffer_iA),
    .inB(puffer_iB),
    .inC(puffer_iC),
    .out(puffer_iVotedC),
    .tmrErr(puffer_iTmrErrorC)
    );

majorityVoter receiver_iVoterC (
    .inA(receiver_iA),
    .inB(receiver_iB),
    .inC(receiver_iC),
    .out(receiver_iVotedC),
    .tmrErr(receiver_iTmrErrorC)
    );

majorityVoter rext_iVoterC (
    .inA(rext_iA),
    .inB(rext_iB),
    .inC(rext_iC),
    .out(rext_iVotedC),
    .tmrErr(rext_iTmrErrorC)
    );

majorityVoter rrtr_iVoterC (
    .inA(rrtr_iA),
    .inB(rrtr_iB),
    .inC(rrtr_iC),
    .out(rrtr_iVotedC),
    .tmrErr(rrtr_iTmrErrorC)
    );

majorityVoter transmitter_iVoterC (
    .inA(transmitter_iA),
    .inB(transmitter_iB),
    .inC(transmitter_iC),
    .out(transmitter_iVotedC),
    .tmrErr(transmitter_iTmrErrorC)
    );
endmodule

