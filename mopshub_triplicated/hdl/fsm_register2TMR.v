/****************************************************************************************************
 *                          ! THIS FILE WAS AUTO-GENERATED BY TMRG TOOL !                           *
 *                                   ! DO NOT EDIT IT MANUALLY !                                    *
 *                                                                                                  *
 * file    : ./output/fsm_register2TMR.v                                                            *
 *                                                                                                  *
 * user    : lucas                                                                                  *
 * host    : DESKTOP-BFDSFP2                                                                        *
 * date    : 06/10/2022 13:52:50                                                                    *
 *                                                                                                  *
 * workdir : /mnt/c/Users/Lucas/Documents/GitHub/mopshub_triplicated/triplicated/mopshub_top_board/hdl *
 * cmd     : /mnt/c/Users/Lucas/Desktop/mopshub_triplication/tmrg-master/bin/tmrg -vv -c tmrg.cfg   *
 * tmrg rev:                                                                                        *
 *                                                                                                  *
 * src file: fsm_register2.v                                                                        *
 *           Git SHA           : c110441b08b692cc54ebd4a3b84a2599430e8f93                           *
 *           Modification time : 2022-08-25 11:31:21                                                *
 *           File Size         : 6395                                                               *
 *           MD5 hash          : 7ed1c0e80930dbec1c508a077bcd6c30                                   *
 *                                                                                                  *
 ****************************************************************************************************/

module fsm_register2TMR(
  input wire  clock ,
  input wire  reset ,
  input wire [1:0] ackerror_set ,
  input wire [1:0] onarbit_set ,
  input wire [1:0] transmitter_set ,
  input wire [1:0] receiver_set ,
  input wire [1:0] error_set ,
  input wire [1:0] first_set ,
  input wire [1:0] puffer_set ,
  input wire [1:0] rext_set ,
  input wire [1:0] rrtr_set ,
  output wire  ackerror ,
  output wire  onarbit ,
  output wire  transmitter ,
  output wire  receiver ,
  output wire  error ,
  output wire  first ,
  output wire  puffer ,
  output wire  rext ,
  output wire  rrtr 
);
wire [1:0] transmitter_setC;
wire [1:0] transmitter_setB;
wire [1:0] transmitter_setA;
wire transmitterC;
wire transmitterB;
wire transmitterA;
wire [1:0] rrtr_setC;
wire [1:0] rrtr_setB;
wire [1:0] rrtr_setA;
wire rrtrC;
wire rrtrB;
wire rrtrA;
wire [1:0] rext_setC;
wire [1:0] rext_setB;
wire [1:0] rext_setA;
wire rextC;
wire rextB;
wire rextA;
wire resetC;
wire resetB;
wire resetA;
wire [1:0] receiver_setC;
wire [1:0] receiver_setB;
wire [1:0] receiver_setA;
wire receiverC;
wire receiverB;
wire receiverA;
wire [1:0] puffer_setC;
wire [1:0] puffer_setB;
wire [1:0] puffer_setA;
wire pufferC;
wire pufferB;
wire pufferA;
wire [1:0] onarbit_setC;
wire [1:0] onarbit_setB;
wire [1:0] onarbit_setA;
wire [1:0] first_setC;
wire [1:0] first_setB;
wire [1:0] first_setA;
wire firstC;
wire firstB;
wire firstA;
wire [1:0] error_setC;
wire [1:0] error_setB;
wire [1:0] error_setA;
wire errorC;
wire errorB;
wire errorA;
wire clockC;
wire clockB;
wire clockA;
wire [1:0] ackerror_setC;
wire [1:0] ackerror_setB;
wire [1:0] ackerror_setA;
wire ackerrorC;
wire ackerrorB;
wire ackerrorA;
wor transmitter_iTmrError;
wire transmitter_i;
wor rrtr_iTmrError;
wire rrtr_i;
wor rext_iTmrError;
wire rext_i;
wor receiver_iTmrError;
wire receiver_i;
wor puffer_iTmrError;
wire puffer_i;
wor onarbit_iTmrError;
wire onarbit_i;
wor first_iTmrError;
wire first_i;
wor error_iTmrError;
wire error_i;
wor ackerror_iTmrError;
wire ackerror_i;
reg  ackerror_iA ;
reg  ackerror_iB ;
reg  ackerror_iC ;
reg  onarbit_iA ;
reg  onarbit_iB ;
reg  onarbit_iC ;
reg  transmitter_iA ;
reg  transmitter_iB ;
reg  transmitter_iC ;
reg  receiver_iA ;
reg  receiver_iB ;
reg  receiver_iC ;
reg  error_iA ;
reg  error_iB ;
reg  error_iC ;
reg  first_iA ;
reg  first_iB ;
reg  first_iC ;
reg  puffer_iA ;
reg  puffer_iB ;
reg  puffer_iC ;
reg  rext_iA ;
reg  rext_iB ;
reg  rext_iC ;
reg  rrtr_iA ;
reg  rrtr_iB ;
reg  rrtr_iC ;
assign ackerror =  ackerror_i;
assign onarbit =  onarbit_i;
assign transmitter =  transmitter_i;
assign receiver =  receiver_i;
assign error =  error_i;
assign first =  first_i;
assign puffer =  puffer_i;
assign rext =  rext_i;
assign rrtr =  rrtr_i;

always @( posedge clockA )
  begin
    if (resetA==1'b0)
      ackerror_iA <= 1'b0;
    else
      case (ackerror_setA)
        2'b11 : ackerror_iA <= 1'b1;
        2'b10 : ackerror_iA <= 1'b0;
        default : ackerror_iA <= ackerrorA;
      endcase
  end

always @( posedge clockB )
  begin
    if (resetB==1'b0)
      ackerror_iB <= 1'b0;
    else
      case (ackerror_setB)
        2'b11 : ackerror_iB <= 1'b1;
        2'b10 : ackerror_iB <= 1'b0;
        default : ackerror_iB <= ackerrorB;
      endcase
  end

always @( posedge clockC )
  begin
    if (resetC==1'b0)
      ackerror_iC <= 1'b0;
    else
      case (ackerror_setC)
        2'b11 : ackerror_iC <= 1'b1;
        2'b10 : ackerror_iC <= 1'b0;
        default : ackerror_iC <= ackerrorC;
      endcase
  end

always @( posedge clockA )
  begin
    if (resetA==1'b0)
      case (onarbit_setA)
        2'b11 : onarbit_iA <= 1'b1;
        2'b10 : onarbit_iA <= 1'b0;
        default : onarbit_iA <= 1'b0;
      endcase
  end

always @( posedge clockB )
  begin
    if (resetB==1'b0)
      case (onarbit_setB)
        2'b11 : onarbit_iB <= 1'b1;
        2'b10 : onarbit_iB <= 1'b0;
        default : onarbit_iB <= 1'b0;
      endcase
  end

always @( posedge clockC )
  begin
    if (resetC==1'b0)
      case (onarbit_setC)
        2'b11 : onarbit_iC <= 1'b1;
        2'b10 : onarbit_iC <= 1'b0;
        default : onarbit_iC <= 1'b0;
      endcase
  end

always @( posedge clockA )
  begin
    if (resetA==1'b0)
      transmitter_iA <= 1'b0;
    else
      case (transmitter_setA)
        2'b11 : transmitter_iA <= 1'b1;
        2'b10 : transmitter_iA <= 1'b0;
        default : transmitter_iA <= transmitterA;
      endcase
  end

always @( posedge clockB )
  begin
    if (resetB==1'b0)
      transmitter_iB <= 1'b0;
    else
      case (transmitter_setB)
        2'b11 : transmitter_iB <= 1'b1;
        2'b10 : transmitter_iB <= 1'b0;
        default : transmitter_iB <= transmitterB;
      endcase
  end

always @( posedge clockC )
  begin
    if (resetC==1'b0)
      transmitter_iC <= 1'b0;
    else
      case (transmitter_setC)
        2'b11 : transmitter_iC <= 1'b1;
        2'b10 : transmitter_iC <= 1'b0;
        default : transmitter_iC <= transmitterC;
      endcase
  end

always @( posedge clockA )
  begin
    if (resetA==1'b0)
      receiver_iA <= 1'b0;
    else
      case (receiver_setA)
        2'b11 : receiver_iA <= 1'b1;
        2'b10 : receiver_iA <= 1'b0;
        default : receiver_iA <= receiverA;
      endcase
  end

always @( posedge clockB )
  begin
    if (resetB==1'b0)
      receiver_iB <= 1'b0;
    else
      case (receiver_setB)
        2'b11 : receiver_iB <= 1'b1;
        2'b10 : receiver_iB <= 1'b0;
        default : receiver_iB <= receiverB;
      endcase
  end

always @( posedge clockC )
  begin
    if (resetC==1'b0)
      receiver_iC <= 1'b0;
    else
      case (receiver_setC)
        2'b11 : receiver_iC <= 1'b1;
        2'b10 : receiver_iC <= 1'b0;
        default : receiver_iC <= receiverC;
      endcase
  end

always @( posedge clockA )
  begin
    if (resetA==1'b0)
      error_iA <= 1'b0;
    else
      case (error_setA)
        2'b11 : error_iA <= 1'b1;
        2'b10 : error_iA <= 1'b0;
        default : error_iA <= errorA;
      endcase
  end

always @( posedge clockB )
  begin
    if (resetB==1'b0)
      error_iB <= 1'b0;
    else
      case (error_setB)
        2'b11 : error_iB <= 1'b1;
        2'b10 : error_iB <= 1'b0;
        default : error_iB <= errorB;
      endcase
  end

always @( posedge clockC )
  begin
    if (resetC==1'b0)
      error_iC <= 1'b0;
    else
      case (error_setC)
        2'b11 : error_iC <= 1'b1;
        2'b10 : error_iC <= 1'b0;
        default : error_iC <= errorC;
      endcase
  end

always @( posedge clockA )
  begin
    if (resetA==1'b0)
      first_iA <= 1'b0;
    else
      case (first_setA)
        2'b11 : first_iA <= 1'b1;
        2'b10 : first_iA <= 1'b0;
        default : first_iA <= firstA;
      endcase
  end

always @( posedge clockB )
  begin
    if (resetB==1'b0)
      first_iB <= 1'b0;
    else
      case (first_setB)
        2'b11 : first_iB <= 1'b1;
        2'b10 : first_iB <= 1'b0;
        default : first_iB <= firstB;
      endcase
  end

always @( posedge clockC )
  begin
    if (resetC==1'b0)
      first_iC <= 1'b0;
    else
      case (first_setC)
        2'b11 : first_iC <= 1'b1;
        2'b10 : first_iC <= 1'b0;
        default : first_iC <= firstC;
      endcase
  end

always @( posedge clockA )
  begin
    if (resetA==1'b0)
      puffer_iA <= 1'b0;
    else
      case (puffer_setA)
        2'b11 : puffer_iA <= 1'b1;
        2'b10 : puffer_iA <= 1'b0;
        default : puffer_iA <= pufferA;
      endcase
  end

always @( posedge clockB )
  begin
    if (resetB==1'b0)
      puffer_iB <= 1'b0;
    else
      case (puffer_setB)
        2'b11 : puffer_iB <= 1'b1;
        2'b10 : puffer_iB <= 1'b0;
        default : puffer_iB <= pufferB;
      endcase
  end

always @( posedge clockC )
  begin
    if (resetC==1'b0)
      puffer_iC <= 1'b0;
    else
      case (puffer_setC)
        2'b11 : puffer_iC <= 1'b1;
        2'b10 : puffer_iC <= 1'b0;
        default : puffer_iC <= pufferC;
      endcase
  end

always @( posedge clockA )
  begin
    if (resetA==1'b0)
      rext_iA <= 1'b0;
    else
      case (rext_setA)
        2'b11 : rext_iA <= 1'b1;
        2'b10 : rext_iA <= 1'b0;
        default : rext_iA <= rextA;
      endcase
  end

always @( posedge clockB )
  begin
    if (resetB==1'b0)
      rext_iB <= 1'b0;
    else
      case (rext_setB)
        2'b11 : rext_iB <= 1'b1;
        2'b10 : rext_iB <= 1'b0;
        default : rext_iB <= rextB;
      endcase
  end

always @( posedge clockC )
  begin
    if (resetC==1'b0)
      rext_iC <= 1'b0;
    else
      case (rext_setC)
        2'b11 : rext_iC <= 1'b1;
        2'b10 : rext_iC <= 1'b0;
        default : rext_iC <= rextC;
      endcase
  end

always @( posedge clockA )
  begin
    if (resetA==1'b0)
      rrtr_iA <= 1'b0;
    else
      case (rrtr_setA)
        2'b11 : rrtr_iA <= 1'b1;
        2'b10 : rrtr_iA <= 1'b0;
        default : rrtr_iA <= rrtrA;
      endcase
  end

always @( posedge clockB )
  begin
    if (resetB==1'b0)
      rrtr_iB <= 1'b0;
    else
      case (rrtr_setB)
        2'b11 : rrtr_iB <= 1'b1;
        2'b10 : rrtr_iB <= 1'b0;
        default : rrtr_iB <= rrtrB;
      endcase
  end

always @( posedge clockC )
  begin
    if (resetC==1'b0)
      rrtr_iC <= 1'b0;
    else
      case (rrtr_setC)
        2'b11 : rrtr_iC <= 1'b1;
        2'b10 : rrtr_iC <= 1'b0;
        default : rrtr_iC <= rrtrC;
      endcase
  end

majorityVoter ackerror_iVoter (
    .inA(ackerror_iA),
    .inB(ackerror_iB),
    .inC(ackerror_iC),
    .out(ackerror_i),
    .tmrErr(ackerror_iTmrError)
    );

majorityVoter error_iVoter (
    .inA(error_iA),
    .inB(error_iB),
    .inC(error_iC),
    .out(error_i),
    .tmrErr(error_iTmrError)
    );

majorityVoter first_iVoter (
    .inA(first_iA),
    .inB(first_iB),
    .inC(first_iC),
    .out(first_i),
    .tmrErr(first_iTmrError)
    );

majorityVoter onarbit_iVoter (
    .inA(onarbit_iA),
    .inB(onarbit_iB),
    .inC(onarbit_iC),
    .out(onarbit_i),
    .tmrErr(onarbit_iTmrError)
    );

majorityVoter puffer_iVoter (
    .inA(puffer_iA),
    .inB(puffer_iB),
    .inC(puffer_iC),
    .out(puffer_i),
    .tmrErr(puffer_iTmrError)
    );

majorityVoter receiver_iVoter (
    .inA(receiver_iA),
    .inB(receiver_iB),
    .inC(receiver_iC),
    .out(receiver_i),
    .tmrErr(receiver_iTmrError)
    );

majorityVoter rext_iVoter (
    .inA(rext_iA),
    .inB(rext_iB),
    .inC(rext_iC),
    .out(rext_i),
    .tmrErr(rext_iTmrError)
    );

majorityVoter rrtr_iVoter (
    .inA(rrtr_iA),
    .inB(rrtr_iB),
    .inC(rrtr_iC),
    .out(rrtr_i),
    .tmrErr(rrtr_iTmrError)
    );

majorityVoter transmitter_iVoter (
    .inA(transmitter_iA),
    .inB(transmitter_iB),
    .inC(transmitter_iC),
    .out(transmitter_i),
    .tmrErr(transmitter_iTmrError)
    );

fanout ackerrorFanout (
    .in(ackerror),
    .outA(ackerrorA),
    .outB(ackerrorB),
    .outC(ackerrorC)
    );

fanout #(.WIDTH(2)) ackerror_setFanout (
    .in(ackerror_set),
    .outA(ackerror_setA),
    .outB(ackerror_setB),
    .outC(ackerror_setC)
    );

fanout clockFanout (
    .in(clock),
    .outA(clockA),
    .outB(clockB),
    .outC(clockC)
    );

fanout errorFanout (
    .in(error),
    .outA(errorA),
    .outB(errorB),
    .outC(errorC)
    );

fanout #(.WIDTH(2)) error_setFanout (
    .in(error_set),
    .outA(error_setA),
    .outB(error_setB),
    .outC(error_setC)
    );

fanout firstFanout (
    .in(first),
    .outA(firstA),
    .outB(firstB),
    .outC(firstC)
    );

fanout #(.WIDTH(2)) first_setFanout (
    .in(first_set),
    .outA(first_setA),
    .outB(first_setB),
    .outC(first_setC)
    );

fanout #(.WIDTH(2)) onarbit_setFanout (
    .in(onarbit_set),
    .outA(onarbit_setA),
    .outB(onarbit_setB),
    .outC(onarbit_setC)
    );

fanout pufferFanout (
    .in(puffer),
    .outA(pufferA),
    .outB(pufferB),
    .outC(pufferC)
    );

fanout #(.WIDTH(2)) puffer_setFanout (
    .in(puffer_set),
    .outA(puffer_setA),
    .outB(puffer_setB),
    .outC(puffer_setC)
    );

fanout receiverFanout (
    .in(receiver),
    .outA(receiverA),
    .outB(receiverB),
    .outC(receiverC)
    );

fanout #(.WIDTH(2)) receiver_setFanout (
    .in(receiver_set),
    .outA(receiver_setA),
    .outB(receiver_setB),
    .outC(receiver_setC)
    );

fanout resetFanout (
    .in(reset),
    .outA(resetA),
    .outB(resetB),
    .outC(resetC)
    );

fanout rextFanout (
    .in(rext),
    .outA(rextA),
    .outB(rextB),
    .outC(rextC)
    );

fanout #(.WIDTH(2)) rext_setFanout (
    .in(rext_set),
    .outA(rext_setA),
    .outB(rext_setB),
    .outC(rext_setC)
    );

fanout rrtrFanout (
    .in(rrtr),
    .outA(rrtrA),
    .outB(rrtrB),
    .outC(rrtrC)
    );

fanout #(.WIDTH(2)) rrtr_setFanout (
    .in(rrtr_set),
    .outA(rrtr_setA),
    .outB(rrtr_setB),
    .outC(rrtr_setC)
    );

fanout transmitterFanout (
    .in(transmitter),
    .outA(transmitterA),
    .outB(transmitterB),
    .outC(transmitterC)
    );

fanout #(.WIDTH(2)) transmitter_setFanout (
    .in(transmitter_set),
    .outA(transmitter_setA),
    .outB(transmitter_setB),
    .outC(transmitter_setC)
    );
endmodule

