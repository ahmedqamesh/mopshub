//
// Module mopshub_triplicated.Output_ScalingTMR.struct
//
// Created:
//          by - dcs.dcs (localhost)
//          at - 09:18:04 05/10/22
//
// Generated by Mentor Graphics' HDL Designer(TM) 2019.4 (Build 4)
//


module Output_ScalingTMR #(
   // synopsys template
   parameter WidthA = 18,
   parameter WidthB = 6
)
( 
   // Port Declarations
   input   wire  signed  [WidthA-1:0]  AA, 
   input   wire  signed  [WidthA-1:0]  AB, 
   input   wire  signed  [WidthA-1:0]  AC, 
   input   wire                        ResetA, 
   input   wire                        ResetB, 
   input   wire                        ResetC, 
   input   wire                        CLKA, 
   input   wire                        CLKB, 
   input   wire                        CLKC, 
   input   wire                        EnableA, 
   input   wire                        EnableB, 
   input   wire                        EnableC, 
   output  wire          [WidthB-1:0]  BA, 
   output  wire          [WidthB-1:0]  BB, 
   output  wire          [WidthB-1:0]  BC
);


// Internal Declarations


// Local declarations
localparam Max =(2**WidthB)-1;


// Internal signal declarations
wor                B_iTmrErrorC;
wire  [WidthB-1:0] B_iVotedC;
wor                B_iTmrErrorB;
wire  [WidthB-1:0] B_iVotedB;
wor                B_iTmrErrorA;
wire  [WidthB-1:0] B_iVotedA;
reg   [WidthB-1:0] B_iA;
reg   [WidthB-1:0] B_iB;
reg   [WidthB-1:0] B_iC;


// Instances 
majorityVoter #(((WidthB-1)>(0)) ? ((WidthB-1)-(0)+1) : ((0)-(WidthB-1)+1)) B_iVoterA( 
   .inA    (B_iA), 
   .inB    (B_iB), 
   .inC    (B_iC), 
   .out    (B_iVotedA), 
   .tmrErr (B_iTmrErrorA)
); 

majorityVoter #(((WidthB-1)>(0)) ? ((WidthB-1)-(0)+1) : ((0)-(WidthB-1)+1)) B_iVoterB( 
   .inA    (B_iA), 
   .inB    (B_iB), 
   .inC    (B_iC), 
   .out    (B_iVotedB), 
   .tmrErr (B_iTmrErrorB)
); 

majorityVoter #(((WidthB-1)>(0)) ? ((WidthB-1)-(0)+1) : ((0)-(WidthB-1)+1)) B_iVoterC( 
   .inA    (B_iA), 
   .inB    (B_iB), 
   .inC    (B_iC), 
   .out    (B_iVotedC), 
   .tmrErr (B_iTmrErrorC)
); 

// HDL Embedded Text Block 1 eb1
assign BA =  B_iVotedA;
assign BB =  B_iVotedB;
assign BC =  B_iVotedC;
// HDL Embedded Text Block 2 eb2
always @( posedge CLKA or negedge ResetA )
  begin
    if (ResetA==0)
      B_iA <= 6'b100000;
    else
      begin
        if (EnableA)
          begin
            if (AA>0&&AA[17:3] >Max)
              B_iA <= Max;
            else
              if (AA<=0)
                B_iA <= 0;
              else
                B_iA <= AA[8:3] ;
          end
        else
          B_iA <= B_iVotedA;
      end
  end
// HDL Embedded Text Block 3 eb3
always @( posedge CLKB or negedge ResetB )
  begin
    if (ResetB==0)
      B_iB <= 6'b100000;
    else
      begin
        if (EnableB)
          begin
            if (AB>0&&AB[17:3] >Max)
              B_iB <= Max;
            else
              if (AB<=0)
                B_iB <= 0;
              else
                B_iB <= AB[8:3] ;
          end
        else
          B_iB <= B_iVotedB;
      end
  end
// HDL Embedded Text Block 4 eb4
always @( posedge CLKC or negedge ResetC )
  begin
    if (ResetC==0)
      B_iC <= 6'b100000;
    else
      begin
        if (EnableC)
          begin
            if (AC>0&&AC[17:3] >Max)
              B_iC <= Max;
            else
              if (AC<=0)
                B_iC <= 0;
              else
                B_iC <= AC[8:3] ;
          end
        else
          B_iC <= B_iVotedC;
      end
  end

endmodule // Output_ScalingTMR

