/****************************************************************************************************
 *                          ! THIS FILE WAS AUTO-GENERATED BY TMRG TOOL !                           *
 *                                   ! DO NOT EDIT IT MANUALLY !                                    *
 *                                                                                                  *
 * file    : ./output/rec_mes_bufTMR.v                                                              *
 *                                                                                                  *
 * user    : lucas                                                                                  *
 * host    : DESKTOP-BFDSFP2                                                                        *
 * date    : 06/10/2022 13:53:00                                                                    *
 *                                                                                                  *
 * workdir : /mnt/c/Users/Lucas/Documents/GitHub/mopshub_triplicated/triplicated/mopshub_top_board/hdl *
 * cmd     : /mnt/c/Users/Lucas/Desktop/mopshub_triplication/tmrg-master/bin/tmrg -vv -c tmrg.cfg   *
 * tmrg rev:                                                                                        *
 *                                                                                                  *
 * src file: rec_mes_buf.v                                                                          *
 *           Git SHA           : c110441b08b692cc54ebd4a3b84a2599430e8f93                           *
 *           Modification time : 2022-10-05 20:39:33                                                *
 *           File Size         : 2976                                                               *
 *           MD5 hash          : d3d23d046bdf820b2a01fbd875200d9c                                   *
 *                                                                                                  *
 ****************************************************************************************************/

module buffer_rec_dataTMR(
  input wire  clk ,
  input wire [15:0] data_rec_in ,
  input wire [4:0] can_rec_select ,
  input wire  buffer_en ,
  input wire  rst ,
  input wire [4:0] addr ,
  output wire [75:0] data_rec_out 
);
wire rstC;
wire rstB;
wire rstA;
wire id_vC;
wire id_vB;
wire id_vA;
wire [15:0] data_rec_inC;
wire [15:0] data_rec_inB;
wire [15:0] data_rec_inA;
wire clkC;
wire clkB;
wire clkA;
wire [4:0] can_rec_selectC;
wire [4:0] can_rec_selectB;
wire [4:0] can_rec_selectA;
wire buffer_enC;
wire buffer_enB;
wire buffer_enA;
wire b8_vC;
wire b8_vB;
wire b8_vA;
wire b7_vC;
wire b7_vB;
wire b7_vA;
wire b6_vC;
wire b6_vB;
wire b6_vA;
wire b5_vC;
wire b5_vB;
wire b5_vA;
wire b4_vC;
wire b4_vB;
wire b4_vA;
wire b3_vC;
wire b3_vB;
wire b3_vA;
wire b2_vC;
wire b2_vB;
wire b2_vA;
wire b1_vC;
wire b1_vB;
wire b1_vA;
wire [4:0] addrC;
wire [4:0] addrB;
wire [4:0] addrA;
wor idTmrError;
wire [11:0] id;
wor b8TmrError;
wire [7:0] b8;
wor b7TmrError;
wire [7:0] b7;
wor b6TmrError;
wire [7:0] b6;
wor b5TmrError;
wire [7:0] b5;
wor b4TmrError;
wire [7:0] b4;
wor b3TmrError;
wire [7:0] b3;
wor b2TmrError;
wire [7:0] b2;
wor b1TmrError;
wire [7:0] b1;
reg  [11:0] idA ;
reg  [11:0] idB ;
reg  [11:0] idC ;
reg  [7:0] b1A ;
reg  [7:0] b1B ;
reg  [7:0] b1C ;
reg  [7:0] b2A ;
reg  [7:0] b2B ;
reg  [7:0] b2C ;
reg  [7:0] b3A ;
reg  [7:0] b3B ;
reg  [7:0] b3C ;
reg  [7:0] b4A ;
reg  [7:0] b4B ;
reg  [7:0] b4C ;
reg  [7:0] b5A ;
reg  [7:0] b5B ;
reg  [7:0] b5C ;
reg  [7:0] b6A ;
reg  [7:0] b6B ;
reg  [7:0] b6C ;
reg  [7:0] b7A ;
reg  [7:0] b7B ;
reg  [7:0] b7C ;
reg  [7:0] b8A ;
reg  [7:0] b8B ;
reg  [7:0] b8C ;
initial
  begin
    idA =  12'd0;
    b1A =  8'h0;
    b2A =  8'h0;
    b3A =  8'h0;
    b4A =  8'h0;
    b5A =  8'h0;
    b6A =  8'h0;
    b7A =  8'h0;
    b8A =  8'h0;
  end
initial
  begin
    idB =  12'd0;
    b1B =  8'h0;
    b2B =  8'h0;
    b3B =  8'h0;
    b4B =  8'h0;
    b5B =  8'h0;
    b6B =  8'h0;
    b7B =  8'h0;
    b8B =  8'h0;
  end
initial
  begin
    idC =  12'd0;
    b1C =  8'h0;
    b2C =  8'h0;
    b3C =  8'h0;
    b4C =  8'h0;
    b5C =  8'h0;
    b6C =  8'h0;
    b7C =  8'h0;
    b8C =  8'h0;
  end
wire id_v =  id;
wire b1_v =  b1;
wire b2_v =  b2;
wire b3_v =  b3;
wire b4_v =  b4;
wire b5_v =  b5;
wire b6_v =  b6;
wire b7_v =  b7;
wire b8_v =  b8;

always @( posedge clkA )
  begin
    if (!rstA)
      begin
        idA <= 12'h000;
        b1A <= 8'h00;
        b2A <= 8'h00;
        b3A <= 8'h00;
        b4A <= 8'h00;
        b5A <= 8'h00;
        b6A <= 8'h00;
        b7A <= 8'h00;
        b8A <= 8'h00;
      end
    else
      begin
        if (buffer_enA)
          begin
            case (addrA)
              5'b00101 : idA[10:0]  <= data_rec_inA[15:5] ;
              5'b00011 : 
                begin
                  b2A <= data_rec_inA[7:0] ;
                  b1A <= data_rec_inA[15:8] ;
                end
              5'b00010 : 
                begin
                  b4A <= data_rec_inA[7:0] ;
                  b3A <= data_rec_inA[15:8] ;
                end
              5'b00001 : 
                begin
                  b6A <= data_rec_inA[7:0] ;
                  b5A <= data_rec_inA[15:8] ;
                end
              5'b00000 : 
                begin
                  b8A <= {3'b0,can_rec_selectA};
                  b7A <= data_rec_inA[15:8] ;
                end
              default begin
  idA <= id_vA;
  b1A <= b1_vA;
  b2A <= b2_vA;
  b3A <= b3_vA;
  b4A <= b4_vA;
  b5A <= b5_vA;
  b6A <= b6_vA;
  b7A <= b7_vA;
  b8A <= b8_vA;
end 
            endcase
          end
      end
  end

always @( posedge clkB )
  begin
    if (!rstB)
      begin
        idB <= 12'h000;
        b1B <= 8'h00;
        b2B <= 8'h00;
        b3B <= 8'h00;
        b4B <= 8'h00;
        b5B <= 8'h00;
        b6B <= 8'h00;
        b7B <= 8'h00;
        b8B <= 8'h00;
      end
    else
      begin
        if (buffer_enB)
          begin
            case (addrB)
              5'b00101 : idB[10:0]  <= data_rec_inB[15:5] ;
              5'b00011 : 
                begin
                  b2B <= data_rec_inB[7:0] ;
                  b1B <= data_rec_inB[15:8] ;
                end
              5'b00010 : 
                begin
                  b4B <= data_rec_inB[7:0] ;
                  b3B <= data_rec_inB[15:8] ;
                end
              5'b00001 : 
                begin
                  b6B <= data_rec_inB[7:0] ;
                  b5B <= data_rec_inB[15:8] ;
                end
              5'b00000 : 
                begin
                  b8B <= {3'b0,can_rec_selectB};
                  b7B <= data_rec_inB[15:8] ;
                end
              default begin
  idB <= id_vB;
  b1B <= b1_vB;
  b2B <= b2_vB;
  b3B <= b3_vB;
  b4B <= b4_vB;
  b5B <= b5_vB;
  b6B <= b6_vB;
  b7B <= b7_vB;
  b8B <= b8_vB;
end 
            endcase
          end
      end
  end

always @( posedge clkC )
  begin
    if (!rstC)
      begin
        idC <= 12'h000;
        b1C <= 8'h00;
        b2C <= 8'h00;
        b3C <= 8'h00;
        b4C <= 8'h00;
        b5C <= 8'h00;
        b6C <= 8'h00;
        b7C <= 8'h00;
        b8C <= 8'h00;
      end
    else
      begin
        if (buffer_enC)
          begin
            case (addrC)
              5'b00101 : idC[10:0]  <= data_rec_inC[15:5] ;
              5'b00011 : 
                begin
                  b2C <= data_rec_inC[7:0] ;
                  b1C <= data_rec_inC[15:8] ;
                end
              5'b00010 : 
                begin
                  b4C <= data_rec_inC[7:0] ;
                  b3C <= data_rec_inC[15:8] ;
                end
              5'b00001 : 
                begin
                  b6C <= data_rec_inC[7:0] ;
                  b5C <= data_rec_inC[15:8] ;
                end
              5'b00000 : 
                begin
                  b8C <= {3'b0,can_rec_selectC};
                  b7C <= data_rec_inC[15:8] ;
                end
              default begin
  idC <= id_vC;
  b1C <= b1_vC;
  b2C <= b2_vC;
  b3C <= b3_vC;
  b4C <= b4_vC;
  b5C <= b5_vC;
  b6C <= b6_vC;
  b7C <= b7_vC;
  b8C <= b8_vC;
end 
            endcase
          end
      end
  end
assign data_rec_out =  {id_v,b1_v,b3_v,b2_v,b4_v,b8_v,b7_v,b6_v,b5_v};

majorityVoter #(.WIDTH(8)) b1Voter (
    .inA(b1A),
    .inB(b1B),
    .inC(b1C),
    .out(b1),
    .tmrErr(b1TmrError)
    );

majorityVoter #(.WIDTH(8)) b2Voter (
    .inA(b2A),
    .inB(b2B),
    .inC(b2C),
    .out(b2),
    .tmrErr(b2TmrError)
    );

majorityVoter #(.WIDTH(8)) b3Voter (
    .inA(b3A),
    .inB(b3B),
    .inC(b3C),
    .out(b3),
    .tmrErr(b3TmrError)
    );

majorityVoter #(.WIDTH(8)) b4Voter (
    .inA(b4A),
    .inB(b4B),
    .inC(b4C),
    .out(b4),
    .tmrErr(b4TmrError)
    );

majorityVoter #(.WIDTH(8)) b5Voter (
    .inA(b5A),
    .inB(b5B),
    .inC(b5C),
    .out(b5),
    .tmrErr(b5TmrError)
    );

majorityVoter #(.WIDTH(8)) b6Voter (
    .inA(b6A),
    .inB(b6B),
    .inC(b6C),
    .out(b6),
    .tmrErr(b6TmrError)
    );

majorityVoter #(.WIDTH(8)) b7Voter (
    .inA(b7A),
    .inB(b7B),
    .inC(b7C),
    .out(b7),
    .tmrErr(b7TmrError)
    );

majorityVoter #(.WIDTH(8)) b8Voter (
    .inA(b8A),
    .inB(b8B),
    .inC(b8C),
    .out(b8),
    .tmrErr(b8TmrError)
    );

majorityVoter #(.WIDTH(12)) idVoter (
    .inA(idA),
    .inB(idB),
    .inC(idC),
    .out(id),
    .tmrErr(idTmrError)
    );

fanout #(.WIDTH(5)) addrFanout (
    .in(addr),
    .outA(addrA),
    .outB(addrB),
    .outC(addrC)
    );

fanout b1_vFanout (
    .in(b1_v),
    .outA(b1_vA),
    .outB(b1_vB),
    .outC(b1_vC)
    );

fanout b2_vFanout (
    .in(b2_v),
    .outA(b2_vA),
    .outB(b2_vB),
    .outC(b2_vC)
    );

fanout b3_vFanout (
    .in(b3_v),
    .outA(b3_vA),
    .outB(b3_vB),
    .outC(b3_vC)
    );

fanout b4_vFanout (
    .in(b4_v),
    .outA(b4_vA),
    .outB(b4_vB),
    .outC(b4_vC)
    );

fanout b5_vFanout (
    .in(b5_v),
    .outA(b5_vA),
    .outB(b5_vB),
    .outC(b5_vC)
    );

fanout b6_vFanout (
    .in(b6_v),
    .outA(b6_vA),
    .outB(b6_vB),
    .outC(b6_vC)
    );

fanout b7_vFanout (
    .in(b7_v),
    .outA(b7_vA),
    .outB(b7_vB),
    .outC(b7_vC)
    );

fanout b8_vFanout (
    .in(b8_v),
    .outA(b8_vA),
    .outB(b8_vB),
    .outC(b8_vC)
    );

fanout buffer_enFanout (
    .in(buffer_en),
    .outA(buffer_enA),
    .outB(buffer_enB),
    .outC(buffer_enC)
    );

fanout #(.WIDTH(5)) can_rec_selectFanout (
    .in(can_rec_select),
    .outA(can_rec_selectA),
    .outB(can_rec_selectB),
    .outC(can_rec_selectC)
    );

fanout clkFanout (
    .in(clk),
    .outA(clkA),
    .outB(clkB),
    .outC(clkC)
    );

fanout #(.WIDTH(16)) data_rec_inFanout (
    .in(data_rec_in),
    .outA(data_rec_inA),
    .outB(data_rec_inB),
    .outC(data_rec_inC)
    );

fanout id_vFanout (
    .in(id_v),
    .outA(id_vA),
    .outB(id_vB),
    .outC(id_vC)
    );

fanout rstFanout (
    .in(rst),
    .outA(rstA),
    .outB(rstB),
    .outC(rstC)
    );
endmodule

