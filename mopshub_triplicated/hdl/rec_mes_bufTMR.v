/****************************************************************************************************
 *                          ! THIS FILE WAS AUTO-GENERATED BY TMRG TOOL !                           *
 *                                   ! DO NOT EDIT IT MANUALLY !                                    *
 *                                                                                                  *
 * file    : ./output/rec_mes_bufTMR.v                                                              *
 *                                                                                                  *
 * user    : lucas                                                                                  *
 * host    : DESKTOP-BFDSFP2                                                                        *
 * date    : 03/04/2022 20:08:56                                                                    *
 *                                                                                                  *
 * workdir : /mnt/c/Users/Lucas/Desktop/mopshub_triplication/triplicated/mopshub_top_canakari_ftrim/hdl *
 * cmd     : /mnt/c/Users/Lucas/Desktop/mopshub_triplication/tmrg-master/bin/tmrg -vv -c tmrg.cfg   *
 * tmrg rev:                                                                                        *
 *                                                                                                  *
 * src file: rec_mes_buf.v                                                                          *
 *           Git SHA           : File not in git repository!                                        *
 *           Modification time : 2022-03-28 18:31:46                                                *
 *           File Size         : 2555                                                               *
 *           MD5 hash          : 07c2b28f35c0a1a5203bfffac1092770                                   *
 *                                                                                                  *
 ****************************************************************************************************/

module buffer_rec_dataTMR(
  input wire  clkA ,
  input wire  clkB ,
  input wire  clkC ,
  input wire [15:0] data_rec_inA ,
  input wire [15:0] data_rec_inB ,
  input wire [15:0] data_rec_inC ,
  input wire [4:0] can_rec_selectA ,
  input wire [4:0] can_rec_selectB ,
  input wire [4:0] can_rec_selectC ,
  input wire  buffer_enA ,
  input wire  buffer_enB ,
  input wire  buffer_enC ,
  input wire  rstA ,
  input wire  rstB ,
  input wire  rstC ,
  input wire [4:0] addrA ,
  input wire [4:0] addrB ,
  input wire [4:0] addrC ,
  output wire [75:0] data_rec_outA ,
  output wire [75:0] data_rec_outB ,
  output wire [75:0] data_rec_outC 
);
reg  [11:0] idA ;
reg  [11:0] idB ;
reg  [11:0] idC ;
reg  [7:0] b1A ;
reg  [7:0] b1B ;
reg  [7:0] b1C ;
reg  [7:0] b2A ;
reg  [7:0] b2B ;
reg  [7:0] b2C ;
reg  [7:0] b3A ;
reg  [7:0] b3B ;
reg  [7:0] b3C ;
reg  [7:0] b4A ;
reg  [7:0] b4B ;
reg  [7:0] b4C ;
reg  [7:0] b5A ;
reg  [7:0] b5B ;
reg  [7:0] b5C ;
reg  [7:0] b6A ;
reg  [7:0] b6B ;
reg  [7:0] b6C ;
reg  [7:0] b7A ;
reg  [7:0] b7B ;
reg  [7:0] b7C ;
reg  [7:0] b8A ;
reg  [7:0] b8B ;
reg  [7:0] b8C ;
initial
  begin
    idA =  12'd0;
    b1A =  8'h0;
    b2A =  8'h0;
    b3A =  8'h0;
    b4A =  8'h0;
    b5A =  8'h0;
    b6A =  8'h0;
    b7A =  8'h0;
    b8A =  8'h0;
  end
initial
  begin
    idB =  12'd0;
    b1B =  8'h0;
    b2B =  8'h0;
    b3B =  8'h0;
    b4B =  8'h0;
    b5B =  8'h0;
    b6B =  8'h0;
    b7B =  8'h0;
    b8B =  8'h0;
  end
initial
  begin
    idC =  12'd0;
    b1C =  8'h0;
    b2C =  8'h0;
    b3C =  8'h0;
    b4C =  8'h0;
    b5C =  8'h0;
    b6C =  8'h0;
    b7C =  8'h0;
    b8C =  8'h0;
  end

always @( posedge clkA )
  begin
    if (!rstA)
      begin
        idA <= 12'h000;
        b1A <= 8'h00;
        b2A <= 8'h00;
        b3A <= 8'h00;
        b4A <= 8'h00;
        b5A <= 8'h00;
        b6A <= 8'h00;
        b7A <= 8'h00;
        b8A <= 8'h00;
      end
    else
      begin
        if (buffer_enA)
          begin
            case (addrA)
              5'b00101 : idA[10:0]  <= data_rec_inA[15:5] ;
              5'b00011 : 
                begin
                  b2A <= data_rec_inA[7:0] ;
                  b1A <= data_rec_inA[15:8] ;
                end
              5'b00010 : 
                begin
                  b4A <= data_rec_inA[7:0] ;
                  b3A <= data_rec_inA[15:8] ;
                end
              5'b00001 : 
                begin
                  b6A <= data_rec_inA[7:0] ;
                  b5A <= data_rec_inA[15:8] ;
                end
              5'b00000 : 
                begin
                  b8A <= {3'b0,can_rec_selectA};
                  b7A <= data_rec_inA[15:8] ;
                end
              default begin
  idA <= idA;
  b1A <= b1A;
  b2A <= b2A;
  b3A <= b3A;
  b4A <= b4A;
  b5A <= b5A;
  b6A <= b6A;
  b7A <= b7A;
  b8A <= b8A;
end 
            endcase
          end
      end
  end

always @( posedge clkB )
  begin
    if (!rstB)
      begin
        idB <= 12'h000;
        b1B <= 8'h00;
        b2B <= 8'h00;
        b3B <= 8'h00;
        b4B <= 8'h00;
        b5B <= 8'h00;
        b6B <= 8'h00;
        b7B <= 8'h00;
        b8B <= 8'h00;
      end
    else
      begin
        if (buffer_enB)
          begin
            case (addrB)
              5'b00101 : idB[10:0]  <= data_rec_inB[15:5] ;
              5'b00011 : 
                begin
                  b2B <= data_rec_inB[7:0] ;
                  b1B <= data_rec_inB[15:8] ;
                end
              5'b00010 : 
                begin
                  b4B <= data_rec_inB[7:0] ;
                  b3B <= data_rec_inB[15:8] ;
                end
              5'b00001 : 
                begin
                  b6B <= data_rec_inB[7:0] ;
                  b5B <= data_rec_inB[15:8] ;
                end
              5'b00000 : 
                begin
                  b8B <= {3'b0,can_rec_selectB};
                  b7B <= data_rec_inB[15:8] ;
                end
              default begin
  idB <= idB;
  b1B <= b1B;
  b2B <= b2B;
  b3B <= b3B;
  b4B <= b4B;
  b5B <= b5B;
  b6B <= b6B;
  b7B <= b7B;
  b8B <= b8B;
end 
            endcase
          end
      end
  end

always @( posedge clkC )
  begin
    if (!rstC)
      begin
        idC <= 12'h000;
        b1C <= 8'h00;
        b2C <= 8'h00;
        b3C <= 8'h00;
        b4C <= 8'h00;
        b5C <= 8'h00;
        b6C <= 8'h00;
        b7C <= 8'h00;
        b8C <= 8'h00;
      end
    else
      begin
        if (buffer_enC)
          begin
            case (addrC)
              5'b00101 : idC[10:0]  <= data_rec_inC[15:5] ;
              5'b00011 : 
                begin
                  b2C <= data_rec_inC[7:0] ;
                  b1C <= data_rec_inC[15:8] ;
                end
              5'b00010 : 
                begin
                  b4C <= data_rec_inC[7:0] ;
                  b3C <= data_rec_inC[15:8] ;
                end
              5'b00001 : 
                begin
                  b6C <= data_rec_inC[7:0] ;
                  b5C <= data_rec_inC[15:8] ;
                end
              5'b00000 : 
                begin
                  b8C <= {3'b0,can_rec_selectC};
                  b7C <= data_rec_inC[15:8] ;
                end
              default begin
  idC <= idC;
  b1C <= b1C;
  b2C <= b2C;
  b3C <= b3C;
  b4C <= b4C;
  b5C <= b5C;
  b6C <= b6C;
  b7C <= b7C;
  b8C <= b8C;
end 
            endcase
          end
      end
  end
assign data_rec_outA =  {idA,b1A,b3A,b2A,b4A,b8A,b7A,b6A,b5A};
assign data_rec_outB =  {idB,b1B,b3B,b2B,b4B,b8B,b7B,b6B,b5B};
assign data_rec_outC =  {idC,b1C,b3C,b2C,b4C,b8C,b7C,b6C,b5C};
endmodule

