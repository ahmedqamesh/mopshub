/****************************************************************************************************
 *                          ! THIS FILE WAS AUTO-GENERATED BY TMRG TOOL !                           *
 *                                   ! DO NOT EDIT IT MANUALLY !                                    *
 *                                                                                                  *
 * file    : ./output/mux8_NbitTMR.v                                                                *
 *                                                                                                  *
 * user    : lucas                                                                                  *
 * host    : DESKTOP-BFDSFP2                                                                        *
 * date    : 05/12/2022 13:28:28                                                                    *
 *                                                                                                  *
 * workdir : /mnt/c/Users/Lucas/Documents/GitHub/mopshub_triplicated/triplicated/mopshub_top_board_16/hdl *
 * cmd     : /mnt/c/Users/Lucas/Documents/GitHub/mopshub_triplicated/tmrg-master/bin/tmrg -vv -c    *
 *           tmrg.cfg                                                                               *
 * tmrg rev: b25f042058e4e97751df2a0933c24aeadd5a78a5                                               *
 *                                                                                                  *
 * src file: mux8_Nbit.v                                                                            *
 *           Git SHA           : b25f042058e4e97751df2a0933c24aeadd5a78a5 (?? mux8_Nbit.v)          *
 *           Modification time : 2022-12-04 14:31:05                                                *
 *           File Size         : 1351                                                               *
 *           MD5 hash          : 0df37c1e645a812ad108ff431861147a                                   *
 *                                                                                                  *
 ****************************************************************************************************/

`resetall 
`timescale  1ns/10ps
module mux8_NbitTMR(
  input wire  clk ,
  input wire  rst ,
  input wire [1:0] data0 ,
  input wire [1:0] data1 ,
  input wire [1:0] data2 ,
  input wire [1:0] data3 ,
  input wire [1:0] data4 ,
  input wire [1:0] data5 ,
  input wire [1:0] data6 ,
  input wire [1:0] data7 ,
  input wire [2:0] sel ,
  output wire [1:0] data_out 
);
wire [2:0] selC;
wire [2:0] selB;
wire [2:0] selA;
wire rstC;
wire rstB;
wire rstA;
wire [1:0] data7C;
wire [1:0] data7B;
wire [1:0] data7A;
wire [1:0] data6C;
wire [1:0] data6B;
wire [1:0] data6A;
wire [1:0] data5C;
wire [1:0] data5B;
wire [1:0] data5A;
wire [1:0] data4C;
wire [1:0] data4B;
wire [1:0] data4A;
wire [1:0] data3C;
wire [1:0] data3B;
wire [1:0] data3A;
wire [1:0] data2C;
wire [1:0] data2B;
wire [1:0] data2A;
wire [1:0] data1C;
wire [1:0] data1B;
wire [1:0] data1A;
wire [1:0] data0C;
wire [1:0] data0B;
wire [1:0] data0A;
wire clkC;
wire clkB;
wire clkA;
wor data_out_rTmrError;
wire [1:0] data_out_r;
reg  [1:0] data_out_rA ;
reg  [1:0] data_out_rB ;
reg  [1:0] data_out_rC ;
initial
  data_out_rA =  0;
initial
  data_out_rB =  0;
initial
  data_out_rC =  0;
assign data_out =  data_out_r;
wire [1:0] data_out_rV =  data_out_r;

always @( posedge clkA )
  if (!rstA)
    data_out_rA <= 2'b0;
  else
    begin
      case (selA)
        3'b000 : data_out_rA =  data0A;
        3'b001 : data_out_rA =  data1A;
        3'b010 : data_out_rA =  data2A;
        3'b011 : data_out_rA =  data3A;
        3'b100 : data_out_rA =  data4A;
        3'b101 : data_out_rA =  data5A;
        3'b110 : data_out_rA =  data6A;
        3'b111 : data_out_rA =  data7A;
        default : data_out_rA =  2'b0;
      endcase
    end

always @( posedge clkB )
  if (!rstB)
    data_out_rB <= 2'b0;
  else
    begin
      case (selB)
        3'b000 : data_out_rB =  data0B;
        3'b001 : data_out_rB =  data1B;
        3'b010 : data_out_rB =  data2B;
        3'b011 : data_out_rB =  data3B;
        3'b100 : data_out_rB =  data4B;
        3'b101 : data_out_rB =  data5B;
        3'b110 : data_out_rB =  data6B;
        3'b111 : data_out_rB =  data7B;
        default : data_out_rB =  2'b0;
      endcase
    end

always @( posedge clkC )
  if (!rstC)
    data_out_rC <= 2'b0;
  else
    begin
      case (selC)
        3'b000 : data_out_rC =  data0C;
        3'b001 : data_out_rC =  data1C;
        3'b010 : data_out_rC =  data2C;
        3'b011 : data_out_rC =  data3C;
        3'b100 : data_out_rC =  data4C;
        3'b101 : data_out_rC =  data5C;
        3'b110 : data_out_rC =  data6C;
        3'b111 : data_out_rC =  data7C;
        default : data_out_rC =  2'b0;
      endcase
    end

majorityVoter #(.WIDTH(2)) data_out_rVoter (
    .inA(data_out_rA),
    .inB(data_out_rB),
    .inC(data_out_rC),
    .out(data_out_r),
    .tmrErr(data_out_rTmrError)
    );

fanout clkFanout (
    .in(clk),
    .outA(clkA),
    .outB(clkB),
    .outC(clkC)
    );

fanout #(.WIDTH(2)) data0Fanout (
    .in(data0),
    .outA(data0A),
    .outB(data0B),
    .outC(data0C)
    );

fanout #(.WIDTH(2)) data1Fanout (
    .in(data1),
    .outA(data1A),
    .outB(data1B),
    .outC(data1C)
    );

fanout #(.WIDTH(2)) data2Fanout (
    .in(data2),
    .outA(data2A),
    .outB(data2B),
    .outC(data2C)
    );

fanout #(.WIDTH(2)) data3Fanout (
    .in(data3),
    .outA(data3A),
    .outB(data3B),
    .outC(data3C)
    );

fanout #(.WIDTH(2)) data4Fanout (
    .in(data4),
    .outA(data4A),
    .outB(data4B),
    .outC(data4C)
    );

fanout #(.WIDTH(2)) data5Fanout (
    .in(data5),
    .outA(data5A),
    .outB(data5B),
    .outC(data5C)
    );

fanout #(.WIDTH(2)) data6Fanout (
    .in(data6),
    .outA(data6A),
    .outB(data6B),
    .outC(data6C)
    );

fanout #(.WIDTH(2)) data7Fanout (
    .in(data7),
    .outA(data7A),
    .outB(data7B),
    .outC(data7C)
    );

fanout rstFanout (
    .in(rst),
    .outA(rstA),
    .outB(rstB),
    .outC(rstC)
    );

fanout #(.WIDTH(3)) selFanout (
    .in(sel),
    .outA(selA),
    .outB(selB),
    .outC(selC)
    );
endmodule

