/****************************************************************************************************
 *                          ! THIS FILE WAS AUTO-GENERATED BY TMRG TOOL !                           *
 *                                   ! DO NOT EDIT IT MANUALLY !                                    *
 *                                                                                                  *
 * file    : ./output/smpldbit_reg2TMR.v                                                            *
 *                                                                                                  *
 * user    : lucas                                                                                  *
 * host    : DESKTOP-BFDSFP2                                                                        *
 * date    : 16/08/2022 12:58:37                                                                    *
 *                                                                                                  *
 * workdir : /mnt/c/Users/Lucas/Desktop/mopshub_triplication/mopshub_top_board_canakari_ftrim/hdl   *
 * cmd     : /mnt/c/Users/Lucas/Desktop/mopshub_triplication/tmrg-master/bin/tmrg -c tmrg.cfg -vvv  *
 * tmrg rev:                                                                                        *
 *                                                                                                  *
 * src file: smpldbit_reg2.v                                                                        *
 *           Git SHA           : File not in git repository!                                        *
 *           Modification time : 2022-03-29 13:49:21                                                *
 *           File Size         : 1907                                                               *
 *           MD5 hash          : e40bbaa198b9af6fd1287d6da568addc                                   *
 *                                                                                                  *
 ****************************************************************************************************/

module smpldbit_reg2TMR(
  input wire  clockA ,
  input wire  clockB ,
  input wire  clockC ,
  input wire  resetA ,
  input wire  resetB ,
  input wire  resetC ,
  input wire [1:0] ctrlA ,
  input wire [1:0] ctrlB ,
  input wire [1:0] ctrlC ,
  output wire  smpldbitA ,
  output wire  smpldbitB ,
  output wire  smpldbitC ,
  input wire  pufferA ,
  input wire  pufferB ,
  input wire  pufferC 
);
wor smpldbit_iTmrErrorC;
wire smpldbit_iVotedC;
wor smpldbit_iTmrErrorB;
wire smpldbit_iVotedB;
wor smpldbit_iTmrErrorA;
wire smpldbit_iVotedA;
reg  smpldbit_iA ;
reg  smpldbit_iB ;
reg  smpldbit_iC ;
assign smpldbitA =  smpldbit_iVotedA;
assign smpldbitB =  smpldbit_iVotedB;
assign smpldbitC =  smpldbit_iVotedC;

always @( posedge clockA or negedge resetA )
  begin
    if (resetA==1'b0)
      smpldbit_iA <= 1'b1;
    else
      begin
        case (ctrlA)
          2'b01 : smpldbit_iA <= 1'b1;
          2'b10 : smpldbit_iA <= pufferA;
          default : smpldbit_iA <= smpldbit_iVotedA;
        endcase
      end
  end

always @( posedge clockB or negedge resetB )
  begin
    if (resetB==1'b0)
      smpldbit_iB <= 1'b1;
    else
      begin
        case (ctrlB)
          2'b01 : smpldbit_iB <= 1'b1;
          2'b10 : smpldbit_iB <= pufferB;
          default : smpldbit_iB <= smpldbit_iVotedB;
        endcase
      end
  end

always @( posedge clockC or negedge resetC )
  begin
    if (resetC==1'b0)
      smpldbit_iC <= 1'b1;
    else
      begin
        case (ctrlC)
          2'b01 : smpldbit_iC <= 1'b1;
          2'b10 : smpldbit_iC <= pufferC;
          default : smpldbit_iC <= smpldbit_iVotedC;
        endcase
      end
  end

majorityVoter smpldbit_iVoterA (
    .inA(smpldbit_iA),
    .inB(smpldbit_iB),
    .inC(smpldbit_iC),
    .out(smpldbit_iVotedA),
    .tmrErr(smpldbit_iTmrErrorA)
    );

majorityVoter smpldbit_iVoterB (
    .inA(smpldbit_iA),
    .inB(smpldbit_iB),
    .inC(smpldbit_iC),
    .out(smpldbit_iVotedB),
    .tmrErr(smpldbit_iTmrErrorB)
    );

majorityVoter smpldbit_iVoterC (
    .inA(smpldbit_iA),
    .inB(smpldbit_iB),
    .inC(smpldbit_iC),
    .out(smpldbit_iVotedC),
    .tmrErr(smpldbit_iTmrErrorC)
    );
endmodule

