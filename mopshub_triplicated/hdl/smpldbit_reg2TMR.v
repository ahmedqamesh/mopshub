/****************************************************************************************************
 *                          ! THIS FILE WAS AUTO-GENERATED BY TMRG TOOL !                           *
 *                                   ! DO NOT EDIT IT MANUALLY !                                    *
 *                                                                                                  *
 * file    : ./output/smpldbit_reg2TMR.v                                                            *
 *                                                                                                  *
 * user    : lucas                                                                                  *
 * host    : DESKTOP-BFDSFP2                                                                        *
 * date    : 05/12/2022 13:28:34                                                                    *
 *                                                                                                  *
 * workdir : /mnt/c/Users/Lucas/Documents/GitHub/mopshub_triplicated/triplicated/mopshub_top_board_16/hdl *
 * cmd     : /mnt/c/Users/Lucas/Documents/GitHub/mopshub_triplicated/tmrg-master/bin/tmrg -vv -c    *
 *           tmrg.cfg                                                                               *
 * tmrg rev: b25f042058e4e97751df2a0933c24aeadd5a78a5                                               *
 *                                                                                                  *
 * src file: smpldbit_reg2.v                                                                        *
 *           Git SHA           : b25f042058e4e97751df2a0933c24aeadd5a78a5 (?? smpldbit_reg2.v)      *
 *           Modification time : 2022-11-10 21:22:58                                                *
 *           File Size         : 1865                                                               *
 *           MD5 hash          : 694704794b89d3901fdf3e2e83af081b                                   *
 *                                                                                                  *
 ****************************************************************************************************/

module smpldbit_reg2TMR(
  input wire  clock ,
  input wire  reset ,
  input wire [1:0] ctrl ,
  output wire  smpldbit ,
  input wire  puffer 
);
wire smpldbitC;
wire smpldbitB;
wire smpldbitA;
wire resetC;
wire resetB;
wire resetA;
wire pufferC;
wire pufferB;
wire pufferA;
wire [1:0] ctrlC;
wire [1:0] ctrlB;
wire [1:0] ctrlA;
wire clockC;
wire clockB;
wire clockA;
wor smpldbit_iTmrError;
wire smpldbit_i;
reg  smpldbit_iA ;
reg  smpldbit_iB ;
reg  smpldbit_iC ;
assign smpldbit =  smpldbit_i;

always @( posedge clockA or negedge resetA )
  begin
    if (resetA==1'b0)
      smpldbit_iA <= 1'b1;
    else
      begin
        case (ctrlA)
          2'b01 : smpldbit_iA <= 1'b1;
          2'b10 : smpldbit_iA <= pufferA;
          default : smpldbit_iA <= smpldbitA;
        endcase
      end
  end

always @( posedge clockB or negedge resetB )
  begin
    if (resetB==1'b0)
      smpldbit_iB <= 1'b1;
    else
      begin
        case (ctrlB)
          2'b01 : smpldbit_iB <= 1'b1;
          2'b10 : smpldbit_iB <= pufferB;
          default : smpldbit_iB <= smpldbitB;
        endcase
      end
  end

always @( posedge clockC or negedge resetC )
  begin
    if (resetC==1'b0)
      smpldbit_iC <= 1'b1;
    else
      begin
        case (ctrlC)
          2'b01 : smpldbit_iC <= 1'b1;
          2'b10 : smpldbit_iC <= pufferC;
          default : smpldbit_iC <= smpldbitC;
        endcase
      end
  end

majorityVoter smpldbit_iVoter (
    .inA(smpldbit_iA),
    .inB(smpldbit_iB),
    .inC(smpldbit_iC),
    .out(smpldbit_i),
    .tmrErr(smpldbit_iTmrError)
    );

fanout clockFanout (
    .in(clock),
    .outA(clockA),
    .outB(clockB),
    .outC(clockC)
    );

fanout #(.WIDTH(2)) ctrlFanout (
    .in(ctrl),
    .outA(ctrlA),
    .outB(ctrlB),
    .outC(ctrlC)
    );

fanout pufferFanout (
    .in(puffer),
    .outA(pufferA),
    .outB(pufferB),
    .outC(pufferC)
    );

fanout resetFanout (
    .in(reset),
    .outA(resetA),
    .outB(resetB),
    .outC(resetC)
    );

fanout smpldbitFanout (
    .in(smpldbit),
    .outA(smpldbitA),
    .outB(smpldbitB),
    .outC(smpldbitC)
    );
endmodule

