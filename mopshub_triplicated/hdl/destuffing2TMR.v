/****************************************************************************************************
 *                          ! THIS FILE WAS AUTO-GENERATED BY TMRG TOOL !                           *
 *                                   ! DO NOT EDIT IT MANUALLY !                                    *
 *                                                                                                  *
 * file    : ./output/destuffing2TMR.v                                                              *
 *                                                                                                  *
 * user    : lucas                                                                                  *
 * host    : DESKTOP-BFDSFP2                                                                        *
 * date    : 06/10/2022 13:52:44                                                                    *
 *                                                                                                  *
 * workdir : /mnt/c/Users/Lucas/Documents/GitHub/mopshub_triplicated/triplicated/mopshub_top_board/hdl *
 * cmd     : /mnt/c/Users/Lucas/Desktop/mopshub_triplication/tmrg-master/bin/tmrg -vv -c tmrg.cfg   *
 * tmrg rev:                                                                                        *
 *                                                                                                  *
 * src file: destuffing2.v                                                                          *
 *           Git SHA           : c110441b08b692cc54ebd4a3b84a2599430e8f93                           *
 *           Modification time : 2022-08-23 20:24:46                                                *
 *           File Size         : 4793                                                               *
 *           MD5 hash          : 3d4ac4c6ac14bff4ce9a2086577dec33                                   *
 *                                                                                                  *
 ****************************************************************************************************/

module destuffing2TMR(
  input wire  clock ,
  input wire  bitin ,
  input wire  activ ,
  input wire  reset ,
  input wire  direct ,
  output wire  stfer ,
  output wire  stuff ,
  output wire  bitout 
);
wire stuffC;
wire stuffB;
wire stuffA;
wire stferC;
wire stferB;
wire stferA;
wire resetC;
wire resetB;
wire resetA;
wire edgedVC;
wire edgedVB;
wire edgedVA;
wire directC;
wire directB;
wire directA;
wire clockC;
wire clockB;
wire clockA;
wire bitoutC;
wire bitoutB;
wire bitoutA;
wire bitinC;
wire bitinB;
wire bitinA;
wire activC;
wire activB;
wire activA;
wor stuff_iTmrError;
wire stuff_i;
wor stfer_iTmrError;
wire stfer_i;
wor edgedTmrError;
wire edged;
wor bitout_iTmrError;
wire bitout_i;
reg  [2:0] countA ;
reg  [2:0] countB ;
reg  [2:0] countC ;
reg  [3:0] stateA ;
reg  [3:0] stateB ;
reg  [3:0] stateC ;
reg  buffA ;
reg  buffB ;
reg  buffC ;
reg  edgedA ;
reg  edgedB ;
reg  edgedC ;
reg  stfer_iA ;
reg  stfer_iB ;
reg  stfer_iC ;
reg  stuff_iA ;
reg  stuff_iB ;
reg  stuff_iC ;
reg  bitout_iA ;
reg  bitout_iB ;
reg  bitout_iC ;
assign stfer =  stfer_i;
assign stuff =  stuff_i;
assign bitout =  bitout_i;
wire edgedV =  edged;

always @( posedge clockA )
  begin
    if (resetA==1'b0)
      begin
        countA =  3'b0;
        stateA =  4'b0000;
        stuff_iA <= 1'b0;
        stfer_iA <= 1'b0;
        edgedA =  1'b0;
      end
    else
      begin
        edgedA =  edgedVA;
        stfer_iA <= stferA;
        stuff_iA <= stuffA;
        bitout_iA <= bitoutA;
        if (activA==1'b1)
          if (edgedVA==1'b0)
            begin
              edgedA =  1'b1;
              bitout_iA <= bitinA;
              if (bitinA==buffA)
                stateA[3]  =  1'b1;
              else
                stateA[3]  =  1'b0;
              if (countA==3'd0)
                stateA[2]  =  1'b1;
              else
                stateA[2]  =  1'b0;
              if (countA==3'd5)
                stateA[1]  =  1'b1;
              else
                stateA[1]  =  1'b0;
              if (directA==1'b1)
                stateA[0]  =  1'b1;
              else
                stateA[0]  =  1'b0;
              case (stateA)
                4'b0100, 4'b1100, 4'b0000 : 
                  begin
                    buffA =  bitinA;
                    countA =  3'b1;
                    stuff_iA <= 1'b0;
                    stfer_iA <= 1'b0;
                  end
                4'b0010 : 
                  begin
                    countA =  3'b1;
                    stuff_iA <= 1'b1;
                    buffA =  bitinA;
                  end
                4'b1010 : 
                  begin
                    stfer_iA <= 1'b1;
                    stuff_iA <= 1'b0;
                    countA =  3'd0;
                  end
                4'b1000 : 
                  begin
                    countA =  countA+4'd1;
                    stuff_iA <= 1'b0;
                  end
                default : 
                  begin
                    buffA =  buffA;
                    countA =  countA;
                    stuff_iA <= stuffA;
                    stfer_iA <= stferA;
                  end
              endcase
            end
          else
            edgedA =  1'b1;
        else
          edgedA =  1'b0;
      end
  end

always @( posedge clockB )
  begin
    if (resetB==1'b0)
      begin
        countB =  3'b0;
        stateB =  4'b0000;
        stuff_iB <= 1'b0;
        stfer_iB <= 1'b0;
        edgedB =  1'b0;
      end
    else
      begin
        edgedB =  edgedVB;
        stfer_iB <= stferB;
        stuff_iB <= stuffB;
        bitout_iB <= bitoutB;
        if (activB==1'b1)
          if (edgedVB==1'b0)
            begin
              edgedB =  1'b1;
              bitout_iB <= bitinB;
              if (bitinB==buffB)
                stateB[3]  =  1'b1;
              else
                stateB[3]  =  1'b0;
              if (countB==3'd0)
                stateB[2]  =  1'b1;
              else
                stateB[2]  =  1'b0;
              if (countB==3'd5)
                stateB[1]  =  1'b1;
              else
                stateB[1]  =  1'b0;
              if (directB==1'b1)
                stateB[0]  =  1'b1;
              else
                stateB[0]  =  1'b0;
              case (stateB)
                4'b0100, 4'b1100, 4'b0000 : 
                  begin
                    buffB =  bitinB;
                    countB =  3'b1;
                    stuff_iB <= 1'b0;
                    stfer_iB <= 1'b0;
                  end
                4'b0010 : 
                  begin
                    countB =  3'b1;
                    stuff_iB <= 1'b1;
                    buffB =  bitinB;
                  end
                4'b1010 : 
                  begin
                    stfer_iB <= 1'b1;
                    stuff_iB <= 1'b0;
                    countB =  3'd0;
                  end
                4'b1000 : 
                  begin
                    countB =  countB+4'd1;
                    stuff_iB <= 1'b0;
                  end
                default : 
                  begin
                    buffB =  buffB;
                    countB =  countB;
                    stuff_iB <= stuffB;
                    stfer_iB <= stferB;
                  end
              endcase
            end
          else
            edgedB =  1'b1;
        else
          edgedB =  1'b0;
      end
  end

always @( posedge clockC )
  begin
    if (resetC==1'b0)
      begin
        countC =  3'b0;
        stateC =  4'b0000;
        stuff_iC <= 1'b0;
        stfer_iC <= 1'b0;
        edgedC =  1'b0;
      end
    else
      begin
        edgedC =  edgedVC;
        stfer_iC <= stferC;
        stuff_iC <= stuffC;
        bitout_iC <= bitoutC;
        if (activC==1'b1)
          if (edgedVC==1'b0)
            begin
              edgedC =  1'b1;
              bitout_iC <= bitinC;
              if (bitinC==buffC)
                stateC[3]  =  1'b1;
              else
                stateC[3]  =  1'b0;
              if (countC==3'd0)
                stateC[2]  =  1'b1;
              else
                stateC[2]  =  1'b0;
              if (countC==3'd5)
                stateC[1]  =  1'b1;
              else
                stateC[1]  =  1'b0;
              if (directC==1'b1)
                stateC[0]  =  1'b1;
              else
                stateC[0]  =  1'b0;
              case (stateC)
                4'b0100, 4'b1100, 4'b0000 : 
                  begin
                    buffC =  bitinC;
                    countC =  3'b1;
                    stuff_iC <= 1'b0;
                    stfer_iC <= 1'b0;
                  end
                4'b0010 : 
                  begin
                    countC =  3'b1;
                    stuff_iC <= 1'b1;
                    buffC =  bitinC;
                  end
                4'b1010 : 
                  begin
                    stfer_iC <= 1'b1;
                    stuff_iC <= 1'b0;
                    countC =  3'd0;
                  end
                4'b1000 : 
                  begin
                    countC =  countC+4'd1;
                    stuff_iC <= 1'b0;
                  end
                default : 
                  begin
                    buffC =  buffC;
                    countC =  countC;
                    stuff_iC <= stuffC;
                    stfer_iC <= stferC;
                  end
              endcase
            end
          else
            edgedC =  1'b1;
        else
          edgedC =  1'b0;
      end
  end

majorityVoter bitout_iVoter (
    .inA(bitout_iA),
    .inB(bitout_iB),
    .inC(bitout_iC),
    .out(bitout_i),
    .tmrErr(bitout_iTmrError)
    );

majorityVoter edgedVoter (
    .inA(edgedA),
    .inB(edgedB),
    .inC(edgedC),
    .out(edged),
    .tmrErr(edgedTmrError)
    );

majorityVoter stfer_iVoter (
    .inA(stfer_iA),
    .inB(stfer_iB),
    .inC(stfer_iC),
    .out(stfer_i),
    .tmrErr(stfer_iTmrError)
    );

majorityVoter stuff_iVoter (
    .inA(stuff_iA),
    .inB(stuff_iB),
    .inC(stuff_iC),
    .out(stuff_i),
    .tmrErr(stuff_iTmrError)
    );

fanout activFanout (
    .in(activ),
    .outA(activA),
    .outB(activB),
    .outC(activC)
    );

fanout bitinFanout (
    .in(bitin),
    .outA(bitinA),
    .outB(bitinB),
    .outC(bitinC)
    );

fanout bitoutFanout (
    .in(bitout),
    .outA(bitoutA),
    .outB(bitoutB),
    .outC(bitoutC)
    );

fanout clockFanout (
    .in(clock),
    .outA(clockA),
    .outB(clockB),
    .outC(clockC)
    );

fanout directFanout (
    .in(direct),
    .outA(directA),
    .outB(directB),
    .outC(directC)
    );

fanout edgedVFanout (
    .in(edgedV),
    .outA(edgedVA),
    .outB(edgedVB),
    .outC(edgedVC)
    );

fanout resetFanout (
    .in(reset),
    .outA(resetA),
    .outB(resetB),
    .outC(resetC)
    );

fanout stferFanout (
    .in(stfer),
    .outA(stferA),
    .outB(stferB),
    .outC(stferC)
    );

fanout stuffFanout (
    .in(stuff),
    .outA(stuffA),
    .outB(stuffB),
    .outC(stuffC)
    );
endmodule

