/****************************************************************************************************
 *                          ! THIS FILE WAS AUTO-GENERATED BY TMRG TOOL !                           *
 *                                   ! DO NOT EDIT IT MANUALLY !                                    *
 *                                                                                                  *
 * file    : ./output/dec_8b10b_mopshubTMR.v                                                        *
 *                                                                                                  *
 * user    : lucas                                                                                  *
 * host    : DESKTOP-BFDSFP2                                                                        *
 * date    : 05/12/2022 13:28:07                                                                    *
 *                                                                                                  *
 * workdir : /mnt/c/Users/Lucas/Documents/GitHub/mopshub_triplicated/triplicated/mopshub_top_board_16/hdl *
 * cmd     : /mnt/c/Users/Lucas/Documents/GitHub/mopshub_triplicated/tmrg-master/bin/tmrg -vv -c    *
 *           tmrg.cfg                                                                               *
 * tmrg rev: b25f042058e4e97751df2a0933c24aeadd5a78a5                                               *
 *                                                                                                  *
 * src file: dec_8b10b_mopshub.v                                                                    *
 *           Git SHA           : b25f042058e4e97751df2a0933c24aeadd5a78a5 (?? dec_8b10b_mopshub.v)  *
 *           Modification time : 2022-12-04 16:25:30.647307                                         *
 *           File Size         : 5701                                                               *
 *           MD5 hash          : 4131a4e962477085a392df761539abc8                                   *
 *                                                                                                  *
 ****************************************************************************************************/

module dec_8b10b_mopshubTMR(
  input  rst ,
  input  clk ,
  input [9:0] datain ,
  input  datain_valid ,
  output  ko ,
  output [7:0] dataout ,
  output  code_err ,
  output  disp_err 
);
wire rstC;
wire rstB;
wire rstA;
wire p31C;
wire p31B;
wire p31A;
wire p13C;
wire p13B;
wire p13A;
wire ko_sC;
wire ko_sB;
wire ko_sA;
wire jiC;
wire jiB;
wire jiA;
wire iiC;
wire iiB;
wire iiA;
wire hoC;
wire hoB;
wire hoA;
wire hiC;
wire hiB;
wire hiA;
wire goC;
wire goB;
wire goA;
wire giC;
wire giB;
wire giA;
wire foC;
wire foB;
wire foA;
wire fiC;
wire fiB;
wire fiA;
wire eoC;
wire eoB;
wire eoA;
wire eiC;
wire eiB;
wire eiA;
wire doC;
wire doB;
wire doA;
wire dispoutC;
wire dispoutB;
wire dispoutA;
wire disp6pC;
wire disp6pB;
wire disp6pA;
wire disp6nC;
wire disp6nB;
wire disp6nA;
wire disp4pC;
wire disp4pB;
wire disp4pA;
wire disp4nC;
wire disp4nB;
wire disp4nA;
wire diC;
wire diB;
wire diA;
wire datain_validC;
wire datain_validB;
wire datain_validA;
wire coC;
wire coB;
wire coA;
wire clkC;
wire clkB;
wire clkA;
wire ciC;
wire ciB;
wire ciA;
wire boC;
wire boB;
wire boA;
wire biC;
wire biB;
wire biA;
wire aoC;
wire aoB;
wire aoA;
wire aiC;
wire aiB;
wire aiA;
wor ko_rTmrError;
wire ko_r;
wor dispinTmrError;
wire dispin;
wor disp_err_rTmrError;
wire disp_err_r;
wor dataout_rTmrError;
wire [7:0] dataout_r;
wor code_err_rTmrError;
wire code_err_r;
reg  dispinA ;
reg  dispinB ;
reg  dispinC ;
wire ai =  datain[9] ;
wire bi =  datain[8] ;
wire ci =  datain[7] ;
wire di =  datain[6] ;
wire ei =  datain[5] ;
wire ii =  datain[4] ;
wire fi =  datain[3] ;
wire gi =  datain[2] ;
wire hi =  datain[1] ;
wire ji =  datain[0] ;
wire aeqb =  (ai&bi)|(! ai & ! bi );
wire ceqd =  (ci&di)|(! ci & ! di );
wire p22 =  (ai&bi&!ci&!di)|(ci&di&!ai&!bi)|(! aeqb & ! ceqd );
wire p13 =  (! aeqb & ! ci & ! di )|(! ceqd & ! ai & ! bi );
wire p31 =  (! aeqb & ci & di )|(! ceqd & ai & bi );
wire disp6a =  p31|(p22&dispin);
wire disp6a2 =  p31&dispin;
wire disp6a0 =  p13&!dispin;
wire disp6b =  (((ei&ii&!disp6a0)|(disp6a&(ei|ii))|disp6a2|(ei&ii&di))&(ei|ii|di));
wire p22bceeqi =  p22&bi&ci&(ei==ii);
wire p22bncneeqi =  p22&!bi&!ci&(ei==ii);
wire p13in =  p13&!ii;
wire p31i =  p31&ii;
wire p13dei =  p13&di&ei&ii;
wire p22aceeqi =  p22&ai&ci&(ei==ii);
wire p22ancneeqi =  p22&!ai&!ci&(ei==ii);
wire p13en =  p13&!ei;
wire anbnenin =  !ai&!bi&!ei&!ii;
wire abei =  ai&bi&ei&ii;
wire cndnenin =  !ci&!di&!ei&!ii;
wire compa =  p22bncneeqi|p31i|p13dei|p22ancneeqi|p13en|abei|cndnenin;
wire compb =  p22bceeqi|p31i|p13dei|p22aceeqi|p13en|abei|cndnenin;
wire compc =  p22bceeqi|p31i|p13dei|p22ancneeqi|p13en|anbnenin|cndnenin;
wire compd =  p22bncneeqi|p31i|p13dei|p22aceeqi|p13en|abei|cndnenin;
wire compe =  p22bncneeqi|p13in|p13dei|p22ancneeqi|p13en|anbnenin|cndnenin;
wire ao =  ai^compa;
wire bo =  bi^compb;
wire co =  ci^compc;
wire do =  di^compd;
wire eo =  ei^compe;
wire feqg =  (fi&gi)|(! fi & ! gi );
wire heqj =  (hi&ji)|(! hi & ! ji );
wire fghj22 =  (fi&gi&!hi&!ji)|(! fi & ! gi & hi & ji )|(! feqg & ! heqj );
wire fghjp13 =  (! feqg & ! hi & ! ji )|(! heqj & ! fi & ! gi );
wire fghjp31 =  ((! feqg )&hi&ji)|(! heqj & fi & gi );
wire dispout =  (fghjp31|(disp6b&fghj22)|(hi&ji))&(hi|ji);
wire ko_s =  ((ci&di&ei&ii)|(! ci & ! di & ! ei & ! ii )|(p13&!ei&ii&gi&hi&ji)|(p31&ei&!ii&!gi&!hi&!ji));
wire k28p =  !(ci|di|ei|ii);
wire fo =  (ji&!fi&(hi|!gi|k28p))|(fi&!ji&(! hi | gi | ! k28p ))|(k28p&gi&hi)|(! k28p & ! gi & ! hi );
wire go =  (ji&!fi&(hi|!gi|!k28p))|(fi&!ji&(! hi | gi | k28p ))|(! k28p & gi & hi )|(k28p&!gi&!hi);
wire ho =  ((ji^hi)&!((! fi & gi & ! hi & ji & ! k28p )|(! fi & gi & hi & ! ji & k28p )|(fi&!gi&!hi&ji&!k28p)|(fi&!gi&hi&!ji&k28p)))|(! fi & gi & hi & ji )|(fi&!gi&!hi&!ji);
wire disp6p =  (p31&(ei|ii))|(p22&ei&ii);
wire disp6n =  (p13&!(ei&ii))|(p22&!ei&!ii);
wire disp4p =  fghjp31;
wire disp4n =  fghjp13;
reg  disp_err_rA ;
reg  disp_err_rB ;
reg  disp_err_rC ;
reg  [7:0] dataout_rA ;
reg  [7:0] dataout_rB ;
reg  [7:0] dataout_rC ;
reg  ko_rA ;
reg  ko_rB ;
reg  ko_rC ;
reg  code_err_rA ;
reg  code_err_rB ;
reg  code_err_rC ;
wire dispinV =  dispin;
wire disp_err_rV =  disp_err_rV;
wire [7:0] dataout_rV =  dataout_r;
wire ko_rV =  ko_r;
wire code_err_rV =  code_err_r;

always @( posedge clkA or negedge rstA )
  begin : output_procA
    if (rstA==0)
      begin
        dispinA <= 0;
        disp_err_rA <= 0;
        dataout_rA <= 0;
        ko_rA <= 0;
        code_err_rA <= 0;
      end
    else
      if (datain_validA==1)
        begin
          code_err_rA <= ((aiA&biA&ciA&diA)|(! ( aiA|biA|ciA|diA ) ))|(p13A&(! eiA )&(! iiA ))|(p31A&eiA&iiA)|((fiA&giA&hiA&jiA)|(! ( fiA|giA|hiA|jiA ) ))|((eiA&iiA&fiA&giA&hiA)|(! ( eiA|iiA|fiA|giA|hiA ) ))|(((! iiA )&eiA&giA&hiA&jiA)|(! ( (! iiA )|eiA|giA|hiA|jiA ) ))|((((! eiA )&(! iiA )&giA&hiA&jiA)|(! ( (! eiA )|(! iiA )|giA|hiA|jiA ) ))&(! ( (ciA&diA&eiA)|(! ( ciA|diA|eiA ) ) ) ))|((! p31A )&eiA&(! iiA )&(! giA )&(! hiA )&(! jiA ))|((! p13A )&(! eiA )&iiA&giA&hiA&jiA);
          disp_err_rA <= ((dispinA&disp6pA)|(disp6nA&!dispinA)|(dispinA&!disp6nA&fiA&giA)|(dispinA&aiA&biA&ciA)|(dispinA&!disp6nA&disp4pA)|(! dispinA & ! disp6pA & ! fiA & ! giA )|(! dispinA & ! aiA & ! biA & ! ciA )|(! dispinA & ! disp6pA & disp4nA )|(disp6pA&disp4pA)|(disp6nA&disp4nA));
          dispinA <= dispoutA;
          dataout_rA <= {hoA,goA,foA,eoA,doA,coA,boA,aoA};
          ko_rA <= ko_sA;
        end
  end

always @( posedge clkB or negedge rstB )
  begin : output_procB
    if (rstB==0)
      begin
        dispinB <= 0;
        disp_err_rB <= 0;
        dataout_rB <= 0;
        ko_rB <= 0;
        code_err_rB <= 0;
      end
    else
      if (datain_validB==1)
        begin
          code_err_rB <= ((aiB&biB&ciB&diB)|(! ( aiB|biB|ciB|diB ) ))|(p13B&(! eiB )&(! iiB ))|(p31B&eiB&iiB)|((fiB&giB&hiB&jiB)|(! ( fiB|giB|hiB|jiB ) ))|((eiB&iiB&fiB&giB&hiB)|(! ( eiB|iiB|fiB|giB|hiB ) ))|(((! iiB )&eiB&giB&hiB&jiB)|(! ( (! iiB )|eiB|giB|hiB|jiB ) ))|((((! eiB )&(! iiB )&giB&hiB&jiB)|(! ( (! eiB )|(! iiB )|giB|hiB|jiB ) ))&(! ( (ciB&diB&eiB)|(! ( ciB|diB|eiB ) ) ) ))|((! p31B )&eiB&(! iiB )&(! giB )&(! hiB )&(! jiB ))|((! p13B )&(! eiB )&iiB&giB&hiB&jiB);
          disp_err_rB <= ((dispinB&disp6pB)|(disp6nB&!dispinB)|(dispinB&!disp6nB&fiB&giB)|(dispinB&aiB&biB&ciB)|(dispinB&!disp6nB&disp4pB)|(! dispinB & ! disp6pB & ! fiB & ! giB )|(! dispinB & ! aiB & ! biB & ! ciB )|(! dispinB & ! disp6pB & disp4nB )|(disp6pB&disp4pB)|(disp6nB&disp4nB));
          dispinB <= dispoutB;
          dataout_rB <= {hoB,goB,foB,eoB,doB,coB,boB,aoB};
          ko_rB <= ko_sB;
        end
  end

always @( posedge clkC or negedge rstC )
  begin : output_procC
    if (rstC==0)
      begin
        dispinC <= 0;
        disp_err_rC <= 0;
        dataout_rC <= 0;
        ko_rC <= 0;
        code_err_rC <= 0;
      end
    else
      if (datain_validC==1)
        begin
          code_err_rC <= ((aiC&biC&ciC&diC)|(! ( aiC|biC|ciC|diC ) ))|(p13C&(! eiC )&(! iiC ))|(p31C&eiC&iiC)|((fiC&giC&hiC&jiC)|(! ( fiC|giC|hiC|jiC ) ))|((eiC&iiC&fiC&giC&hiC)|(! ( eiC|iiC|fiC|giC|hiC ) ))|(((! iiC )&eiC&giC&hiC&jiC)|(! ( (! iiC )|eiC|giC|hiC|jiC ) ))|((((! eiC )&(! iiC )&giC&hiC&jiC)|(! ( (! eiC )|(! iiC )|giC|hiC|jiC ) ))&(! ( (ciC&diC&eiC)|(! ( ciC|diC|eiC ) ) ) ))|((! p31C )&eiC&(! iiC )&(! giC )&(! hiC )&(! jiC ))|((! p13C )&(! eiC )&iiC&giC&hiC&jiC);
          disp_err_rC <= ((dispinC&disp6pC)|(disp6nC&!dispinC)|(dispinC&!disp6nC&fiC&giC)|(dispinC&aiC&biC&ciC)|(dispinC&!disp6nC&disp4pC)|(! dispinC & ! disp6pC & ! fiC & ! giC )|(! dispinC & ! aiC & ! biC & ! ciC )|(! dispinC & ! disp6pC & disp4nC )|(disp6pC&disp4pC)|(disp6nC&disp4nC));
          dispinC <= dispoutC;
          dataout_rC <= {hoC,goC,foC,eoC,doC,coC,boC,aoC};
          ko_rC <= ko_sC;
        end
  end
assign disp_err =  disp_err_r;
assign dataout =  dataout_r;
assign ko =  ko_r;
assign code_err =  code_err_r;

majorityVoter code_err_rVoter (
    .inA(code_err_rA),
    .inB(code_err_rB),
    .inC(code_err_rC),
    .out(code_err_r),
    .tmrErr(code_err_rTmrError)
    );

majorityVoter #(.WIDTH(8)) dataout_rVoter (
    .inA(dataout_rA),
    .inB(dataout_rB),
    .inC(dataout_rC),
    .out(dataout_r),
    .tmrErr(dataout_rTmrError)
    );

majorityVoter disp_err_rVoter (
    .inA(disp_err_rA),
    .inB(disp_err_rB),
    .inC(disp_err_rC),
    .out(disp_err_r),
    .tmrErr(disp_err_rTmrError)
    );

majorityVoter dispinVoter (
    .inA(dispinA),
    .inB(dispinB),
    .inC(dispinC),
    .out(dispin),
    .tmrErr(dispinTmrError)
    );

majorityVoter ko_rVoter (
    .inA(ko_rA),
    .inB(ko_rB),
    .inC(ko_rC),
    .out(ko_r),
    .tmrErr(ko_rTmrError)
    );

fanout aiFanout (
    .in(ai),
    .outA(aiA),
    .outB(aiB),
    .outC(aiC)
    );

fanout aoFanout (
    .in(ao),
    .outA(aoA),
    .outB(aoB),
    .outC(aoC)
    );

fanout biFanout (
    .in(bi),
    .outA(biA),
    .outB(biB),
    .outC(biC)
    );

fanout boFanout (
    .in(bo),
    .outA(boA),
    .outB(boB),
    .outC(boC)
    );

fanout ciFanout (
    .in(ci),
    .outA(ciA),
    .outB(ciB),
    .outC(ciC)
    );

fanout clkFanout (
    .in(clk),
    .outA(clkA),
    .outB(clkB),
    .outC(clkC)
    );

fanout coFanout (
    .in(co),
    .outA(coA),
    .outB(coB),
    .outC(coC)
    );

fanout datain_validFanout (
    .in(datain_valid),
    .outA(datain_validA),
    .outB(datain_validB),
    .outC(datain_validC)
    );

fanout diFanout (
    .in(di),
    .outA(diA),
    .outB(diB),
    .outC(diC)
    );

fanout disp4nFanout (
    .in(disp4n),
    .outA(disp4nA),
    .outB(disp4nB),
    .outC(disp4nC)
    );

fanout disp4pFanout (
    .in(disp4p),
    .outA(disp4pA),
    .outB(disp4pB),
    .outC(disp4pC)
    );

fanout disp6nFanout (
    .in(disp6n),
    .outA(disp6nA),
    .outB(disp6nB),
    .outC(disp6nC)
    );

fanout disp6pFanout (
    .in(disp6p),
    .outA(disp6pA),
    .outB(disp6pB),
    .outC(disp6pC)
    );

fanout dispoutFanout (
    .in(dispout),
    .outA(dispoutA),
    .outB(dispoutB),
    .outC(dispoutC)
    );

fanout doFanout (
    .in(do),
    .outA(doA),
    .outB(doB),
    .outC(doC)
    );

fanout eiFanout (
    .in(ei),
    .outA(eiA),
    .outB(eiB),
    .outC(eiC)
    );

fanout eoFanout (
    .in(eo),
    .outA(eoA),
    .outB(eoB),
    .outC(eoC)
    );

fanout fiFanout (
    .in(fi),
    .outA(fiA),
    .outB(fiB),
    .outC(fiC)
    );

fanout foFanout (
    .in(fo),
    .outA(foA),
    .outB(foB),
    .outC(foC)
    );

fanout giFanout (
    .in(gi),
    .outA(giA),
    .outB(giB),
    .outC(giC)
    );

fanout goFanout (
    .in(go),
    .outA(goA),
    .outB(goB),
    .outC(goC)
    );

fanout hiFanout (
    .in(hi),
    .outA(hiA),
    .outB(hiB),
    .outC(hiC)
    );

fanout hoFanout (
    .in(ho),
    .outA(hoA),
    .outB(hoB),
    .outC(hoC)
    );

fanout iiFanout (
    .in(ii),
    .outA(iiA),
    .outB(iiB),
    .outC(iiC)
    );

fanout jiFanout (
    .in(ji),
    .outA(jiA),
    .outB(jiB),
    .outC(jiC)
    );

fanout ko_sFanout (
    .in(ko_s),
    .outA(ko_sA),
    .outB(ko_sB),
    .outC(ko_sC)
    );

fanout p13Fanout (
    .in(p13),
    .outA(p13A),
    .outB(p13B),
    .outC(p13C)
    );

fanout p31Fanout (
    .in(p31),
    .outA(p31A),
    .outB(p31B),
    .outC(p31C)
    );

fanout rstFanout (
    .in(rst),
    .outA(rstA),
    .outB(rstB),
    .outC(rstC)
    );
endmodule

