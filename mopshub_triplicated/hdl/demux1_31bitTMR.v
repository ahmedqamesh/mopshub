/****************************************************************************************************
 *                          ! THIS FILE WAS AUTO-GENERATED BY TMRG TOOL !                           *
 *                                   ! DO NOT EDIT IT MANUALLY !                                    *
 *                                                                                                  *
 * file    : ./output/demux1_31bitTMR.v                                                             *
 *                                                                                                  *
 * user    : lucas                                                                                  *
 * host    : DESKTOP-BFDSFP2                                                                        *
 * date    : 16/08/2022 12:58:15                                                                    *
 *                                                                                                  *
 * workdir : /mnt/c/Users/Lucas/Desktop/mopshub_triplication/mopshub_top_board_canakari_ftrim/hdl   *
 * cmd     : /mnt/c/Users/Lucas/Desktop/mopshub_triplication/tmrg-master/bin/tmrg -c tmrg.cfg -vvv  *
 * tmrg rev:                                                                                        *
 *                                                                                                  *
 * src file: demux1_31bit.v                                                                         *
 *           Git SHA           : File not in git repository!                                        *
 *           Modification time : 2022-08-12 10:48:11                                                *
 *           File Size         : 4797                                                               *
 *           MD5 hash          : 3e4a47f377e2fafb3f04046c39a6088b                                   *
 *                                                                                                  *
 ****************************************************************************************************/

module demux1_1bitTMR(
  input wire  def_value ,
  input wire [4:0] sel ,
  input wire  input_port ,
  output wire  output0 ,
  output wire  output1 ,
  output wire  output2 ,
  output wire  output3 ,
  output wire  output4 ,
  output wire  output5 ,
  output wire  output6 ,
  output wire  output7 ,
  output wire  output8 ,
  output wire  output9 ,
  output wire  output10 ,
  output wire  output11 ,
  output wire  output12 ,
  output wire  output13 ,
  output wire  output14 ,
  output wire  output15 
);
wire [4:0] selC;
wire [4:0] selB;
wire [4:0] selA;
wire input_portC;
wire input_portB;
wire input_portA;
wire def_valueC;
wire def_valueB;
wire def_valueA;
wor output9_regTmrError;
wire output9_reg;
wor output8_regTmrError;
wire output8_reg;
wor output7_regTmrError;
wire output7_reg;
wor output6_regTmrError;
wire output6_reg;
wor output5_regTmrError;
wire output5_reg;
wor output4_regTmrError;
wire output4_reg;
wor output3_regTmrError;
wire output3_reg;
wor output2_regTmrError;
wire output2_reg;
wor output1_regTmrError;
wire output1_reg;
wor output15_regTmrError;
wire output15_reg;
wor output14_regTmrError;
wire output14_reg;
wor output13_regTmrError;
wire output13_reg;
wor output12_regTmrError;
wire output12_reg;
wor output11_regTmrError;
wire output11_reg;
wor output10_regTmrError;
wire output10_reg;
wor output0_regTmrError;
wire output0_reg;
reg  output0_regA ;
reg  output0_regB ;
reg  output0_regC ;
reg  output1_regA ;
reg  output1_regB ;
reg  output1_regC ;
reg  output2_regA ;
reg  output2_regB ;
reg  output2_regC ;
reg  output3_regA ;
reg  output3_regB ;
reg  output3_regC ;
reg  output4_regA ;
reg  output4_regB ;
reg  output4_regC ;
reg  output5_regA ;
reg  output5_regB ;
reg  output5_regC ;
reg  output6_regA ;
reg  output6_regB ;
reg  output6_regC ;
reg  output7_regA ;
reg  output7_regB ;
reg  output7_regC ;
reg  output8_regA ;
reg  output8_regB ;
reg  output8_regC ;
reg  output9_regA ;
reg  output9_regB ;
reg  output9_regC ;
reg  output10_regA ;
reg  output10_regB ;
reg  output10_regC ;
reg  output11_regA ;
reg  output11_regB ;
reg  output11_regC ;
reg  output12_regA ;
reg  output12_regB ;
reg  output12_regC ;
reg  output13_regA ;
reg  output13_regB ;
reg  output13_regC ;
reg  output14_regA ;
reg  output14_regB ;
reg  output14_regC ;
reg  output15_regA ;
reg  output15_regB ;
reg  output15_regC ;
initial
  begin
    output0_regA =  1'b0;
    output1_regA =  1'b0;
    output2_regA =  1'b0;
    output3_regA =  1'b0;
    output4_regA =  1'b0;
    output5_regA =  1'b0;
    output6_regA =  1'b0;
    output7_regA =  1'b0;
    output8_regA =  1'b0;
    output9_regA =  1'b0;
    output10_regA =  1'b0;
    output11_regA =  1'b0;
    output12_regA =  1'b0;
    output13_regA =  1'b0;
    output14_regA =  1'b0;
    output15_regA =  1'b0;
  end
initial
  begin
    output0_regB =  1'b0;
    output1_regB =  1'b0;
    output2_regB =  1'b0;
    output3_regB =  1'b0;
    output4_regB =  1'b0;
    output5_regB =  1'b0;
    output6_regB =  1'b0;
    output7_regB =  1'b0;
    output8_regB =  1'b0;
    output9_regB =  1'b0;
    output10_regB =  1'b0;
    output11_regB =  1'b0;
    output12_regB =  1'b0;
    output13_regB =  1'b0;
    output14_regB =  1'b0;
    output15_regB =  1'b0;
  end
initial
  begin
    output0_regC =  1'b0;
    output1_regC =  1'b0;
    output2_regC =  1'b0;
    output3_regC =  1'b0;
    output4_regC =  1'b0;
    output5_regC =  1'b0;
    output6_regC =  1'b0;
    output7_regC =  1'b0;
    output8_regC =  1'b0;
    output9_regC =  1'b0;
    output10_regC =  1'b0;
    output11_regC =  1'b0;
    output12_regC =  1'b0;
    output13_regC =  1'b0;
    output14_regC =  1'b0;
    output15_regC =  1'b0;
  end
assign output0 =  output0_reg;
assign output1 =  output1_reg;
assign output2 =  output2_reg;
assign output3 =  output3_reg;
assign output4 =  output4_reg;
assign output5 =  output5_reg;
assign output6 =  output6_reg;
assign output7 =  output7_reg;
assign output8 =  output8_reg;
assign output9 =  output9_reg;
assign output10 =  output10_reg;
assign output11 =  output11_reg;
assign output12 =  output12_reg;
assign output13 =  output13_reg;
assign output14 =  output14_reg;
assign output15 =  output15_reg;

always @( * )
  begin
    output0_regA =  def_valueA;
    output1_regA =  def_valueA;
    output2_regA =  def_valueA;
    output3_regA =  def_valueA;
    output4_regA =  def_valueA;
    output5_regA =  def_valueA;
    output6_regA =  def_valueA;
    output7_regA =  def_valueA;
    output8_regA =  def_valueA;
    output9_regA =  def_valueA;
    output10_regA =  def_valueA;
    output11_regA =  def_valueA;
    output12_regA =  def_valueA;
    output13_regA =  def_valueA;
    output14_regA =  def_valueA;
    output15_regA =  def_valueA;
    case (selA)
      5'h0 : output0_regA =  input_portA;
      5'h1 : output1_regA =  input_portA;
      5'h2 : output2_regA =  input_portA;
      5'h3 : output3_regA =  input_portA;
      5'h4 : output4_regA =  input_portA;
      5'h5 : output5_regA =  input_portA;
      5'h6 : output6_regA =  input_portA;
      5'h7 : output7_regA =  input_portA;
      5'h8 : output8_regA =  input_portA;
      5'h9 : output9_regA =  input_portA;
      5'hA : output10_regA =  input_portA;
      5'hB : output11_regA =  input_portA;
      5'hC : output12_regA =  input_portA;
      5'hD : output13_regA =  input_portA;
      5'hE : output14_regA =  input_portA;
      5'hF : output15_regA =  input_portA;
      default : 
        begin
          output0_regA =  def_valueA;
          output1_regA =  def_valueA;
          output2_regA =  def_valueA;
          output3_regA =  def_valueA;
          output4_regA =  def_valueA;
          output5_regA =  def_valueA;
          output6_regA =  def_valueA;
          output7_regA =  def_valueA;
          output8_regA =  def_valueA;
          output9_regA =  def_valueA;
          output10_regA =  def_valueA;
          output11_regA =  def_valueA;
          output12_regA =  def_valueA;
          output13_regA =  def_valueA;
          output14_regA =  def_valueA;
          output15_regA =  def_valueA;
        end
    endcase
  end

always @( * )
  begin
    output0_regB =  def_valueB;
    output1_regB =  def_valueB;
    output2_regB =  def_valueB;
    output3_regB =  def_valueB;
    output4_regB =  def_valueB;
    output5_regB =  def_valueB;
    output6_regB =  def_valueB;
    output7_regB =  def_valueB;
    output8_regB =  def_valueB;
    output9_regB =  def_valueB;
    output10_regB =  def_valueB;
    output11_regB =  def_valueB;
    output12_regB =  def_valueB;
    output13_regB =  def_valueB;
    output14_regB =  def_valueB;
    output15_regB =  def_valueB;
    case (selB)
      5'h0 : output0_regB =  input_portB;
      5'h1 : output1_regB =  input_portB;
      5'h2 : output2_regB =  input_portB;
      5'h3 : output3_regB =  input_portB;
      5'h4 : output4_regB =  input_portB;
      5'h5 : output5_regB =  input_portB;
      5'h6 : output6_regB =  input_portB;
      5'h7 : output7_regB =  input_portB;
      5'h8 : output8_regB =  input_portB;
      5'h9 : output9_regB =  input_portB;
      5'hA : output10_regB =  input_portB;
      5'hB : output11_regB =  input_portB;
      5'hC : output12_regB =  input_portB;
      5'hD : output13_regB =  input_portB;
      5'hE : output14_regB =  input_portB;
      5'hF : output15_regB =  input_portB;
      default : 
        begin
          output0_regB =  def_valueB;
          output1_regB =  def_valueB;
          output2_regB =  def_valueB;
          output3_regB =  def_valueB;
          output4_regB =  def_valueB;
          output5_regB =  def_valueB;
          output6_regB =  def_valueB;
          output7_regB =  def_valueB;
          output8_regB =  def_valueB;
          output9_regB =  def_valueB;
          output10_regB =  def_valueB;
          output11_regB =  def_valueB;
          output12_regB =  def_valueB;
          output13_regB =  def_valueB;
          output14_regB =  def_valueB;
          output15_regB =  def_valueB;
        end
    endcase
  end

always @( * )
  begin
    output0_regC =  def_valueC;
    output1_regC =  def_valueC;
    output2_regC =  def_valueC;
    output3_regC =  def_valueC;
    output4_regC =  def_valueC;
    output5_regC =  def_valueC;
    output6_regC =  def_valueC;
    output7_regC =  def_valueC;
    output8_regC =  def_valueC;
    output9_regC =  def_valueC;
    output10_regC =  def_valueC;
    output11_regC =  def_valueC;
    output12_regC =  def_valueC;
    output13_regC =  def_valueC;
    output14_regC =  def_valueC;
    output15_regC =  def_valueC;
    case (selC)
      5'h0 : output0_regC =  input_portC;
      5'h1 : output1_regC =  input_portC;
      5'h2 : output2_regC =  input_portC;
      5'h3 : output3_regC =  input_portC;
      5'h4 : output4_regC =  input_portC;
      5'h5 : output5_regC =  input_portC;
      5'h6 : output6_regC =  input_portC;
      5'h7 : output7_regC =  input_portC;
      5'h8 : output8_regC =  input_portC;
      5'h9 : output9_regC =  input_portC;
      5'hA : output10_regC =  input_portC;
      5'hB : output11_regC =  input_portC;
      5'hC : output12_regC =  input_portC;
      5'hD : output13_regC =  input_portC;
      5'hE : output14_regC =  input_portC;
      5'hF : output15_regC =  input_portC;
      default : 
        begin
          output0_regC =  def_valueC;
          output1_regC =  def_valueC;
          output2_regC =  def_valueC;
          output3_regC =  def_valueC;
          output4_regC =  def_valueC;
          output5_regC =  def_valueC;
          output6_regC =  def_valueC;
          output7_regC =  def_valueC;
          output8_regC =  def_valueC;
          output9_regC =  def_valueC;
          output10_regC =  def_valueC;
          output11_regC =  def_valueC;
          output12_regC =  def_valueC;
          output13_regC =  def_valueC;
          output14_regC =  def_valueC;
          output15_regC =  def_valueC;
        end
    endcase
  end

majorityVoter output0_regVoter (
    .inA(output0_regA),
    .inB(output0_regB),
    .inC(output0_regC),
    .out(output0_reg),
    .tmrErr(output0_regTmrError)
    );

majorityVoter output10_regVoter (
    .inA(output10_regA),
    .inB(output10_regB),
    .inC(output10_regC),
    .out(output10_reg),
    .tmrErr(output10_regTmrError)
    );

majorityVoter output11_regVoter (
    .inA(output11_regA),
    .inB(output11_regB),
    .inC(output11_regC),
    .out(output11_reg),
    .tmrErr(output11_regTmrError)
    );

majorityVoter output12_regVoter (
    .inA(output12_regA),
    .inB(output12_regB),
    .inC(output12_regC),
    .out(output12_reg),
    .tmrErr(output12_regTmrError)
    );

majorityVoter output13_regVoter (
    .inA(output13_regA),
    .inB(output13_regB),
    .inC(output13_regC),
    .out(output13_reg),
    .tmrErr(output13_regTmrError)
    );

majorityVoter output14_regVoter (
    .inA(output14_regA),
    .inB(output14_regB),
    .inC(output14_regC),
    .out(output14_reg),
    .tmrErr(output14_regTmrError)
    );

majorityVoter output15_regVoter (
    .inA(output15_regA),
    .inB(output15_regB),
    .inC(output15_regC),
    .out(output15_reg),
    .tmrErr(output15_regTmrError)
    );

majorityVoter output1_regVoter (
    .inA(output1_regA),
    .inB(output1_regB),
    .inC(output1_regC),
    .out(output1_reg),
    .tmrErr(output1_regTmrError)
    );

majorityVoter output2_regVoter (
    .inA(output2_regA),
    .inB(output2_regB),
    .inC(output2_regC),
    .out(output2_reg),
    .tmrErr(output2_regTmrError)
    );

majorityVoter output3_regVoter (
    .inA(output3_regA),
    .inB(output3_regB),
    .inC(output3_regC),
    .out(output3_reg),
    .tmrErr(output3_regTmrError)
    );

majorityVoter output4_regVoter (
    .inA(output4_regA),
    .inB(output4_regB),
    .inC(output4_regC),
    .out(output4_reg),
    .tmrErr(output4_regTmrError)
    );

majorityVoter output5_regVoter (
    .inA(output5_regA),
    .inB(output5_regB),
    .inC(output5_regC),
    .out(output5_reg),
    .tmrErr(output5_regTmrError)
    );

majorityVoter output6_regVoter (
    .inA(output6_regA),
    .inB(output6_regB),
    .inC(output6_regC),
    .out(output6_reg),
    .tmrErr(output6_regTmrError)
    );

majorityVoter output7_regVoter (
    .inA(output7_regA),
    .inB(output7_regB),
    .inC(output7_regC),
    .out(output7_reg),
    .tmrErr(output7_regTmrError)
    );

majorityVoter output8_regVoter (
    .inA(output8_regA),
    .inB(output8_regB),
    .inC(output8_regC),
    .out(output8_reg),
    .tmrErr(output8_regTmrError)
    );

majorityVoter output9_regVoter (
    .inA(output9_regA),
    .inB(output9_regB),
    .inC(output9_regC),
    .out(output9_reg),
    .tmrErr(output9_regTmrError)
    );

fanout def_valueFanout (
    .in(def_value),
    .outA(def_valueA),
    .outB(def_valueB),
    .outC(def_valueC)
    );

fanout input_portFanout (
    .in(input_port),
    .outA(input_portA),
    .outB(input_portB),
    .outC(input_portC)
    );

fanout #(.WIDTH(5)) selFanout (
    .in(sel),
    .outA(selA),
    .outB(selB),
    .outC(selC)
    );
endmodule

