//
// Module mopshub_triplicated.rec2TMR.struct
//
// Created:
//          by - dcs.dcs (localhost)
//          at - 09:18:05 05/10/22
//
// Generated by Mentor Graphics' HDL Designer(TM) 2019.4 (Build 4)
//


module rec2TMR( 
   // Port Declarations
   input   wire           resetA, 
   input   wire           resetB, 
   input   wire           resetC, 
   input   wire           clockA, 
   input   wire           clockB, 
   input   wire           clockC, 
   input   wire           inconerecA, 
   input   wire           inconerecB, 
   input   wire           inconerecC, 
   input   wire           incegtrecA, 
   input   wire           incegtrecB, 
   input   wire           incegtrecC, 
   input   wire           decrecA, 
   input   wire           decrecB, 
   input   wire           decrecC, 
   output  reg            rec_lt96A, 
   output  reg            rec_lt96B, 
   output  reg            rec_lt96C, 
   output  reg            rec_ge96A, 
   output  reg            rec_ge96B, 
   output  reg            rec_ge96C, 
   output  reg            rec_ge128A, 
   output  reg            rec_ge128B, 
   output  reg            rec_ge128C, 
   output  wire    [7:0]  reccountA, 
   output  wire    [7:0]  reccountB, 
   output  wire    [7:0]  reccountC
);


// Internal Declarations


// Local declarations

// Internal signal declarations
wor         edgedTmrErrorC;
wire        edgedVotedC;
wor         counterTmrErrorC;
wire  [8:0] counterVotedC;
wor         edgedTmrErrorB;
wire        edgedVotedB;
wor         counterTmrErrorB;
wire  [8:0] counterVotedB;
wor         edgedTmrErrorA;
wire        edgedVotedA;
wor         counterTmrErrorA;
wire  [8:0] counterVotedA;
reg   [8:0] counterA;
reg   [8:0] counterB;
reg   [8:0] counterC;
reg         edgedA;
reg         edgedB;
reg         edgedC;
wire        actionA;
wire        actionB;
wire        actionC;


// Instances 
majorityVoter #(9) counterVoterA( 
   .inA    (counterA), 
   .inB    (counterB), 
   .inC    (counterC), 
   .out    (counterVotedA), 
   .tmrErr (counterTmrErrorA)
); 

majorityVoter #(9) counterVoterB( 
   .inA    (counterA), 
   .inB    (counterB), 
   .inC    (counterC), 
   .out    (counterVotedB), 
   .tmrErr (counterTmrErrorB)
); 

majorityVoter #(9) counterVoterC( 
   .inA    (counterA), 
   .inB    (counterB), 
   .inC    (counterC), 
   .out    (counterVotedC), 
   .tmrErr (counterTmrErrorC)
); 

majorityVoter edgedVoterA( 
   .inA    (edgedA), 
   .inB    (edgedB), 
   .inC    (edgedC), 
   .out    (edgedVotedA), 
   .tmrErr (edgedTmrErrorA)
); 

majorityVoter edgedVoterB( 
   .inA    (edgedA), 
   .inB    (edgedB), 
   .inC    (edgedC), 
   .out    (edgedVotedB), 
   .tmrErr (edgedTmrErrorB)
); 

majorityVoter edgedVoterC( 
   .inA    (edgedA), 
   .inB    (edgedB), 
   .inC    (edgedC), 
   .out    (edgedVotedC), 
   .tmrErr (edgedTmrErrorC)
); 

// HDL Embedded Text Block 1 eb1
assign actionA =  inconerecA|incegtrecA|decrecA;
assign actionB =  inconerecB|incegtrecB|decrecB;
assign actionC =  inconerecC|incegtrecC|decrecC;
assign reccountA =  counterVotedA[7:0] ;
assign reccountB =  counterVotedB[7:0] ;
assign reccountC =  counterVotedC[7:0] ;
// HDL Embedded Text Block 2 eb2
always @( posedge clockA )
  begin
    if (resetA==1'b0)
      begin
        counterA <= 9'd0;
        edgedA <= 1'b0;
      end
    else
      begin
        counterA <= counterVotedA;
        edgedA <= edgedVotedA;
        if (actionA==1'b1)
          begin
            if (edgedVotedA==1'b0)
              begin
                edgedA <= 1'b1;
                if (counterVotedA!=9'd0&&decrecA==1'b1)
                  counterA <= counterVotedA-1;
                else
                  if (counterVotedA<=255)
                    begin
                      if (inconerecA==1'b1)
                        counterA <= counterVotedA+1;
                      else
                        if (incegtrecA==1'b1)
                          counterA <= counterVotedA+8;
                    end
              end
          end
        else
          edgedA <= 1'b0;
      end
  end
// HDL Embedded Text Block 3 eb3
always @( posedge clockB )
  begin
    if (resetB==1'b0)
      begin
        counterB <= 9'd0;
        edgedB <= 1'b0;
      end
    else
      begin
        counterB <= counterVotedB;
        edgedB <= edgedVotedB;
        if (actionB==1'b1)
          begin
            if (edgedVotedB==1'b0)
              begin
                edgedB <= 1'b1;
                if (counterVotedB!=9'd0&&decrecB==1'b1)
                  counterB <= counterVotedB-1;
                else
                  if (counterVotedB<=255)
                    begin
                      if (inconerecB==1'b1)
                        counterB <= counterVotedB+1;
                      else
                        if (incegtrecB==1'b1)
                          counterB <= counterVotedB+8;
                    end
              end
          end
        else
          edgedB <= 1'b0;
      end
  end
// HDL Embedded Text Block 4 eb4
always @( posedge clockC )
  begin
    if (resetC==1'b0)
      begin
        counterC <= 9'd0;
        edgedC <= 1'b0;
      end
    else
      begin
        counterC <= counterVotedC;
        edgedC <= edgedVotedC;
        if (actionC==1'b1)
          begin
            if (edgedVotedC==1'b0)
              begin
                edgedC <= 1'b1;
                if (counterVotedC!=9'd0&&decrecC==1'b1)
                  counterC <= counterVotedC-1;
                else
                  if (counterVotedC<=255)
                    begin
                      if (inconerecC==1'b1)
                        counterC <= counterVotedC+1;
                      else
                        if (incegtrecC==1'b1)
                          counterC <= counterVotedC+8;
                    end
              end
          end
        else
          edgedC <= 1'b0;
      end
  end
// HDL Embedded Text Block 5 eb5
always @( counterVotedA )
  begin
    if (counterVotedA>9'd127)
      begin
        rec_lt96A <= 1'b0;
        rec_ge96A <= 1'b1;
        rec_ge128A <= 1'b1;
      end
    else
      if (counterVotedA<=9'd127&&counterVotedA>=9'd96)
        begin
          rec_lt96A <= 1'b0;
          rec_ge96A <= 1'b1;
          rec_ge128A <= 1'b0;
        end
      else
        begin
          rec_lt96A <= 1'b1;
          rec_ge96A <= 1'b0;
          rec_ge128A <= 1'b0;
        end
  end
// HDL Embedded Text Block 6 eb6
always @( counterVotedB )
  begin
    if (counterVotedB>9'd127)
      begin
        rec_lt96B <= 1'b0;
        rec_ge96B <= 1'b1;
        rec_ge128B <= 1'b1;
      end
    else
      if (counterVotedB<=9'd127&&counterVotedB>=9'd96)
        begin
          rec_lt96B <= 1'b0;
          rec_ge96B <= 1'b1;
          rec_ge128B <= 1'b0;
        end
      else
        begin
          rec_lt96B <= 1'b1;
          rec_ge96B <= 1'b0;
          rec_ge128B <= 1'b0;
        end
  end
// HDL Embedded Text Block 7 eb7
always @( counterVotedC )
  begin
    if (counterVotedC>9'd127)
      begin
        rec_lt96C <= 1'b0;
        rec_ge96C <= 1'b1;
        rec_ge128C <= 1'b1;
      end
    else
      if (counterVotedC<=9'd127&&counterVotedC>=9'd96)
        begin
          rec_lt96C <= 1'b0;
          rec_ge96C <= 1'b1;
          rec_ge128C <= 1'b0;
        end
      else
        begin
          rec_lt96C <= 1'b1;
          rec_ge96C <= 1'b0;
          rec_ge128C <= 1'b0;
        end
  end

endmodule // rec2TMR

