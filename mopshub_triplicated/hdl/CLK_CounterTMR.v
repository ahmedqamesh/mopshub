/****************************************************************************************************
 *                          ! THIS FILE WAS AUTO-GENERATED BY TMRG TOOL !                           *
 *                                   ! DO NOT EDIT IT MANUALLY !                                    *
 *                                                                                                  *
 * file    : ./output/CLK_CounterTMR.v                                                              *
 *                                                                                                  *
 * user    : lucas                                                                                  *
 * host    : DESKTOP-BFDSFP2                                                                        *
 * date    : 05/12/2022 13:27:57                                                                    *
 *                                                                                                  *
 * workdir : /mnt/c/Users/Lucas/Documents/GitHub/mopshub_triplicated/triplicated/mopshub_top_board_16/hdl *
 * cmd     : /mnt/c/Users/Lucas/Documents/GitHub/mopshub_triplicated/tmrg-master/bin/tmrg -vv -c    *
 *           tmrg.cfg                                                                               *
 * tmrg rev: b25f042058e4e97751df2a0933c24aeadd5a78a5                                               *
 *                                                                                                  *
 * src file: CLK_Counter.v                                                                          *
 *           Git SHA           : b25f042058e4e97751df2a0933c24aeadd5a78a5 (?? CLK_Counter.v)        *
 *           Modification time : 2022-11-10 21:17:25                                                *
 *           File Size         : 949                                                                *
 *           MD5 hash          : 5fd68b7eeb9ec405a6c0a1c6fa94f789                                   *
 *                                                                                                  *
 ****************************************************************************************************/

module CLK_CounterTMR(
  input wire  clk ,
  input wire  reset ,
  input wire  puffer ,
  input wire  rx ,
  input wire  Prescale_En ,
  output wire [3:0] Counter_C 
);
wire rxC;
wire rxB;
wire rxA;
wire resetC;
wire resetB;
wire resetA;
wire pufferC;
wire pufferB;
wire pufferA;
wire clkC;
wire clkB;
wire clkA;
wire Prescale_EnC;
wire Prescale_EnB;
wire Prescale_EnA;
wire [3:0] Counter_CC;
wire [3:0] Counter_CB;
wire [3:0] Counter_CA;
wire [3:0] CountVC;
wire [3:0] CountVB;
wire [3:0] CountVA;
wor Counter_C_iTmrError;
wire [3:0] Counter_C_i;
wor CountTmrError;
wire [3:0] Count;
reg  [3:0] CountA ;
reg  [3:0] CountB ;
reg  [3:0] CountC ;
reg  [3:0] Counter_C_iA ;
reg  [3:0] Counter_C_iB ;
reg  [3:0] Counter_C_iC ;
assign Counter_C =  Counter_C_i;
wire [3:0] CountV =  Count;

always @( posedge clkA or negedge resetA )
  begin
    if (resetA==0)
      begin
        CountA <= 0;
        Counter_C_iA <= 0;
      end
    else
      begin
        if (Prescale_EnA)
          CountA <= 1;
        else
          CountA <= CountVA+1;
        if ((rxA==0&&pufferA)&&Counter_CA==0)
          Counter_C_iA <= CountVA;
        else
          if (rxA==1'b1)
            Counter_C_iA <= 0;
          else
            Counter_C_iA <= Counter_CA;
      end
  end

always @( posedge clkB or negedge resetB )
  begin
    if (resetB==0)
      begin
        CountB <= 0;
        Counter_C_iB <= 0;
      end
    else
      begin
        if (Prescale_EnB)
          CountB <= 1;
        else
          CountB <= CountVB+1;
        if ((rxB==0&&pufferB)&&Counter_CB==0)
          Counter_C_iB <= CountVB;
        else
          if (rxB==1'b1)
            Counter_C_iB <= 0;
          else
            Counter_C_iB <= Counter_CB;
      end
  end

always @( posedge clkC or negedge resetC )
  begin
    if (resetC==0)
      begin
        CountC <= 0;
        Counter_C_iC <= 0;
      end
    else
      begin
        if (Prescale_EnC)
          CountC <= 1;
        else
          CountC <= CountVC+1;
        if ((rxC==0&&pufferC)&&Counter_CC==0)
          Counter_C_iC <= CountVC;
        else
          if (rxC==1'b1)
            Counter_C_iC <= 0;
          else
            Counter_C_iC <= Counter_CC;
      end
  end

majorityVoter #(.WIDTH(4)) CountVoter (
    .inA(CountA),
    .inB(CountB),
    .inC(CountC),
    .out(Count),
    .tmrErr(CountTmrError)
    );

majorityVoter #(.WIDTH(4)) Counter_C_iVoter (
    .inA(Counter_C_iA),
    .inB(Counter_C_iB),
    .inC(Counter_C_iC),
    .out(Counter_C_i),
    .tmrErr(Counter_C_iTmrError)
    );

fanout #(.WIDTH(4)) CountVFanout (
    .in(CountV),
    .outA(CountVA),
    .outB(CountVB),
    .outC(CountVC)
    );

fanout #(.WIDTH(4)) Counter_CFanout (
    .in(Counter_C),
    .outA(Counter_CA),
    .outB(Counter_CB),
    .outC(Counter_CC)
    );

fanout Prescale_EnFanout (
    .in(Prescale_En),
    .outA(Prescale_EnA),
    .outB(Prescale_EnB),
    .outC(Prescale_EnC)
    );

fanout clkFanout (
    .in(clk),
    .outA(clkA),
    .outB(clkB),
    .outC(clkC)
    );

fanout pufferFanout (
    .in(puffer),
    .outA(pufferA),
    .outB(pufferB),
    .outC(pufferC)
    );

fanout resetFanout (
    .in(reset),
    .outA(resetA),
    .outB(resetB),
    .outC(resetC)
    );

fanout rxFanout (
    .in(rx),
    .outA(rxA),
    .outB(rxB),
    .outC(rxC)
    );
endmodule

