/****************************************************************************************************
 *                          ! THIS FILE WAS AUTO-GENERATED BY TMRG TOOL !                           *
 *                                   ! DO NOT EDIT IT MANUALLY !                                    *
 *                                                                                                  *
 * file    : ./output/CLK_CounterTMR.v                                                              *
 *                                                                                                  *
 * user    : lucas                                                                                  *
 * host    : DESKTOP-BFDSFP2                                                                        *
 * date    : 16/08/2022 12:58:06                                                                    *
 *                                                                                                  *
 * workdir : /mnt/c/Users/Lucas/Desktop/mopshub_triplication/mopshub_top_board_canakari_ftrim/hdl   *
 * cmd     : /mnt/c/Users/Lucas/Desktop/mopshub_triplication/tmrg-master/bin/tmrg -c tmrg.cfg -vvv  *
 * tmrg rev:                                                                                        *
 *                                                                                                  *
 * src file: CLK_Counter.v                                                                          *
 *           Git SHA           : File not in git repository!                                        *
 *           Modification time : 2022-03-29 13:49:21                                                *
 *           File Size         : 967                                                                *
 *           MD5 hash          : 6e7b2215da63ed7474b847953ca015f2                                   *
 *                                                                                                  *
 ****************************************************************************************************/

module CLK_CounterTMR(
  input wire  clkA ,
  input wire  clkB ,
  input wire  clkC ,
  input wire  resetA ,
  input wire  resetB ,
  input wire  resetC ,
  input wire  pufferA ,
  input wire  pufferB ,
  input wire  pufferC ,
  input wire  rxA ,
  input wire  rxB ,
  input wire  rxC ,
  input wire  Prescale_EnA ,
  input wire  Prescale_EnB ,
  input wire  Prescale_EnC ,
  output wire [3:0] Counter_CA ,
  output wire [3:0] Counter_CB ,
  output wire [3:0] Counter_CC 
);
wor Counter_C_iTmrErrorC;
wire [3:0] Counter_C_iVotedC;
wor CountTmrErrorC;
wire [3:0] CountVotedC;
wor Counter_C_iTmrErrorB;
wire [3:0] Counter_C_iVotedB;
wor CountTmrErrorB;
wire [3:0] CountVotedB;
wor Counter_C_iTmrErrorA;
wire [3:0] Counter_C_iVotedA;
wor CountTmrErrorA;
wire [3:0] CountVotedA;
reg  [3:0] CountA ;
reg  [3:0] CountB ;
reg  [3:0] CountC ;
reg  [3:0] Counter_C_iA ;
reg  [3:0] Counter_C_iB ;
reg  [3:0] Counter_C_iC ;
assign Counter_CA =  Counter_C_iVotedA;
assign Counter_CB =  Counter_C_iVotedB;
assign Counter_CC =  Counter_C_iVotedC;

always @( posedge clkA or negedge resetA )
  begin
    if (resetA==0)
      begin
        CountA <= 0;
        Counter_C_iA <= 0;
      end
    else
      begin
        if (Prescale_EnA)
          CountA <= 1;
        else
          CountA <= CountVotedA+1;
        if ((rxA==0&&pufferA)&&Counter_C_iA==0)
          Counter_C_iA <= CountVotedA;
        else
          if (rxA==1'b1)
            Counter_C_iA <= 0;
          else
            Counter_C_iA <= Counter_C_iVotedA;
      end
  end

always @( posedge clkB or negedge resetB )
  begin
    if (resetB==0)
      begin
        CountB <= 0;
        Counter_C_iB <= 0;
      end
    else
      begin
        if (Prescale_EnB)
          CountB <= 1;
        else
          CountB <= CountVotedB+1;
        if ((rxB==0&&pufferB)&&Counter_C_iB==0)
          Counter_C_iB <= CountVotedB;
        else
          if (rxB==1'b1)
            Counter_C_iB <= 0;
          else
            Counter_C_iB <= Counter_C_iVotedB;
      end
  end

always @( posedge clkC or negedge resetC )
  begin
    if (resetC==0)
      begin
        CountC <= 0;
        Counter_C_iC <= 0;
      end
    else
      begin
        if (Prescale_EnC)
          CountC <= 1;
        else
          CountC <= CountVotedC+1;
        if ((rxC==0&&pufferC)&&Counter_C_iC==0)
          Counter_C_iC <= CountVotedC;
        else
          if (rxC==1'b1)
            Counter_C_iC <= 0;
          else
            Counter_C_iC <= Counter_C_iVotedC;
      end
  end

majorityVoter #(.WIDTH(4)) CountVoterA (
    .inA(CountA),
    .inB(CountB),
    .inC(CountC),
    .out(CountVotedA),
    .tmrErr(CountTmrErrorA)
    );

majorityVoter #(.WIDTH(4)) Counter_C_iVoterA (
    .inA(Counter_C_iA),
    .inB(Counter_C_iB),
    .inC(Counter_C_iC),
    .out(Counter_C_iVotedA),
    .tmrErr(Counter_C_iTmrErrorA)
    );

majorityVoter #(.WIDTH(4)) CountVoterB (
    .inA(CountA),
    .inB(CountB),
    .inC(CountC),
    .out(CountVotedB),
    .tmrErr(CountTmrErrorB)
    );

majorityVoter #(.WIDTH(4)) Counter_C_iVoterB (
    .inA(Counter_C_iA),
    .inB(Counter_C_iB),
    .inC(Counter_C_iC),
    .out(Counter_C_iVotedB),
    .tmrErr(Counter_C_iTmrErrorB)
    );

majorityVoter #(.WIDTH(4)) CountVoterC (
    .inA(CountA),
    .inB(CountB),
    .inC(CountC),
    .out(CountVotedC),
    .tmrErr(CountTmrErrorC)
    );

majorityVoter #(.WIDTH(4)) Counter_C_iVoterC (
    .inA(Counter_C_iA),
    .inB(Counter_C_iB),
    .inC(Counter_C_iC),
    .out(Counter_C_iVotedC),
    .tmrErr(Counter_C_iTmrErrorC)
    );
endmodule

