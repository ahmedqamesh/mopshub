/****************************************************************************************************
 *                          ! THIS FILE WAS AUTO-GENERATED BY TMRG TOOL !                           *
 *                                   ! DO NOT EDIT IT MANUALLY !                                    *
 *                                                                                                  *
 * file    : ./output/triger_counterTMR.v                                                           *
 *                                                                                                  *
 * user    : lucas                                                                                  *
 * host    : DESKTOP-BFDSFP2                                                                        *
 * date    : 16/08/2022 12:58:39                                                                    *
 *                                                                                                  *
 * workdir : /mnt/c/Users/Lucas/Desktop/mopshub_triplication/mopshub_top_board_canakari_ftrim/hdl   *
 * cmd     : /mnt/c/Users/Lucas/Desktop/mopshub_triplication/tmrg-master/bin/tmrg -c tmrg.cfg -vvv  *
 * tmrg rev:                                                                                        *
 *                                                                                                  *
 * src file: triger_counter.v                                                                       *
 *           Git SHA           : File not in git repository!                                        *
 *           Modification time : 2022-08-12 11:32:09                                                *
 *           File Size         : 1076                                                               *
 *           MD5 hash          : f9d87c9a64fedbce5933b0a61b37a85d                                   *
 *                                                                                                  *
 ****************************************************************************************************/

module triger_counterTMR(
  input wire  rst ,
  input wire  clk ,
  output wire  request_trig 
);
wire rstC;
wire rstB;
wire rstA;
wire request_trigC;
wire request_trigB;
wire request_trigA;
wire request_cycle_cnt_vC;
wire request_cycle_cnt_vB;
wire request_cycle_cnt_vA;
wire clkC;
wire clkB;
wire clkA;
wor request_cycle_cntTmrError;
wire [2:0] request_cycle_cnt;
wor cycles_cntTmrError;
wire [2:0] cycles_cnt;
reg  [2:0] cycles_cntA ;
reg  [2:0] cycles_cntB ;
reg  [2:0] cycles_cntC ;
reg  [2:0] request_cycle_cntA ;
reg  [2:0] request_cycle_cntB ;
reg  [2:0] request_cycle_cntC ;
initial
  begin
    cycles_cntA =  3'b100;
    request_cycle_cntA =  0;
  end
initial
  begin
    cycles_cntB =  3'b100;
    request_cycle_cntB =  0;
  end
initial
  begin
    cycles_cntC =  3'b100;
    request_cycle_cntC =  0;
  end
wire request_cycle_cnt_v =  request_cycle_cnt;

always @( posedge clkA )
  begin
    if (!rstA)
      request_cycle_cntA <= 3'b0;
    else
      begin
        if (request_trigA==1)
          request_cycle_cntA <= 3'b0;
        else
          request_cycle_cntA <= request_cycle_cnt_vA+1'b1;
      end
  end

always @( posedge clkB )
  begin
    if (!rstB)
      request_cycle_cntB <= 3'b0;
    else
      begin
        if (request_trigB==1)
          request_cycle_cntB <= 3'b0;
        else
          request_cycle_cntB <= request_cycle_cnt_vB+1'b1;
      end
  end

always @( posedge clkC )
  begin
    if (!rstC)
      request_cycle_cntC <= 3'b0;
    else
      begin
        if (request_trigC==1)
          request_cycle_cntC <= 3'b0;
        else
          request_cycle_cntC <= request_cycle_cnt_vC+1'b1;
      end
  end
assign request_trig =  (request_cycle_cnt==cycles_cnt) ? 1 : 0;

majorityVoter #(.WIDTH(3)) cycles_cntVoter (
    .inA(cycles_cntA),
    .inB(cycles_cntB),
    .inC(cycles_cntC),
    .out(cycles_cnt),
    .tmrErr(cycles_cntTmrError)
    );

majorityVoter #(.WIDTH(3)) request_cycle_cntVoter (
    .inA(request_cycle_cntA),
    .inB(request_cycle_cntB),
    .inC(request_cycle_cntC),
    .out(request_cycle_cnt),
    .tmrErr(request_cycle_cntTmrError)
    );

fanout clkFanout (
    .in(clk),
    .outA(clkA),
    .outB(clkB),
    .outC(clkC)
    );

fanout request_cycle_cnt_vFanout (
    .in(request_cycle_cnt_v),
    .outA(request_cycle_cnt_vA),
    .outB(request_cycle_cnt_vB),
    .outC(request_cycle_cnt_vC)
    );

fanout request_trigFanout (
    .in(request_trig),
    .outA(request_trigA),
    .outB(request_trigB),
    .outC(request_trigC)
    );

fanout rstFanout (
    .in(rst),
    .outA(rstA),
    .outB(rstB),
    .outC(rstC)
    );
endmodule

