//
// Module mopshub_triplicated.canakari_interfaceTMR.struct
//
// Created:
//          by - dcs.dcs (localhost)
//          at - 09:18:03 05/10/22
//
// Generated by Mentor Graphics' HDL Designer(TM) 2019.4 (Build 4)
//


module canakari_interfaceTMR( 
   // Port Declarations
   input   wire            abortA, 
   input   wire            abortB, 
   input   wire            abortC, 
   input   wire    [4:0]   can_rec_selectA, 
   input   wire    [4:0]   can_rec_selectB, 
   input   wire    [4:0]   can_rec_selectC, 
   input   wire            clkA, 
   input   wire            clkB, 
   input   wire            clkC, 
   input   wire    [75:0]  data_tra_mesA, 
   input   wire    [75:0]  data_tra_mesB, 
   input   wire    [75:0]  data_tra_mesC, 
   input   wire    [4:0]   data_tra_selectA, 
   input   wire    [4:0]   data_tra_selectB, 
   input   wire    [4:0]   data_tra_selectC, 
   input   wire            end_can_procA, 
   input   wire            end_can_procB, 
   input   wire            end_can_procC, 
   input   wire            initA, 
   input   wire            initB, 
   input   wire            initC, 
   input   wire    [4:0]   n_busesA, 
   input   wire    [4:0]   n_busesB, 
   input   wire    [4:0]   n_busesC, 
   input   wire    [4:0]   power_bus_cntA, 
   input   wire    [4:0]   power_bus_cntB, 
   input   wire    [4:0]   power_bus_cntC, 
   input   wire            reset_irq_canA, 
   input   wire            reset_irq_canB, 
   input   wire            reset_irq_canC, 
   input   wire            reset_irq_can_allA, 
   input   wire            reset_irq_can_allB, 
   input   wire            reset_irq_can_allC, 
   input   wire            reset_irq_osc_canA, 
   input   wire            reset_irq_osc_canB, 
   input   wire            reset_irq_osc_canC, 
   input   wire            reset_irq_rec_canA, 
   input   wire            reset_irq_rec_canB, 
   input   wire            reset_irq_rec_canC, 
   input   wire            reset_irq_tra_canA, 
   input   wire            reset_irq_tra_canB, 
   input   wire            reset_irq_tra_canC, 
   input   wire            rstA, 
   input   wire            rstB, 
   input   wire            rstC, 
   input   wire            send_mesA, 
   input   wire            send_mesB, 
   input   wire            send_mesC, 
   input   wire            start_readA, 
   input   wire            start_readB, 
   input   wire            start_readC, 
   input   wire            start_trim_oscA, 
   input   wire            start_trim_oscB, 
   input   wire            start_trim_oscC, 
   input   wire            start_writeA, 
   input   wire            start_writeB, 
   input   wire            start_writeC, 
   input   wire            timeoutrstA, 
   input   wire            timeoutrstB, 
   input   wire            timeoutrstC, 
   output  wire    [4:0]   addr_canA, 
   output  wire    [4:0]   addr_canB, 
   output  wire    [4:0]   addr_canC, 
   output  wire            bus_matchA, 
   output  wire            bus_matchB, 
   output  wire            bus_matchC, 
   output  wire    [4:0]   can_tra_selectA, 
   output  wire    [4:0]   can_tra_selectB, 
   output  wire    [4:0]   can_tra_selectC, 
   output  wire            cs_canA, 
   output  wire            cs_canB, 
   output  wire            cs_canC, 
   output  wire            en_rec_regA, 
   output  wire            en_rec_regB, 
   output  wire            en_rec_regC, 
   output  wire            end_initA, 
   output  wire            end_initB, 
   output  wire            end_initC, 
   output  wire            end_readA, 
   output  wire            end_readB, 
   output  wire            end_readC, 
   output  wire            end_trim_oscA, 
   output  wire            end_trim_oscB, 
   output  wire            end_trim_oscC, 
   output  wire            end_writeA, 
   output  wire            end_writeB, 
   output  wire            end_writeC, 
   output  wire            read_sig_can_nA, 
   output  wire            read_sig_can_nB, 
   output  wire            read_sig_can_nC, 
   output  wire            reset_all_doneA, 
   output  wire            reset_all_doneB, 
   output  wire            reset_all_doneC, 
   output  wire            reset_irq_can_doneA, 
   output  wire            reset_irq_can_doneB, 
   output  wire            reset_irq_can_doneC, 
   output  wire            start_initA, 
   output  wire            start_initB, 
   output  wire            start_initC, 
   output  wire    [5:0]   statedebcanA, 
   output  wire    [5:0]   statedebcanB, 
   output  wire    [5:0]   statedebcanC, 
   output  wire    [15:0]  write_canA, 
   output  wire    [15:0]  write_canB, 
   output  wire    [15:0]  write_canC, 
   output  wire            write_sig_can_nA, 
   output  wire            write_sig_can_nB, 
   output  wire            write_sig_can_nC
);


// Internal Declarations


// Local declarations

// Internal signal declarations
wire  [3:0]  cmdA;
wire  [3:0]  cmdB;
wire  [3:0]  cmdC;
wire         cnt_osc_selectA;
wire         cnt_osc_selectB;
wire         cnt_osc_selectC;
wire         cnt_selectA;
wire         cnt_selectB;
wire         cnt_selectC;
wire  [15:0] data_initA;
wire  [15:0] data_initB;
wire  [15:0] data_initC;
wire  [4:0]  data_tra_select_cntA;
wire  [4:0]  data_tra_select_cntB;
wire  [4:0]  data_tra_select_cntC;
reg          end_cntA;
reg          end_cntB;
reg          end_cntC;
wire         initiA;
wire         initiB;
wire         initiC;
wire         reset_irq_can_activeA;
wire         reset_irq_can_activeB;
wire         reset_irq_can_activeC;
wire         reset_sig_can_allA;
wire         reset_sig_can_allB;
wire         reset_sig_can_allC;
wire         reset_sig_can_nA;
wire         reset_sig_can_nB;
wire         reset_sig_can_nC;
wire         rst_cntA;
wire         rst_cntB;
wire         rst_cntC;
wire         set_bus_idA;
wire         set_bus_idB;
wire         set_bus_idC;
wire         start_cntA;
wire         start_cntB;
wire         start_cntC;
wire         tra_selectA;
wire         tra_selectB;
wire         tra_selectC;
wire         trimA;
wire         trimB;
wire         trimC;


// Instances 
bit_counterTMR bit_counter0( 
   .ext_rstA    (rst_cntA), 
   .ext_rstB    (rst_cntB), 
   .ext_rstC    (rst_cntC), 
   .rstA        (rstA), 
   .rstB        (rstB), 
   .rstC        (rstC), 
   .data_outA   (data_tra_select_cntA), 
   .data_outB   (data_tra_select_cntB), 
   .data_outC   (data_tra_select_cntC), 
   .clkA        (clkA), 
   .clkB        (clkB), 
   .clkC        (clkC), 
   .cnt_enableA (start_cntA), 
   .cnt_enableB (start_cntB), 
   .cnt_enableC (start_cntC)
); 

buffer_tristate_busidTMR buffer_tristate_busid0( 
   .clkA          (clkA), 
   .clkB          (clkB), 
   .clkC          (clkC), 
   .rstA          (rstA), 
   .rstB          (rstB), 
   .rstC          (rstC), 
   .data_tra_in0A (can_rec_selectA), 
   .data_tra_in0B (can_rec_selectB), 
   .data_tra_in0C (can_rec_selectC), 
   .data_tra_in1A (data_tra_selectA), 
   .data_tra_in1B (data_tra_selectB), 
   .data_tra_in1C (data_tra_selectC), 
   .data_tra_in2A (data_tra_select_cntA), 
   .data_tra_in2B (data_tra_select_cntB), 
   .data_tra_in2C (data_tra_select_cntC), 
   .data_tra_in3A (power_bus_cntA), 
   .data_tra_in3B (power_bus_cntB), 
   .data_tra_in3C (power_bus_cntC), 
   .buffer_en0A   (reset_irq_rec_canA), 
   .buffer_en0B   (reset_irq_rec_canB), 
   .buffer_en0C   (reset_irq_rec_canC), 
   .buffer_en1A   (tra_selectA), 
   .buffer_en1B   (tra_selectB), 
   .buffer_en1C   (tra_selectC), 
   .buffer_en2A   (cnt_selectA), 
   .buffer_en2B   (cnt_selectB), 
   .buffer_en2C   (cnt_selectC), 
   .buffer_en3A   (cnt_osc_selectA), 
   .buffer_en3B   (cnt_osc_selectB), 
   .buffer_en3C   (cnt_osc_selectC), 
   .data_tra_outA (can_tra_selectA), 
   .data_tra_outB (can_tra_selectB), 
   .data_tra_outC (can_tra_selectC)
); 

bus_compTMR bus_comp0( 
   .can_rec_selectA (can_rec_selectA), 
   .can_rec_selectB (can_rec_selectB), 
   .can_rec_selectC (can_rec_selectC), 
   .can_tra_selectA (can_tra_selectA), 
   .can_tra_selectB (can_tra_selectB), 
   .can_tra_selectC (can_tra_selectC), 
   .bus_matchA      (bus_matchA), 
   .bus_matchB      (bus_matchB), 
   .bus_matchC      (bus_matchC)
); 

can_interfaceTMR can_interface0( 
   .addrA         (addr_canA), 
   .addrB         (addr_canB), 
   .addrC         (addr_canC), 
   .data_initA    (data_initA), 
   .data_initB    (data_initB), 
   .data_initC    (data_initC), 
   .initiA        (initiA), 
   .initiB        (initiB), 
   .initiC        (initiC), 
   .writeA        (write_sig_can_nA), 
   .writeB        (write_sig_can_nB), 
   .writeC        (write_sig_can_nC), 
   .reset_canA    (reset_sig_can_nA), 
   .reset_canB    (reset_sig_can_nB), 
   .reset_canC    (reset_sig_can_nC), 
   .trimA         (trimA), 
   .trimB         (trimB), 
   .trimC         (trimC), 
   .data_tra_mesA (data_tra_mesA), 
   .data_tra_mesB (data_tra_mesB), 
   .data_tra_mesC (data_tra_mesC), 
   .cmdA          (cmdA), 
   .cmdB          (cmdB), 
   .cmdC          (cmdC), 
   .write_canA    (write_canA), 
   .write_canB    (write_canB), 
   .write_canC    (write_canC)
); 

can_interface_SMTMR interface_SM0( 
   .abortA              (abortA), 
   .abortB              (abortB), 
   .abortC              (abortC), 
   .clkA                (clkA), 
   .clkB                (clkB), 
   .clkC                (clkC), 
   .end_can_procA       (end_can_procA), 
   .end_can_procB       (end_can_procB), 
   .end_can_procC       (end_can_procC), 
   .end_cntA            (end_cntA), 
   .end_cntB            (end_cntB), 
   .end_cntC            (end_cntC), 
   .initA               (initA), 
   .initB               (initB), 
   .initC               (initC), 
   .reset_irq_canA      (reset_irq_can_activeA), 
   .reset_irq_canB      (reset_irq_can_activeB), 
   .reset_irq_canC      (reset_irq_can_activeC), 
   .reset_irq_can_allA  (reset_irq_can_allA), 
   .reset_irq_can_allB  (reset_irq_can_allB), 
   .reset_irq_can_allC  (reset_irq_can_allC), 
   .rstA                (rstA), 
   .rstB                (rstB), 
   .rstC                (rstC), 
   .send_mesA           (send_mesA), 
   .send_mesB           (send_mesB), 
   .send_mesC           (send_mesC), 
   .start_osc_trimA     (start_trim_oscA), 
   .start_osc_trimB     (start_trim_oscB), 
   .start_osc_trimC     (start_trim_oscC), 
   .start_readA         (start_readA), 
   .start_readB         (start_readB), 
   .start_readC         (start_readC), 
   .start_writeA        (start_writeA), 
   .start_writeB        (start_writeB), 
   .start_writeC        (start_writeC), 
   .timeoutrstA         (timeoutrstA), 
   .timeoutrstB         (timeoutrstB), 
   .timeoutrstC         (timeoutrstC), 
   .addrA               (addr_canA), 
   .addrB               (addr_canB), 
   .addrC               (addr_canC), 
   .cs_canA             (cs_canA), 
   .cs_canB             (cs_canB), 
   .cs_canC             (cs_canC), 
   .en_rec_regA         (en_rec_regA), 
   .en_rec_regB         (en_rec_regB), 
   .en_rec_regC         (en_rec_regC), 
   .end_initA           (end_initA), 
   .end_initB           (end_initB), 
   .end_initC           (end_initC), 
   .end_osc_trimA       (end_trim_oscA), 
   .end_osc_trimB       (end_trim_oscB), 
   .end_osc_trimC       (end_trim_oscC), 
   .end_readA           (end_readA), 
   .end_readB           (end_readB), 
   .end_readC           (end_readC), 
   .end_writeA          (end_writeA), 
   .end_writeB          (end_writeB), 
   .end_writeC          (end_writeC), 
   .initiA              (initiA), 
   .initiB              (initiB), 
   .initiC              (initiC), 
   .readA               (read_sig_can_nA), 
   .readB               (read_sig_can_nB), 
   .readC               (read_sig_can_nC), 
   .reset_all_doneA     (reset_all_doneA), 
   .reset_all_doneB     (reset_all_doneB), 
   .reset_all_doneC     (reset_all_doneC), 
   .reset_irq_can_doneA (reset_irq_can_doneA), 
   .reset_irq_can_doneB (reset_irq_can_doneB), 
   .reset_irq_can_doneC (reset_irq_can_doneC), 
   .reset_sig_canA      (reset_sig_can_nA), 
   .reset_sig_canB      (reset_sig_can_nB), 
   .reset_sig_canC      (reset_sig_can_nC), 
   .reset_sig_can_allA  (reset_sig_can_allA), 
   .reset_sig_can_allB  (reset_sig_can_allB), 
   .reset_sig_can_allC  (reset_sig_can_allC), 
   .rst_cntA            (rst_cntA), 
   .rst_cntB            (rst_cntB), 
   .rst_cntC            (rst_cntC), 
   .set_bus_idA         (set_bus_idA), 
   .set_bus_idB         (set_bus_idB), 
   .set_bus_idC         (set_bus_idC), 
   .start_cntA          (start_cntA), 
   .start_cntB          (start_cntB), 
   .start_cntC          (start_cntC), 
   .start_initA         (start_initA), 
   .start_initB         (start_initB), 
   .start_initC         (start_initC), 
   .statedebA           (statedebcanA), 
   .statedebB           (statedebcanB), 
   .statedebC           (statedebcanC), 
   .trimA               (trimA), 
   .trimB               (trimB), 
   .trimC               (trimC), 
   .writeA              (write_sig_can_nA), 
   .writeB              (write_sig_can_nB), 
   .writeC              (write_sig_can_nC)
); 

initialize_blockTMR initialize_block0( 
   .addrA      (addr_canA), 
   .addrB      (addr_canB), 
   .addrC      (addr_canC), 
   .data_initA (data_initA), 
   .data_initB (data_initB), 
   .data_initC (data_initC)
); 

// HDL Embedded Text Block 1 eb1
assign tra_selectA =  (set_bus_idA||reset_irq_tra_canA);
assign tra_selectB =  (set_bus_idB||reset_irq_tra_canB);
assign tra_selectC =  (set_bus_idC||reset_irq_tra_canC);
assign cnt_selectA =  (initA||reset_sig_can_allA);
assign cnt_selectB =  (initB||reset_sig_can_allB);
assign cnt_selectC =  (initC||reset_sig_can_allC);
assign cnt_osc_selectA =  (start_trim_oscA||reset_irq_osc_canA);
assign cnt_osc_selectB =  (start_trim_oscB||reset_irq_osc_canB);
assign cnt_osc_selectC =  (start_trim_oscC||reset_irq_osc_canC);
assign reset_irq_can_activeA =  (reset_irq_canA||reset_irq_osc_canA);
assign reset_irq_can_activeB =  (reset_irq_canB||reset_irq_osc_canB);
assign reset_irq_can_activeC =  (reset_irq_canC||reset_irq_osc_canC);
// HDL Embedded Text Block 2 eb2
initial
  end_cntA =  1'b0;
// HDL Embedded Text Block 3 eb3
initial
  end_cntB =  1'b0;
// HDL Embedded Text Block 4 eb4
initial
  end_cntC =  1'b0;
// HDL Embedded Text Block 5 eb5
always @( posedge clkA )
  begin
    if (!rstA)
      end_cntA <= 0;
    else
      case (data_tra_select_cntA)
        n_busesA : end_cntA <= 1;
        default : end_cntA <= 0;
      endcase
  end
// HDL Embedded Text Block 6 eb6
always @( posedge clkB )
  begin
    if (!rstB)
      end_cntB <= 0;
    else
      case (data_tra_select_cntB)
        n_busesB : end_cntB <= 1;
        default : end_cntB <= 0;
      endcase
  end
// HDL Embedded Text Block 7 eb7
always @( posedge clkC )
  begin
    if (!rstC)
      end_cntC <= 0;
    else
      case (data_tra_select_cntC)
        n_busesC : end_cntC <= 1;
        default : end_cntC <= 0;
      endcase
  end

endmodule // canakari_interfaceTMR

