/****************************************************************************************************
 *                          ! THIS FILE WAS AUTO-GENERATED BY TMRG TOOL !                           *
 *                                   ! DO NOT EDIT IT MANUALLY !                                    *
 *                                                                                                  *
 * file    : ./output/recmescontrolreg2TMR.v                                                        *
 *                                                                                                  *
 * user    : lucas                                                                                  *
 * host    : DESKTOP-BFDSFP2                                                                        *
 * date    : 05/12/2022 13:28:32                                                                    *
 *                                                                                                  *
 * workdir : /mnt/c/Users/Lucas/Documents/GitHub/mopshub_triplicated/triplicated/mopshub_top_board_16/hdl *
 * cmd     : /mnt/c/Users/Lucas/Documents/GitHub/mopshub_triplicated/tmrg-master/bin/tmrg -vv -c    *
 *           tmrg.cfg                                                                               *
 * tmrg rev: b25f042058e4e97751df2a0933c24aeadd5a78a5                                               *
 *                                                                                                  *
 * src file: recmescontrolreg2.v                                                                    *
 *           Git SHA           : b25f042058e4e97751df2a0933c24aeadd5a78a5 (?? recmescontrolreg2.v)  *
 *           Modification time : 2022-11-10 21:22:58                                                *
 *           File Size         : 2683                                                               *
 *           MD5 hash          : 5d0142fb35cb7bc688d799e90ef9bc40                                   *
 *                                                                                                  *
 ****************************************************************************************************/

module recmescontrolreg2TMR(
  input wire  clk ,
  input wire  rst ,
  input wire  cpu ,
  input wire  can ,
  input wire  ofp ,
  input wire  ofc ,
  input wire  rip ,
  input wire  ric ,
  input wire  ien ,
  input wire  rtr ,
  input wire  ext ,
  input wire [3:0] dlc ,
  output wire [15:0] regout 
);
wire rtrC;
wire rtrB;
wire rtrA;
wire rstC;
wire rstB;
wire rstA;
wire ripC;
wire ripB;
wire ripA;
wire ricC;
wire ricB;
wire ricA;
wire [15:0] regoutC;
wire [15:0] regoutB;
wire [15:0] regoutA;
wire ofpC;
wire ofpB;
wire ofpA;
wire ofcC;
wire ofcB;
wire ofcA;
wire ienC;
wire ienB;
wire ienA;
wire extC;
wire extB;
wire extA;
wire [3:0] dlcC;
wire [3:0] dlcB;
wire [3:0] dlcA;
wire cpuC;
wire cpuB;
wire cpuA;
wire clkC;
wire clkB;
wire clkA;
wire canC;
wire canB;
wire canA;
wor register_iTmrError;
wire [15:0] register_i;
reg  [15:0] register_iA ;
reg  [15:0] register_iB ;
reg  [15:0] register_iC ;
assign regout =  register_i;

always @( posedge clkA )
  begin
    if (rstA==1'b0)
      begin
        register_iA <= 16'd0;
      end
    else
      if (cpuA==1'b1)
        begin
          register_iA[15]  <= ofpA;
          register_iA[14]  <= ripA;
          register_iA[8]  <= ienA;
          register_iA[4]  <= extA;
        end
      else
        if (canA==1'b1)
          begin
            register_iA[15]  <= ofcA;
            register_iA[14]  <= ricA;
            register_iA[5]  <= rtrA;
            register_iA[3:0]  <= dlcA;
          end
        else
          register_iA <= regoutA;
  end

always @( posedge clkB )
  begin
    if (rstB==1'b0)
      begin
        register_iB <= 16'd0;
      end
    else
      if (cpuB==1'b1)
        begin
          register_iB[15]  <= ofpB;
          register_iB[14]  <= ripB;
          register_iB[8]  <= ienB;
          register_iB[4]  <= extB;
        end
      else
        if (canB==1'b1)
          begin
            register_iB[15]  <= ofcB;
            register_iB[14]  <= ricB;
            register_iB[5]  <= rtrB;
            register_iB[3:0]  <= dlcB;
          end
        else
          register_iB <= regoutB;
  end

always @( posedge clkC )
  begin
    if (rstC==1'b0)
      begin
        register_iC <= 16'd0;
      end
    else
      if (cpuC==1'b1)
        begin
          register_iC[15]  <= ofpC;
          register_iC[14]  <= ripC;
          register_iC[8]  <= ienC;
          register_iC[4]  <= extC;
        end
      else
        if (canC==1'b1)
          begin
            register_iC[15]  <= ofcC;
            register_iC[14]  <= ricC;
            register_iC[5]  <= rtrC;
            register_iC[3:0]  <= dlcC;
          end
        else
          register_iC <= regoutC;
  end

majorityVoter #(.WIDTH(16)) register_iVoter (
    .inA(register_iA),
    .inB(register_iB),
    .inC(register_iC),
    .out(register_i),
    .tmrErr(register_iTmrError)
    );

fanout canFanout (
    .in(can),
    .outA(canA),
    .outB(canB),
    .outC(canC)
    );

fanout clkFanout (
    .in(clk),
    .outA(clkA),
    .outB(clkB),
    .outC(clkC)
    );

fanout cpuFanout (
    .in(cpu),
    .outA(cpuA),
    .outB(cpuB),
    .outC(cpuC)
    );

fanout #(.WIDTH(4)) dlcFanout (
    .in(dlc),
    .outA(dlcA),
    .outB(dlcB),
    .outC(dlcC)
    );

fanout extFanout (
    .in(ext),
    .outA(extA),
    .outB(extB),
    .outC(extC)
    );

fanout ienFanout (
    .in(ien),
    .outA(ienA),
    .outB(ienB),
    .outC(ienC)
    );

fanout ofcFanout (
    .in(ofc),
    .outA(ofcA),
    .outB(ofcB),
    .outC(ofcC)
    );

fanout ofpFanout (
    .in(ofp),
    .outA(ofpA),
    .outB(ofpB),
    .outC(ofpC)
    );

fanout #(.WIDTH(16)) regoutFanout (
    .in(regout),
    .outA(regoutA),
    .outB(regoutB),
    .outC(regoutC)
    );

fanout ricFanout (
    .in(ric),
    .outA(ricA),
    .outB(ricB),
    .outC(ricC)
    );

fanout ripFanout (
    .in(rip),
    .outA(ripA),
    .outB(ripB),
    .outC(ripC)
    );

fanout rstFanout (
    .in(rst),
    .outA(rstA),
    .outB(rstB),
    .outC(rstC)
    );

fanout rtrFanout (
    .in(rtr),
    .outA(rtrA),
    .outB(rtrB),
    .outC(rtrC)
    );
endmodule

