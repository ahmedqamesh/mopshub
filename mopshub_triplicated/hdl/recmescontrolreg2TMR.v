/****************************************************************************************************
 *                          ! THIS FILE WAS AUTO-GENERATED BY TMRG TOOL !                           *
 *                                   ! DO NOT EDIT IT MANUALLY !                                    *
 *                                                                                                  *
 * file    : ./output/recmescontrolreg2TMR.v                                                        *
 *                                                                                                  *
 * user    : lucas                                                                                  *
 * host    : DESKTOP-BFDSFP2                                                                        *
 * date    : 03/04/2022 20:08:56                                                                    *
 *                                                                                                  *
 * workdir : /mnt/c/Users/Lucas/Desktop/mopshub_triplication/triplicated/mopshub_top_canakari_ftrim/hdl *
 * cmd     : /mnt/c/Users/Lucas/Desktop/mopshub_triplication/tmrg-master/bin/tmrg -vv -c tmrg.cfg   *
 * tmrg rev:                                                                                        *
 *                                                                                                  *
 * src file: recmescontrolreg2.v                                                                    *
 *           Git SHA           : File not in git repository!                                        *
 *           Modification time : 2022-03-29 13:49:21                                                *
 *           File Size         : 2733                                                               *
 *           MD5 hash          : 0a4f836d885e3c2382e7fad46650ab16                                   *
 *                                                                                                  *
 ****************************************************************************************************/

module recmescontrolreg2TMR(
  input wire  clkA ,
  input wire  clkB ,
  input wire  clkC ,
  input wire  rstA ,
  input wire  rstB ,
  input wire  rstC ,
  input wire  cpuA ,
  input wire  cpuB ,
  input wire  cpuC ,
  input wire  canA ,
  input wire  canB ,
  input wire  canC ,
  input wire  ofpA ,
  input wire  ofpB ,
  input wire  ofpC ,
  input wire  ofcA ,
  input wire  ofcB ,
  input wire  ofcC ,
  input wire  ripA ,
  input wire  ripB ,
  input wire  ripC ,
  input wire  ricA ,
  input wire  ricB ,
  input wire  ricC ,
  input wire  ienA ,
  input wire  ienB ,
  input wire  ienC ,
  input wire  rtrA ,
  input wire  rtrB ,
  input wire  rtrC ,
  input wire  extA ,
  input wire  extB ,
  input wire  extC ,
  input wire [3:0] dlcA ,
  input wire [3:0] dlcB ,
  input wire [3:0] dlcC ,
  output wire [15:0] regoutA ,
  output wire [15:0] regoutB ,
  output wire [15:0] regoutC 
);
wor register_iTmrErrorC;
wire [15:0] register_iVotedC;
wor register_iTmrErrorB;
wire [15:0] register_iVotedB;
wor register_iTmrErrorA;
wire [15:0] register_iVotedA;
reg  [15:0] register_iA ;
reg  [15:0] register_iB ;
reg  [15:0] register_iC ;
assign regoutA =  register_iVotedA;
assign regoutB =  register_iVotedB;
assign regoutC =  register_iVotedC;

always @( posedge clkA )
  begin
    if (rstA==1'b0)
      begin
        register_iA <= 16'd0;
      end
    else
      if (cpuA==1'b1)
        begin
          register_iA[15]  <= ofpA;
          register_iA[14]  <= ripA;
          register_iA[8]  <= ienA;
          register_iA[4]  <= extA;
        end
      else
        if (canA==1'b1)
          begin
            register_iA[15]  <= ofcA;
            register_iA[14]  <= ricA;
            register_iA[5]  <= rtrA;
            register_iA[3:0]  <= dlcA;
          end
        else
          register_iA <= register_iVotedA;
  end

always @( posedge clkB )
  begin
    if (rstB==1'b0)
      begin
        register_iB <= 16'd0;
      end
    else
      if (cpuB==1'b1)
        begin
          register_iB[15]  <= ofpB;
          register_iB[14]  <= ripB;
          register_iB[8]  <= ienB;
          register_iB[4]  <= extB;
        end
      else
        if (canB==1'b1)
          begin
            register_iB[15]  <= ofcB;
            register_iB[14]  <= ricB;
            register_iB[5]  <= rtrB;
            register_iB[3:0]  <= dlcB;
          end
        else
          register_iB <= register_iVotedB;
  end

always @( posedge clkC )
  begin
    if (rstC==1'b0)
      begin
        register_iC <= 16'd0;
      end
    else
      if (cpuC==1'b1)
        begin
          register_iC[15]  <= ofpC;
          register_iC[14]  <= ripC;
          register_iC[8]  <= ienC;
          register_iC[4]  <= extC;
        end
      else
        if (canC==1'b1)
          begin
            register_iC[15]  <= ofcC;
            register_iC[14]  <= ricC;
            register_iC[5]  <= rtrC;
            register_iC[3:0]  <= dlcC;
          end
        else
          register_iC <= register_iVotedC;
  end

majorityVoter #(.WIDTH(16)) register_iVoterA (
    .inA(register_iA),
    .inB(register_iB),
    .inC(register_iC),
    .out(register_iVotedA),
    .tmrErr(register_iTmrErrorA)
    );

majorityVoter #(.WIDTH(16)) register_iVoterB (
    .inA(register_iA),
    .inB(register_iB),
    .inC(register_iC),
    .out(register_iVotedB),
    .tmrErr(register_iTmrErrorB)
    );

majorityVoter #(.WIDTH(16)) register_iVoterC (
    .inA(register_iA),
    .inB(register_iB),
    .inC(register_iC),
    .out(register_iVotedC),
    .tmrErr(register_iTmrErrorC)
    );
endmodule

