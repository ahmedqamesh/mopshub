/****************************************************************************************************
 *                          ! THIS FILE WAS AUTO-GENERATED BY TMRG TOOL !                           *
 *                                   ! DO NOT EDIT IT MANUALLY !                                    *
 *                                                                                                  *
 * file    : ./output/recarbitreg2TMR.v                                                             *
 *                                                                                                  *
 * user    : lucas                                                                                  *
 * host    : DESKTOP-BFDSFP2                                                                        *
 * date    : 06/10/2022 13:53:00                                                                    *
 *                                                                                                  *
 * workdir : /mnt/c/Users/Lucas/Documents/GitHub/mopshub_triplicated/triplicated/mopshub_top_board/hdl *
 * cmd     : /mnt/c/Users/Lucas/Desktop/mopshub_triplication/tmrg-master/bin/tmrg -vv -c tmrg.cfg   *
 * tmrg rev:                                                                                        *
 *                                                                                                  *
 * src file: recarbitreg2.v                                                                         *
 *           Git SHA           : c110441b08b692cc54ebd4a3b84a2599430e8f93                           *
 *           Modification time : 2022-08-25 10:26:00                                                *
 *           File Size         : 1714                                                               *
 *           MD5 hash          : 91b16d2078d45691696aa14eed1b1619                                   *
 *                                                                                                  *
 ****************************************************************************************************/

module recarbitreg2TMR(
  input wire  clk ,
  input wire  rst ,
  input wire  cpu ,
  input wire  can ,
  input wire [15:0] reginp ,
  input wire [15:0] recidin ,
  output wire [15:0] regout 
);
wire rstC;
wire rstB;
wire rstA;
wire [15:0] regoutC;
wire [15:0] regoutB;
wire [15:0] regoutA;
wire [15:0] reginpC;
wire [15:0] reginpB;
wire [15:0] reginpA;
wire [15:0] recidinC;
wire [15:0] recidinB;
wire [15:0] recidinA;
wire cpuC;
wire cpuB;
wire cpuA;
wire clkC;
wire clkB;
wire clkA;
wire canC;
wire canB;
wire canA;
wor register_iTmrError;
wire [15:0] register_i;
reg  [15:0] register_iA ;
reg  [15:0] register_iB ;
reg  [15:0] register_iC ;
assign regout =  register_i;

always @( posedge clkA )
  begin
    if (rstA==1'b0)
      register_iA <= 16'd0;
    else
      if (cpuA==1'b1)
        register_iA <= reginpA;
      else
        if (canA==1'b1)
          register_iA <= recidinA;
        else
          register_iA <= regoutA;
  end

always @( posedge clkB )
  begin
    if (rstB==1'b0)
      register_iB <= 16'd0;
    else
      if (cpuB==1'b1)
        register_iB <= reginpB;
      else
        if (canB==1'b1)
          register_iB <= recidinB;
        else
          register_iB <= regoutB;
  end

always @( posedge clkC )
  begin
    if (rstC==1'b0)
      register_iC <= 16'd0;
    else
      if (cpuC==1'b1)
        register_iC <= reginpC;
      else
        if (canC==1'b1)
          register_iC <= recidinC;
        else
          register_iC <= regoutC;
  end

majorityVoter #(.WIDTH(16)) register_iVoter (
    .inA(register_iA),
    .inB(register_iB),
    .inC(register_iC),
    .out(register_i),
    .tmrErr(register_iTmrError)
    );

fanout canFanout (
    .in(can),
    .outA(canA),
    .outB(canB),
    .outC(canC)
    );

fanout clkFanout (
    .in(clk),
    .outA(clkA),
    .outB(clkB),
    .outC(clkC)
    );

fanout cpuFanout (
    .in(cpu),
    .outA(cpuA),
    .outB(cpuB),
    .outC(cpuC)
    );

fanout #(.WIDTH(16)) recidinFanout (
    .in(recidin),
    .outA(recidinA),
    .outB(recidinB),
    .outC(recidinC)
    );

fanout #(.WIDTH(16)) reginpFanout (
    .in(reginp),
    .outA(reginpA),
    .outB(reginpB),
    .outC(reginpC)
    );

fanout #(.WIDTH(16)) regoutFanout (
    .in(regout),
    .outA(regoutA),
    .outB(regoutB),
    .outC(regoutC)
    );

fanout rstFanout (
    .in(rst),
    .outA(rstA),
    .outB(rstB),
    .outC(rstC)
    );
endmodule

