/****************************************************************************************************
 *                          ! THIS FILE WAS AUTO-GENERATED BY TMRG TOOL !                           *
 *                                   ! DO NOT EDIT IT MANUALLY !                                    *
 *                                                                                                  *
 * file    : ./output/dec_8b10b_wrap_structTMR.v                                                    *
 *                                                                                                  *
 * user    : lucas                                                                                  *
 * host    : DESKTOP-BFDSFP2                                                                        *
 * date    : 06/10/2022 13:52:43                                                                    *
 *                                                                                                  *
 * workdir : /mnt/c/Users/Lucas/Documents/GitHub/mopshub_triplicated/triplicated/mopshub_top_board/hdl *
 * cmd     : /mnt/c/Users/Lucas/Desktop/mopshub_triplication/tmrg-master/bin/tmrg -vv -c tmrg.cfg   *
 * tmrg rev:                                                                                        *
 *                                                                                                  *
 * src file: dec_8b10b_wrap_struct.v                                                                *
 *           Git SHA           : c110441b08b692cc54ebd4a3b84a2599430e8f93                           *
 *           Modification time : 2022-10-06 13:48:18.203843                                         *
 *           File Size         : 6214                                                               *
 *           MD5 hash          : 91e7c13a570f18274ab124bb723d2e7c                                   *
 *                                                                                                  *
 ****************************************************************************************************/

module dec_8b10b_wrapTMR(
  input wire [9:0] COMMAn ,
  input wire [9:0] COMMAp ,
  input wire [7:0] Kchar_comma ,
  input wire [7:0] Kchar_eop ,
  input wire [7:0] Kchar_sop ,
  input wire  clk ,
  input wire  datain_valid ,
  input wire [9:0] enc10b_data_in ,
  input wire  rst ,
  output wire [1:0] ISK ,
  output wire [7:0] dec8b_data_out ,
  output wire  dec8b_rdy 
);
reg  [9:0] EOBn ;
reg  [9:0] EOBp ;
reg  [9:0] EOCn ;
reg  [9:0] EOCp ;
wire ISK_char;
wire ISK_comma;
wire ISK_eob;
wire ISK_eoc;
reg  [1:0] ISK_r ;
wire ISK_sob;
wire ISK_soc;
wire [1:0] ISKcode;
reg  [1:0] ISKcode_r ;
reg  [9:0] SOBn ;
reg  [9:0] SOBp ;
reg  [9:0] SOCn ;
reg  [9:0] SOCp ;
reg  busy_r ;
wire code_err;
wire dataout_valid;
reg  dataout_valid_r ;
reg  [7:0] dec8b_data_r ;
reg  dec8b_rdy_r ;
wire [7:0] decoder_out;
wire disp_err;
reg  flag_pack ;
wire valid_char_comma;
wire valid_char_eop;
wire valid_char_sop;

dec_8b10b_mopshubTMR dec_8b10b_mopshub0 (
    .rst(rst),
    .clk(clk),
    .datain(enc10b_data_in),
    .datain_valid(datain_valid),
    .ko(ISK_char),
    .dataout(decoder_out),
    .code_err(code_err),
    .disp_err(disp_err)
    );
assign ISK_comma =  (enc10b_data_in==COMMAp|enc10b_data_in==COMMAn) ? 1 : 0;
assign ISK_soc =  (enc10b_data_in==SOCp|enc10b_data_in==SOCn) ? 1 : 0;
assign ISK_eoc =  (enc10b_data_in==EOCp|enc10b_data_in==EOCn) ? 1 : 0;
assign ISK_sob =  (enc10b_data_in==SOBp|enc10b_data_in==SOBn) ? 1 : 0;
assign ISK_eob =  (enc10b_data_in==EOBp|enc10b_data_in==EOBn) ? 1 : 0;
assign ISKcode[0]  =  ((! ISK_soc )&(ISK_eoc^ISK_comma))|ISK_sob|ISK_eob;
assign ISKcode[1]  =  ((! ISK_eoc )&(ISK_soc^ISK_comma))|ISK_sob|ISK_eob;

always @( posedge clk )
  if (!rst)
    begin
      busy_r <= 0;
      ISKcode_r <= 2'b0;
    end
  else
    begin
      ISKcode_r <= ISKcode;
      if (ISK_eob==1)
        busy_r <= 0;
      else
        if (ISK_sob==1)
          busy_r <= 1;
    end

always @( posedge clk )
  if (!rst)
    ISK_r <= 2'b00;
  else
    begin
      if (ISK_char==1)
        ISK_r <= ISKcode_r;
      else
        ISK_r <= 2'b00;
    end

always @( posedge clk )
  if (!rst)
    dataout_valid_r <= 1'b0;
  else
    begin
      if (datain_valid)
        dataout_valid_r <= 1'b1;
      else
        dataout_valid_r <= 1'b0;
    end
initial
  begin
    dataout_valid_r =  0;
    dec8b_data_r =  0;
    dec8b_rdy_r =  0;
    flag_pack =  0;
    ISK_r =  0;
    ISKcode_r =  2'b0;
    EOBn =  10'b1100001100;
    EOBp =  10'b0011110011;
    EOCn =  10'b1100001001;
    EOCp =  10'b0011110110;
    SOBn =  10'b1100001010;
    SOBp =  10'b0011110101;
    SOCn =  10'b1100000110;
    SOCp =  10'b0011111001;
  end
assign ISK =  ISK_r;
assign dataout_valid =  dataout_valid_r;
assign dec8b_data_out =  dec8b_data_r;
assign dec8b_rdy =  dec8b_rdy_r;
assign valid_char_comma =  (ISK_char==1&decoder_out==Kchar_comma) ? 1 : 0;
assign valid_char_sop =  (ISK_char==1&decoder_out==Kchar_sop) ? 1 : 0;
assign valid_char_eop =  (ISK_char==1&decoder_out==Kchar_eop) ? 1 : 0;

always @( posedge clk )
  if (!rst)
    begin
      dec8b_rdy_r <= 1'b0;
      flag_pack <= 1'b0;
      dec8b_data_r <= 0;
    end
  else
    begin
      dec8b_data_r <= decoder_out;
      if (dec8b_rdy_r==1)
        begin
          dec8b_rdy_r <= 1'b0;
          flag_pack <= flag_pack;
        end
      else
        if (flag_pack==1&&dataout_valid==1&&valid_char_comma)
          begin
            dec8b_rdy_r <= 1'b0;
            flag_pack <= flag_pack;
          end
        else
          if (flag_pack==0&&dataout_valid==1&&valid_char_sop)
            begin
              dec8b_rdy_r <= 1'b1;
              flag_pack <= 1'b1;
            end
          else
            if (flag_pack==1&&dataout_valid==1&&!valid_char_eop)
              begin
                dec8b_rdy_r <= 1'b1;
                flag_pack <= 1'b1;
              end
            else
              if (flag_pack==1&&dataout_valid==1&&valid_char_eop)
                begin
                  dec8b_rdy_r <= 1'b1;
                  flag_pack <= 1'b0;
                end
              else
                begin
                  dec8b_rdy_r <= 1'b0;
                  flag_pack <= flag_pack;
                end
    end
endmodule

