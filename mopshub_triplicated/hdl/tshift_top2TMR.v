/****************************************************************************************************
 *                          ! THIS FILE WAS AUTO-GENERATED BY TMRG TOOL !                           *
 *                                   ! DO NOT EDIT IT MANUALLY !                                    *
 *                                                                                                  *
 * file    : ./output/tshift_top2TMR.v                                                              *
 *                                                                                                  *
 * user    : lucas                                                                                  *
 * host    : DESKTOP-BFDSFP2                                                                        *
 * date    : 06/10/2022 13:53:09                                                                    *
 *                                                                                                  *
 * workdir : /mnt/c/Users/Lucas/Documents/GitHub/mopshub_triplicated/triplicated/mopshub_top_board/hdl *
 * cmd     : /mnt/c/Users/Lucas/Desktop/mopshub_triplication/tmrg-master/bin/tmrg -vv -c tmrg.cfg   *
 * tmrg rev:                                                                                        *
 *                                                                                                  *
 * src file: tshift_top2.v                                                                          *
 *           Git SHA           : c110441b08b692cc54ebd4a3b84a2599430e8f93                           *
 *           Modification time : 2022-08-25 11:08:32                                                *
 *           File Size         : 4587                                                               *
 *           MD5 hash          : 37b38d0a1be5c44c530abe90f87cc893                                   *
 *                                                                                                  *
 ****************************************************************************************************/

module tshiftreg2TMR(
  input wire  clock ,
  input wire [102:0] mesin ,
  input wire  activ ,
  input wire  reset ,
  input wire  load ,
  input wire  shift ,
  input wire  extended ,
  output wire  bitout ,
  output wire  crc_out_bit 
);
wire shiftC;
wire shiftB;
wire shiftA;
wire resetC;
wire resetB;
wire resetA;
wire loadC;
wire loadB;
wire loadA;
wire enable_iVC;
wire enable_iVB;
wire enable_iVA;
wire edgedVC;
wire edgedVB;
wire edgedVA;
wire clockC;
wire clockB;
wire clockA;
wire activC;
wire activB;
wire activA;
wor enable_iTmrError;
wire enable_i;
wor edgedTmrError;
wire edged;
wire reset_i;
wire load_reg;
wire [102:0] q_i;
wire zero;
wire bitout_i;
reg  enable_iA ;
reg  enable_iB ;
reg  enable_iC ;
reg  edgedA ;
reg  edgedB ;
reg  edgedC ;
assign reset_i =  reset;
assign load_reg =  load;
assign zero =  1'b0;
assign bitout =  (bitout_i&extended)|(q_i[82] &(~ extended ));
assign crc_out_bit =  (q_i[87] &extended)|(q_i[67] &(~ extended ));
wire enable_iV =  enable_i;
wire edgedV =  edged;

tshift_cell2TMR topreg (
    .enable(enable_iV),
    .preload(mesin[102] ),
    .clock(clock),
    .reset(reset_i),
    .load(load_reg),
    .Input(q_i[101] ),
    .q(bitout_i)
    );
genvar i;

generate
  for(i =  1;i<102;i =  i+1)
    begin 

      tshift_cell2TMR reg_i (
          .enable(enable_iV),
          .preload(mesin[i] ),
          .clock(clock),
          .reset(reset_i),
          .load(load_reg),
          .Input(q_i[i-1] ),
          .q(q_i[i] )
          );
    end

endgenerate

tshift_cell2TMR bottom_reg (
    .enable(enable_iV),
    .preload(mesin[0] ),
    .clock(clock),
    .reset(reset_i),
    .load(load_reg),
    .Input(zero),
    .q(q_i[0] )
    );

always @( negedge clockA )
  begin
    if (resetA==1'b0)
      begin
        edgedA =  1'b0;
        enable_iA <= 1'b0;
      end
    else
      begin
        edgedA =  edgedVA;
        enable_iA <= enable_iVA;
        if (activA==1'b1)
          begin
            if (edgedVA==1'b0)
              begin
                edgedA =  1'b1;
                if (shiftA==1'b1||loadA==1'b1)
                  enable_iA <= 1'b1;
                else
                  enable_iA <= 1'b0;
              end
            else
              begin
                enable_iA <= 1'b0;
                edgedA =  1'b1;
              end
          end
        else
          begin
            enable_iA <= 1'b0;
            edgedA =  1'b0;
          end
      end
  end

always @( negedge clockB )
  begin
    if (resetB==1'b0)
      begin
        edgedB =  1'b0;
        enable_iB <= 1'b0;
      end
    else
      begin
        edgedB =  edgedVB;
        enable_iB <= enable_iVB;
        if (activB==1'b1)
          begin
            if (edgedVB==1'b0)
              begin
                edgedB =  1'b1;
                if (shiftB==1'b1||loadB==1'b1)
                  enable_iB <= 1'b1;
                else
                  enable_iB <= 1'b0;
              end
            else
              begin
                enable_iB <= 1'b0;
                edgedB =  1'b1;
              end
          end
        else
          begin
            enable_iB <= 1'b0;
            edgedB =  1'b0;
          end
      end
  end

always @( negedge clockC )
  begin
    if (resetC==1'b0)
      begin
        edgedC =  1'b0;
        enable_iC <= 1'b0;
      end
    else
      begin
        edgedC =  edgedVC;
        enable_iC <= enable_iVC;
        if (activC==1'b1)
          begin
            if (edgedVC==1'b0)
              begin
                edgedC =  1'b1;
                if (shiftC==1'b1||loadC==1'b1)
                  enable_iC <= 1'b1;
                else
                  enable_iC <= 1'b0;
              end
            else
              begin
                enable_iC <= 1'b0;
                edgedC =  1'b1;
              end
          end
        else
          begin
            enable_iC <= 1'b0;
            edgedC =  1'b0;
          end
      end
  end

majorityVoter edgedVoter (
    .inA(edgedA),
    .inB(edgedB),
    .inC(edgedC),
    .out(edged),
    .tmrErr(edgedTmrError)
    );

majorityVoter enable_iVoter (
    .inA(enable_iA),
    .inB(enable_iB),
    .inC(enable_iC),
    .out(enable_i),
    .tmrErr(enable_iTmrError)
    );

fanout activFanout (
    .in(activ),
    .outA(activA),
    .outB(activB),
    .outC(activC)
    );

fanout clockFanout (
    .in(clock),
    .outA(clockA),
    .outB(clockB),
    .outC(clockC)
    );

fanout edgedVFanout (
    .in(edgedV),
    .outA(edgedVA),
    .outB(edgedVB),
    .outC(edgedVC)
    );

fanout enable_iVFanout (
    .in(enable_iV),
    .outA(enable_iVA),
    .outB(enable_iVB),
    .outC(enable_iVC)
    );

fanout loadFanout (
    .in(load),
    .outA(loadA),
    .outB(loadB),
    .outC(loadC)
    );

fanout resetFanout (
    .in(reset),
    .outA(resetA),
    .outB(resetB),
    .outC(resetC)
    );

fanout shiftFanout (
    .in(shift),
    .outA(shiftA),
    .outB(shiftB),
    .outC(shiftC)
    );
endmodule

