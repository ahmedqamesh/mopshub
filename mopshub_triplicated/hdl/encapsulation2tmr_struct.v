//
// Module mopshub_triplicated.encapsulation2TMR.struct
//
// Created:
//          by - dcs.dcs (localhost)
//          at - 09:18:07 05/10/22
//
// Generated by Mentor Graphics' HDL Designer(TM) 2019.4 (Build 4)
//


module encapsulation2TMR( 
   // Port Declarations
   input   wire            clockA, 
   input   wire            clockB, 
   input   wire            clockC, 
   input   wire    [28:0]  identifierA, 
   input   wire    [28:0]  identifierB, 
   input   wire    [28:0]  identifierC, 
   input   wire            extendedA, 
   input   wire            extendedB, 
   input   wire            extendedC, 
   input   wire            remoteA, 
   input   wire            remoteB, 
   input   wire            remoteC, 
   input   wire            activA, 
   input   wire            activB, 
   input   wire            activC, 
   input   wire            resetA, 
   input   wire            resetB, 
   input   wire            resetC, 
   input   wire    [3:0]   datalenA, 
   input   wire    [3:0]   datalenB, 
   input   wire    [3:0]   datalenC, 
   output  wire    [3:0]   tmlenA, 
   output  wire    [3:0]   tmlenB, 
   output  wire    [3:0]   tmlenC, 
   output  reg     [38:0]  messageA, 
   output  reg     [38:0]  messageB, 
   output  reg     [38:0]  messageC
);


// Internal Declarations


// Local declarations

// Internal signal declarations
wor         remTmrErrorC;
wire        remVotedC;
wor         datalen_bufTmrErrorC;
wire  [3:0] datalen_bufVotedC;
wor         remTmrErrorB;
wire        remVotedB;
wor         datalen_bufTmrErrorB;
wire  [3:0] datalen_bufVotedB;
wor         remTmrErrorA;
wire        remVotedA;
wor         datalen_bufTmrErrorA;
wire  [3:0] datalen_bufVotedA;
reg   [3:0] datalen_bufA;
reg   [3:0] datalen_bufB;
reg   [3:0] datalen_bufC;
reg         remA;
reg         remB;
reg         remC;


// Instances 
majorityVoter #(4) datalen_bufVoterA( 
   .inA    (datalen_bufA), 
   .inB    (datalen_bufB), 
   .inC    (datalen_bufC), 
   .out    (datalen_bufVotedA), 
   .tmrErr (datalen_bufTmrErrorA)
); 

majorityVoter #(4) datalen_bufVoterB( 
   .inA    (datalen_bufA), 
   .inB    (datalen_bufB), 
   .inC    (datalen_bufC), 
   .out    (datalen_bufVotedB), 
   .tmrErr (datalen_bufTmrErrorB)
); 

majorityVoter #(4) datalen_bufVoterC( 
   .inA    (datalen_bufA), 
   .inB    (datalen_bufB), 
   .inC    (datalen_bufC), 
   .out    (datalen_bufVotedC), 
   .tmrErr (datalen_bufTmrErrorC)
); 

majorityVoter remVoterA( 
   .inA    (remA), 
   .inB    (remB), 
   .inC    (remC), 
   .out    (remVotedA), 
   .tmrErr (remTmrErrorA)
); 

majorityVoter remVoterB( 
   .inA    (remA), 
   .inB    (remB), 
   .inC    (remC), 
   .out    (remVotedB), 
   .tmrErr (remTmrErrorB)
); 

majorityVoter remVoterC( 
   .inA    (remA), 
   .inB    (remB), 
   .inC    (remC), 
   .out    (remVotedC), 
   .tmrErr (remTmrErrorC)
); 

// HDL Embedded Text Block 1 eb1
assign tmlenA =  datalen_bufVotedA;
assign tmlenB =  datalen_bufVotedB;
assign tmlenC =  datalen_bufVotedC;
// HDL Embedded Text Block 2 eb2
always @( posedge clockA )
  begin
    if (resetA==1'b0)
      begin
        datalen_bufA <= 4'b0000;
        remA <= 0;
      end
    else
      begin
        remA <= remVotedA;
        datalen_bufA <= datalen_bufVotedA;
        if (activA==1'b1)
          begin
            if (remVotedA==1'b0)
              begin
                remA <= 1'b1;
                if (remoteA==1'b1)
                  datalen_bufA <= 4'b0000;
                else
                  datalen_bufA <= datalenA;
              end
          end
        else
          remA <= 1'b0;
      end
  end
// HDL Embedded Text Block 3 eb3
always @( posedge clockB )
  begin
    if (resetB==1'b0)
      begin
        datalen_bufB <= 4'b0000;
        remB <= 0;
      end
    else
      begin
        remB <= remVotedB;
        datalen_bufB <= datalen_bufVotedB;
        if (activB==1'b1)
          begin
            if (remVotedB==1'b0)
              begin
                remB <= 1'b1;
                if (remoteB==1'b1)
                  datalen_bufB <= 4'b0000;
                else
                  datalen_bufB <= datalenB;
              end
          end
        else
          remB <= 1'b0;
      end
  end
// HDL Embedded Text Block 4 eb4
always @( posedge clockC )
  begin
    if (resetC==1'b0)
      begin
        datalen_bufC <= 4'b0000;
        remC <= 0;
      end
    else
      begin
        remC <= remVotedC;
        datalen_bufC <= datalen_bufVotedC;
        if (activC==1'b1)
          begin
            if (remVotedC==1'b0)
              begin
                remC <= 1'b1;
                if (remoteC==1'b1)
                  datalen_bufC <= 4'b0000;
                else
                  datalen_bufC <= datalenC;
              end
          end
        else
          remC <= 1'b0;
      end
  end
// HDL Embedded Text Block 5 eb5
always @( identifierA or datalenA or remoteA or extendedA )
  begin
    messageA[38]  =  1'b0;
    messageA[6]  =  remoteA;
    messageA[5:4]  =  2'b00;
    messageA[3:0]  =  datalenA;
    if (extendedA==1'b1)
      begin
        messageA[37:27]  =  identifierA[28:18] ;
        messageA[26:25]  =  2'b11;
        messageA[24:7]  =  identifierA[17:0] ;
      end
    else
      begin
        messageA[37:18]  =  20'd0;
        messageA[17:7]  =  identifierA[28:18] ;
      end
  end
// HDL Embedded Text Block 6 eb6
always @( identifierB or datalenB or remoteB or extendedB )
  begin
    messageB[38]  =  1'b0;
    messageB[6]  =  remoteB;
    messageB[5:4]  =  2'b00;
    messageB[3:0]  =  datalenB;
    if (extendedB==1'b1)
      begin
        messageB[37:27]  =  identifierB[28:18] ;
        messageB[26:25]  =  2'b11;
        messageB[24:7]  =  identifierB[17:0] ;
      end
    else
      begin
        messageB[37:18]  =  20'd0;
        messageB[17:7]  =  identifierB[28:18] ;
      end
  end
// HDL Embedded Text Block 7 eb7
always @( identifierC or datalenC or remoteC or extendedC )
  begin
    messageC[38]  =  1'b0;
    messageC[6]  =  remoteC;
    messageC[5:4]  =  2'b00;
    messageC[3:0]  =  datalenC;
    if (extendedC==1'b1)
      begin
        messageC[37:27]  =  identifierC[28:18] ;
        messageC[26:25]  =  2'b11;
        messageC[24:7]  =  identifierC[17:0] ;
      end
    else
      begin
        messageC[37:18]  =  20'd0;
        messageC[17:7]  =  identifierC[28:18] ;
      end
  end

endmodule // encapsulation2TMR

