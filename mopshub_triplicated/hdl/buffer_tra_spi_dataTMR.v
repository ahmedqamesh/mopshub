/****************************************************************************************************
 *                          ! THIS FILE WAS AUTO-GENERATED BY TMRG TOOL !                           *
 *                                   ! DO NOT EDIT IT MANUALLY !                                    *
 *                                                                                                  *
 * file    : ./output/buffer_tra_spi_dataTMR.v                                                      *
 *                                                                                                  *
 * user    : lucas                                                                                  *
 * host    : DESKTOP-BFDSFP2                                                                        *
 * date    : 03/04/2022 20:08:31                                                                    *
 *                                                                                                  *
 * workdir : /mnt/c/Users/Lucas/Desktop/mopshub_triplication/triplicated/mopshub_top_canakari_ftrim/hdl *
 * cmd     : /mnt/c/Users/Lucas/Desktop/mopshub_triplication/tmrg-master/bin/tmrg -vv -c tmrg.cfg   *
 * tmrg rev:                                                                                        *
 *                                                                                                  *
 * src file: buffer_tra_spi_data.v                                                                  *
 *           Git SHA           : File not in git repository!                                        *
 *           Modification time : 2022-03-28 18:32:48                                                *
 *           File Size         : 1732                                                               *
 *           MD5 hash          : 0cecb3ec067b64480ad0fdc33037e174                                   *
 *                                                                                                  *
 ****************************************************************************************************/

module buffer_tra_spi_dataTMR(
  input wire  clkA ,
  input wire  clkB ,
  input wire  clkC ,
  input wire [31:0] data_tra_inA ,
  input wire [31:0] data_tra_inB ,
  input wire [31:0] data_tra_inC ,
  input wire  buffer_enA ,
  input wire  buffer_enB ,
  input wire  buffer_enC ,
  input wire  rstA ,
  input wire  rstB ,
  input wire  rstC ,
  output wire [7:0] spi_idA ,
  output wire [7:0] spi_idB ,
  output wire [7:0] spi_idC ,
  output wire [7:0] spi_regA ,
  output wire [7:0] spi_regB ,
  output wire [7:0] spi_regC ,
  output wire [7:0] spi_selectA ,
  output wire [7:0] spi_selectB ,
  output wire [7:0] spi_selectC ,
  output wire [7:0] data_tra_outA ,
  output wire [7:0] data_tra_outB ,
  output wire [7:0] data_tra_outC 
);
reg  [7:0] data_tra_regA ;
reg  [7:0] data_tra_regB ;
reg  [7:0] data_tra_regC ;
reg  [7:0] spi_id_regA ;
reg  [7:0] spi_id_regB ;
reg  [7:0] spi_id_regC ;
reg  [7:0] spi_reg_regA ;
reg  [7:0] spi_reg_regB ;
reg  [7:0] spi_reg_regC ;
reg  [7:0] spi_select_regA ;
reg  [7:0] spi_select_regB ;
reg  [7:0] spi_select_regC ;
initial
  begin
    data_tra_regA =  8'd0;
    spi_id_regA =  8'd0;
    spi_reg_regA =  8'd0;
    spi_select_regA =  8'd0;
  end
initial
  begin
    data_tra_regB =  8'd0;
    spi_id_regB =  8'd0;
    spi_reg_regB =  8'd0;
    spi_select_regB =  8'd0;
  end
initial
  begin
    data_tra_regC =  8'd0;
    spi_id_regC =  8'd0;
    spi_reg_regC =  8'd0;
    spi_select_regC =  8'd0;
  end

always @( posedge clkA )
  begin
    if (!rstA)
      spi_id_regA <= 8'd0;
    else
      if (buffer_enA)
        spi_id_regA <= data_tra_inA[31:24] ;
      else
        spi_id_regA <= spi_id_regA;
  end

always @( posedge clkB )
  begin
    if (!rstB)
      spi_id_regB <= 8'd0;
    else
      if (buffer_enB)
        spi_id_regB <= data_tra_inB[31:24] ;
      else
        spi_id_regB <= spi_id_regB;
  end

always @( posedge clkC )
  begin
    if (!rstC)
      spi_id_regC <= 8'd0;
    else
      if (buffer_enC)
        spi_id_regC <= data_tra_inC[31:24] ;
      else
        spi_id_regC <= spi_id_regC;
  end

always @( posedge clkA )
  begin
    if (!rstA)
      spi_select_regA <= 8'd0;
    else
      if (buffer_enA)
        spi_select_regA <= data_tra_inA[23:16] ;
      else
        spi_select_regA <= spi_select_regA;
  end

always @( posedge clkB )
  begin
    if (!rstB)
      spi_select_regB <= 8'd0;
    else
      if (buffer_enB)
        spi_select_regB <= data_tra_inB[23:16] ;
      else
        spi_select_regB <= spi_select_regB;
  end

always @( posedge clkC )
  begin
    if (!rstC)
      spi_select_regC <= 8'd0;
    else
      if (buffer_enC)
        spi_select_regC <= data_tra_inC[23:16] ;
      else
        spi_select_regC <= spi_select_regC;
  end

always @( posedge clkA )
  begin
    if (!rstA)
      spi_reg_regA <= 8'd0;
    else
      if (buffer_enA)
        spi_reg_regA <= data_tra_inA[15:8] ;
      else
        spi_reg_regA <= spi_reg_regA;
  end

always @( posedge clkB )
  begin
    if (!rstB)
      spi_reg_regB <= 8'd0;
    else
      if (buffer_enB)
        spi_reg_regB <= data_tra_inB[15:8] ;
      else
        spi_reg_regB <= spi_reg_regB;
  end

always @( posedge clkC )
  begin
    if (!rstC)
      spi_reg_regC <= 8'd0;
    else
      if (buffer_enC)
        spi_reg_regC <= data_tra_inC[15:8] ;
      else
        spi_reg_regC <= spi_reg_regC;
  end

always @( posedge clkA )
  begin
    if (!rstA)
      data_tra_regA <= 8'd0;
    else
      if (buffer_enA)
        data_tra_regA <= data_tra_inA[7:0] ;
      else
        data_tra_regA <= data_tra_regA;
  end

always @( posedge clkB )
  begin
    if (!rstB)
      data_tra_regB <= 8'd0;
    else
      if (buffer_enB)
        data_tra_regB <= data_tra_inB[7:0] ;
      else
        data_tra_regB <= data_tra_regB;
  end

always @( posedge clkC )
  begin
    if (!rstC)
      data_tra_regC <= 8'd0;
    else
      if (buffer_enC)
        data_tra_regC <= data_tra_inC[7:0] ;
      else
        data_tra_regC <= data_tra_regC;
  end
assign data_tra_outA =  data_tra_regA;
assign data_tra_outB =  data_tra_regB;
assign data_tra_outC =  data_tra_regC;
assign spi_idA =  spi_id_regA;
assign spi_idB =  spi_id_regB;
assign spi_idC =  spi_id_regC;
assign spi_regA =  spi_reg_regA;
assign spi_regB =  spi_reg_regB;
assign spi_regC =  spi_reg_regC;
assign spi_selectA =  spi_select_regA;
assign spi_selectB =  spi_select_regB;
assign spi_selectC =  spi_select_regC;
endmodule

