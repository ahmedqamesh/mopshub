/****************************************************************************************************
 *                          ! THIS FILE WAS AUTO-GENERATED BY TMRG TOOL !                           *
 *                                   ! DO NOT EDIT IT MANUALLY !                                    *
 *                                                                                                  *
 * file    : ./output/canakari_interface_structTMR.v                                                *
 *                                                                                                  *
 * user    : lucas                                                                                  *
 * host    : DESKTOP-BFDSFP2                                                                        *
 * date    : 06/10/2022 13:52:41                                                                    *
 *                                                                                                  *
 * workdir : /mnt/c/Users/Lucas/Documents/GitHub/mopshub_triplicated/triplicated/mopshub_top_board/hdl *
 * cmd     : /mnt/c/Users/Lucas/Desktop/mopshub_triplication/tmrg-master/bin/tmrg -vv -c tmrg.cfg   *
 * tmrg rev:                                                                                        *
 *                                                                                                  *
 * src file: canakari_interface_struct.v                                                            *
 *           Git SHA           : c110441b08b692cc54ebd4a3b84a2599430e8f93 ( M canakari_interface_struct.v) *
 *           Modification time : 2022-10-06 13:25:16                                                *
 *           File Size         : 6252                                                               *
 *           MD5 hash          : 56b965be574c06acb1761af20c9aff93                                   *
 *                                                                                                  *
 ****************************************************************************************************/

module canakari_interfaceTMR(
  input wire  abort ,
  input wire [4:0] can_rec_select ,
  input wire  clk ,
  input wire [75:0] data_tra_mes ,
  input wire [4:0] data_tra_select ,
  input wire  end_can_proc ,
  input wire  init ,
  input wire [4:0] n_buses ,
  input wire [4:0] power_bus_cnt ,
  input wire  reset_irq_can ,
  input wire  reset_irq_can_all ,
  input wire  reset_irq_osc_can ,
  input wire  reset_irq_rec_can ,
  input wire  reset_irq_tra_can ,
  input wire  rst ,
  input wire  send_mes ,
  input wire  start_read ,
  input wire  start_trim_osc ,
  input wire  start_write ,
  input wire  timeoutrst ,
  output wire [4:0] addr_can ,
  output wire [4:0] can_tra_select ,
  output wire  cs_can ,
  output wire  en_rec_reg ,
  output wire  end_init ,
  output wire  end_read ,
  output wire  end_trim_osc ,
  output wire  end_write ,
  output wire  read_sig_can_n ,
  output wire  reset_all_done ,
  output wire  reset_irq_can_done ,
  output wire  start_init ,
  output wire [6:0] statedebcan ,
  output wire [15:0] write_can ,
  output wire  write_sig_can_n 
);
wire [3:0] cmd;
wire cnt_osc_select;
wire cnt_select;
wire [4:0] data_tra_select_cnt;
reg  end_cnt ;
wire initi;
wire reset_irq_can_active;
wire reset_sig_can_all;
wire reset_sig_can_n;
wire rst_cnt;
wire set_bus_id;
wire start_cnt;
wire tra_select;
wire trim;

bit_counterTMR bit_counter0 (
    .ext_rst(rst_cnt),
    .rst(rst),
    .data_out(data_tra_select_cnt),
    .clk(clk),
    .cnt_enable(start_cnt)
    );

buffer_tristate_busidTMR buffer_tristate_busid0 (
    .clk(clk),
    .rst(rst),
    .data_tra_in0(can_rec_select),
    .data_tra_in1(data_tra_select),
    .data_tra_in2(data_tra_select_cnt),
    .data_tra_in3(power_bus_cnt),
    .buffer_en0(reset_irq_rec_can),
    .buffer_en1(tra_select),
    .buffer_en2(cnt_select),
    .buffer_en3(cnt_osc_select),
    .data_tra_out(can_tra_select)
    );

can_interfaceTMR can_interface0 (
    .rst(rst),
    .addr(addr_can),
    .initi(initi),
    .write(write_sig_can_n),
    .reset_can(reset_sig_can_n),
    .trim(trim),
    .data_tra_mes(data_tra_mes),
    .cmd(cmd),
    .write_can(write_can)
    );

can_interface_SMTMR interface_SM0 (
    .abort(abort),
    .clk(clk),
    .end_can_proc(end_can_proc),
    .end_cnt(end_cnt),
    .init(init),
    .reset_irq_can(reset_irq_can_active),
    .reset_irq_can_all(reset_irq_can_all),
    .rst(rst),
    .send_mes(send_mes),
    .start_osc_trim(start_trim_osc),
    .start_read(start_read),
    .start_write(start_write),
    .timeoutrst(timeoutrst),
    .addr(addr_can),
    .cs_can(cs_can),
    .en_rec_reg(en_rec_reg),
    .end_init(end_init),
    .end_osc_trim(end_trim_osc),
    .end_read(end_read),
    .end_write(end_write),
    .initi(initi),
    .read(read_sig_can_n),
    .reset_all_done(reset_all_done),
    .reset_irq_can_done(reset_irq_can_done),
    .reset_sig_can(reset_sig_can_n),
    .reset_sig_can_all(reset_sig_can_all),
    .rst_cnt(rst_cnt),
    .set_bus_id(set_bus_id),
    .start_cnt(start_cnt),
    .start_init(start_init),
    .statedeb(statedebcan),
    .trim(trim),
    .write(write_sig_can_n)
    );
assign tra_select =  (set_bus_id||reset_irq_tra_can);
assign cnt_select =  (init||reset_sig_can_all);
assign cnt_osc_select =  (start_trim_osc||reset_irq_osc_can);
assign reset_irq_can_active =  (reset_irq_can||reset_irq_osc_can);
initial
  end_cnt =  1'b0;

always @( posedge clk )
  begin
    if (!rst)
      end_cnt <= 0;
    else
      case (data_tra_select_cnt)
        n_buses : end_cnt <= 1;
        default : end_cnt <= 0;
      endcase
  end
endmodule

