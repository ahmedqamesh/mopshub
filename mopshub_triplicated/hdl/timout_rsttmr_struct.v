//
// Module mopshub_triplicated.timout_rstTMR.struct
//
// Created:
//          by - dcs.dcs (localhost)
//          at - 09:18:02 05/10/22
//
// Generated by Mentor Graphics' HDL Designer(TM) 2019.4 (Build 4)
//


module timout_rstTMR( 
   // Port Declarations
   input   wire            clkA, 
   input   wire            clkB, 
   input   wire            clkC, 
   input   wire            entimeoutA, 
   input   wire            entimeoutB, 
   input   wire            entimeoutC, 
   input   wire    [31:0]  time_limitA, 
   input   wire    [31:0]  time_limitB, 
   input   wire    [31:0]  time_limitC, 
   input   wire            rstA, 
   input   wire            rstB, 
   input   wire            rstC, 
   output  wire            timeoutrstA, 
   output  wire            timeoutrstB, 
   output  wire            timeoutrstC
);


// Internal Declarations


// Local declarations

// Internal signal declarations
wor          timeoutrstregTmrErrorC;
wire         timeoutrstregVotedC;
wor          counterTmrErrorC;
wire  [31:0] counterVotedC;
wor          timeoutrstregTmrErrorB;
wire         timeoutrstregVotedB;
wor          counterTmrErrorB;
wire  [31:0] counterVotedB;
wor          timeoutrstregTmrErrorA;
wire         timeoutrstregVotedA;
wor          counterTmrErrorA;
wire  [31:0] counterVotedA;
reg   [31:0] counterA;
reg   [31:0] counterB;
reg   [31:0] counterC;
reg          timeoutrstregA;
reg          timeoutrstregB;
reg          timeoutrstregC;


// Instances 
majorityVoter #(32) counterVoterA( 
   .inA    (counterA), 
   .inB    (counterB), 
   .inC    (counterC), 
   .out    (counterVotedA), 
   .tmrErr (counterTmrErrorA)
); 

majorityVoter #(32) counterVoterB( 
   .inA    (counterA), 
   .inB    (counterB), 
   .inC    (counterC), 
   .out    (counterVotedB), 
   .tmrErr (counterTmrErrorB)
); 

majorityVoter #(32) counterVoterC( 
   .inA    (counterA), 
   .inB    (counterB), 
   .inC    (counterC), 
   .out    (counterVotedC), 
   .tmrErr (counterTmrErrorC)
); 

majorityVoter timeoutrstregVoterA( 
   .inA    (timeoutrstregA), 
   .inB    (timeoutrstregB), 
   .inC    (timeoutrstregC), 
   .out    (timeoutrstregVotedA), 
   .tmrErr (timeoutrstregTmrErrorA)
); 

majorityVoter timeoutrstregVoterB( 
   .inA    (timeoutrstregA), 
   .inB    (timeoutrstregB), 
   .inC    (timeoutrstregC), 
   .out    (timeoutrstregVotedB), 
   .tmrErr (timeoutrstregTmrErrorB)
); 

majorityVoter timeoutrstregVoterC( 
   .inA    (timeoutrstregA), 
   .inB    (timeoutrstregB), 
   .inC    (timeoutrstregC), 
   .out    (timeoutrstregVotedC), 
   .tmrErr (timeoutrstregTmrErrorC)
); 

// HDL Embedded Text Block 1 eb1
assign timeoutrstA =  timeoutrstregVotedA;
assign timeoutrstB =  timeoutrstregVotedB;
assign timeoutrstC =  timeoutrstregVotedC;
// HDL Embedded Text Block 2 eb2
always @( posedge clkA )
  begin
    if (!rstA)
      begin
        counterA <= 0;
      end
    else
      begin
        if (entimeoutA&!timeoutrstA)
          counterA <= {counterVotedA+1};
        else
          begin
            counterA <= 0;
          end
      end
  end
// HDL Embedded Text Block 3 eb3
always @( posedge clkB )
  begin
    if (!rstB)
      begin
        counterB <= 0;
      end
    else
      begin
        if (entimeoutB&!timeoutrstB)
          counterB <= {counterVotedB+1};
        else
          begin
            counterB <= 0;
          end
      end
  end
// HDL Embedded Text Block 4 eb4
always @( posedge clkC )
  begin
    if (!rstC)
      begin
        counterC <= 0;
      end
    else
      begin
        if (entimeoutC&!timeoutrstC)
          counterC <= {counterVotedC+1};
        else
          begin
            counterC <= 0;
          end
      end
  end
// HDL Embedded Text Block 5 eb5
always @( posedge clkA )
  begin
    if (counterVotedA>=time_limitA)
      timeoutrstregA <= 1'b1;
    else
      timeoutrstregA <= 1'b0;
  end
// HDL Embedded Text Block 6 eb6
always @( posedge clkB )
  begin
    if (counterVotedB>=time_limitB)
      timeoutrstregB <= 1'b1;
    else
      timeoutrstregB <= 1'b0;
  end
// HDL Embedded Text Block 7 eb7
always @( posedge clkC )
  begin
    if (counterVotedC>=time_limitC)
      timeoutrstregC <= 1'b1;
    else
      timeoutrstregC <= 1'b0;
  end

endmodule // timout_rstTMR

