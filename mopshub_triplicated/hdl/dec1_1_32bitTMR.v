/****************************************************************************************************
 *                          ! THIS FILE WAS AUTO-GENERATED BY TMRG TOOL !                           *
 *                                   ! DO NOT EDIT IT MANUALLY !                                    *
 *                                                                                                  *
 * file    : ./output/dec1_1_32bitTMR.v                                                             *
 *                                                                                                  *
 * user    : lucas                                                                                  *
 * host    : DESKTOP-BFDSFP2                                                                        *
 * date    : 05/12/2022 13:28:06                                                                    *
 *                                                                                                  *
 * workdir : /mnt/c/Users/Lucas/Documents/GitHub/mopshub_triplicated/triplicated/mopshub_top_board_16/hdl *
 * cmd     : /mnt/c/Users/Lucas/Documents/GitHub/mopshub_triplicated/tmrg-master/bin/tmrg -vv -c    *
 *           tmrg.cfg                                                                               *
 * tmrg rev: b25f042058e4e97751df2a0933c24aeadd5a78a5                                               *
 *                                                                                                  *
 * src file: dec1_1_32bit.v                                                                         *
 *           Git SHA           : b25f042058e4e97751df2a0933c24aeadd5a78a5 (?? dec1_1_32bit.v)       *
 *           Modification time : 2022-12-04 13:24:22                                                *
 *           File Size         : 3529                                                               *
 *           MD5 hash          : 56c23d136563b36a4b055801a72c79bd                                   *
 *                                                                                                  *
 ****************************************************************************************************/

`resetall 
`timescale  1ns/10ps
module dec1_1_32bitTMR(
  input wire  clk ,
  input wire  rst ,
  input wire  buffer_en ,
  input wire  rst_bus_sig ,
  input wire [4:0] bus_rec_select ,
  input wire [31:0] data_rec_in ,
  output wire [31:0] data_rec_out 
);
wire rst_bus_sigC;
wire rst_bus_sigB;
wire rst_bus_sigA;
wire rstC;
wire rstB;
wire rstA;
wire [31:0] data_rec_inC;
wire [31:0] data_rec_inB;
wire [31:0] data_rec_inA;
wire clkC;
wire clkB;
wire clkA;
wire [4:0] bus_rec_selectC;
wire [4:0] bus_rec_selectB;
wire [4:0] bus_rec_selectA;
wire buffer_enC;
wire buffer_enB;
wire buffer_enA;
wor output_bus_regTmrError;
wire [31:0] output_bus_reg;
reg  [31:0] output_bus_regA ;
reg  [31:0] output_bus_regB ;
reg  [31:0] output_bus_regC ;
initial
  output_bus_regA =  32'd0;
initial
  output_bus_regB =  32'd0;
initial
  output_bus_regC =  32'd0;
wire [31:0] output_bus_regV =  output_bus_reg;

always @( posedge clkA )
  begin
    if (!rstA)
      output_bus_regA <= 32'd0;
    if (buffer_enA)
      output_bus_regA <= data_rec_inA;
    else
      if (rst_bus_sigA)
        case (bus_rec_selectA)
          5'h0 : output_bus_regA <= {data_rec_inA[31:1] ,1'b0};
          5'h1 : output_bus_regA <= {data_rec_inA[31:2] ,1'b0,data_rec_inA[0] };
          5'h2 : output_bus_regA <= {data_rec_inA[31:3] ,1'b0,data_rec_inA[1:0] };
          5'h3 : output_bus_regA <= {data_rec_inA[31:4] ,1'b0,data_rec_inA[2:0] };
          5'h4 : output_bus_regA <= {data_rec_inA[31:5] ,1'b0,data_rec_inA[3:0] };
          5'h5 : output_bus_regA <= {data_rec_inA[31:6] ,1'b0,data_rec_inA[4:0] };
          5'h6 : output_bus_regA <= {data_rec_inA[31:7] ,1'b0,data_rec_inA[5:0] };
          5'h7 : output_bus_regA <= {data_rec_inA[31:8] ,1'b0,data_rec_inA[6:0] };
          5'h8 : output_bus_regA <= {data_rec_inA[31:9] ,1'b0,data_rec_inA[7:0] };
          5'h9 : output_bus_regA <= {data_rec_inA[31:10] ,1'b0,data_rec_inA[8:0] };
          5'hA : output_bus_regA <= {data_rec_inA[31:11] ,1'b0,data_rec_inA[9:0] };
          5'hB : output_bus_regA <= {data_rec_inA[31:12] ,1'b0,data_rec_inA[10:0] };
          5'hC : output_bus_regA <= {data_rec_inA[31:13] ,1'b0,data_rec_inA[11:0] };
          5'hD : output_bus_regA <= {data_rec_inA[31:14] ,1'b0,data_rec_inA[12:0] };
          5'hE : output_bus_regA <= {data_rec_inA[31:15] ,1'b0,data_rec_inA[13:0] };
          5'hF : output_bus_regA <= {data_rec_inA[31:16] ,1'b0,data_rec_inA[14:0] };
          5'h10 : output_bus_regA <= {data_rec_inA[31:17] ,1'b0,data_rec_inA[15:0] };
          5'h11 : output_bus_regA <= {data_rec_inA[31:18] ,1'b0,data_rec_inA[16:0] };
          5'h12 : output_bus_regA <= {data_rec_inA[31:19] ,1'b0,data_rec_inA[17:0] };
          5'h13 : output_bus_regA <= {data_rec_inA[31:20] ,1'b0,data_rec_inA[18:0] };
          5'h14 : output_bus_regA <= {data_rec_inA[31:21] ,1'b0,data_rec_inA[19:0] };
          5'h15 : output_bus_regA <= {data_rec_inA[31:22] ,1'b0,data_rec_inA[20:0] };
          5'h16 : output_bus_regA <= {data_rec_inA[31:23] ,1'b0,data_rec_inA[21:0] };
          5'h17 : output_bus_regA <= {data_rec_inA[31:24] ,1'b0,data_rec_inA[22:0] };
          5'h18 : output_bus_regA <= {data_rec_inA[31:25] ,1'b0,data_rec_inA[23:0] };
          5'h19 : output_bus_regA <= {data_rec_inA[31:26] ,1'b0,data_rec_inA[24:0] };
          5'h1A : output_bus_regA <= {data_rec_inA[31:27] ,1'b0,data_rec_inA[25:0] };
          5'h1B : output_bus_regA <= {data_rec_inA[31:28] ,1'b0,data_rec_inA[26:0] };
          5'h1C : output_bus_regA <= {data_rec_inA[31:29] ,1'b0,data_rec_inA[27:0] };
          5'h1D : output_bus_regA <= {data_rec_inA[31:30] ,1'b0,data_rec_inA[28:0] };
          5'h1E : output_bus_regA <= {data_rec_inA[31] ,1'b0,data_rec_inA[29:0] };
          5'h1F : output_bus_regA <= {1'b0,data_rec_inA[30:0] };
          default : output_bus_regA <= 32'd0;
        endcase
      else
        output_bus_regA <= output_bus_regA;
  end

always @( posedge clkB )
  begin
    if (!rstB)
      output_bus_regB <= 32'd0;
    if (buffer_enB)
      output_bus_regB <= data_rec_inB;
    else
      if (rst_bus_sigB)
        case (bus_rec_selectB)
          5'h0 : output_bus_regB <= {data_rec_inB[31:1] ,1'b0};
          5'h1 : output_bus_regB <= {data_rec_inB[31:2] ,1'b0,data_rec_inB[0] };
          5'h2 : output_bus_regB <= {data_rec_inB[31:3] ,1'b0,data_rec_inB[1:0] };
          5'h3 : output_bus_regB <= {data_rec_inB[31:4] ,1'b0,data_rec_inB[2:0] };
          5'h4 : output_bus_regB <= {data_rec_inB[31:5] ,1'b0,data_rec_inB[3:0] };
          5'h5 : output_bus_regB <= {data_rec_inB[31:6] ,1'b0,data_rec_inB[4:0] };
          5'h6 : output_bus_regB <= {data_rec_inB[31:7] ,1'b0,data_rec_inB[5:0] };
          5'h7 : output_bus_regB <= {data_rec_inB[31:8] ,1'b0,data_rec_inB[6:0] };
          5'h8 : output_bus_regB <= {data_rec_inB[31:9] ,1'b0,data_rec_inB[7:0] };
          5'h9 : output_bus_regB <= {data_rec_inB[31:10] ,1'b0,data_rec_inB[8:0] };
          5'hA : output_bus_regB <= {data_rec_inB[31:11] ,1'b0,data_rec_inB[9:0] };
          5'hB : output_bus_regB <= {data_rec_inB[31:12] ,1'b0,data_rec_inB[10:0] };
          5'hC : output_bus_regB <= {data_rec_inB[31:13] ,1'b0,data_rec_inB[11:0] };
          5'hD : output_bus_regB <= {data_rec_inB[31:14] ,1'b0,data_rec_inB[12:0] };
          5'hE : output_bus_regB <= {data_rec_inB[31:15] ,1'b0,data_rec_inB[13:0] };
          5'hF : output_bus_regB <= {data_rec_inB[31:16] ,1'b0,data_rec_inB[14:0] };
          5'h10 : output_bus_regB <= {data_rec_inB[31:17] ,1'b0,data_rec_inB[15:0] };
          5'h11 : output_bus_regB <= {data_rec_inB[31:18] ,1'b0,data_rec_inB[16:0] };
          5'h12 : output_bus_regB <= {data_rec_inB[31:19] ,1'b0,data_rec_inB[17:0] };
          5'h13 : output_bus_regB <= {data_rec_inB[31:20] ,1'b0,data_rec_inB[18:0] };
          5'h14 : output_bus_regB <= {data_rec_inB[31:21] ,1'b0,data_rec_inB[19:0] };
          5'h15 : output_bus_regB <= {data_rec_inB[31:22] ,1'b0,data_rec_inB[20:0] };
          5'h16 : output_bus_regB <= {data_rec_inB[31:23] ,1'b0,data_rec_inB[21:0] };
          5'h17 : output_bus_regB <= {data_rec_inB[31:24] ,1'b0,data_rec_inB[22:0] };
          5'h18 : output_bus_regB <= {data_rec_inB[31:25] ,1'b0,data_rec_inB[23:0] };
          5'h19 : output_bus_regB <= {data_rec_inB[31:26] ,1'b0,data_rec_inB[24:0] };
          5'h1A : output_bus_regB <= {data_rec_inB[31:27] ,1'b0,data_rec_inB[25:0] };
          5'h1B : output_bus_regB <= {data_rec_inB[31:28] ,1'b0,data_rec_inB[26:0] };
          5'h1C : output_bus_regB <= {data_rec_inB[31:29] ,1'b0,data_rec_inB[27:0] };
          5'h1D : output_bus_regB <= {data_rec_inB[31:30] ,1'b0,data_rec_inB[28:0] };
          5'h1E : output_bus_regB <= {data_rec_inB[31] ,1'b0,data_rec_inB[29:0] };
          5'h1F : output_bus_regB <= {1'b0,data_rec_inB[30:0] };
          default : output_bus_regB <= 32'd0;
        endcase
      else
        output_bus_regB <= output_bus_regB;
  end

always @( posedge clkC )
  begin
    if (!rstC)
      output_bus_regC <= 32'd0;
    if (buffer_enC)
      output_bus_regC <= data_rec_inC;
    else
      if (rst_bus_sigC)
        case (bus_rec_selectC)
          5'h0 : output_bus_regC <= {data_rec_inC[31:1] ,1'b0};
          5'h1 : output_bus_regC <= {data_rec_inC[31:2] ,1'b0,data_rec_inC[0] };
          5'h2 : output_bus_regC <= {data_rec_inC[31:3] ,1'b0,data_rec_inC[1:0] };
          5'h3 : output_bus_regC <= {data_rec_inC[31:4] ,1'b0,data_rec_inC[2:0] };
          5'h4 : output_bus_regC <= {data_rec_inC[31:5] ,1'b0,data_rec_inC[3:0] };
          5'h5 : output_bus_regC <= {data_rec_inC[31:6] ,1'b0,data_rec_inC[4:0] };
          5'h6 : output_bus_regC <= {data_rec_inC[31:7] ,1'b0,data_rec_inC[5:0] };
          5'h7 : output_bus_regC <= {data_rec_inC[31:8] ,1'b0,data_rec_inC[6:0] };
          5'h8 : output_bus_regC <= {data_rec_inC[31:9] ,1'b0,data_rec_inC[7:0] };
          5'h9 : output_bus_regC <= {data_rec_inC[31:10] ,1'b0,data_rec_inC[8:0] };
          5'hA : output_bus_regC <= {data_rec_inC[31:11] ,1'b0,data_rec_inC[9:0] };
          5'hB : output_bus_regC <= {data_rec_inC[31:12] ,1'b0,data_rec_inC[10:0] };
          5'hC : output_bus_regC <= {data_rec_inC[31:13] ,1'b0,data_rec_inC[11:0] };
          5'hD : output_bus_regC <= {data_rec_inC[31:14] ,1'b0,data_rec_inC[12:0] };
          5'hE : output_bus_regC <= {data_rec_inC[31:15] ,1'b0,data_rec_inC[13:0] };
          5'hF : output_bus_regC <= {data_rec_inC[31:16] ,1'b0,data_rec_inC[14:0] };
          5'h10 : output_bus_regC <= {data_rec_inC[31:17] ,1'b0,data_rec_inC[15:0] };
          5'h11 : output_bus_regC <= {data_rec_inC[31:18] ,1'b0,data_rec_inC[16:0] };
          5'h12 : output_bus_regC <= {data_rec_inC[31:19] ,1'b0,data_rec_inC[17:0] };
          5'h13 : output_bus_regC <= {data_rec_inC[31:20] ,1'b0,data_rec_inC[18:0] };
          5'h14 : output_bus_regC <= {data_rec_inC[31:21] ,1'b0,data_rec_inC[19:0] };
          5'h15 : output_bus_regC <= {data_rec_inC[31:22] ,1'b0,data_rec_inC[20:0] };
          5'h16 : output_bus_regC <= {data_rec_inC[31:23] ,1'b0,data_rec_inC[21:0] };
          5'h17 : output_bus_regC <= {data_rec_inC[31:24] ,1'b0,data_rec_inC[22:0] };
          5'h18 : output_bus_regC <= {data_rec_inC[31:25] ,1'b0,data_rec_inC[23:0] };
          5'h19 : output_bus_regC <= {data_rec_inC[31:26] ,1'b0,data_rec_inC[24:0] };
          5'h1A : output_bus_regC <= {data_rec_inC[31:27] ,1'b0,data_rec_inC[25:0] };
          5'h1B : output_bus_regC <= {data_rec_inC[31:28] ,1'b0,data_rec_inC[26:0] };
          5'h1C : output_bus_regC <= {data_rec_inC[31:29] ,1'b0,data_rec_inC[27:0] };
          5'h1D : output_bus_regC <= {data_rec_inC[31:30] ,1'b0,data_rec_inC[28:0] };
          5'h1E : output_bus_regC <= {data_rec_inC[31] ,1'b0,data_rec_inC[29:0] };
          5'h1F : output_bus_regC <= {1'b0,data_rec_inC[30:0] };
          default : output_bus_regC <= 32'd0;
        endcase
      else
        output_bus_regC <= output_bus_regC;
  end
assign data_rec_out =  output_bus_reg;

majorityVoter #(.WIDTH(32)) output_bus_regVoter (
    .inA(output_bus_regA),
    .inB(output_bus_regB),
    .inC(output_bus_regC),
    .out(output_bus_reg),
    .tmrErr(output_bus_regTmrError)
    );

fanout buffer_enFanout (
    .in(buffer_en),
    .outA(buffer_enA),
    .outB(buffer_enB),
    .outC(buffer_enC)
    );

fanout #(.WIDTH(5)) bus_rec_selectFanout (
    .in(bus_rec_select),
    .outA(bus_rec_selectA),
    .outB(bus_rec_selectB),
    .outC(bus_rec_selectC)
    );

fanout clkFanout (
    .in(clk),
    .outA(clkA),
    .outB(clkB),
    .outC(clkC)
    );

fanout #(.WIDTH(32)) data_rec_inFanout (
    .in(data_rec_in),
    .outA(data_rec_inA),
    .outB(data_rec_inB),
    .outC(data_rec_inC)
    );

fanout rstFanout (
    .in(rst),
    .outA(rstA),
    .outB(rstB),
    .outC(rstC)
    );

fanout rst_bus_sigFanout (
    .in(rst_bus_sig),
    .outA(rst_bus_sigA),
    .outB(rst_bus_sigB),
    .outC(rst_bus_sigC)
    );
endmodule

