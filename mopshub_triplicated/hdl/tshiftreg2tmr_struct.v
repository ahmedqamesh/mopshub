//
// Module mopshub_triplicated.tshiftreg2TMR.struct
//
// Created:
//          by - dcs.dcs (localhost)
//          at - 09:18:08 05/10/22
//
// Generated by Mentor Graphics' HDL Designer(TM) 2019.4 (Build 4)
//


module tshiftreg2TMR( 
   // Port Declarations
   input   wire             clockA, 
   input   wire             clockB, 
   input   wire             clockC, 
   input   wire    [102:0]  mesinA, 
   input   wire    [102:0]  mesinB, 
   input   wire    [102:0]  mesinC, 
   input   wire             activA, 
   input   wire             activB, 
   input   wire             activC, 
   input   wire             resetA, 
   input   wire             resetB, 
   input   wire             resetC, 
   input   wire             loadA, 
   input   wire             loadB, 
   input   wire             loadC, 
   input   wire             shiftA, 
   input   wire             shiftB, 
   input   wire             shiftC, 
   input   wire             extendedA, 
   input   wire             extendedB, 
   input   wire             extendedC, 
   output  wire             bitoutA, 
   output  wire             bitoutB, 
   output  wire             bitoutC, 
   output  wire             crc_out_bitA, 
   output  wire             crc_out_bitB, 
   output  wire             crc_out_bitC
);


// Internal Declarations


// Local declarations

// Internal signal declarations
wor           enable_iTmrErrorC;
wire          enable_iVotedC;
wor           edgedTmrErrorC;
wire          edgedVotedC;
wor           enable_iTmrErrorB;
wire          enable_iVotedB;
wor           edgedTmrErrorB;
wire          edgedVotedB;
wor           enable_iTmrErrorA;
wire          enable_iVotedA;
wor           edgedTmrErrorA;
wire          edgedVotedA;
wire          reset_iA;
wire          reset_iB;
wire          reset_iC;
wire          load_regA;
wire          load_regB;
wire          load_regC;
wire  [102:0] q_iA;
wire  [102:0] q_iB;
wire  [102:0] q_iC;
wire          zeroA;
wire          zeroB;
wire          zeroC;
wire          bitout_iA;
wire          bitout_iB;
wire          bitout_iC;
reg           enable_iA;
reg           enable_iB;
reg           enable_iC;
reg           edgedA;
reg           edgedB;
reg           edgedC;


genvar i;

// Instances 
majorityVoter edgedVoterA( 
   .inA    (edgedA), 
   .inB    (edgedB), 
   .inC    (edgedC), 
   .out    (edgedVotedA), 
   .tmrErr (edgedTmrErrorA)
); 

majorityVoter edgedVoterB( 
   .inA    (edgedA), 
   .inB    (edgedB), 
   .inC    (edgedC), 
   .out    (edgedVotedB), 
   .tmrErr (edgedTmrErrorB)
); 

majorityVoter edgedVoterC( 
   .inA    (edgedA), 
   .inB    (edgedB), 
   .inC    (edgedC), 
   .out    (edgedVotedC), 
   .tmrErr (edgedTmrErrorC)
); 

majorityVoter enable_iVoterA( 
   .inA    (enable_iA), 
   .inB    (enable_iB), 
   .inC    (enable_iC), 
   .out    (enable_iVotedA), 
   .tmrErr (enable_iTmrErrorA)
); 

majorityVoter enable_iVoterB( 
   .inA    (enable_iA), 
   .inB    (enable_iB), 
   .inC    (enable_iC), 
   .out    (enable_iVotedB), 
   .tmrErr (enable_iTmrErrorB)
); 

majorityVoter enable_iVoterC( 
   .inA    (enable_iA), 
   .inB    (enable_iB), 
   .inC    (enable_iC), 
   .out    (enable_iVotedC), 
   .tmrErr (enable_iTmrErrorC)
); 

tshift_cell2TMR bottom_reg( 
   .enableA  (enable_iVotedA), 
   .enableB  (enable_iVotedB), 
   .enableC  (enable_iVotedC), 
   .preloadA (mesinA[0]), 
   .preloadB (mesinB[0]), 
   .preloadC (mesinC[0]), 
   .clockA   (clockA), 
   .clockB   (clockB), 
   .clockC   (clockC), 
   .resetA   (reset_iA), 
   .resetB   (reset_iB), 
   .resetC   (reset_iC), 
   .loadA    (load_regA), 
   .loadB    (load_regB), 
   .loadC    (load_regC), 
   .InputA   (zeroA), 
   .InputB   (zeroB), 
   .InputC   (zeroC), 
   .qA       (q_iA[0]), 
   .qB       (q_iB[0]), 
   .qC       (q_iC[0])
); 

tshift_cell2TMR topreg( 
   .enableA  (enable_iVotedA), 
   .enableB  (enable_iVotedB), 
   .enableC  (enable_iVotedC), 
   .preloadA (mesinA[102]), 
   .preloadB (mesinB[102]), 
   .preloadC (mesinC[102]), 
   .clockA   (clockA), 
   .clockB   (clockB), 
   .clockC   (clockC), 
   .resetA   (reset_iA), 
   .resetB   (reset_iB), 
   .resetC   (reset_iC), 
   .loadA    (load_regA), 
   .loadB    (load_regB), 
   .loadC    (load_regC), 
   .InputA   (q_iA[101]), 
   .InputB   (q_iB[101]), 
   .InputC   (q_iC[101]), 
   .qA       (bitout_iA), 
   .qB       (bitout_iB), 
   .qC       (bitout_iC)
); 

// HDL Embedded Text Block 1 eb1
assign reset_iA =  resetA;
assign reset_iB =  resetB;
assign reset_iC =  resetC;
assign load_regA =  loadA;
assign load_regB =  loadB;
assign load_regC =  loadC;
assign zeroA =  1'b0;
assign zeroB =  1'b0;
assign zeroC =  1'b0;
assign bitoutA =  (bitout_iA&extendedA)|(q_iA[82] &(~ extendedA ));
assign bitoutB =  (bitout_iB&extendedB)|(q_iB[82] &(~ extendedB ));
assign bitoutC =  (bitout_iC&extendedC)|(q_iC[82] &(~ extendedC ));
assign crc_out_bitA =  (q_iA[87] &extendedA)|(q_iA[67] &(~ extendedA ));
assign crc_out_bitB =  (q_iB[87] &extendedB)|(q_iB[67] &(~ extendedB ));
assign crc_out_bitC =  (q_iC[87] &extendedC)|(q_iC[67] &(~ extendedC ));
// HDL Embedded Text Block 2 eb2
generate
  for(i =  1;i<102;i =  i+1)
    begin 

      tshift_cell2TMR reg_i (
          .enableA(enable_iVotedA),
          .enableB(enable_iVotedB),
          .enableC(enable_iVotedC),
          .preloadA(mesinA[i] ),
          .preloadB(mesinB[i] ),
          .preloadC(mesinC[i] ),
          .clockA(clockA),
          .clockB(clockB),
          .clockC(clockC),
          .resetA(reset_iA),
          .resetB(reset_iB),
          .resetC(reset_iC),
          .loadA(load_regA),
          .loadB(load_regB),
          .loadC(load_regC),
          .InputA(q_iA[i-1] ),
          .InputB(q_iB[i-1] ),
          .InputC(q_iC[i-1] ),
          .qA(q_iA[i] ),
          .qB(q_iB[i] ),
          .qC(q_iC[i] )
          );
    end

endgenerate
// HDL Embedded Text Block 3 eb3
always @( negedge clockA )
  begin
    if (resetA==1'b0)
      begin
        edgedA =  1'b0;
        enable_iA <= 1'b0;
      end
    else
      begin
        edgedA =  edgedVotedA;
        enable_iA <= enable_iVotedA;
        if (activA==1'b1)
          begin
            if (edgedVotedA==1'b0)
              begin
                edgedA =  1'b1;
                if (shiftA==1'b1||loadA==1'b1)
                  enable_iA <= 1'b1;
                else
                  enable_iA <= 1'b0;
              end
            else
              begin
                enable_iA <= 1'b0;
                edgedA =  1'b1;
              end
          end
        else
          begin
            enable_iA <= 1'b0;
            edgedA =  1'b0;
          end
      end
  end
// HDL Embedded Text Block 4 eb4
always @( negedge clockB )
  begin
    if (resetB==1'b0)
      begin
        edgedB =  1'b0;
        enable_iB <= 1'b0;
      end
    else
      begin
        edgedB =  edgedVotedB;
        enable_iB <= enable_iVotedB;
        if (activB==1'b1)
          begin
            if (edgedVotedB==1'b0)
              begin
                edgedB =  1'b1;
                if (shiftB==1'b1||loadB==1'b1)
                  enable_iB <= 1'b1;
                else
                  enable_iB <= 1'b0;
              end
            else
              begin
                enable_iB <= 1'b0;
                edgedB =  1'b1;
              end
          end
        else
          begin
            enable_iB <= 1'b0;
            edgedB =  1'b0;
          end
      end
  end
// HDL Embedded Text Block 5 eb5
always @( negedge clockC )
  begin
    if (resetC==1'b0)
      begin
        edgedC =  1'b0;
        enable_iC <= 1'b0;
      end
    else
      begin
        edgedC =  edgedVotedC;
        enable_iC <= enable_iVotedC;
        if (activC==1'b1)
          begin
            if (edgedVotedC==1'b0)
              begin
                edgedC =  1'b1;
                if (shiftC==1'b1||loadC==1'b1)
                  enable_iC <= 1'b1;
                else
                  enable_iC <= 1'b0;
              end
            else
              begin
                enable_iC <= 1'b0;
                edgedC =  1'b1;
              end
          end
        else
          begin
            enable_iC <= 1'b0;
            edgedC =  1'b0;
          end
      end
  end

endmodule // tshiftreg2TMR

