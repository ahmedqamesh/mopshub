/****************************************************************************************************
 *                          ! THIS FILE WAS AUTO-GENERATED BY TMRG TOOL !                           *
 *                                   ! DO NOT EDIT IT MANUALLY !                                    *
 *                                                                                                  *
 * file    : ./output/timecount2TMR.v                                                               *
 *                                                                                                  *
 * user    : lucas                                                                                  *
 * host    : DESKTOP-BFDSFP2                                                                        *
 * date    : 03/04/2022 20:08:57                                                                    *
 *                                                                                                  *
 * workdir : /mnt/c/Users/Lucas/Desktop/mopshub_triplication/triplicated/mopshub_top_canakari_ftrim/hdl *
 * cmd     : /mnt/c/Users/Lucas/Desktop/mopshub_triplication/tmrg-master/bin/tmrg -vv -c tmrg.cfg   *
 * tmrg rev:                                                                                        *
 *                                                                                                  *
 * src file: timecount2.v                                                                           *
 *           Git SHA           : File not in git repository!                                        *
 *           Modification time : 2022-03-29 13:49:21                                                *
 *           File Size         : 2091                                                               *
 *           MD5 hash          : 4b35373277271bc33af2e8c34ec84dce                                   *
 *                                                                                                  *
 ****************************************************************************************************/

module timecount2TMR(
  input wire  clockA ,
  input wire  clockB ,
  input wire  clockC ,
  input wire  Prescale_ENA ,
  input wire  Prescale_ENB ,
  input wire  Prescale_ENC ,
  input wire  resetA ,
  input wire  resetB ,
  input wire  resetC ,
  input wire  incrementA ,
  input wire  incrementB ,
  input wire  incrementC ,
  input wire  setctzeroA ,
  input wire  setctzeroB ,
  input wire  setctzeroC ,
  input wire  setctotwoA ,
  input wire  setctotwoB ,
  input wire  setctotwoC ,
  output wire [3:0] countoA ,
  output wire [3:0] countoB ,
  output wire [3:0] countoC 
);
wor counto_iTmrErrorC;
wire [3:0] counto_iVotedC;
wor counto_iTmrErrorB;
wire [3:0] counto_iVotedB;
wor counto_iTmrErrorA;
wire [3:0] counto_iVotedA;
reg  [3:0] counto_iA ;
reg  [3:0] counto_iB ;
reg  [3:0] counto_iC ;
assign countoA =  counto_iVotedA;
assign countoB =  counto_iVotedB;
assign countoC =  counto_iVotedC;

always @( posedge clockA or negedge resetA )
  begin
    if (resetA==1'b0)
      counto_iA <= 4'b0000;
    else
      if (Prescale_ENA==1'b1)
        begin
          if (setctzeroA==1'b1)
            counto_iA <= 4'b0000;
          else
            if (incrementA==1'b1)
              counto_iA <= counto_iVotedA+1;
            else
              if (setctotwoA==1'b1)
                counto_iA <= 4'd2;
              else
                counto_iA <= counto_iVotedA;
        end
  end

always @( posedge clockB or negedge resetB )
  begin
    if (resetB==1'b0)
      counto_iB <= 4'b0000;
    else
      if (Prescale_ENB==1'b1)
        begin
          if (setctzeroB==1'b1)
            counto_iB <= 4'b0000;
          else
            if (incrementB==1'b1)
              counto_iB <= counto_iVotedB+1;
            else
              if (setctotwoB==1'b1)
                counto_iB <= 4'd2;
              else
                counto_iB <= counto_iVotedB;
        end
  end

always @( posedge clockC or negedge resetC )
  begin
    if (resetC==1'b0)
      counto_iC <= 4'b0000;
    else
      if (Prescale_ENC==1'b1)
        begin
          if (setctzeroC==1'b1)
            counto_iC <= 4'b0000;
          else
            if (incrementC==1'b1)
              counto_iC <= counto_iVotedC+1;
            else
              if (setctotwoC==1'b1)
                counto_iC <= 4'd2;
              else
                counto_iC <= counto_iVotedC;
        end
  end

majorityVoter #(.WIDTH(4)) counto_iVoterA (
    .inA(counto_iA),
    .inB(counto_iB),
    .inC(counto_iC),
    .out(counto_iVotedA),
    .tmrErr(counto_iTmrErrorA)
    );

majorityVoter #(.WIDTH(4)) counto_iVoterB (
    .inA(counto_iA),
    .inB(counto_iB),
    .inC(counto_iC),
    .out(counto_iVotedB),
    .tmrErr(counto_iTmrErrorB)
    );

majorityVoter #(.WIDTH(4)) counto_iVoterC (
    .inA(counto_iA),
    .inB(counto_iB),
    .inC(counto_iC),
    .out(counto_iVotedC),
    .tmrErr(counto_iTmrErrorC)
    );
endmodule

