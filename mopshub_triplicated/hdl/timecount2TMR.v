/****************************************************************************************************
 *                          ! THIS FILE WAS AUTO-GENERATED BY TMRG TOOL !                           *
 *                                   ! DO NOT EDIT IT MANUALLY !                                    *
 *                                                                                                  *
 * file    : ./output/timecount2TMR.v                                                               *
 *                                                                                                  *
 * user    : lucas                                                                                  *
 * host    : DESKTOP-BFDSFP2                                                                        *
 * date    : 05/12/2022 13:28:36                                                                    *
 *                                                                                                  *
 * workdir : /mnt/c/Users/Lucas/Documents/GitHub/mopshub_triplicated/triplicated/mopshub_top_board_16/hdl *
 * cmd     : /mnt/c/Users/Lucas/Documents/GitHub/mopshub_triplicated/tmrg-master/bin/tmrg -vv -c    *
 *           tmrg.cfg                                                                               *
 * tmrg rev: b25f042058e4e97751df2a0933c24aeadd5a78a5                                               *
 *                                                                                                  *
 * src file: timecount2.v                                                                           *
 *           Git SHA           : b25f042058e4e97751df2a0933c24aeadd5a78a5 (?? timecount2.v)         *
 *           Modification time : 2022-11-10 21:22:58                                                *
 *           File Size         : 2039                                                               *
 *           MD5 hash          : 5ab86e9380e399165b4398dbdf6bd7fb                                   *
 *                                                                                                  *
 ****************************************************************************************************/

module timecount2TMR(
  input wire  clock ,
  input wire  Prescale_EN ,
  input wire  reset ,
  input wire  increment ,
  input wire  setctzero ,
  input wire  setctotwo ,
  output wire [3:0] counto 
);
wire setctzeroC;
wire setctzeroB;
wire setctzeroA;
wire setctotwoC;
wire setctotwoB;
wire setctotwoA;
wire resetC;
wire resetB;
wire resetA;
wire incrementC;
wire incrementB;
wire incrementA;
wire [3:0] countoC;
wire [3:0] countoB;
wire [3:0] countoA;
wire clockC;
wire clockB;
wire clockA;
wire Prescale_ENC;
wire Prescale_ENB;
wire Prescale_ENA;
wor counto_iTmrError;
wire [3:0] counto_i;
reg  [3:0] counto_iA ;
reg  [3:0] counto_iB ;
reg  [3:0] counto_iC ;
assign counto =  counto_i;

always @( posedge clockA or negedge resetA )
  begin
    if (resetA==1'b0)
      counto_iA <= 4'b0000;
    else
      if (Prescale_ENA==1'b1)
        begin
          if (setctzeroA==1'b1)
            counto_iA <= 4'b0000;
          else
            if (incrementA==1'b1)
              counto_iA <= countoA+1;
            else
              if (setctotwoA==1'b1)
                counto_iA <= 4'd2;
              else
                counto_iA <= countoA;
        end
  end

always @( posedge clockB or negedge resetB )
  begin
    if (resetB==1'b0)
      counto_iB <= 4'b0000;
    else
      if (Prescale_ENB==1'b1)
        begin
          if (setctzeroB==1'b1)
            counto_iB <= 4'b0000;
          else
            if (incrementB==1'b1)
              counto_iB <= countoB+1;
            else
              if (setctotwoB==1'b1)
                counto_iB <= 4'd2;
              else
                counto_iB <= countoB;
        end
  end

always @( posedge clockC or negedge resetC )
  begin
    if (resetC==1'b0)
      counto_iC <= 4'b0000;
    else
      if (Prescale_ENC==1'b1)
        begin
          if (setctzeroC==1'b1)
            counto_iC <= 4'b0000;
          else
            if (incrementC==1'b1)
              counto_iC <= countoC+1;
            else
              if (setctotwoC==1'b1)
                counto_iC <= 4'd2;
              else
                counto_iC <= countoC;
        end
  end

majorityVoter #(.WIDTH(4)) counto_iVoter (
    .inA(counto_iA),
    .inB(counto_iB),
    .inC(counto_iC),
    .out(counto_i),
    .tmrErr(counto_iTmrError)
    );

fanout Prescale_ENFanout (
    .in(Prescale_EN),
    .outA(Prescale_ENA),
    .outB(Prescale_ENB),
    .outC(Prescale_ENC)
    );

fanout clockFanout (
    .in(clock),
    .outA(clockA),
    .outB(clockB),
    .outC(clockC)
    );

fanout #(.WIDTH(4)) countoFanout (
    .in(counto),
    .outA(countoA),
    .outB(countoB),
    .outC(countoC)
    );

fanout incrementFanout (
    .in(increment),
    .outA(incrementA),
    .outB(incrementB),
    .outC(incrementC)
    );

fanout resetFanout (
    .in(reset),
    .outA(resetA),
    .outB(resetB),
    .outC(resetC)
    );

fanout setctotwoFanout (
    .in(setctotwo),
    .outA(setctotwoA),
    .outB(setctotwoB),
    .outC(setctotwoC)
    );

fanout setctzeroFanout (
    .in(setctzero),
    .outA(setctzeroA),
    .outB(setctzeroB),
    .outC(setctzeroC)
    );
endmodule

