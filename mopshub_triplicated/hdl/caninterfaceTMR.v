/****************************************************************************************************
 *                          ! THIS FILE WAS AUTO-GENERATED BY TMRG TOOL !                           *
 *                                   ! DO NOT EDIT IT MANUALLY !                                    *
 *                                                                                                  *
 * file    : ./output/caninterfaceTMR.v                                                             *
 *                                                                                                  *
 * user    : lucas                                                                                  *
 * host    : DESKTOP-BFDSFP2                                                                        *
 * date    : 03/04/2022 20:08:32                                                                    *
 *                                                                                                  *
 * workdir : /mnt/c/Users/Lucas/Desktop/mopshub_triplication/triplicated/mopshub_top_canakari_ftrim/hdl *
 * cmd     : /mnt/c/Users/Lucas/Desktop/mopshub_triplication/tmrg-master/bin/tmrg -vv -c tmrg.cfg   *
 * tmrg rev:                                                                                        *
 *                                                                                                  *
 * src file: caninterface.v                                                                         *
 *           Git SHA           : File not in git repository!                                        *
 *           Modification time : 2022-03-28 18:33:59                                                *
 *           File Size         : 3789                                                               *
 *           MD5 hash          : b9cfa7105695bbc7271c8cf13caa91be                                   *
 *                                                                                                  *
 ****************************************************************************************************/

module can_interfaceTMR(
  input wire [4:0] addrA ,
  input wire [4:0] addrB ,
  input wire [4:0] addrC ,
  input wire [15:0] data_initA ,
  input wire [15:0] data_initB ,
  input wire [15:0] data_initC ,
  input wire  initiA ,
  input wire  initiB ,
  input wire  initiC ,
  input wire  writeA ,
  input wire  writeB ,
  input wire  writeC ,
  input wire  reset_canA ,
  input wire  reset_canB ,
  input wire  reset_canC ,
  input wire  trimA ,
  input wire  trimB ,
  input wire  trimC ,
  input wire [75:0] data_tra_mesA ,
  input wire [75:0] data_tra_mesB ,
  input wire [75:0] data_tra_mesC ,
  output wire [3:0] cmdA ,
  output wire [3:0] cmdB ,
  output wire [3:0] cmdC ,
  output wire [15:0] write_canA ,
  output wire [15:0] write_canB ,
  output wire [15:0] write_canC 
);
reg  [15:0] write_can_regA ;
reg  [15:0] write_can_regB ;
reg  [15:0] write_can_regC ;
reg  [4:0] can_tra_regA ;
reg  [4:0] can_tra_regB ;
reg  [4:0] can_tra_regC ;
reg  [15:0] tra_controlA ;
reg  [15:0] tra_controlB ;
reg  [15:0] tra_controlC ;
reg  [15:0] rst_irqA ;
reg  [15:0] rst_irqB ;
reg  [15:0] rst_irqC ;
reg  [15:0] gen_dataA ;
reg  [15:0] gen_dataB ;
reg  [15:0] gen_dataC ;
reg  [75:0] trim_dataA ;
reg  [75:0] trim_dataB ;
reg  [75:0] trim_dataC ;
initial
  begin
    write_can_regA =  16'h0000;
    can_tra_regA =  5'h0;
    tra_controlA =  16'h8008;
    rst_irqA =  16'h8070;
    gen_dataA =  16'h9C;
    trim_dataA =  {12'h555,64'hAAAAAAAAAAAAAAAA};
  end
initial
  begin
    write_can_regB =  16'h0000;
    can_tra_regB =  5'h0;
    tra_controlB =  16'h8008;
    rst_irqB =  16'h8070;
    gen_dataB =  16'h9C;
    trim_dataB =  {12'h555,64'hAAAAAAAAAAAAAAAA};
  end
initial
  begin
    write_can_regC =  16'h0000;
    can_tra_regC =  5'h0;
    tra_controlC =  16'h8008;
    rst_irqC =  16'h8070;
    gen_dataC =  16'h9C;
    trim_dataC =  {12'h555,64'hAAAAAAAAAAAAAAAA};
  end
assign write_canA =  write_can_regA;
assign write_canB =  write_can_regB;
assign write_canC =  write_can_regC;
assign cmdA =  {initiA,writeA,reset_canA,trimA};
assign cmdB =  {initiB,writeB,reset_canB,trimB};
assign cmdC =  {initiC,writeC,reset_canC,trimC};

always @( * )
  begin
    case (cmdA)
      4'b1000 : write_can_regA =  data_initA;
      4'b0000 : 
        begin
          case (addrA)
            5'b01100 : write_can_regA =  {data_tra_mesA[74:64] ,5'h0};
            5'b01010 : write_can_regA =  {data_tra_mesA[63:56] ,data_tra_mesA[47:40] };
            5'b01001 : write_can_regA =  {data_tra_mesA[55:48] ,data_tra_mesA[39:32] };
            5'b01000 : write_can_regA =  {data_tra_mesA[7:0] ,data_tra_mesA[15:8] };
            5'b00111 : write_can_regA =  {data_tra_mesA[23:16] ,data_tra_mesA[31:24] };
            5'b01110 : write_can_regA =  gen_dataA;
            5'b01101 : write_can_regA =  tra_controlA;
            default : write_can_regA =  16'h0;
          endcase
        end
      4'b0001 : 
        begin
          case (addrA)
            5'b01100 : write_can_regA =  {trim_dataA[74:64] ,5'h0};
            5'b01010 : write_can_regA =  {trim_dataA[63:56] ,trim_dataA[47:40] };
            5'b01001 : write_can_regA =  {trim_dataA[55:48] ,trim_dataA[39:32] };
            5'b01000 : write_can_regA =  {trim_dataA[7:0] ,trim_dataA[15:8] };
            5'b00111 : write_can_regA =  {trim_dataA[23:16] ,trim_dataA[31:24] };
            5'b01110 : write_can_regA =  gen_dataA;
            5'b01101 : write_can_regA =  tra_controlA;
            default : write_can_regA =  16'h0;
          endcase
        end
      4'b0010 : 
        begin
          case (addrA)
            5'b01110 : write_can_regA =  gen_dataA;
            5'b10010 : write_can_regA =  rst_irqA;
            default : write_can_regA =  16'h0;
          endcase
        end
      default : write_can_regA =  16'h0;
    endcase
  end

always @( * )
  begin
    case (cmdB)
      4'b1000 : write_can_regB =  data_initB;
      4'b0000 : 
        begin
          case (addrB)
            5'b01100 : write_can_regB =  {data_tra_mesB[74:64] ,5'h0};
            5'b01010 : write_can_regB =  {data_tra_mesB[63:56] ,data_tra_mesB[47:40] };
            5'b01001 : write_can_regB =  {data_tra_mesB[55:48] ,data_tra_mesB[39:32] };
            5'b01000 : write_can_regB =  {data_tra_mesB[7:0] ,data_tra_mesB[15:8] };
            5'b00111 : write_can_regB =  {data_tra_mesB[23:16] ,data_tra_mesB[31:24] };
            5'b01110 : write_can_regB =  gen_dataB;
            5'b01101 : write_can_regB =  tra_controlB;
            default : write_can_regB =  16'h0;
          endcase
        end
      4'b0001 : 
        begin
          case (addrB)
            5'b01100 : write_can_regB =  {trim_dataB[74:64] ,5'h0};
            5'b01010 : write_can_regB =  {trim_dataB[63:56] ,trim_dataB[47:40] };
            5'b01001 : write_can_regB =  {trim_dataB[55:48] ,trim_dataB[39:32] };
            5'b01000 : write_can_regB =  {trim_dataB[7:0] ,trim_dataB[15:8] };
            5'b00111 : write_can_regB =  {trim_dataB[23:16] ,trim_dataB[31:24] };
            5'b01110 : write_can_regB =  gen_dataB;
            5'b01101 : write_can_regB =  tra_controlB;
            default : write_can_regB =  16'h0;
          endcase
        end
      4'b0010 : 
        begin
          case (addrB)
            5'b01110 : write_can_regB =  gen_dataB;
            5'b10010 : write_can_regB =  rst_irqB;
            default : write_can_regB =  16'h0;
          endcase
        end
      default : write_can_regB =  16'h0;
    endcase
  end

always @( * )
  begin
    case (cmdC)
      4'b1000 : write_can_regC =  data_initC;
      4'b0000 : 
        begin
          case (addrC)
            5'b01100 : write_can_regC =  {data_tra_mesC[74:64] ,5'h0};
            5'b01010 : write_can_regC =  {data_tra_mesC[63:56] ,data_tra_mesC[47:40] };
            5'b01001 : write_can_regC =  {data_tra_mesC[55:48] ,data_tra_mesC[39:32] };
            5'b01000 : write_can_regC =  {data_tra_mesC[7:0] ,data_tra_mesC[15:8] };
            5'b00111 : write_can_regC =  {data_tra_mesC[23:16] ,data_tra_mesC[31:24] };
            5'b01110 : write_can_regC =  gen_dataC;
            5'b01101 : write_can_regC =  tra_controlC;
            default : write_can_regC =  16'h0;
          endcase
        end
      4'b0001 : 
        begin
          case (addrC)
            5'b01100 : write_can_regC =  {trim_dataC[74:64] ,5'h0};
            5'b01010 : write_can_regC =  {trim_dataC[63:56] ,trim_dataC[47:40] };
            5'b01001 : write_can_regC =  {trim_dataC[55:48] ,trim_dataC[39:32] };
            5'b01000 : write_can_regC =  {trim_dataC[7:0] ,trim_dataC[15:8] };
            5'b00111 : write_can_regC =  {trim_dataC[23:16] ,trim_dataC[31:24] };
            5'b01110 : write_can_regC =  gen_dataC;
            5'b01101 : write_can_regC =  tra_controlC;
            default : write_can_regC =  16'h0;
          endcase
        end
      4'b0010 : 
        begin
          case (addrC)
            5'b01110 : write_can_regC =  gen_dataC;
            5'b10010 : write_can_regC =  rst_irqC;
            default : write_can_regC =  16'h0;
          endcase
        end
      default : write_can_regC =  16'h0;
    endcase
  end
endmodule

