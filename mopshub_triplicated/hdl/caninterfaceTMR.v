/****************************************************************************************************
 *                          ! THIS FILE WAS AUTO-GENERATED BY TMRG TOOL !                           *
 *                                   ! DO NOT EDIT IT MANUALLY !                                    *
 *                                                                                                  *
 * file    : ./output/caninterfaceTMR.v                                                             *
 *                                                                                                  *
 * user    : lucas                                                                                  *
 * host    : DESKTOP-BFDSFP2                                                                        *
 * date    : 16/08/2022 12:58:13                                                                    *
 *                                                                                                  *
 * workdir : /mnt/c/Users/Lucas/Desktop/mopshub_triplication/mopshub_top_board_canakari_ftrim/hdl   *
 * cmd     : /mnt/c/Users/Lucas/Desktop/mopshub_triplication/tmrg-master/bin/tmrg -c tmrg.cfg -vvv  *
 * tmrg rev:                                                                                        *
 *                                                                                                  *
 * src file: caninterface.v                                                                         *
 *           Git SHA           : File not in git repository!                                        *
 *           Modification time : 2022-08-12 10:06:10                                                *
 *           File Size         : 4142                                                               *
 *           MD5 hash          : d3b029b2e70312bba62f4a95fc1f9c79                                   *
 *                                                                                                  *
 ****************************************************************************************************/

module can_interfaceTMR(
  input wire [4:0] addr ,
  input wire [15:0] data_init ,
  input wire  initi ,
  input wire  write ,
  input wire  reset_can ,
  input wire  trim ,
  input wire [75:0] data_tra_mes ,
  output wire [3:0] cmd ,
  output wire [15:0] write_can 
);
wire [15:0] rst_irqC;
wire [15:0] rst_irqB;
wire [15:0] rst_irqA;
wire [75:0] data_tra_mesC;
wire [75:0] data_tra_mesB;
wire [75:0] data_tra_mesA;
wire [15:0] data_initC;
wire [15:0] data_initB;
wire [15:0] data_initA;
wire [3:0] cmdC;
wire [3:0] cmdB;
wire [3:0] cmdA;
wire [4:0] addrC;
wire [4:0] addrB;
wire [4:0] addrA;
wor write_can_regTmrError;
wire [15:0] write_can_reg;
reg  [15:0] write_can_regA ;
reg  [15:0] write_can_regB ;
reg  [15:0] write_can_regC ;
reg  [4:0] can_tra_regA ;
reg  [4:0] can_tra_regB ;
reg  [4:0] can_tra_regC ;
reg  [15:0] tra_controlA ;
reg  [15:0] tra_controlB ;
reg  [15:0] tra_controlC ;
reg  [15:0] rst_irq ;
reg  [15:0] gen_dataA ;
reg  [15:0] gen_dataB ;
reg  [15:0] gen_dataC ;
reg  [75:0] trim_dataA ;
reg  [75:0] trim_dataB ;
reg  [75:0] trim_dataC ;
initial
  begin
    write_can_reg =  16'h0000;
    can_tra_reg =  5'h0;
    tra_control =  16'h8008;
    rst_irq =  16'h8070;
    gen_data =  16'h9C;
    trim_data =  {12'h555,64'hAAAAAAAAAAAAAAAA};
  end
assign write_can =  write_can_reg;
assign cmd =  {initi,write,reset_can,trim};

always @( * )
  begin
    case (cmdA)
      4'b1000 : write_can_regA =  data_initA;
      4'b0000 : 
        begin
          case (addrA)
            5'b01100 : write_can_regA =  {data_tra_mesA[74:64] ,5'h0};
            5'b01010 : write_can_regA =  {data_tra_mesA[63:56] ,data_tra_mesA[47:40] };
            5'b01001 : write_can_regA =  {data_tra_mesA[55:48] ,data_tra_mesA[39:32] };
            5'b01000 : write_can_regA =  {data_tra_mesA[7:0] ,data_tra_mesA[15:8] };
            5'b00111 : write_can_regA =  {data_tra_mesA[23:16] ,data_tra_mesA[31:24] };
            5'b01110 : write_can_regA =  gen_dataA;
            5'b01101 : write_can_regA =  tra_controlA;
            default : write_can_regA =  16'h0;
          endcase
        end
      4'b0001 : 
        begin
          case (addrA)
            5'b01100 : write_can_regA =  {trim_dataA[74:64] ,5'h0};
            5'b01010 : write_can_regA =  {trim_dataA[63:56] ,trim_dataA[47:40] };
            5'b01001 : write_can_regA =  {trim_dataA[55:48] ,trim_dataA[39:32] };
            5'b01000 : write_can_regA =  {trim_dataA[7:0] ,trim_dataA[15:8] };
            5'b00111 : write_can_regA =  {trim_dataA[23:16] ,trim_dataA[31:24] };
            5'b01110 : write_can_regA =  gen_dataA;
            5'b01101 : write_can_regA =  tra_controlA;
            default : write_can_regA =  16'h0;
          endcase
        end
      4'b0010 : 
        begin
          case (addrA)
            5'b01110 : write_can_regA =  gen_dataA;
            5'b10010 : write_can_regA =  rst_irqA;
            default : write_can_regA =  16'h0;
          endcase
        end
      default : write_can_regA =  16'h0;
    endcase
  end

always @( * )
  begin
    case (cmdB)
      4'b1000 : write_can_regB =  data_initB;
      4'b0000 : 
        begin
          case (addrB)
            5'b01100 : write_can_regB =  {data_tra_mesB[74:64] ,5'h0};
            5'b01010 : write_can_regB =  {data_tra_mesB[63:56] ,data_tra_mesB[47:40] };
            5'b01001 : write_can_regB =  {data_tra_mesB[55:48] ,data_tra_mesB[39:32] };
            5'b01000 : write_can_regB =  {data_tra_mesB[7:0] ,data_tra_mesB[15:8] };
            5'b00111 : write_can_regB =  {data_tra_mesB[23:16] ,data_tra_mesB[31:24] };
            5'b01110 : write_can_regB =  gen_dataB;
            5'b01101 : write_can_regB =  tra_controlB;
            default : write_can_regB =  16'h0;
          endcase
        end
      4'b0001 : 
        begin
          case (addrB)
            5'b01100 : write_can_regB =  {trim_dataB[74:64] ,5'h0};
            5'b01010 : write_can_regB =  {trim_dataB[63:56] ,trim_dataB[47:40] };
            5'b01001 : write_can_regB =  {trim_dataB[55:48] ,trim_dataB[39:32] };
            5'b01000 : write_can_regB =  {trim_dataB[7:0] ,trim_dataB[15:8] };
            5'b00111 : write_can_regB =  {trim_dataB[23:16] ,trim_dataB[31:24] };
            5'b01110 : write_can_regB =  gen_dataB;
            5'b01101 : write_can_regB =  tra_controlB;
            default : write_can_regB =  16'h0;
          endcase
        end
      4'b0010 : 
        begin
          case (addrB)
            5'b01110 : write_can_regB =  gen_dataB;
            5'b10010 : write_can_regB =  rst_irqB;
            default : write_can_regB =  16'h0;
          endcase
        end
      default : write_can_regB =  16'h0;
    endcase
  end

always @( * )
  begin
    case (cmdC)
      4'b1000 : write_can_regC =  data_initC;
      4'b0000 : 
        begin
          case (addrC)
            5'b01100 : write_can_regC =  {data_tra_mesC[74:64] ,5'h0};
            5'b01010 : write_can_regC =  {data_tra_mesC[63:56] ,data_tra_mesC[47:40] };
            5'b01001 : write_can_regC =  {data_tra_mesC[55:48] ,data_tra_mesC[39:32] };
            5'b01000 : write_can_regC =  {data_tra_mesC[7:0] ,data_tra_mesC[15:8] };
            5'b00111 : write_can_regC =  {data_tra_mesC[23:16] ,data_tra_mesC[31:24] };
            5'b01110 : write_can_regC =  gen_dataC;
            5'b01101 : write_can_regC =  tra_controlC;
            default : write_can_regC =  16'h0;
          endcase
        end
      4'b0001 : 
        begin
          case (addrC)
            5'b01100 : write_can_regC =  {trim_dataC[74:64] ,5'h0};
            5'b01010 : write_can_regC =  {trim_dataC[63:56] ,trim_dataC[47:40] };
            5'b01001 : write_can_regC =  {trim_dataC[55:48] ,trim_dataC[39:32] };
            5'b01000 : write_can_regC =  {trim_dataC[7:0] ,trim_dataC[15:8] };
            5'b00111 : write_can_regC =  {trim_dataC[23:16] ,trim_dataC[31:24] };
            5'b01110 : write_can_regC =  gen_dataC;
            5'b01101 : write_can_regC =  tra_controlC;
            default : write_can_regC =  16'h0;
          endcase
        end
      4'b0010 : 
        begin
          case (addrC)
            5'b01110 : write_can_regC =  gen_dataC;
            5'b10010 : write_can_regC =  rst_irqC;
            default : write_can_regC =  16'h0;
          endcase
        end
      default : write_can_regC =  16'h0;
    endcase
  end

majorityVoter #(.WIDTH(16)) write_can_regVoter (
    .inA(write_can_regA),
    .inB(write_can_regB),
    .inC(write_can_regC),
    .out(write_can_reg),
    .tmrErr(write_can_regTmrError)
    );

fanout #(.WIDTH(5)) addrFanout (
    .in(addr),
    .outA(addrA),
    .outB(addrB),
    .outC(addrC)
    );

fanout #(.WIDTH(4)) cmdFanout (
    .in(cmd),
    .outA(cmdA),
    .outB(cmdB),
    .outC(cmdC)
    );

fanout #(.WIDTH(16)) data_initFanout (
    .in(data_init),
    .outA(data_initA),
    .outB(data_initB),
    .outC(data_initC)
    );

fanout #(.WIDTH(76)) data_tra_mesFanout (
    .in(data_tra_mes),
    .outA(data_tra_mesA),
    .outB(data_tra_mesB),
    .outC(data_tra_mesC)
    );

fanout #(.WIDTH(16)) rst_irqFanout (
    .in(rst_irq),
    .outA(rst_irqA),
    .outB(rst_irqB),
    .outC(rst_irqC)
    );
endmodule

