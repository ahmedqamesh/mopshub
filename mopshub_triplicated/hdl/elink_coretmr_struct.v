//
// Module mopshub_triplicated.elink_coreTMR.struct
//
// Created:
//          by - dcs.dcs (localhost)
//          at - 09:18:03 05/10/22
//
// Generated by Mentor Graphics' HDL Designer(TM) 2019.4 (Build 4)
//


module elink_coreTMR( 
   // Port Declarations
   input   wire            clkA, 
   input   wire            clkB, 
   input   wire            clkC, 
   input   wire            rstA, 
   input   wire            rstB, 
   input   wire            rstC, 
   output  wire            rx_fifo_fullA, 
   output  wire            rx_fifo_fullB, 
   output  wire            rx_fifo_fullC, 
   input   wire    [75:0]  data_rec_uplinkA, 
   input   wire    [75:0]  data_rec_uplinkB, 
   input   wire    [75:0]  data_rec_uplinkC, 
   input   wire            start_write_elinkA, 
   input   wire            start_write_elinkB, 
   input   wire            start_write_elinkC, 
   output  wire            tx_efifo_fullA, 
   output  wire            tx_efifo_fullB, 
   output  wire            tx_efifo_fullC, 
   output  wire            irq_elink_recA, 
   output  wire            irq_elink_recB, 
   output  wire            irq_elink_recC, 
   output  wire            irq_elink_traA, 
   output  wire            irq_elink_traB, 
   output  wire            irq_elink_traC, 
   output  wire            end_write_elinkA, 
   output  wire            end_write_elinkB, 
   output  wire            end_write_elinkC, 
   input   wire            start_read_elinkA, 
   input   wire            start_read_elinkB, 
   input   wire            start_read_elinkC, 
   output  wire            end_read_elinkA, 
   output  wire            end_read_elinkB, 
   output  wire            end_read_elinkC, 
   input   wire    [1:0]   data_2bit_inA, 
   input   wire    [1:0]   data_2bit_inB, 
   input   wire    [1:0]   data_2bit_inC, 
   output  wire    [1:0]   data_2bit_outA, 
   output  wire    [1:0]   data_2bit_outB, 
   output  wire    [1:0]   data_2bit_outC, 
   input   wire            fifo_flushA, 
   input   wire            fifo_flushB, 
   input   wire            fifo_flushC, 
   output  wire            tx_data_rdyA, 
   output  wire            tx_data_rdyB, 
   output  wire            tx_data_rdyC, 
   output  wire            rx_data_rdyA, 
   output  wire            rx_data_rdyB, 
   output  wire            rx_data_rdyC, 
   output  wire    [75:0]  data_tra_outA, 
   output  wire    [75:0]  data_tra_outB, 
   output  wire    [75:0]  data_tra_outC, 
   output  wire            buffer_tra_enA, 
   output  wire            buffer_tra_enB, 
   output  wire            buffer_tra_enC, 
   output  wire    [31:0]  data_tra_spi_outA, 
   output  wire    [31:0]  data_tra_spi_outB, 
   output  wire    [31:0]  data_tra_spi_outC, 
   output  wire            irq_spi_traA, 
   output  wire            irq_spi_traB, 
   output  wire            irq_spi_traC, 
   output  wire            buffer_spi_tra_enA, 
   output  wire            buffer_spi_tra_enB, 
   output  wire            buffer_spi_tra_enC, 
   input   wire    [31:0]  data_rec_spi_inA, 
   input   wire    [31:0]  data_rec_spi_inB, 
   input   wire    [31:0]  data_rec_spi_inC, 
   output  wire            end_write_elink_spiA, 
   output  wire            end_write_elink_spiB, 
   output  wire            end_write_elink_spiC, 
   input   wire            start_write_elink_spiA, 
   input   wire            start_write_elink_spiB, 
   input   wire            start_write_elink_spiC, 
   input   wire            timeoutrstA, 
   input   wire            timeoutrstB, 
   input   wire            timeoutrstC, 
   input   wire            abortA, 
   input   wire            abortB, 
   input   wire            abortC
);


// Internal Declarations


// Local declarations

// Internal signal declarations
wire         timeoutrst_elink_traA;
wire         timeoutrst_elink_traB;
wire         timeoutrst_elink_traC;
wire  [4:0]  addr_writeA;
wire  [4:0]  addr_writeB;
wire  [4:0]  addr_writeC;
wire         cs_ewriteA;
wire         cs_ewriteB;
wire         cs_ewriteC;
wire  [9:0]  data_rec_10bitoutA;
wire  [9:0]  data_rec_10bitoutB;
wire  [9:0]  data_rec_10bitoutC;
wire  [7:0]  data_rec_8bitoutA;
wire  [7:0]  data_rec_8bitoutB;
wire  [7:0]  data_rec_8bitoutC;
wire  [1:0]  data_rec_delimiterA;
wire  [1:0]  data_rec_delimiterB;
wire  [1:0]  data_rec_delimiterC;
wire         cs_ereadA;
wire         cs_ereadB;
wire         cs_ereadC;
reg          fifo_data_packetA;
reg          fifo_data_packetB;
reg          fifo_data_packetC;
reg          fifo_data_sopA;
reg          fifo_data_sopB;
reg          fifo_data_sopC;
reg          fifo_data_eopA;
reg          fifo_data_eopB;
reg          fifo_data_eopC;
reg          spi_power_regA;
reg          spi_power_regB;
reg          spi_power_regC;
reg          spi_mon_regA;
reg          spi_mon_regB;
reg          spi_mon_regC;
reg          can_id_regA;
reg          can_id_regB;
reg          can_id_regC;
wire  [4:0]  addr_readA;
wire  [4:0]  addr_readB;
wire  [4:0]  addr_readC;
wire  [9:0]  data_tra_10bitinA;
wire  [9:0]  data_tra_10bitinB;
wire  [9:0]  data_tra_10bitinC;
wire         buffer_elink_enA;
wire         buffer_elink_enB;
wire         buffer_elink_enC;
wire  [5:0]  statedeb_recA;
wire  [5:0]  statedeb_recB;
wire  [5:0]  statedeb_recC;
wire  [6:0]  statedeb_traA;
wire  [6:0]  statedeb_traB;
wire  [6:0]  statedeb_traC;
wire         buffer_rec_enA;
wire         buffer_rec_enB;
wire         buffer_rec_enC;
wire         rx_fifo_emptyA;
wire         rx_fifo_emptyB;
wire         rx_fifo_emptyC;
wire         tx_fifo_emptyA;
wire         tx_fifo_emptyB;
wire         tx_fifo_emptyC;
wire         can_idA;
wire         can_idB;
wire         can_idC;
wire         spi_monA;
wire         spi_monB;
wire         spi_monC;
wire         buffer_elink_spi_enA;
wire         buffer_elink_spi_enB;
wire         buffer_elink_spi_enC;
wire         buffer_spi_rec_enA;
wire         buffer_spi_rec_enB;
wire         buffer_spi_rec_enC;
wire  [7:0]  data_rec_spi_8bitoutA;
wire  [7:0]  data_rec_spi_8bitoutB;
wire  [7:0]  data_rec_spi_8bitoutC;
wire  [1:0]  data_rec_spi_delimiterA;
wire  [1:0]  data_rec_spi_delimiterB;
wire  [1:0]  data_rec_spi_delimiterC;
wire         spi_modeA;
wire         spi_modeB;
wire         spi_modeC;
wire         spi_powerA;
wire         spi_powerB;
wire         spi_powerC;
wire         entimeout_elink_recA;
wire         entimeout_elink_recB;
wire         entimeout_elink_recC;
wire         entimeout_elink_traA;
wire         entimeout_elink_traB;
wire         entimeout_elink_traC;
reg   [31:0] time_limit_trimA;
reg   [31:0] time_limit_trimB;
reg   [31:0] time_limit_trimC;
wire  [7:0]  Kchar_commaA;
wire  [7:0]  Kchar_commaB;
wire  [7:0]  Kchar_commaC;
wire  [7:0]  Kchar_eopA;
wire  [7:0]  Kchar_eopB;
wire  [7:0]  Kchar_eopC;
wire  [7:0]  Kchar_sopA;
wire  [7:0]  Kchar_sopB;
wire  [7:0]  Kchar_sopC;
wire  [9:0]  COMMAnA;
wire  [9:0]  COMMAnB;
wire  [9:0]  COMMAnC;
wire  [9:0]  COMMApA;
wire  [9:0]  COMMApB;
wire  [9:0]  COMMApC;


// Instances 
buffer_rec_elinkTMR rec_elink_buf0( 
   .data_rec_inA        (data_rec_uplinkA), 
   .data_rec_inB        (data_rec_uplinkB), 
   .data_rec_inC        (data_rec_uplinkC), 
   .addrA               (addr_writeA), 
   .addrB               (addr_writeB), 
   .addrC               (addr_writeC), 
   .data_rec_8bitoutA   (data_rec_8bitoutA), 
   .data_rec_8bitoutB   (data_rec_8bitoutB), 
   .data_rec_8bitoutC   (data_rec_8bitoutC), 
   .data_rec_delimiterA (data_rec_delimiterA), 
   .data_rec_delimiterB (data_rec_delimiterB), 
   .data_rec_delimiterC (data_rec_delimiterC), 
   .Kchar_sopA          (Kchar_sopA), 
   .Kchar_sopB          (Kchar_sopB), 
   .Kchar_sopC          (Kchar_sopC), 
   .Kchar_eopA          (Kchar_eopA), 
   .Kchar_eopB          (Kchar_eopB), 
   .Kchar_eopC          (Kchar_eopC), 
   .Kchar_commaA        (Kchar_commaA), 
   .Kchar_commaB        (Kchar_commaB), 
   .Kchar_commaC        (Kchar_commaC)
); 

buffer_rec_spiTMR buffer_rec_spi0( 
   .data_rec_inA        (data_rec_spi_inA), 
   .data_rec_inB        (data_rec_spi_inB), 
   .data_rec_inC        (data_rec_spi_inC), 
   .addrA               (addr_writeA), 
   .addrB               (addr_writeB), 
   .addrC               (addr_writeC), 
   .data_rec_8bitoutA   (data_rec_spi_8bitoutA), 
   .data_rec_8bitoutB   (data_rec_spi_8bitoutB), 
   .data_rec_8bitoutC   (data_rec_spi_8bitoutC), 
   .data_rec_delimiterA (data_rec_spi_delimiterA), 
   .data_rec_delimiterB (data_rec_spi_delimiterB), 
   .data_rec_delimiterC (data_rec_spi_delimiterC), 
   .Kchar_sopA          (Kchar_sopA), 
   .Kchar_sopB          (Kchar_sopB), 
   .Kchar_sopC          (Kchar_sopC), 
   .Kchar_eopA          (Kchar_eopA), 
   .Kchar_eopB          (Kchar_eopB), 
   .Kchar_eopC          (Kchar_eopC), 
   .Kchar_commaA        (Kchar_commaA), 
   .Kchar_commaB        (Kchar_commaB), 
   .Kchar_commaC        (Kchar_commaC)
); 

buffer_tra_elinkTMR tra_elink_buf0( 
   .clkA             (clkA), 
   .clkB             (clkB), 
   .clkC             (clkC), 
   .data_tra_8bitinA (data_tra_10bitinA[7:0]), 
   .data_tra_8bitinB (data_tra_10bitinB[7:0]), 
   .data_tra_8bitinC (data_tra_10bitinC[7:0]), 
   .buffer_enA       (buffer_elink_enA), 
   .buffer_enB       (buffer_elink_enB), 
   .buffer_enC       (buffer_elink_enC), 
   .rstA             (rstA), 
   .rstB             (rstB), 
   .rstC             (rstC), 
   .addrA            (addr_readA), 
   .addrB            (addr_readB), 
   .addrC            (addr_readC), 
   .data_tra_outA    (data_tra_outA), 
   .data_tra_outB    (data_tra_outB), 
   .data_tra_outC    (data_tra_outC)
); 

buffer_tra_spiTMR buffer_tra_spi0( 
   .clkA             (clkA), 
   .clkB             (clkB), 
   .clkC             (clkC), 
   .data_tra_8bitinA (data_tra_10bitinA[7:0]), 
   .data_tra_8bitinB (data_tra_10bitinB[7:0]), 
   .data_tra_8bitinC (data_tra_10bitinC[7:0]), 
   .buffer_enA       (buffer_elink_spi_enA), 
   .buffer_enB       (buffer_elink_spi_enB), 
   .buffer_enC       (buffer_elink_spi_enC), 
   .rstA             (rstA), 
   .rstB             (rstB), 
   .rstC             (rstC), 
   .addrA            (addr_readA), 
   .addrB            (addr_readB), 
   .addrC            (addr_readC), 
   .data_tra_outA    (data_tra_spi_outA), 
   .data_tra_outB    (data_tra_spi_outB), 
   .data_tra_outC    (data_tra_spi_outC)
); 

elink_interface_rec_SMTMR elink_interface_rec_SM0( 
   .abortA                 (abortA), 
   .abortB                 (abortB), 
   .abortC                 (abortC), 
   .clkA                   (clkA), 
   .clkB                   (clkB), 
   .clkC                   (clkC), 
   .rstA                   (rstA), 
   .rstB                   (rstB), 
   .rstC                   (rstC), 
   .start_write_elinkA     (start_write_elinkA), 
   .start_write_elinkB     (start_write_elinkB), 
   .start_write_elinkC     (start_write_elinkC), 
   .start_write_elink_spiA (start_write_elink_spiA), 
   .start_write_elink_spiB (start_write_elink_spiB), 
   .start_write_elink_spiC (start_write_elink_spiC), 
   .timeoutrstA            (timeoutrstA), 
   .timeoutrstB            (timeoutrstB), 
   .timeoutrstC            (timeoutrstC), 
   .addr_writeA            (addr_writeA), 
   .addr_writeB            (addr_writeB), 
   .addr_writeC            (addr_writeC), 
   .buffer_rec_enA         (buffer_rec_enA), 
   .buffer_rec_enB         (buffer_rec_enB), 
   .buffer_rec_enC         (buffer_rec_enC), 
   .buffer_spi_rec_enA     (buffer_spi_rec_enA), 
   .buffer_spi_rec_enB     (buffer_spi_rec_enB), 
   .buffer_spi_rec_enC     (buffer_spi_rec_enC), 
   .cs_ewriteA             (cs_ewriteA), 
   .cs_ewriteB             (cs_ewriteB), 
   .cs_ewriteC             (cs_ewriteC), 
   .end_write_elinkA       (end_write_elinkA), 
   .end_write_elinkB       (end_write_elinkB), 
   .end_write_elinkC       (end_write_elinkC), 
   .end_write_elink_spiA   (end_write_elink_spiA), 
   .end_write_elink_spiB   (end_write_elink_spiB), 
   .end_write_elink_spiC   (end_write_elink_spiC), 
   .entimeoutA             (entimeout_elink_recA), 
   .entimeoutB             (entimeout_elink_recB), 
   .entimeoutC             (entimeout_elink_recC), 
   .irq_elink_recA         (irq_elink_recA), 
   .irq_elink_recB         (irq_elink_recB), 
   .irq_elink_recC         (irq_elink_recC), 
   .spi_modeA              (spi_modeA), 
   .spi_modeB              (spi_modeB), 
   .spi_modeC              (spi_modeC), 
   .statedebA              (statedeb_recA), 
   .statedebB              (statedeb_recB), 
   .statedebC              (statedeb_recC)
); 

elink_interface_tra_SMTMR elink_interface_tra_SM0( 
   .abortA               (abortA), 
   .abortB               (abortB), 
   .abortC               (abortC), 
   .can_idA              (can_idA), 
   .can_idB              (can_idB), 
   .can_idC              (can_idC), 
   .clkA                 (clkA), 
   .clkB                 (clkB), 
   .clkC                 (clkC), 
   .fifo_data_eopA       (fifo_data_eopA), 
   .fifo_data_eopB       (fifo_data_eopB), 
   .fifo_data_eopC       (fifo_data_eopC), 
   .fifo_data_sopA       (fifo_data_sopA), 
   .fifo_data_sopB       (fifo_data_sopB), 
   .fifo_data_sopC       (fifo_data_sopC), 
   .fifo_elink_rdyA      (rx_data_rdyA), 
   .fifo_elink_rdyB      (rx_data_rdyB), 
   .fifo_elink_rdyC      (rx_data_rdyC), 
   .fifo_packet_rdyA     (fifo_data_packetA), 
   .fifo_packet_rdyB     (fifo_data_packetB), 
   .fifo_packet_rdyC     (fifo_data_packetC), 
   .rstA                 (rstA), 
   .rstB                 (rstB), 
   .rstC                 (rstC), 
   .spi_monA             (spi_monA), 
   .spi_monB             (spi_monB), 
   .spi_monC             (spi_monC), 
   .start_read_elinkA    (start_read_elinkA), 
   .start_read_elinkB    (start_read_elinkB), 
   .start_read_elinkC    (start_read_elinkC), 
   .timeoutrstA          (timeoutrst_elink_traA), 
   .timeoutrstB          (timeoutrst_elink_traB), 
   .timeoutrstC          (timeoutrst_elink_traC), 
   .addr_readA           (addr_readA), 
   .addr_readB           (addr_readB), 
   .addr_readC           (addr_readC), 
   .buffer_elink_enA     (buffer_elink_enA), 
   .buffer_elink_enB     (buffer_elink_enB), 
   .buffer_elink_enC     (buffer_elink_enC), 
   .buffer_elink_spi_enA (buffer_elink_spi_enA), 
   .buffer_elink_spi_enB (buffer_elink_spi_enB), 
   .buffer_elink_spi_enC (buffer_elink_spi_enC), 
   .buffer_spi_enA       (buffer_spi_tra_enA), 
   .buffer_spi_enB       (buffer_spi_tra_enB), 
   .buffer_spi_enC       (buffer_spi_tra_enC), 
   .buffer_tra_enA       (buffer_tra_enA), 
   .buffer_tra_enB       (buffer_tra_enB), 
   .buffer_tra_enC       (buffer_tra_enC), 
   .cs_ereadA            (cs_ereadA), 
   .cs_ereadB            (cs_ereadB), 
   .cs_ereadC            (cs_ereadC), 
   .end_read_elinkA      (end_read_elinkA), 
   .end_read_elinkB      (end_read_elinkB), 
   .end_read_elinkC      (end_read_elinkC), 
   .entimeoutA           (entimeout_elink_traA), 
   .entimeoutB           (entimeout_elink_traB), 
   .entimeoutC           (entimeout_elink_traC), 
   .irq_elink_traA       (irq_elink_traA), 
   .irq_elink_traB       (irq_elink_traB), 
   .irq_elink_traC       (irq_elink_traC), 
   .irq_spi_traA         (irq_spi_traA), 
   .irq_spi_traB         (irq_spi_traB), 
   .irq_spi_traC         (irq_spi_traC), 
   .statedebA            (statedeb_traA), 
   .statedebB            (statedeb_traB), 
   .statedebC            (statedeb_traC)
); 

elink_to_fifoTMR elink_to_fifo0( 
   .fifo_flushA    (fifo_flushA), 
   .fifo_flushB    (fifo_flushB), 
   .fifo_flushC    (fifo_flushC), 
   .fifo_fullA     (rx_fifo_fullA), 
   .fifo_fullB     (rx_fifo_fullB), 
   .fifo_fullC     (rx_fifo_fullC), 
   .fifo_doutA     (data_tra_10bitinA), 
   .fifo_doutB     (data_tra_10bitinB), 
   .fifo_doutC     (data_tra_10bitinC), 
   .clkA           (clkA), 
   .clkB           (clkB), 
   .clkC           (clkC), 
   .fifo_rd_enA    (cs_ereadA), 
   .fifo_rd_enB    (cs_ereadB), 
   .fifo_rd_enC    (cs_ereadC), 
   .data_2bit_inA  (data_2bit_inA), 
   .data_2bit_inB  (data_2bit_inB), 
   .data_2bit_inC  (data_2bit_inC), 
   .rstA           (rstA), 
   .rstB           (rstB), 
   .rstC           (rstC), 
   .rx_fifo_emptyA (rx_fifo_emptyA), 
   .rx_fifo_emptyB (rx_fifo_emptyB), 
   .rx_fifo_emptyC (rx_fifo_emptyC), 
   .COMMAnA        (COMMAnA), 
   .COMMAnB        (COMMAnB), 
   .COMMAnC        (COMMAnC), 
   .COMMApA        (COMMApA), 
   .COMMApB        (COMMApB), 
   .COMMApC        (COMMApC), 
   .Kchar_commaA   (Kchar_commaA), 
   .Kchar_commaB   (Kchar_commaB), 
   .Kchar_commaC   (Kchar_commaC), 
   .Kchar_eopA     (Kchar_eopA), 
   .Kchar_eopB     (Kchar_eopB), 
   .Kchar_eopC     (Kchar_eopC), 
   .Kchar_sopA     (Kchar_sopA), 
   .Kchar_sopB     (Kchar_sopB), 
   .Kchar_sopC     (Kchar_sopC)
); 

fifo_to_elinkTMR fifo_to_elink0( 
   .fifo_wr_enA    (cs_ewriteA), 
   .fifo_wr_enB    (cs_ewriteB), 
   .fifo_wr_enC    (cs_ewriteC), 
   .clkA           (clkA), 
   .clkB           (clkB), 
   .clkC           (clkC), 
   .fifo_dinA      (data_rec_10bitoutA), 
   .fifo_dinB      (data_rec_10bitoutB), 
   .fifo_dinC      (data_rec_10bitoutC), 
   .fifo_flushA    (fifo_flushA), 
   .fifo_flushB    (fifo_flushB), 
   .fifo_flushC    (fifo_flushC), 
   .data_2bit_outA (data_2bit_outA), 
   .data_2bit_outB (data_2bit_outB), 
   .data_2bit_outC (data_2bit_outC), 
   .efifo_emptyA   (tx_fifo_emptyA), 
   .efifo_emptyB   (tx_fifo_emptyB), 
   .efifo_emptyC   (tx_fifo_emptyC), 
   .efifo_fullA    (tx_efifo_fullA), 
   .efifo_fullB    (tx_efifo_fullB), 
   .efifo_fullC    (tx_efifo_fullC), 
   .rstA           (rstA), 
   .rstB           (rstB), 
   .rstC           (rstC), 
   .Kchar_commaA   (Kchar_commaA), 
   .Kchar_commaB   (Kchar_commaB), 
   .Kchar_commaC   (Kchar_commaC), 
   .Kchar_sopA     (Kchar_sopA), 
   .Kchar_sopB     (Kchar_sopB), 
   .Kchar_sopC     (Kchar_sopC), 
   .Kchar_eopA     (Kchar_eopA), 
   .Kchar_eopB     (Kchar_eopB), 
   .Kchar_eopC     (Kchar_eopC), 
   .COMMAnA        (COMMAnA), 
   .COMMAnB        (COMMAnB), 
   .COMMAnC        (COMMAnC), 
   .COMMApA        (COMMApA), 
   .COMMApB        (COMMApB), 
   .COMMApC        (COMMApC)
); 

timout_rstTMR timout_rst1( 
   .clkA        (clkA), 
   .clkB        (clkB), 
   .clkC        (clkC), 
   .entimeoutA  (entimeout_elink_traA), 
   .entimeoutB  (entimeout_elink_traB), 
   .entimeoutC  (entimeout_elink_traC), 
   .time_limitA (time_limit_trimA), 
   .time_limitB (time_limit_trimB), 
   .time_limitC (time_limit_trimC), 
   .rstA        (rstA), 
   .rstB        (rstB), 
   .rstC        (rstC), 
   .timeoutrstA (timeoutrst_elink_traA), 
   .timeoutrstB (timeoutrst_elink_traB), 
   .timeoutrstC (timeoutrst_elink_traC)
); 

// HDL Embedded Text Block 1 eb1
initial
  begin
    fifo_data_sopA =  1'b0;
    fifo_data_eopA =  1'b0;
    spi_power_regA =  1'b0;
    spi_mon_regA =  1'b0;
    can_id_regA =  1'b0;
    time_limit_trimA =  32'd1000000;
  end
// HDL Embedded Text Block 2 eb2
initial
  begin
    fifo_data_sopB =  1'b0;
    fifo_data_eopB =  1'b0;
    spi_power_regB =  1'b0;
    spi_mon_regB =  1'b0;
    can_id_regB =  1'b0;
    time_limit_trimB =  32'd1000000;
  end
// HDL Embedded Text Block 3 eb3
initial
  begin
    fifo_data_sopC =  1'b0;
    fifo_data_eopC =  1'b0;
    spi_power_regC =  1'b0;
    spi_mon_regC =  1'b0;
    can_id_regC =  1'b0;
    time_limit_trimC =  32'd1000000;
  end
// HDL Embedded Text Block 4 eb4
assign can_idA =  can_id_regA;
assign can_idB =  can_id_regB;
assign can_idC =  can_id_regC;
assign spi_monA =  spi_mon_regA;
assign spi_monB =  spi_mon_regB;
assign spi_monC =  spi_mon_regC;
assign spi_powerA =  spi_power_regA;
assign spi_powerB =  spi_power_regB;
assign spi_powerC =  spi_power_regC;
// HDL Embedded Text Block 5 eb5
always @( * )
  begin
    if (cs_ereadA&&data_tra_10bitinA=={2'b10,Kchar_sopA})
      begin
        fifo_data_sopA =  1'b1;
        fifo_data_eopA =  1'b0;
        fifo_data_packetA =  1'b0;
        can_id_regA =  1'b0;
        spi_mon_regA =  1'b0;
        spi_power_regA =  1'b0;
      end
    else
      if (cs_ereadA&&data_tra_10bitinA!={2'b10,Kchar_sopA}&&data_tra_10bitinA!={2'b01,Kchar_eopA}&&data_tra_10bitinA[9:8] ==2'b00)
        begin
          fifo_data_sopA =  1'b0;
          fifo_data_eopA =  1'b0;
          fifo_data_packetA =  1'b1;
          if (addr_readA==5'h02)
            case (data_tra_10bitinA[7:0] )
              8'h080 : 
                begin
                  spi_mon_regA =  1'b1;
                  can_id_regA =  1'b0;
                  spi_power_regA =  1'b0;
                end
              8'h090 : 
                begin
                  spi_mon_regA =  1'b0;
                  can_id_regA =  1'b0;
                  spi_power_regA =  1'b1;
                end
              8'h000 : 
                begin
                  can_id_regA =  1'b1;
                  spi_mon_regA =  1'b0;
                  spi_power_regA =  1'b1;
                end
              default : 
                begin
                  can_id_regA =  1'b1;
                  spi_mon_regA =  1'b0;
                  spi_power_regA =  1'b0;
                end
            endcase
          else
            begin
              can_id_regA =  1'b0;
              spi_mon_regA =  1'b0;
              spi_power_regA =  1'b0;
            end
        end
      else
        if (cs_ereadA&&data_tra_10bitinA=={2'b01,Kchar_eopA})
          begin
            fifo_data_sopA =  1'b0;
            fifo_data_eopA =  1'b1;
            fifo_data_packetA =  1'b0;
            can_id_regA =  1'b0;
            spi_mon_regA =  1'b0;
            spi_power_regA =  1'b0;
          end
        else
          begin
            can_id_regA =  1'b0;
            spi_mon_regA =  1'b0;
            spi_power_regA =  1'b0;
            fifo_data_sopA =  1'b0;
            fifo_data_eopA =  1'b0;
            fifo_data_packetA =  1'b0;
          end
  end
// HDL Embedded Text Block 6 eb6
always @( * )
  begin
    if (cs_ereadB&&data_tra_10bitinB=={2'b10,Kchar_sopB})
      begin
        fifo_data_sopB =  1'b1;
        fifo_data_eopB =  1'b0;
        fifo_data_packetB =  1'b0;
        can_id_regB =  1'b0;
        spi_mon_regB =  1'b0;
        spi_power_regB =  1'b0;
      end
    else
      if (cs_ereadB&&data_tra_10bitinB!={2'b10,Kchar_sopB}&&data_tra_10bitinB!={2'b01,Kchar_eopB}&&data_tra_10bitinB[9:8] ==2'b00)
        begin
          fifo_data_sopB =  1'b0;
          fifo_data_eopB =  1'b0;
          fifo_data_packetB =  1'b1;
          if (addr_readB==5'h02)
            case (data_tra_10bitinB[7:0] )
              8'h080 : 
                begin
                  spi_mon_regB =  1'b1;
                  can_id_regB =  1'b0;
                  spi_power_regB =  1'b0;
                end
              8'h090 : 
                begin
                  spi_mon_regB =  1'b0;
                  can_id_regB =  1'b0;
                  spi_power_regB =  1'b1;
                end
              8'h000 : 
                begin
                  can_id_regB =  1'b1;
                  spi_mon_regB =  1'b0;
                  spi_power_regB =  1'b1;
                end
              default : 
                begin
                  can_id_regB =  1'b1;
                  spi_mon_regB =  1'b0;
                  spi_power_regB =  1'b0;
                end
            endcase
          else
            begin
              can_id_regB =  1'b0;
              spi_mon_regB =  1'b0;
              spi_power_regB =  1'b0;
            end
        end
      else
        if (cs_ereadB&&data_tra_10bitinB=={2'b01,Kchar_eopB})
          begin
            fifo_data_sopB =  1'b0;
            fifo_data_eopB =  1'b1;
            fifo_data_packetB =  1'b0;
            can_id_regB =  1'b0;
            spi_mon_regB =  1'b0;
            spi_power_regB =  1'b0;
          end
        else
          begin
            can_id_regB =  1'b0;
            spi_mon_regB =  1'b0;
            spi_power_regB =  1'b0;
            fifo_data_sopB =  1'b0;
            fifo_data_eopB =  1'b0;
            fifo_data_packetB =  1'b0;
          end
  end
// HDL Embedded Text Block 7 eb7
always @( * )
  begin
    if (cs_ereadC&&data_tra_10bitinC=={2'b10,Kchar_sopC})
      begin
        fifo_data_sopC =  1'b1;
        fifo_data_eopC =  1'b0;
        fifo_data_packetC =  1'b0;
        can_id_regC =  1'b0;
        spi_mon_regC =  1'b0;
        spi_power_regC =  1'b0;
      end
    else
      if (cs_ereadC&&data_tra_10bitinC!={2'b10,Kchar_sopC}&&data_tra_10bitinC!={2'b01,Kchar_eopC}&&data_tra_10bitinC[9:8] ==2'b00)
        begin
          fifo_data_sopC =  1'b0;
          fifo_data_eopC =  1'b0;
          fifo_data_packetC =  1'b1;
          if (addr_readC==5'h02)
            case (data_tra_10bitinC[7:0] )
              8'h080 : 
                begin
                  spi_mon_regC =  1'b1;
                  can_id_regC =  1'b0;
                  spi_power_regC =  1'b0;
                end
              8'h090 : 
                begin
                  spi_mon_regC =  1'b0;
                  can_id_regC =  1'b0;
                  spi_power_regC =  1'b1;
                end
              8'h000 : 
                begin
                  can_id_regC =  1'b1;
                  spi_mon_regC =  1'b0;
                  spi_power_regC =  1'b1;
                end
              default : 
                begin
                  can_id_regC =  1'b1;
                  spi_mon_regC =  1'b0;
                  spi_power_regC =  1'b0;
                end
            endcase
          else
            begin
              can_id_regC =  1'b0;
              spi_mon_regC =  1'b0;
              spi_power_regC =  1'b0;
            end
        end
      else
        if (cs_ereadC&&data_tra_10bitinC=={2'b01,Kchar_eopC})
          begin
            fifo_data_sopC =  1'b0;
            fifo_data_eopC =  1'b1;
            fifo_data_packetC =  1'b0;
            can_id_regC =  1'b0;
            spi_mon_regC =  1'b0;
            spi_power_regC =  1'b0;
          end
        else
          begin
            can_id_regC =  1'b0;
            spi_mon_regC =  1'b0;
            spi_power_regC =  1'b0;
            fifo_data_sopC =  1'b0;
            fifo_data_eopC =  1'b0;
            fifo_data_packetC =  1'b0;
          end
  end
// HDL Embedded Text Block 8 eb8
assign rx_data_rdyA =  !rx_fifo_emptyA;
assign rx_data_rdyB =  !rx_fifo_emptyB;
assign rx_data_rdyC =  !rx_fifo_emptyC;
assign tx_data_rdyA =  !tx_fifo_emptyA;
assign tx_data_rdyB =  !tx_fifo_emptyB;
assign tx_data_rdyC =  !tx_fifo_emptyC;
assign data_rec_10bitoutA =  (spi_modeA==1) ? {data_rec_spi_delimiterA,data_rec_spi_8bitoutA} : {data_rec_delimiterA,data_rec_8bitoutA};
assign data_rec_10bitoutB =  (spi_modeB==1) ? {data_rec_spi_delimiterB,data_rec_spi_8bitoutB} : {data_rec_delimiterB,data_rec_8bitoutB};
assign data_rec_10bitoutC =  (spi_modeC==1) ? {data_rec_spi_delimiterC,data_rec_spi_8bitoutC} : {data_rec_delimiterC,data_rec_8bitoutC};
assign Kchar_commaA =  8'b10111100;
assign Kchar_commaB =  8'b10111100;
assign Kchar_commaC =  8'b10111100;
assign Kchar_eopA =  8'b11011100;
assign Kchar_eopB =  8'b11011100;
assign Kchar_eopC =  8'b11011100;
assign Kchar_sopA =  8'b00111100;
assign Kchar_sopB =  8'b00111100;
assign Kchar_sopC =  8'b00111100;
assign COMMAnA =  10'b1100000101;
assign COMMAnB =  10'b1100000101;
assign COMMAnC =  10'b1100000101;
assign COMMApA =  10'b0011111010;
assign COMMApB =  10'b0011111010;
assign COMMApC =  10'b0011111010;

endmodule // elink_coreTMR

