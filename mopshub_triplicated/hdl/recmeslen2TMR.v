/****************************************************************************************************
 *                          ! THIS FILE WAS AUTO-GENERATED BY TMRG TOOL !                           *
 *                                   ! DO NOT EDIT IT MANUALLY !                                    *
 *                                                                                                  *
 * file    : ./output/recmeslen2TMR.v                                                               *
 *                                                                                                  *
 * user    : lucas                                                                                  *
 * host    : DESKTOP-BFDSFP2                                                                        *
 * date    : 05/12/2022 13:28:32                                                                    *
 *                                                                                                  *
 * workdir : /mnt/c/Users/Lucas/Documents/GitHub/mopshub_triplicated/triplicated/mopshub_top_board_16/hdl *
 * cmd     : /mnt/c/Users/Lucas/Documents/GitHub/mopshub_triplicated/tmrg-master/bin/tmrg -vv -c    *
 *           tmrg.cfg                                                                               *
 * tmrg rev: b25f042058e4e97751df2a0933c24aeadd5a78a5                                               *
 *                                                                                                  *
 * src file: recmeslen2.v                                                                           *
 *           Git SHA           : b25f042058e4e97751df2a0933c24aeadd5a78a5 (?? recmeslen2.v)         *
 *           Modification time : 2022-11-10 21:22:58                                                *
 *           File Size         : 2643                                                               *
 *           MD5 hash          : b786485fa4d28179e12660f57b5d131e                                   *
 *                                                                                                  *
 ****************************************************************************************************/

module recmeslen2TMR(
  input wire  clock ,
  input wire  activ ,
  input wire  reset ,
  input wire [2:0] setrmlen ,
  output wire [3:0] rmlb 
);
wire [2:0] setrmlenC;
wire [2:0] setrmlenB;
wire [2:0] setrmlenA;
wire [3:0] rmlbC;
wire [3:0] rmlbB;
wire [3:0] rmlbA;
wire resetC;
wire resetB;
wire resetA;
wire edgedVC;
wire edgedVB;
wire edgedVA;
wire clockC;
wire clockB;
wire clockA;
wire activC;
wire activB;
wire activA;
wor rmlb_regTmrError;
wire [3:0] rmlb_reg;
wor edgedTmrError;
wire edged;
reg  edgedA ;
reg  edgedB ;
reg  edgedC ;
reg  [3:0] rmlb_regA ;
reg  [3:0] rmlb_regB ;
reg  [3:0] rmlb_regC ;
assign rmlb =  rmlb_reg;
wire edgedV =  edged;

always @( posedge clockA )
  begin
    if (resetA==1'b0)
      begin
        rmlb_regA <= 4'b0000;
        edgedA =  1'b0;
      end
    else
      begin
        edgedA =  edgedVA;
        rmlb_regA <= rmlbA;
        if (activA==1'b1)
          begin
            if (edgedVA==1'b0)
              begin
                edgedA =  1'b1;
                if (setrmlenA==3'd1)
                  rmlb_regA[0]  <= 1'b1;
                else
                  if (setrmlenA==3'd2)
                    rmlb_regA[1]  <= 1'b1;
                  else
                    if (setrmlenA==3'd3)
                      rmlb_regA[2]  <= 1'b1;
                    else
                      if (setrmlenA==3'd4)
                        rmlb_regA[3]  <= 1'b1;
              end
            else
              begin
                edgedA =  1'b1;
              end
          end
        else
          edgedA =  1'b0;
      end
  end

always @( posedge clockB )
  begin
    if (resetB==1'b0)
      begin
        rmlb_regB <= 4'b0000;
        edgedB =  1'b0;
      end
    else
      begin
        edgedB =  edgedVB;
        rmlb_regB <= rmlbB;
        if (activB==1'b1)
          begin
            if (edgedVB==1'b0)
              begin
                edgedB =  1'b1;
                if (setrmlenB==3'd1)
                  rmlb_regB[0]  <= 1'b1;
                else
                  if (setrmlenB==3'd2)
                    rmlb_regB[1]  <= 1'b1;
                  else
                    if (setrmlenB==3'd3)
                      rmlb_regB[2]  <= 1'b1;
                    else
                      if (setrmlenB==3'd4)
                        rmlb_regB[3]  <= 1'b1;
              end
            else
              begin
                edgedB =  1'b1;
              end
          end
        else
          edgedB =  1'b0;
      end
  end

always @( posedge clockC )
  begin
    if (resetC==1'b0)
      begin
        rmlb_regC <= 4'b0000;
        edgedC =  1'b0;
      end
    else
      begin
        edgedC =  edgedVC;
        rmlb_regC <= rmlbC;
        if (activC==1'b1)
          begin
            if (edgedVC==1'b0)
              begin
                edgedC =  1'b1;
                if (setrmlenC==3'd1)
                  rmlb_regC[0]  <= 1'b1;
                else
                  if (setrmlenC==3'd2)
                    rmlb_regC[1]  <= 1'b1;
                  else
                    if (setrmlenC==3'd3)
                      rmlb_regC[2]  <= 1'b1;
                    else
                      if (setrmlenC==3'd4)
                        rmlb_regC[3]  <= 1'b1;
              end
            else
              begin
                edgedC =  1'b1;
              end
          end
        else
          edgedC =  1'b0;
      end
  end

majorityVoter edgedVoter (
    .inA(edgedA),
    .inB(edgedB),
    .inC(edgedC),
    .out(edged),
    .tmrErr(edgedTmrError)
    );

majorityVoter #(.WIDTH(4)) rmlb_regVoter (
    .inA(rmlb_regA),
    .inB(rmlb_regB),
    .inC(rmlb_regC),
    .out(rmlb_reg),
    .tmrErr(rmlb_regTmrError)
    );

fanout activFanout (
    .in(activ),
    .outA(activA),
    .outB(activB),
    .outC(activC)
    );

fanout clockFanout (
    .in(clock),
    .outA(clockA),
    .outB(clockB),
    .outC(clockC)
    );

fanout edgedVFanout (
    .in(edgedV),
    .outA(edgedVA),
    .outB(edgedVB),
    .outC(edgedVC)
    );

fanout resetFanout (
    .in(reset),
    .outA(resetA),
    .outB(resetB),
    .outC(resetC)
    );

fanout #(.WIDTH(4)) rmlbFanout (
    .in(rmlb),
    .outA(rmlbA),
    .outB(rmlbB),
    .outC(rmlbC)
    );

fanout #(.WIDTH(3)) setrmlenFanout (
    .in(setrmlen),
    .outA(setrmlenA),
    .outB(setrmlenB),
    .outC(setrmlenC)
    );
endmodule

