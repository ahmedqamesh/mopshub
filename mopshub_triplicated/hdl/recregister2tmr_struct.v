//
// Module mopshub_triplicated.recregister2TMR.struct
//
// Created:
//          by - dcs.dcs (localhost)
//          at - 09:18:06 05/10/22
//
// Generated by Mentor Graphics' HDL Designer(TM) 2019.4 (Build 4)
//


module recregister2TMR( 
   // Port Declarations
   input   wire            clkA, 
   input   wire            clkB, 
   input   wire            clkC, 
   input   wire            rstA, 
   input   wire            rstB, 
   input   wire            rstC, 
   input   wire            canA, 
   input   wire            canB, 
   input   wire            canC, 
   input   wire    [7:0]   regin1A, 
   input   wire    [7:0]   regin1B, 
   input   wire    [7:0]   regin1C, 
   input   wire    [7:0]   regin2A, 
   input   wire    [7:0]   regin2B, 
   input   wire    [7:0]   regin2C, 
   output  wire    [15:0]  regoutA, 
   output  wire    [15:0]  regoutB, 
   output  wire    [15:0]  regoutC
);


// Internal Declarations


// Local declarations

// Internal signal declarations
wor          register_iTmrErrorC;
wire  [15:0] register_iVotedC;
wor          register_iTmrErrorB;
wire  [15:0] register_iVotedB;
wor          register_iTmrErrorA;
wire  [15:0] register_iVotedA;
reg   [15:0] register_iA;
reg   [15:0] register_iB;
reg   [15:0] register_iC;


// Instances 
majorityVoter #(16) register_iVoterA( 
   .inA    (register_iA), 
   .inB    (register_iB), 
   .inC    (register_iC), 
   .out    (register_iVotedA), 
   .tmrErr (register_iTmrErrorA)
); 

majorityVoter #(16) register_iVoterB( 
   .inA    (register_iA), 
   .inB    (register_iB), 
   .inC    (register_iC), 
   .out    (register_iVotedB), 
   .tmrErr (register_iTmrErrorB)
); 

majorityVoter #(16) register_iVoterC( 
   .inA    (register_iA), 
   .inB    (register_iB), 
   .inC    (register_iC), 
   .out    (register_iVotedC), 
   .tmrErr (register_iTmrErrorC)
); 

// HDL Embedded Text Block 1 eb1
assign regoutA =  register_iVotedA;
assign regoutB =  register_iVotedB;
assign regoutC =  register_iVotedC;
// HDL Embedded Text Block 2 eb2
always @( posedge clkA )
  begin
    if (rstA==1'b0)
      begin
        register_iA <= 16'd0;
      end
    else
      if (canA==1'b1)
        begin
          register_iA[15:8]  <= regin1A[7:0] ;
          register_iA[7:0]  <= regin2A[7:0] ;
        end
      else
        register_iA <= register_iVotedA;
  end
// HDL Embedded Text Block 3 eb3
always @( posedge clkB )
  begin
    if (rstB==1'b0)
      begin
        register_iB <= 16'd0;
      end
    else
      if (canB==1'b1)
        begin
          register_iB[15:8]  <= regin1B[7:0] ;
          register_iB[7:0]  <= regin2B[7:0] ;
        end
      else
        register_iB <= register_iVotedB;
  end
// HDL Embedded Text Block 4 eb4
always @( posedge clkC )
  begin
    if (rstC==1'b0)
      begin
        register_iC <= 16'd0;
      end
    else
      if (canC==1'b1)
        begin
          register_iC[15:8]  <= regin1C[7:0] ;
          register_iC[7:0]  <= regin2C[7:0] ;
        end
      else
        register_iC <= register_iVotedC;
  end

endmodule // recregister2TMR

