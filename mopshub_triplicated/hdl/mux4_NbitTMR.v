/****************************************************************************************************
 *                          ! THIS FILE WAS AUTO-GENERATED BY TMRG TOOL !                           *
 *                                   ! DO NOT EDIT IT MANUALLY !                                    *
 *                                                                                                  *
 * file    : ./output/mux4_NbitTMR.v                                                                *
 *                                                                                                  *
 * user    : lucas                                                                                  *
 * host    : DESKTOP-BFDSFP2                                                                        *
 * date    : 05/12/2022 13:28:28                                                                    *
 *                                                                                                  *
 * workdir : /mnt/c/Users/Lucas/Documents/GitHub/mopshub_triplicated/triplicated/mopshub_top_board_16/hdl *
 * cmd     : /mnt/c/Users/Lucas/Documents/GitHub/mopshub_triplicated/tmrg-master/bin/tmrg -vv -c    *
 *           tmrg.cfg                                                                               *
 * tmrg rev: b25f042058e4e97751df2a0933c24aeadd5a78a5                                               *
 *                                                                                                  *
 * src file: mux4_Nbit.v                                                                            *
 *           Git SHA           : b25f042058e4e97751df2a0933c24aeadd5a78a5 (?? mux4_Nbit.v)          *
 *           Modification time : 2022-12-04 14:34:40                                                *
 *           File Size         : 1228                                                               *
 *           MD5 hash          : 0588e17249bcbb31ee62083341bf2241                                   *
 *                                                                                                  *
 ****************************************************************************************************/

`resetall 
`timescale  1ns/10ps
module mux4_NbitTMR(
  input wire  clk ,
  input wire  rst ,
  input wire [7:0] data0 ,
  input wire [7:0] data1 ,
  input wire [7:0] data2 ,
  input wire [7:0] data3 ,
  input wire [1:0] sel ,
  output wire [7:0] data_out ,
  input wire [7:0] def_value 
);
wire [1:0] selC;
wire [1:0] selB;
wire [1:0] selA;
wire rstC;
wire rstB;
wire rstA;
wire [7:0] def_valueC;
wire [7:0] def_valueB;
wire [7:0] def_valueA;
wire [7:0] data3C;
wire [7:0] data3B;
wire [7:0] data3A;
wire [7:0] data2C;
wire [7:0] data2B;
wire [7:0] data2A;
wire [7:0] data1C;
wire [7:0] data1B;
wire [7:0] data1A;
wire [7:0] data0C;
wire [7:0] data0B;
wire [7:0] data0A;
wire clkC;
wire clkB;
wire clkA;
wor data_out_regTmrError;
wire [7:0] data_out_reg;
reg  [7:0] data_out_regA ;
reg  [7:0] data_out_regB ;
reg  [7:0] data_out_regC ;
assign data_out =  data_out_reg;
wire [7:0] data_out_regV =  data_out_reg;

always @( posedge clkA )
  if (!rstA)
    data_out_regA <= def_valueA;
  else
    begin
      case (selA)
        2'b00 : data_out_regA <= data0A;
        2'b01 : data_out_regA <= data1A;
        2'b10 : data_out_regA <= data2A;
        2'b11 : data_out_regA <= data3A;
        default data_out_regA <= def_valueA; 
      endcase
    end

always @( posedge clkB )
  if (!rstB)
    data_out_regB <= def_valueB;
  else
    begin
      case (selB)
        2'b00 : data_out_regB <= data0B;
        2'b01 : data_out_regB <= data1B;
        2'b10 : data_out_regB <= data2B;
        2'b11 : data_out_regB <= data3B;
        default data_out_regB <= def_valueB; 
      endcase
    end

always @( posedge clkC )
  if (!rstC)
    data_out_regC <= def_valueC;
  else
    begin
      case (selC)
        2'b00 : data_out_regC <= data0C;
        2'b01 : data_out_regC <= data1C;
        2'b10 : data_out_regC <= data2C;
        2'b11 : data_out_regC <= data3C;
        default data_out_regC <= def_valueC; 
      endcase
    end

majorityVoter #(.WIDTH(8)) data_out_regVoter (
    .inA(data_out_regA),
    .inB(data_out_regB),
    .inC(data_out_regC),
    .out(data_out_reg),
    .tmrErr(data_out_regTmrError)
    );

fanout clkFanout (
    .in(clk),
    .outA(clkA),
    .outB(clkB),
    .outC(clkC)
    );

fanout #(.WIDTH(8)) data0Fanout (
    .in(data0),
    .outA(data0A),
    .outB(data0B),
    .outC(data0C)
    );

fanout #(.WIDTH(8)) data1Fanout (
    .in(data1),
    .outA(data1A),
    .outB(data1B),
    .outC(data1C)
    );

fanout #(.WIDTH(8)) data2Fanout (
    .in(data2),
    .outA(data2A),
    .outB(data2B),
    .outC(data2C)
    );

fanout #(.WIDTH(8)) data3Fanout (
    .in(data3),
    .outA(data3A),
    .outB(data3B),
    .outC(data3C)
    );

fanout #(.WIDTH(8)) def_valueFanout (
    .in(def_value),
    .outA(def_valueA),
    .outB(def_valueB),
    .outC(def_valueC)
    );

fanout rstFanout (
    .in(rst),
    .outA(rstA),
    .outB(rstB),
    .outC(rstC)
    );

fanout #(.WIDTH(2)) selFanout (
    .in(sel),
    .outA(selA),
    .outB(selB),
    .outC(selC)
    );
endmodule

