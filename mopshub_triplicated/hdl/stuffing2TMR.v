/****************************************************************************************************
 *                          ! THIS FILE WAS AUTO-GENERATED BY TMRG TOOL !                           *
 *                                   ! DO NOT EDIT IT MANUALLY !                                    *
 *                                                                                                  *
 * file    : ./output/stuffing2TMR.v                                                                *
 *                                                                                                  *
 * user    : lucas                                                                                  *
 * host    : DESKTOP-BFDSFP2                                                                        *
 * date    : 05/12/2022 13:28:35                                                                    *
 *                                                                                                  *
 * workdir : /mnt/c/Users/Lucas/Documents/GitHub/mopshub_triplicated/triplicated/mopshub_top_board_16/hdl *
 * cmd     : /mnt/c/Users/Lucas/Documents/GitHub/mopshub_triplicated/tmrg-master/bin/tmrg -vv -c    *
 *           tmrg.cfg                                                                               *
 * tmrg rev: b25f042058e4e97751df2a0933c24aeadd5a78a5                                               *
 *                                                                                                  *
 * src file: stuffing2.v                                                                            *
 *           Git SHA           : b25f042058e4e97751df2a0933c24aeadd5a78a5 (?? stuffing2.v)          *
 *           Modification time : 2022-11-11 13:15:34.029213                                         *
 *           File Size         : 4699                                                               *
 *           MD5 hash          : 6a0d9317eb5cfac5ecdfbb6f1e844aa7                                   *
 *                                                                                                  *
 ****************************************************************************************************/

module stuffing2TMR(
  input wire  clock ,
  input wire  bitin ,
  input wire  activ ,
  input wire  reset ,
  input wire  direct ,
  input wire  setdom ,
  input wire  setrec ,
  output wire  bitout ,
  output wire  stuff 
);
wire stuffC;
wire stuffB;
wire stuffA;
wire setrecC;
wire setrecB;
wire setrecA;
wire setdomC;
wire setdomB;
wire setdomA;
wire resetC;
wire resetB;
wire resetA;
wire edgedVC;
wire edgedVB;
wire edgedVA;
wire directC;
wire directB;
wire directA;
wire [2:0] countVC;
wire [2:0] countVB;
wire [2:0] countVA;
wire clockC;
wire clockB;
wire clockA;
wire bitoutC;
wire bitoutB;
wire bitoutA;
wire bitinC;
wire bitinB;
wire bitinA;
wire activC;
wire activB;
wire activA;
wire BufVC;
wire BufVB;
wire BufVA;
wor stuff_iTmrError;
wire stuff_i;
wor edgedTmrError;
wire edged;
wor countTmrError;
wire [2:0] count;
wor bitout_iTmrError;
wire bitout_i;
wor BufTmrError;
wire Buf;
reg  [2:0] countA ;
reg  [2:0] countB ;
reg  [2:0] countC ;
reg  BufA ;
reg  BufB ;
reg  BufC ;
reg  edgedA ;
reg  edgedB ;
reg  edgedC ;
reg  bitout_iA ;
reg  bitout_iB ;
reg  bitout_iC ;
reg  stuff_iA ;
reg  stuff_iB ;
reg  stuff_iC ;
assign bitout =  bitout_i;
assign stuff =  stuff_i;
wire edgedV =  edged;
wire BufV =  Buf;
wire [2:0] countV =  count;

always @( posedge clockA )
  begin
    if (resetA==1'b0)
      begin
        countA =  3'd0;
        BufA =  1'b0;
        bitout_iA <= 1'b1;
        stuff_iA <= 1'b0;
        edgedA =  1'b0;
      end
    else
      begin
        countA =  countVA;
        BufA =  BufVA;
        edgedA =  edgedVA;
        stuff_iA <= stuffA;
        bitout_iA <= bitoutA;
        if (activA==1'b1)
          begin
            if (edgedVA==1'b0)
              begin
                edgedA =  1'b1;
                if (directA==1'b1)
                  begin
                    bitout_iA <= bitinA;
                    stuff_iA <= 1'b0;
                  end
                else
                  if (setdomA==1'b1)
                    begin
                      bitout_iA <= 1'b0;
                      stuff_iA <= 1'b0;
                    end
                  else
                    if (setrecA==1'b1)
                      begin
                        bitout_iA <= 1'b1;
                        stuff_iA <= 1'b0;
                      end
                    else
                      if ((countVA==3'd0)||((bitinA!=BufVA)&&(countVA!=5)))
                        begin
                          BufA =  bitinA;
                          countA =  3'd1;
                          bitout_iA <= bitinA;
                          stuff_iA <= 1'b0;
                        end
                      else
                        if (bitinA==BufVA&&countVA!=5)
                          begin
                            countA =  countVA+3'd1;
                            bitout_iA <= bitinA;
                            stuff_iA <= 1'b0;
                          end
                        else
                          if (countVA==3'd5)
                            begin
                              countA =  3'd1;
                              BufA =  ~BufA;
                              bitout_iA <= BufA;
                              stuff_iA <= 1'b1;
                            end
              end
            else
              edgedA =  1'b1;
          end
        else
          edgedA =  1'b0;
      end
  end

always @( posedge clockB )
  begin
    if (resetB==1'b0)
      begin
        countB =  3'd0;
        BufB =  1'b0;
        bitout_iB <= 1'b1;
        stuff_iB <= 1'b0;
        edgedB =  1'b0;
      end
    else
      begin
        countB =  countVB;
        BufB =  BufVB;
        edgedB =  edgedVB;
        stuff_iB <= stuffB;
        bitout_iB <= bitoutB;
        if (activB==1'b1)
          begin
            if (edgedVB==1'b0)
              begin
                edgedB =  1'b1;
                if (directB==1'b1)
                  begin
                    bitout_iB <= bitinB;
                    stuff_iB <= 1'b0;
                  end
                else
                  if (setdomB==1'b1)
                    begin
                      bitout_iB <= 1'b0;
                      stuff_iB <= 1'b0;
                    end
                  else
                    if (setrecB==1'b1)
                      begin
                        bitout_iB <= 1'b1;
                        stuff_iB <= 1'b0;
                      end
                    else
                      if ((countVB==3'd0)||((bitinB!=BufVB)&&(countVB!=5)))
                        begin
                          BufB =  bitinB;
                          countB =  3'd1;
                          bitout_iB <= bitinB;
                          stuff_iB <= 1'b0;
                        end
                      else
                        if (bitinB==BufVB&&countVB!=5)
                          begin
                            countB =  countVB+3'd1;
                            bitout_iB <= bitinB;
                            stuff_iB <= 1'b0;
                          end
                        else
                          if (countVB==3'd5)
                            begin
                              countB =  3'd1;
                              BufB =  ~BufB;
                              bitout_iB <= BufB;
                              stuff_iB <= 1'b1;
                            end
              end
            else
              edgedB =  1'b1;
          end
        else
          edgedB =  1'b0;
      end
  end

always @( posedge clockC )
  begin
    if (resetC==1'b0)
      begin
        countC =  3'd0;
        BufC =  1'b0;
        bitout_iC <= 1'b1;
        stuff_iC <= 1'b0;
        edgedC =  1'b0;
      end
    else
      begin
        countC =  countVC;
        BufC =  BufVC;
        edgedC =  edgedVC;
        stuff_iC <= stuffC;
        bitout_iC <= bitoutC;
        if (activC==1'b1)
          begin
            if (edgedVC==1'b0)
              begin
                edgedC =  1'b1;
                if (directC==1'b1)
                  begin
                    bitout_iC <= bitinC;
                    stuff_iC <= 1'b0;
                  end
                else
                  if (setdomC==1'b1)
                    begin
                      bitout_iC <= 1'b0;
                      stuff_iC <= 1'b0;
                    end
                  else
                    if (setrecC==1'b1)
                      begin
                        bitout_iC <= 1'b1;
                        stuff_iC <= 1'b0;
                      end
                    else
                      if ((countVC==3'd0)||((bitinC!=BufVC)&&(countVC!=5)))
                        begin
                          BufC =  bitinC;
                          countC =  3'd1;
                          bitout_iC <= bitinC;
                          stuff_iC <= 1'b0;
                        end
                      else
                        if (bitinC==BufVC&&countVC!=5)
                          begin
                            countC =  countVC+3'd1;
                            bitout_iC <= bitinC;
                            stuff_iC <= 1'b0;
                          end
                        else
                          if (countVC==3'd5)
                            begin
                              countC =  3'd1;
                              BufC =  ~BufC;
                              bitout_iC <= BufC;
                              stuff_iC <= 1'b1;
                            end
              end
            else
              edgedC =  1'b1;
          end
        else
          edgedC =  1'b0;
      end
  end

majorityVoter BufVoter (
    .inA(BufA),
    .inB(BufB),
    .inC(BufC),
    .out(Buf),
    .tmrErr(BufTmrError)
    );

majorityVoter bitout_iVoter (
    .inA(bitout_iA),
    .inB(bitout_iB),
    .inC(bitout_iC),
    .out(bitout_i),
    .tmrErr(bitout_iTmrError)
    );

majorityVoter #(.WIDTH(3)) countVoter (
    .inA(countA),
    .inB(countB),
    .inC(countC),
    .out(count),
    .tmrErr(countTmrError)
    );

majorityVoter edgedVoter (
    .inA(edgedA),
    .inB(edgedB),
    .inC(edgedC),
    .out(edged),
    .tmrErr(edgedTmrError)
    );

majorityVoter stuff_iVoter (
    .inA(stuff_iA),
    .inB(stuff_iB),
    .inC(stuff_iC),
    .out(stuff_i),
    .tmrErr(stuff_iTmrError)
    );

fanout BufVFanout (
    .in(BufV),
    .outA(BufVA),
    .outB(BufVB),
    .outC(BufVC)
    );

fanout activFanout (
    .in(activ),
    .outA(activA),
    .outB(activB),
    .outC(activC)
    );

fanout bitinFanout (
    .in(bitin),
    .outA(bitinA),
    .outB(bitinB),
    .outC(bitinC)
    );

fanout bitoutFanout (
    .in(bitout),
    .outA(bitoutA),
    .outB(bitoutB),
    .outC(bitoutC)
    );

fanout clockFanout (
    .in(clock),
    .outA(clockA),
    .outB(clockB),
    .outC(clockC)
    );

fanout #(.WIDTH(3)) countVFanout (
    .in(countV),
    .outA(countVA),
    .outB(countVB),
    .outC(countVC)
    );

fanout directFanout (
    .in(direct),
    .outA(directA),
    .outB(directB),
    .outC(directC)
    );

fanout edgedVFanout (
    .in(edgedV),
    .outA(edgedVA),
    .outB(edgedVB),
    .outC(edgedVC)
    );

fanout resetFanout (
    .in(reset),
    .outA(resetA),
    .outB(resetB),
    .outC(resetC)
    );

fanout setdomFanout (
    .in(setdom),
    .outA(setdomA),
    .outB(setdomB),
    .outC(setdomC)
    );

fanout setrecFanout (
    .in(setrec),
    .outA(setrecA),
    .outB(setrecB),
    .outC(setrecC)
    );

fanout stuffFanout (
    .in(stuff),
    .outA(stuffA),
    .outB(stuffB),
    .outC(stuffC)
    );
endmodule

