/****************************************************************************************************
 *                          ! THIS FILE WAS AUTO-GENERATED BY TMRG TOOL !                           *
 *                                   ! DO NOT EDIT IT MANUALLY !                                    *
 *                                                                                                  *
 * file    : ./output/stuffing2TMR.v                                                                *
 *                                                                                                  *
 * user    : lucas                                                                                  *
 * host    : DESKTOP-BFDSFP2                                                                        *
 * date    : 03/04/2022 20:08:56                                                                    *
 *                                                                                                  *
 * workdir : /mnt/c/Users/Lucas/Desktop/mopshub_triplication/triplicated/mopshub_top_canakari_ftrim/hdl *
 * cmd     : /mnt/c/Users/Lucas/Desktop/mopshub_triplication/tmrg-master/bin/tmrg -vv -c tmrg.cfg   *
 * tmrg rev:                                                                                        *
 *                                                                                                  *
 * src file: stuffing2.v                                                                            *
 *           Git SHA           : File not in git repository!                                        *
 *           Modification time : 2022-03-29 13:49:21                                                *
 *           File Size         : 4613                                                               *
 *           MD5 hash          : 7f7f37fcf376392c2076bc10195e627f                                   *
 *                                                                                                  *
 ****************************************************************************************************/

module stuffing2TMR(
  input wire  clockA ,
  input wire  clockB ,
  input wire  clockC ,
  input wire  bitinA ,
  input wire  bitinB ,
  input wire  bitinC ,
  input wire  activA ,
  input wire  activB ,
  input wire  activC ,
  input wire  resetA ,
  input wire  resetB ,
  input wire  resetC ,
  input wire  directA ,
  input wire  directB ,
  input wire  directC ,
  input wire  setdomA ,
  input wire  setdomB ,
  input wire  setdomC ,
  input wire  setrecA ,
  input wire  setrecB ,
  input wire  setrecC ,
  output wire  bitoutA ,
  output wire  bitoutB ,
  output wire  bitoutC ,
  output wire  stuffA ,
  output wire  stuffB ,
  output wire  stuffC 
);
wor stuff_iTmrErrorC;
wire stuff_iVotedC;
wor edgedTmrErrorC;
wire edgedVotedC;
wor bitout_iTmrErrorC;
wire bitout_iVotedC;
wor stuff_iTmrErrorB;
wire stuff_iVotedB;
wor edgedTmrErrorB;
wire edgedVotedB;
wor bitout_iTmrErrorB;
wire bitout_iVotedB;
wor stuff_iTmrErrorA;
wire stuff_iVotedA;
wor edgedTmrErrorA;
wire edgedVotedA;
wor bitout_iTmrErrorA;
wire bitout_iVotedA;
reg  [2:0] countA ;
reg  [2:0] countB ;
reg  [2:0] countC ;
reg  BufA ;
reg  BufB ;
reg  BufC ;
reg  edgedA ;
reg  edgedB ;
reg  edgedC ;
reg  bitout_iA ;
reg  bitout_iB ;
reg  bitout_iC ;
reg  stuff_iA ;
reg  stuff_iB ;
reg  stuff_iC ;
assign bitoutA =  bitout_iVotedA;
assign bitoutB =  bitout_iVotedB;
assign bitoutC =  bitout_iVotedC;
assign stuffA =  stuff_iVotedA;
assign stuffB =  stuff_iVotedB;
assign stuffC =  stuff_iVotedC;

always @( posedge clockA )
  begin
    if (resetA==1'b0)
      begin
        countA =  3'd0;
        BufA =  1'b0;
        bitout_iA <= 1'b1;
        stuff_iA <= 1'b0;
        edgedA =  1'b0;
      end
    else
      begin
        edgedA =  edgedVotedA;
        stuff_iA <= stuff_iVotedA;
        bitout_iA <= bitout_iVotedA;
        if (activA==1'b1)
          begin
            if (edgedVotedA==1'b0)
              begin
                edgedA =  1'b1;
                if (directA==1'b1)
                  begin
                    bitout_iA <= bitinA;
                    stuff_iA <= 1'b0;
                  end
                else
                  if (setdomA==1'b1)
                    begin
                      bitout_iA <= 1'b0;
                      stuff_iA <= 1'b0;
                    end
                  else
                    if (setrecA==1'b1)
                      begin
                        bitout_iA <= 1'b1;
                        stuff_iA <= 1'b0;
                      end
                    else
                      if ((countA==3'd0)||((bitinA!=BufA)&&(countA!=5)))
                        begin
                          BufA =  bitinA;
                          countA =  3'd1;
                          bitout_iA <= bitinA;
                          stuff_iA <= 1'b0;
                        end
                      else
                        if (bitinA==BufA&&countA!=5)
                          begin
                            countA =  countA+3'd1;
                            bitout_iA <= bitinA;
                            stuff_iA <= 1'b0;
                          end
                        else
                          if (countA==3'd5)
                            begin
                              countA =  3'd1;
                              BufA =  ~BufA;
                              bitout_iA <= BufA;
                              stuff_iA <= 1'b1;
                            end
              end
            else
              edgedA =  1'b1;
          end
        else
          edgedA =  1'b0;
      end
  end

always @( posedge clockB )
  begin
    if (resetB==1'b0)
      begin
        countB =  3'd0;
        BufB =  1'b0;
        bitout_iB <= 1'b1;
        stuff_iB <= 1'b0;
        edgedB =  1'b0;
      end
    else
      begin
        edgedB =  edgedVotedB;
        stuff_iB <= stuff_iVotedB;
        bitout_iB <= bitout_iVotedB;
        if (activB==1'b1)
          begin
            if (edgedVotedB==1'b0)
              begin
                edgedB =  1'b1;
                if (directB==1'b1)
                  begin
                    bitout_iB <= bitinB;
                    stuff_iB <= 1'b0;
                  end
                else
                  if (setdomB==1'b1)
                    begin
                      bitout_iB <= 1'b0;
                      stuff_iB <= 1'b0;
                    end
                  else
                    if (setrecB==1'b1)
                      begin
                        bitout_iB <= 1'b1;
                        stuff_iB <= 1'b0;
                      end
                    else
                      if ((countB==3'd0)||((bitinB!=BufB)&&(countB!=5)))
                        begin
                          BufB =  bitinB;
                          countB =  3'd1;
                          bitout_iB <= bitinB;
                          stuff_iB <= 1'b0;
                        end
                      else
                        if (bitinB==BufB&&countB!=5)
                          begin
                            countB =  countB+3'd1;
                            bitout_iB <= bitinB;
                            stuff_iB <= 1'b0;
                          end
                        else
                          if (countB==3'd5)
                            begin
                              countB =  3'd1;
                              BufB =  ~BufB;
                              bitout_iB <= BufB;
                              stuff_iB <= 1'b1;
                            end
              end
            else
              edgedB =  1'b1;
          end
        else
          edgedB =  1'b0;
      end
  end

always @( posedge clockC )
  begin
    if (resetC==1'b0)
      begin
        countC =  3'd0;
        BufC =  1'b0;
        bitout_iC <= 1'b1;
        stuff_iC <= 1'b0;
        edgedC =  1'b0;
      end
    else
      begin
        edgedC =  edgedVotedC;
        stuff_iC <= stuff_iVotedC;
        bitout_iC <= bitout_iVotedC;
        if (activC==1'b1)
          begin
            if (edgedVotedC==1'b0)
              begin
                edgedC =  1'b1;
                if (directC==1'b1)
                  begin
                    bitout_iC <= bitinC;
                    stuff_iC <= 1'b0;
                  end
                else
                  if (setdomC==1'b1)
                    begin
                      bitout_iC <= 1'b0;
                      stuff_iC <= 1'b0;
                    end
                  else
                    if (setrecC==1'b1)
                      begin
                        bitout_iC <= 1'b1;
                        stuff_iC <= 1'b0;
                      end
                    else
                      if ((countC==3'd0)||((bitinC!=BufC)&&(countC!=5)))
                        begin
                          BufC =  bitinC;
                          countC =  3'd1;
                          bitout_iC <= bitinC;
                          stuff_iC <= 1'b0;
                        end
                      else
                        if (bitinC==BufC&&countC!=5)
                          begin
                            countC =  countC+3'd1;
                            bitout_iC <= bitinC;
                            stuff_iC <= 1'b0;
                          end
                        else
                          if (countC==3'd5)
                            begin
                              countC =  3'd1;
                              BufC =  ~BufC;
                              bitout_iC <= BufC;
                              stuff_iC <= 1'b1;
                            end
              end
            else
              edgedC =  1'b1;
          end
        else
          edgedC =  1'b0;
      end
  end

majorityVoter bitout_iVoterA (
    .inA(bitout_iA),
    .inB(bitout_iB),
    .inC(bitout_iC),
    .out(bitout_iVotedA),
    .tmrErr(bitout_iTmrErrorA)
    );

majorityVoter edgedVoterA (
    .inA(edgedA),
    .inB(edgedB),
    .inC(edgedC),
    .out(edgedVotedA),
    .tmrErr(edgedTmrErrorA)
    );

majorityVoter stuff_iVoterA (
    .inA(stuff_iA),
    .inB(stuff_iB),
    .inC(stuff_iC),
    .out(stuff_iVotedA),
    .tmrErr(stuff_iTmrErrorA)
    );

majorityVoter bitout_iVoterB (
    .inA(bitout_iA),
    .inB(bitout_iB),
    .inC(bitout_iC),
    .out(bitout_iVotedB),
    .tmrErr(bitout_iTmrErrorB)
    );

majorityVoter edgedVoterB (
    .inA(edgedA),
    .inB(edgedB),
    .inC(edgedC),
    .out(edgedVotedB),
    .tmrErr(edgedTmrErrorB)
    );

majorityVoter stuff_iVoterB (
    .inA(stuff_iA),
    .inB(stuff_iB),
    .inC(stuff_iC),
    .out(stuff_iVotedB),
    .tmrErr(stuff_iTmrErrorB)
    );

majorityVoter bitout_iVoterC (
    .inA(bitout_iA),
    .inB(bitout_iB),
    .inC(bitout_iC),
    .out(bitout_iVotedC),
    .tmrErr(bitout_iTmrErrorC)
    );

majorityVoter edgedVoterC (
    .inA(edgedA),
    .inB(edgedB),
    .inC(edgedC),
    .out(edgedVotedC),
    .tmrErr(edgedTmrErrorC)
    );

majorityVoter stuff_iVoterC (
    .inA(stuff_iA),
    .inB(stuff_iB),
    .inC(stuff_iC),
    .out(stuff_iVotedC),
    .tmrErr(stuff_iTmrErrorC)
    );
endmodule

