/****************************************************************************************************
 *                          ! THIS FILE WAS AUTO-GENERATED BY TMRG TOOL !                           *
 *                                   ! DO NOT EDIT IT MANUALLY !                                    *
 *                                                                                                  *
 * file    : ./output/tcrc_top2TMR.v                                                                *
 *                                                                                                  *
 * user    : lucas                                                                                  *
 * host    : DESKTOP-BFDSFP2                                                                        *
 * date    : 05/12/2022 13:28:36                                                                    *
 *                                                                                                  *
 * workdir : /mnt/c/Users/Lucas/Documents/GitHub/mopshub_triplicated/triplicated/mopshub_top_board_16/hdl *
 * cmd     : /mnt/c/Users/Lucas/Documents/GitHub/mopshub_triplicated/tmrg-master/bin/tmrg -vv -c    *
 *           tmrg.cfg                                                                               *
 * tmrg rev: b25f042058e4e97751df2a0933c24aeadd5a78a5                                               *
 *                                                                                                  *
 * src file: tcrc_top2.v                                                                            *
 *           Git SHA           : b25f042058e4e97751df2a0933c24aeadd5a78a5 (?? tcrc_top2.v)          *
 *           Modification time : 2022-11-10 21:22:58                                                *
 *           File Size         : 4792                                                               *
 *           MD5 hash          : 40aece548bd1e1bf61d7a1844b4a5c88                                   *
 *                                                                                                  *
 ****************************************************************************************************/

module tcrc2TMR(
  input wire  clock ,
  input wire  bitin ,
  input wire  activ ,
  input wire  reset ,
  input wire [14:0] crc_pre_load_ext ,
  input wire [14:0] crc_pre_load_rem ,
  input wire  extended ,
  input wire  load ,
  input wire  load_activ ,
  input wire  crc_shft_out ,
  input wire  zerointcrc ,
  output wire  crc_tosend 
);
wire resetC;
wire resetB;
wire resetA;
wire load_activC;
wire load_activB;
wire load_activA;
wire loadC;
wire loadB;
wire loadA;
wire enable_iVC;
wire enable_iVB;
wire enable_iVA;
wire edgedVC;
wire edgedVB;
wire edgedVA;
wire clockC;
wire clockB;
wire clockA;
wire activ_iC;
wire activ_iB;
wire activ_iA;
wor enable_iTmrError;
wire enable_i;
wor edgedTmrError;
wire edged;
reg  edgedA ;
reg  edgedB ;
reg  edgedC ;
reg  enable_iA ;
reg  enable_iB ;
reg  enable_iC ;
reg  [14:0] crc_pre_load_i ;
wire activ_i;
wire load_i;
wire bitin_i;
wire feedback;
wire [14:0] q_out;
wire [14:0] inp;
wire enable_iV =  enable_i;
wire edgedV =  edged;
assign activ_i =  (activ&(~ crc_shft_out ))|(load_activ&crc_shft_out);
assign feedback =  (~ crc_shft_out )&q_out[14] ;
assign load_i =  load&load_activ;
assign bitin_i =  (bitin|crc_shft_out)&zerointcrc;
assign inp[0]  =  bitin_i^feedback;
assign inp[1]  =  q_out[0] ;
assign inp[2]  =  q_out[1] ;
assign inp[3]  =  q_out[2] ^feedback;
assign inp[4]  =  q_out[3] ^feedback;
assign inp[5]  =  q_out[4] ;
assign inp[6]  =  q_out[5] ;
assign inp[7]  =  q_out[6] ^feedback;
assign inp[8]  =  q_out[7] ^feedback;
assign inp[9]  =  q_out[8] ;
assign inp[10]  =  q_out[9] ^feedback;
assign inp[11]  =  q_out[10] ;
assign inp[12]  =  q_out[11] ;
assign inp[13]  =  q_out[12] ;
assign inp[14]  =  q_out[13] ^feedback;
assign crc_tosend =  q_out[14] ;
genvar i;

generate
  for(i =  0;i<15;i =  i+1)
    begin 

      tcrc_cell2TMR reg_i (
          .enable(enable_iV),
          .preload(crc_pre_load_i[i] ),
          .clock(clock),
          .reset(reset),
          .load(load_i),
          .Input(inp[i] ),
          .q(q_out[i] )
          );
    end

endgenerate

always @( extended or crc_pre_load_ext or crc_pre_load_rem )
  begin
    if (extended==1'b1)
      crc_pre_load_i =  crc_pre_load_ext;
    else
      crc_pre_load_i =  crc_pre_load_rem;
  end

always @( negedge clockA )
  begin
    if (resetA==1'b0)
      begin
        enable_iA <= 1'b1;
        edgedA =  1'b0;
      end
    else
      begin
        edgedA =  edgedVA;
        enable_iA <= enable_iVA;
        if (activ_iA==1'b1)
          if (edgedVA==1'b0)
            begin
              edgedA =  1'b1;
              enable_iA <= 1'b1;
            end
          else
            begin
              edgedA =  1'b1;
              enable_iA <= 1'b0;
            end
        else
          begin
            edgedA =  1'b0;
            if (loadA==1'b1&&load_activA==1'b1)
              enable_iA <= 1'b1;
            else
              enable_iA <= 1'b0;
          end
      end
  end

always @( negedge clockB )
  begin
    if (resetB==1'b0)
      begin
        enable_iB <= 1'b1;
        edgedB =  1'b0;
      end
    else
      begin
        edgedB =  edgedVB;
        enable_iB <= enable_iVB;
        if (activ_iB==1'b1)
          if (edgedVB==1'b0)
            begin
              edgedB =  1'b1;
              enable_iB <= 1'b1;
            end
          else
            begin
              edgedB =  1'b1;
              enable_iB <= 1'b0;
            end
        else
          begin
            edgedB =  1'b0;
            if (loadB==1'b1&&load_activB==1'b1)
              enable_iB <= 1'b1;
            else
              enable_iB <= 1'b0;
          end
      end
  end

always @( negedge clockC )
  begin
    if (resetC==1'b0)
      begin
        enable_iC <= 1'b1;
        edgedC =  1'b0;
      end
    else
      begin
        edgedC =  edgedVC;
        enable_iC <= enable_iVC;
        if (activ_iC==1'b1)
          if (edgedVC==1'b0)
            begin
              edgedC =  1'b1;
              enable_iC <= 1'b1;
            end
          else
            begin
              edgedC =  1'b1;
              enable_iC <= 1'b0;
            end
        else
          begin
            edgedC =  1'b0;
            if (loadC==1'b1&&load_activC==1'b1)
              enable_iC <= 1'b1;
            else
              enable_iC <= 1'b0;
          end
      end
  end

majorityVoter edgedVoter (
    .inA(edgedA),
    .inB(edgedB),
    .inC(edgedC),
    .out(edged),
    .tmrErr(edgedTmrError)
    );

majorityVoter enable_iVoter (
    .inA(enable_iA),
    .inB(enable_iB),
    .inC(enable_iC),
    .out(enable_i),
    .tmrErr(enable_iTmrError)
    );

fanout activ_iFanout (
    .in(activ_i),
    .outA(activ_iA),
    .outB(activ_iB),
    .outC(activ_iC)
    );

fanout clockFanout (
    .in(clock),
    .outA(clockA),
    .outB(clockB),
    .outC(clockC)
    );

fanout edgedVFanout (
    .in(edgedV),
    .outA(edgedVA),
    .outB(edgedVB),
    .outC(edgedVC)
    );

fanout enable_iVFanout (
    .in(enable_iV),
    .outA(enable_iVA),
    .outB(enable_iVB),
    .outC(enable_iVC)
    );

fanout loadFanout (
    .in(load),
    .outA(loadA),
    .outB(loadB),
    .outC(loadC)
    );

fanout load_activFanout (
    .in(load_activ),
    .outA(load_activA),
    .outB(load_activB),
    .outC(load_activC)
    );

fanout resetFanout (
    .in(reset),
    .outA(resetA),
    .outB(resetB),
    .outC(resetC)
    );
endmodule

