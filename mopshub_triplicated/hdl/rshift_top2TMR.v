/****************************************************************************************************
 *                          ! THIS FILE WAS AUTO-GENERATED BY TMRG TOOL !                           *
 *                                   ! DO NOT EDIT IT MANUALLY !                                    *
 *                                                                                                  *
 * file    : ./output/rshift_top2TMR.v                                                              *
 *                                                                                                  *
 * user    : lucas                                                                                  *
 * host    : DESKTOP-BFDSFP2                                                                        *
 * date    : 06/10/2022 13:53:03                                                                    *
 *                                                                                                  *
 * workdir : /mnt/c/Users/Lucas/Documents/GitHub/mopshub_triplicated/triplicated/mopshub_top_board/hdl *
 * cmd     : /mnt/c/Users/Lucas/Desktop/mopshub_triplication/tmrg-master/bin/tmrg -vv -c tmrg.cfg   *
 * tmrg rev:                                                                                        *
 *                                                                                                  *
 * src file: rshift_top2.v                                                                          *
 *           Git SHA           : c110441b08b692cc54ebd4a3b84a2599430e8f93                           *
 *           Modification time : 2022-08-25 10:43:13                                                *
 *           File Size         : 3895                                                               *
 *           MD5 hash          : 38aa64d1ffc14701f19544afe1a023b5                                   *
 *                                                                                                  *
 ****************************************************************************************************/

module rshiftreg2TMR(
  input wire  clock ,
  input wire  bitin ,
  input wire  activ ,
  input wire  reset ,
  input wire  lcrc ,
  input wire  setzero ,
  input wire  directshift ,
  output wire [67:0] mesout_a ,
  output wire [17:0] mesout_b ,
  output wire [10:0] mesout_c 
);
wire resetC;
wire resetB;
wire resetA;
wire enable_iVC;
wire enable_iVB;
wire enable_iVA;
wire edgedVC;
wire edgedVB;
wire edgedVA;
wire clockC;
wire clockB;
wire clockA;
wire activ_iC;
wire activ_iB;
wire activ_iA;
wor enable_iTmrError;
wire enable_i;
wor edgedTmrError;
wire edged;
reg  edgedA ;
reg  edgedB ;
reg  edgedC ;
reg  enable_iA ;
reg  enable_iB ;
reg  enable_iC ;
wire activ_i;
wire bitin_i;
wire reset_i;
wire [102:0] q_i;
assign mesout_a =  q_i[67:0] ;
assign mesout_b =  q_i[88:71] ;
assign mesout_c =  q_i[101:91] ;
assign activ_i =  (activ&(~ lcrc ))|directshift;
assign bitin_i =  bitin&setzero;
assign reset_i =  reset;
wire edgedV =  edged;
wire enable_iV =  enable_i;

rshift_cell2TMR bottom (
    .enable(enable_iV),
    .clock(clock),
    .reset(reset_i),
    .Input(bitin_i),
    .q(q_i[0] )
    );
genvar i;

generate
  for(i =  1;i<103;i =  i+1)
    begin 

      rshift_cell2TMR reg_i (
          .enable(enable_iV),
          .clock(clock),
          .reset(reset_i),
          .Input(q_i[i-1] ),
          .q(q_i[i] )
          );
    end

endgenerate

always @( posedge clockA )
  begin
    if (resetA==1'b0)
      begin
        enable_iA <= 1'b0;
        edgedA =  1'b0;
      end
    else
      begin
        edgedA =  edgedVA;
        enable_iA <= enable_iVA;
        if (activ_iA==1'b1)
          if (edgedVA==1'b0)
            begin
              edgedA =  1'b1;
              enable_iA <= 1'b1;
            end
          else
            enable_iA <= 1'b0;
        else
          begin
            edgedA =  1'b0;
            enable_iA <= 1'b0;
          end
      end
  end

always @( posedge clockB )
  begin
    if (resetB==1'b0)
      begin
        enable_iB <= 1'b0;
        edgedB =  1'b0;
      end
    else
      begin
        edgedB =  edgedVB;
        enable_iB <= enable_iVB;
        if (activ_iB==1'b1)
          if (edgedVB==1'b0)
            begin
              edgedB =  1'b1;
              enable_iB <= 1'b1;
            end
          else
            enable_iB <= 1'b0;
        else
          begin
            edgedB =  1'b0;
            enable_iB <= 1'b0;
          end
      end
  end

always @( posedge clockC )
  begin
    if (resetC==1'b0)
      begin
        enable_iC <= 1'b0;
        edgedC =  1'b0;
      end
    else
      begin
        edgedC =  edgedVC;
        enable_iC <= enable_iVC;
        if (activ_iC==1'b1)
          if (edgedVC==1'b0)
            begin
              edgedC =  1'b1;
              enable_iC <= 1'b1;
            end
          else
            enable_iC <= 1'b0;
        else
          begin
            edgedC =  1'b0;
            enable_iC <= 1'b0;
          end
      end
  end

majorityVoter edgedVoter (
    .inA(edgedA),
    .inB(edgedB),
    .inC(edgedC),
    .out(edged),
    .tmrErr(edgedTmrError)
    );

majorityVoter enable_iVoter (
    .inA(enable_iA),
    .inB(enable_iB),
    .inC(enable_iC),
    .out(enable_i),
    .tmrErr(enable_iTmrError)
    );

fanout activ_iFanout (
    .in(activ_i),
    .outA(activ_iA),
    .outB(activ_iB),
    .outC(activ_iC)
    );

fanout clockFanout (
    .in(clock),
    .outA(clockA),
    .outB(clockB),
    .outC(clockC)
    );

fanout edgedVFanout (
    .in(edgedV),
    .outA(edgedVA),
    .outB(edgedVB),
    .outC(edgedVC)
    );

fanout enable_iVFanout (
    .in(enable_iV),
    .outA(enable_iVA),
    .outB(enable_iVB),
    .outC(enable_iVC)
    );

fanout resetFanout (
    .in(reset),
    .outA(resetA),
    .outB(resetB),
    .outC(resetC)
    );
endmodule

