//
// Module mopshub_triplicated.Ftrim_EnTMR.struct
//
// Created:
//          by - dcs.dcs (localhost)
//          at - 09:18:04 05/10/22
//
// Generated by Mentor Graphics' HDL Designer(TM) 2019.4 (Build 4)
//


module Ftrim_EnTMR( 
   // Port Declarations
   input   wire      CLKA, 
   input   wire      CLKB, 
   input   wire      CLKC, 
   input   wire      resetA, 
   input   wire      resetB, 
   input   wire      resetC, 
   input   wire      EnableA, 
   input   wire      EnableB, 
   input   wire      EnableC, 
   output  wire      PID_EnA, 
   output  wire      PID_EnB, 
   output  wire      PID_EnC
);


// Internal Declarations


// Local declarations

// Internal signal declarations
wor    PID_En_iTmrErrorC;
wire   PID_En_iVotedC;
wor    PID_En_iTmrErrorB;
wire   PID_En_iVotedB;
wor    PID_En_iTmrErrorA;
wire   PID_En_iVotedA;
reg    PID_En_iA;
reg    PID_En_iB;
reg    PID_En_iC;


// Instances 
majorityVoter PID_En_iVoterA( 
   .inA    (PID_En_iA), 
   .inB    (PID_En_iB), 
   .inC    (PID_En_iC), 
   .out    (PID_En_iVotedA), 
   .tmrErr (PID_En_iTmrErrorA)
); 

majorityVoter PID_En_iVoterB( 
   .inA    (PID_En_iA), 
   .inB    (PID_En_iB), 
   .inC    (PID_En_iC), 
   .out    (PID_En_iVotedB), 
   .tmrErr (PID_En_iTmrErrorB)
); 

majorityVoter PID_En_iVoterC( 
   .inA    (PID_En_iA), 
   .inB    (PID_En_iB), 
   .inC    (PID_En_iC), 
   .out    (PID_En_iVotedC), 
   .tmrErr (PID_En_iTmrErrorC)
); 

// HDL Embedded Text Block 1 eb1
assign PID_EnA =  PID_En_iVotedA;
assign PID_EnB =  PID_En_iVotedB;
assign PID_EnC =  PID_En_iVotedC;
// HDL Embedded Text Block 2 eb2
always @( posedge CLKA or negedge resetA )
  begin
    if (resetA==1'b0)
      PID_En_iA <= 0;
    else
      PID_En_iA <= EnableA;
  end
// HDL Embedded Text Block 3 eb3
always @( posedge CLKB or negedge resetB )
  begin
    if (resetB==1'b0)
      PID_En_iB <= 0;
    else
      PID_En_iB <= EnableB;
  end
// HDL Embedded Text Block 4 eb4
always @( posedge CLKC or negedge resetC )
  begin
    if (resetC==1'b0)
      PID_En_iC <= 0;
    else
      PID_En_iC <= EnableC;
  end

endmodule // Ftrim_EnTMR

