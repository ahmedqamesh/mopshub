/****************************************************************************************************
 *                          ! THIS FILE WAS AUTO-GENERATED BY TMRG TOOL !                           *
 *                                   ! DO NOT EDIT IT MANUALLY !                                    *
 *                                                                                                  *
 * file    : ./output/tra_mes_bufTMR.v                                                              *
 *                                                                                                  *
 * user    : lucas                                                                                  *
 * host    : DESKTOP-BFDSFP2                                                                        *
 * date    : 06/10/2022 13:53:07                                                                    *
 *                                                                                                  *
 * workdir : /mnt/c/Users/Lucas/Documents/GitHub/mopshub_triplicated/triplicated/mopshub_top_board/hdl *
 * cmd     : /mnt/c/Users/Lucas/Desktop/mopshub_triplication/tmrg-master/bin/tmrg -vv -c tmrg.cfg   *
 * tmrg rev:                                                                                        *
 *                                                                                                  *
 * src file: tra_mes_buf.v                                                                          *
 *           Git SHA           : c110441b08b692cc54ebd4a3b84a2599430e8f93                           *
 *           Modification time : 2022-10-05 20:50:43                                                *
 *           File Size         : 1116                                                               *
 *           MD5 hash          : 4a680becd01ea772429c2e21d2565b4f                                   *
 *                                                                                                  *
 ****************************************************************************************************/

module buffer_tra_dataTMR(
  input wire  clk ,
  input wire [75:0] data_tra_in ,
  input wire  buffer_en ,
  input wire  rst ,
  output wire [4:0] data_tra_select ,
  output wire [75:0] data_tra_out 
);
wire rstC;
wire rstB;
wire rstA;
wire [4:0] data_tra_selectC;
wire [4:0] data_tra_selectB;
wire [4:0] data_tra_selectA;
wire [75:0] data_tra_outC;
wire [75:0] data_tra_outB;
wire [75:0] data_tra_outA;
wire [75:0] data_tra_inC;
wire [75:0] data_tra_inB;
wire [75:0] data_tra_inA;
wire clkC;
wire clkB;
wire clkA;
wire buffer_enC;
wire buffer_enB;
wire buffer_enA;
wor data_tra_select_regTmrError;
wire [4:0] data_tra_select_reg;
wor data_tra_regTmrError;
wire [75:0] data_tra_reg;
reg  [75:0] data_tra_regA ;
reg  [75:0] data_tra_regB ;
reg  [75:0] data_tra_regC ;
reg  [4:0] data_tra_select_regA ;
reg  [4:0] data_tra_select_regB ;
reg  [4:0] data_tra_select_regC ;
initial
  begin
    data_tra_regA =  76'd0;
    data_tra_select_regA =  5'd0;
  end
initial
  begin
    data_tra_regB =  76'd0;
    data_tra_select_regB =  5'd0;
  end
initial
  begin
    data_tra_regC =  76'd0;
    data_tra_select_regC =  5'd0;
  end

always @( posedge clkA )
  begin
    if (!rstA)
      data_tra_select_regA <= 5'd0;
    else
      if (buffer_enA)
        data_tra_select_regA <= data_tra_inA[28:24] ;
      else
        data_tra_select_regA <= data_tra_selectA;
  end

always @( posedge clkB )
  begin
    if (!rstB)
      data_tra_select_regB <= 5'd0;
    else
      if (buffer_enB)
        data_tra_select_regB <= data_tra_inB[28:24] ;
      else
        data_tra_select_regB <= data_tra_selectB;
  end

always @( posedge clkC )
  begin
    if (!rstC)
      data_tra_select_regC <= 5'd0;
    else
      if (buffer_enC)
        data_tra_select_regC <= data_tra_inC[28:24] ;
      else
        data_tra_select_regC <= data_tra_selectC;
  end

always @( posedge clkA )
  begin
    if (!rstA)
      data_tra_regA <= 76'd0;
    else
      if (buffer_enA)
        data_tra_regA <= data_tra_inA;
      else
        data_tra_regA <= data_tra_outA;
  end

always @( posedge clkB )
  begin
    if (!rstB)
      data_tra_regB <= 76'd0;
    else
      if (buffer_enB)
        data_tra_regB <= data_tra_inB;
      else
        data_tra_regB <= data_tra_outB;
  end

always @( posedge clkC )
  begin
    if (!rstC)
      data_tra_regC <= 76'd0;
    else
      if (buffer_enC)
        data_tra_regC <= data_tra_inC;
      else
        data_tra_regC <= data_tra_outC;
  end
assign data_tra_out =  data_tra_reg;
assign data_tra_select =  data_tra_select_reg;

majorityVoter #(.WIDTH(76)) data_tra_regVoter (
    .inA(data_tra_regA),
    .inB(data_tra_regB),
    .inC(data_tra_regC),
    .out(data_tra_reg),
    .tmrErr(data_tra_regTmrError)
    );

majorityVoter #(.WIDTH(5)) data_tra_select_regVoter (
    .inA(data_tra_select_regA),
    .inB(data_tra_select_regB),
    .inC(data_tra_select_regC),
    .out(data_tra_select_reg),
    .tmrErr(data_tra_select_regTmrError)
    );

fanout buffer_enFanout (
    .in(buffer_en),
    .outA(buffer_enA),
    .outB(buffer_enB),
    .outC(buffer_enC)
    );

fanout clkFanout (
    .in(clk),
    .outA(clkA),
    .outB(clkB),
    .outC(clkC)
    );

fanout #(.WIDTH(76)) data_tra_inFanout (
    .in(data_tra_in),
    .outA(data_tra_inA),
    .outB(data_tra_inB),
    .outC(data_tra_inC)
    );

fanout #(.WIDTH(76)) data_tra_outFanout (
    .in(data_tra_out),
    .outA(data_tra_outA),
    .outB(data_tra_outB),
    .outC(data_tra_outC)
    );

fanout #(.WIDTH(5)) data_tra_selectFanout (
    .in(data_tra_select),
    .outA(data_tra_selectA),
    .outB(data_tra_selectB),
    .outC(data_tra_selectC)
    );

fanout rstFanout (
    .in(rst),
    .outA(rstA),
    .outB(rstB),
    .outC(rstC)
    );
endmodule

