/****************************************************************************************************
 *                          ! THIS FILE WAS AUTO-GENERATED BY TMRG TOOL !                           *
 *                                   ! DO NOT EDIT IT MANUALLY !                                    *
 *                                                                                                  *
 * file    : ./output/rec2TMR.v                                                                     *
 *                                                                                                  *
 * user    : lucas                                                                                  *
 * host    : DESKTOP-BFDSFP2                                                                        *
 * date    : 06/10/2022 13:52:59                                                                    *
 *                                                                                                  *
 * workdir : /mnt/c/Users/Lucas/Documents/GitHub/mopshub_triplicated/triplicated/mopshub_top_board/hdl *
 * cmd     : /mnt/c/Users/Lucas/Desktop/mopshub_triplication/tmrg-master/bin/tmrg -vv -c tmrg.cfg   *
 * tmrg rev:                                                                                        *
 *                                                                                                  *
 * src file: rec2.v                                                                                 *
 *           Git SHA           : c110441b08b692cc54ebd4a3b84a2599430e8f93                           *
 *           Modification time : 2022-08-30 12:46:59                                                *
 *           File Size         : 3585                                                               *
 *           MD5 hash          : c1b6b6006ffd76096d8fe77ed581028b                                   *
 *                                                                                                  *
 ****************************************************************************************************/

module rec2TMR(
  input wire  reset ,
  input wire  clock ,
  input wire  inconerec ,
  input wire  incegtrec ,
  input wire  decrec ,
  output reg  rec_lt96 ,
  output reg  rec_ge96 ,
  output reg  rec_ge128 ,
  output wire [7:0] reccount 
);
wire resetC;
wire resetB;
wire resetA;
wire inconerecC;
wire inconerecB;
wire inconerecA;
wire incegtrecC;
wire incegtrecB;
wire incegtrecA;
wire edgedVC;
wire edgedVB;
wire edgedVA;
wire decrecC;
wire decrecB;
wire decrecA;
wire [8:0] counterVC;
wire [8:0] counterVB;
wire [8:0] counterVA;
wire clockC;
wire clockB;
wire clockA;
wire actionC;
wire actionB;
wire actionA;
wor edgedTmrError;
wire edged;
wor counterTmrError;
wire [8:0] counter;
reg  [8:0] counterA ;
reg  [8:0] counterB ;
reg  [8:0] counterC ;
reg  edgedA ;
reg  edgedB ;
reg  edgedC ;
wire action;
assign action =  inconerec|incegtrec|decrec;
wire [8:0] counterV =  counter;
wire edgedV =  edged;
assign reccount =  counterV[7:0] ;

always @( posedge clockA )
  begin
    if (resetA==1'b0)
      begin
        counterA <= 9'd0;
        edgedA <= 1'b0;
      end
    else
      begin
        counterA <= counterVA;
        edgedA <= edgedVA;
        if (actionA==1'b1)
          begin
            if (edgedVA==1'b0)
              begin
                edgedA <= 1'b1;
                if (counterVA!=9'd0&&decrecA==1'b1)
                  counterA <= counterVA-1;
                else
                  if (counterVA<=255)
                    begin
                      if (inconerecA==1'b1)
                        counterA <= counterVA+1;
                      else
                        if (incegtrecA==1'b1)
                          counterA <= counterVA+8;
                    end
              end
          end
        else
          edgedA <= 1'b0;
      end
  end

always @( posedge clockB )
  begin
    if (resetB==1'b0)
      begin
        counterB <= 9'd0;
        edgedB <= 1'b0;
      end
    else
      begin
        counterB <= counterVB;
        edgedB <= edgedVB;
        if (actionB==1'b1)
          begin
            if (edgedVB==1'b0)
              begin
                edgedB <= 1'b1;
                if (counterVB!=9'd0&&decrecB==1'b1)
                  counterB <= counterVB-1;
                else
                  if (counterVB<=255)
                    begin
                      if (inconerecB==1'b1)
                        counterB <= counterVB+1;
                      else
                        if (incegtrecB==1'b1)
                          counterB <= counterVB+8;
                    end
              end
          end
        else
          edgedB <= 1'b0;
      end
  end

always @( posedge clockC )
  begin
    if (resetC==1'b0)
      begin
        counterC <= 9'd0;
        edgedC <= 1'b0;
      end
    else
      begin
        counterC <= counterVC;
        edgedC <= edgedVC;
        if (actionC==1'b1)
          begin
            if (edgedVC==1'b0)
              begin
                edgedC <= 1'b1;
                if (counterVC!=9'd0&&decrecC==1'b1)
                  counterC <= counterVC-1;
                else
                  if (counterVC<=255)
                    begin
                      if (inconerecC==1'b1)
                        counterC <= counterVC+1;
                      else
                        if (incegtrecC==1'b1)
                          counterC <= counterVC+8;
                    end
              end
          end
        else
          edgedC <= 1'b0;
      end
  end

always @( counterV )
  begin
    if (counterV>9'd127)
      begin
        rec_lt96 <= 1'b0;
        rec_ge96 <= 1'b1;
        rec_ge128 <= 1'b1;
      end
    else
      if (counterV<=9'd127&&counterV>=9'd96)
        begin
          rec_lt96 <= 1'b0;
          rec_ge96 <= 1'b1;
          rec_ge128 <= 1'b0;
        end
      else
        begin
          rec_lt96 <= 1'b1;
          rec_ge96 <= 1'b0;
          rec_ge128 <= 1'b0;
        end
  end

majorityVoter #(.WIDTH(9)) counterVoter (
    .inA(counterA),
    .inB(counterB),
    .inC(counterC),
    .out(counter),
    .tmrErr(counterTmrError)
    );

majorityVoter edgedVoter (
    .inA(edgedA),
    .inB(edgedB),
    .inC(edgedC),
    .out(edged),
    .tmrErr(edgedTmrError)
    );

fanout actionFanout (
    .in(action),
    .outA(actionA),
    .outB(actionB),
    .outC(actionC)
    );

fanout clockFanout (
    .in(clock),
    .outA(clockA),
    .outB(clockB),
    .outC(clockC)
    );

fanout #(.WIDTH(9)) counterVFanout (
    .in(counterV),
    .outA(counterVA),
    .outB(counterVB),
    .outC(counterVC)
    );

fanout decrecFanout (
    .in(decrec),
    .outA(decrecA),
    .outB(decrecB),
    .outC(decrecC)
    );

fanout edgedVFanout (
    .in(edgedV),
    .outA(edgedVA),
    .outB(edgedVB),
    .outC(edgedVC)
    );

fanout incegtrecFanout (
    .in(incegtrec),
    .outA(incegtrecA),
    .outB(incegtrecB),
    .outC(incegtrecC)
    );

fanout inconerecFanout (
    .in(inconerec),
    .outA(inconerecA),
    .outB(inconerecB),
    .outC(inconerecC)
    );

fanout resetFanout (
    .in(reset),
    .outA(resetA),
    .outB(resetB),
    .outC(resetC)
    );
endmodule

