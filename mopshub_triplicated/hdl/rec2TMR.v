/****************************************************************************************************
 *                          ! THIS FILE WAS AUTO-GENERATED BY TMRG TOOL !                           *
 *                                   ! DO NOT EDIT IT MANUALLY !                                    *
 *                                                                                                  *
 * file    : ./output/rec2TMR.v                                                                     *
 *                                                                                                  *
 * user    : lucas                                                                                  *
 * host    : DESKTOP-BFDSFP2                                                                        *
 * date    : 03/04/2022 20:08:55                                                                    *
 *                                                                                                  *
 * workdir : /mnt/c/Users/Lucas/Desktop/mopshub_triplication/triplicated/mopshub_top_canakari_ftrim/hdl *
 * cmd     : /mnt/c/Users/Lucas/Desktop/mopshub_triplication/tmrg-master/bin/tmrg -vv -c tmrg.cfg   *
 * tmrg rev:                                                                                        *
 *                                                                                                  *
 * src file: rec2.v                                                                                 *
 *           Git SHA           : File not in git repository!                                        *
 *           Modification time : 2022-03-29 13:49:21                                                *
 *           File Size         : 3616                                                               *
 *           MD5 hash          : 6b85fa141c4ee60065ff8c5e76f5e0a5                                   *
 *                                                                                                  *
 ****************************************************************************************************/

module rec2TMR(
  input wire  resetA ,
  input wire  resetB ,
  input wire  resetC ,
  input wire  clockA ,
  input wire  clockB ,
  input wire  clockC ,
  input wire  inconerecA ,
  input wire  inconerecB ,
  input wire  inconerecC ,
  input wire  incegtrecA ,
  input wire  incegtrecB ,
  input wire  incegtrecC ,
  input wire  decrecA ,
  input wire  decrecB ,
  input wire  decrecC ,
  output reg  rec_lt96A ,
  output reg  rec_lt96B ,
  output reg  rec_lt96C ,
  output reg  rec_ge96A ,
  output reg  rec_ge96B ,
  output reg  rec_ge96C ,
  output reg  rec_ge128A ,
  output reg  rec_ge128B ,
  output reg  rec_ge128C ,
  output wire [7:0] reccountA ,
  output wire [7:0] reccountB ,
  output wire [7:0] reccountC 
);
wor edgedTmrErrorC;
wire edgedVotedC;
wor counterTmrErrorC;
wire [8:0] counterVotedC;
wor edgedTmrErrorB;
wire edgedVotedB;
wor counterTmrErrorB;
wire [8:0] counterVotedB;
wor edgedTmrErrorA;
wire edgedVotedA;
wor counterTmrErrorA;
wire [8:0] counterVotedA;
reg  [8:0] counterA ;
reg  [8:0] counterB ;
reg  [8:0] counterC ;
reg  edgedA ;
reg  edgedB ;
reg  edgedC ;
wire actionA;
wire actionB;
wire actionC;
assign actionA =  inconerecA|incegtrecA|decrecA;
assign actionB =  inconerecB|incegtrecB|decrecB;
assign actionC =  inconerecC|incegtrecC|decrecC;
assign reccountA =  counterVotedA[7:0] ;
assign reccountB =  counterVotedB[7:0] ;
assign reccountC =  counterVotedC[7:0] ;

always @( posedge clockA )
  begin
    if (resetA==1'b0)
      begin
        counterA <= 9'd0;
        edgedA <= 1'b0;
      end
    else
      begin
        counterA <= counterVotedA;
        edgedA <= edgedVotedA;
        if (actionA==1'b1)
          begin
            if (edgedVotedA==1'b0)
              begin
                edgedA <= 1'b1;
                if (counterVotedA!=9'd0&&decrecA==1'b1)
                  counterA <= counterVotedA-1;
                else
                  if (counterVotedA<=255)
                    begin
                      if (inconerecA==1'b1)
                        counterA <= counterVotedA+1;
                      else
                        if (incegtrecA==1'b1)
                          counterA <= counterVotedA+8;
                    end
              end
          end
        else
          edgedA <= 1'b0;
      end
  end

always @( posedge clockB )
  begin
    if (resetB==1'b0)
      begin
        counterB <= 9'd0;
        edgedB <= 1'b0;
      end
    else
      begin
        counterB <= counterVotedB;
        edgedB <= edgedVotedB;
        if (actionB==1'b1)
          begin
            if (edgedVotedB==1'b0)
              begin
                edgedB <= 1'b1;
                if (counterVotedB!=9'd0&&decrecB==1'b1)
                  counterB <= counterVotedB-1;
                else
                  if (counterVotedB<=255)
                    begin
                      if (inconerecB==1'b1)
                        counterB <= counterVotedB+1;
                      else
                        if (incegtrecB==1'b1)
                          counterB <= counterVotedB+8;
                    end
              end
          end
        else
          edgedB <= 1'b0;
      end
  end

always @( posedge clockC )
  begin
    if (resetC==1'b0)
      begin
        counterC <= 9'd0;
        edgedC <= 1'b0;
      end
    else
      begin
        counterC <= counterVotedC;
        edgedC <= edgedVotedC;
        if (actionC==1'b1)
          begin
            if (edgedVotedC==1'b0)
              begin
                edgedC <= 1'b1;
                if (counterVotedC!=9'd0&&decrecC==1'b1)
                  counterC <= counterVotedC-1;
                else
                  if (counterVotedC<=255)
                    begin
                      if (inconerecC==1'b1)
                        counterC <= counterVotedC+1;
                      else
                        if (incegtrecC==1'b1)
                          counterC <= counterVotedC+8;
                    end
              end
          end
        else
          edgedC <= 1'b0;
      end
  end

always @( counterVotedA )
  begin
    if (counterVotedA>9'd127)
      begin
        rec_lt96A <= 1'b0;
        rec_ge96A <= 1'b1;
        rec_ge128A <= 1'b1;
      end
    else
      if (counterVotedA<=9'd127&&counterVotedA>=9'd96)
        begin
          rec_lt96A <= 1'b0;
          rec_ge96A <= 1'b1;
          rec_ge128A <= 1'b0;
        end
      else
        begin
          rec_lt96A <= 1'b1;
          rec_ge96A <= 1'b0;
          rec_ge128A <= 1'b0;
        end
  end

always @( counterVotedB )
  begin
    if (counterVotedB>9'd127)
      begin
        rec_lt96B <= 1'b0;
        rec_ge96B <= 1'b1;
        rec_ge128B <= 1'b1;
      end
    else
      if (counterVotedB<=9'd127&&counterVotedB>=9'd96)
        begin
          rec_lt96B <= 1'b0;
          rec_ge96B <= 1'b1;
          rec_ge128B <= 1'b0;
        end
      else
        begin
          rec_lt96B <= 1'b1;
          rec_ge96B <= 1'b0;
          rec_ge128B <= 1'b0;
        end
  end

always @( counterVotedC )
  begin
    if (counterVotedC>9'd127)
      begin
        rec_lt96C <= 1'b0;
        rec_ge96C <= 1'b1;
        rec_ge128C <= 1'b1;
      end
    else
      if (counterVotedC<=9'd127&&counterVotedC>=9'd96)
        begin
          rec_lt96C <= 1'b0;
          rec_ge96C <= 1'b1;
          rec_ge128C <= 1'b0;
        end
      else
        begin
          rec_lt96C <= 1'b1;
          rec_ge96C <= 1'b0;
          rec_ge128C <= 1'b0;
        end
  end

majorityVoter #(.WIDTH(9)) counterVoterA (
    .inA(counterA),
    .inB(counterB),
    .inC(counterC),
    .out(counterVotedA),
    .tmrErr(counterTmrErrorA)
    );

majorityVoter edgedVoterA (
    .inA(edgedA),
    .inB(edgedB),
    .inC(edgedC),
    .out(edgedVotedA),
    .tmrErr(edgedTmrErrorA)
    );

majorityVoter #(.WIDTH(9)) counterVoterB (
    .inA(counterA),
    .inB(counterB),
    .inC(counterC),
    .out(counterVotedB),
    .tmrErr(counterTmrErrorB)
    );

majorityVoter edgedVoterB (
    .inA(edgedA),
    .inB(edgedB),
    .inC(edgedC),
    .out(edgedVotedB),
    .tmrErr(edgedTmrErrorB)
    );

majorityVoter #(.WIDTH(9)) counterVoterC (
    .inA(counterA),
    .inB(counterB),
    .inC(counterC),
    .out(counterVotedC),
    .tmrErr(counterTmrErrorC)
    );

majorityVoter edgedVoterC (
    .inA(edgedA),
    .inB(edgedB),
    .inC(edgedC),
    .out(edgedVotedC),
    .tmrErr(edgedTmrErrorC)
    );
endmodule

