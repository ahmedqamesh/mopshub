/****************************************************************************************************
 *                          ! THIS FILE WAS AUTO-GENERATED BY TMRG TOOL !                           *
 *                                   ! DO NOT EDIT IT MANUALLY !                                    *
 *                                                                                                  *
 * file    : ./output/reset_mac2TMR.v                                                               *
 *                                                                                                  *
 * user    : lucas                                                                                  *
 * host    : DESKTOP-BFDSFP2                                                                        *
 * date    : 03/04/2022 20:08:56                                                                    *
 *                                                                                                  *
 * workdir : /mnt/c/Users/Lucas/Desktop/mopshub_triplication/triplicated/mopshub_top_canakari_ftrim/hdl *
 * cmd     : /mnt/c/Users/Lucas/Desktop/mopshub_triplication/tmrg-master/bin/tmrg -vv -c tmrg.cfg   *
 * tmrg rev:                                                                                        *
 *                                                                                                  *
 * src file: reset_mac2.v                                                                           *
 *           Git SHA           : File not in git repository!                                        *
 *           Modification time : 2022-03-29 13:49:21                                                *
 *           File Size         : 2442                                                               *
 *           MD5 hash          : af0c783f3ebe67b81ba9cde6444ee673                                   *
 *                                                                                                  *
 ****************************************************************************************************/

module reset_mac2TMR(
  input wire  resetA ,
  input wire  resetB ,
  input wire  resetC ,
  input wire  clockA ,
  input wire  clockB ,
  input wire  clockC ,
  input wire  prescalerA ,
  input wire  prescalerB ,
  input wire  prescalerC ,
  output wire  sync_resetA ,
  output wire  sync_resetB ,
  output wire  sync_resetC 
);
wor countTmrErrorC;
wire [1:0] countVotedC;
wor activeTmrErrorC;
wire activeVotedC;
wor countTmrErrorB;
wire [1:0] countVotedB;
wor activeTmrErrorB;
wire activeVotedB;
wor countTmrErrorA;
wire [1:0] countVotedA;
wor activeTmrErrorA;
wire activeVotedA;
reg  [1:0] countA ;
reg  [1:0] countB ;
reg  [1:0] countC ;
reg  activeA ;
reg  activeB ;
reg  activeC ;
assign sync_resetA =  resetA&(~ activeVotedA );
assign sync_resetB =  resetB&(~ activeVotedB );
assign sync_resetC =  resetC&(~ activeVotedC );

always @( posedge clockA or negedge resetA )
  begin
    if (resetA==1'b0)
      begin
        activeA <= 1'b1;
        countA <= 2'd0;
      end
    else
      begin
        countA <= countVotedA;
        activeA <= activeVotedA;
        if (prescalerA==1'b1)
          if (activeVotedA==1'b1)
            if (countVotedA==2'd3)
              activeA <= 1'b0;
            else
              countA <= countVotedA+2'd1;
      end
  end

always @( posedge clockB or negedge resetB )
  begin
    if (resetB==1'b0)
      begin
        activeB <= 1'b1;
        countB <= 2'd0;
      end
    else
      begin
        countB <= countVotedB;
        activeB <= activeVotedB;
        if (prescalerB==1'b1)
          if (activeVotedB==1'b1)
            if (countVotedB==2'd3)
              activeB <= 1'b0;
            else
              countB <= countVotedB+2'd1;
      end
  end

always @( posedge clockC or negedge resetC )
  begin
    if (resetC==1'b0)
      begin
        activeC <= 1'b1;
        countC <= 2'd0;
      end
    else
      begin
        countC <= countVotedC;
        activeC <= activeVotedC;
        if (prescalerC==1'b1)
          if (activeVotedC==1'b1)
            if (countVotedC==2'd3)
              activeC <= 1'b0;
            else
              countC <= countVotedC+2'd1;
      end
  end

majorityVoter activeVoterA (
    .inA(activeA),
    .inB(activeB),
    .inC(activeC),
    .out(activeVotedA),
    .tmrErr(activeTmrErrorA)
    );

majorityVoter #(.WIDTH(2)) countVoterA (
    .inA(countA),
    .inB(countB),
    .inC(countC),
    .out(countVotedA),
    .tmrErr(countTmrErrorA)
    );

majorityVoter activeVoterB (
    .inA(activeA),
    .inB(activeB),
    .inC(activeC),
    .out(activeVotedB),
    .tmrErr(activeTmrErrorB)
    );

majorityVoter #(.WIDTH(2)) countVoterB (
    .inA(countA),
    .inB(countB),
    .inC(countC),
    .out(countVotedB),
    .tmrErr(countTmrErrorB)
    );

majorityVoter activeVoterC (
    .inA(activeA),
    .inB(activeB),
    .inC(activeC),
    .out(activeVotedC),
    .tmrErr(activeTmrErrorC)
    );

majorityVoter #(.WIDTH(2)) countVoterC (
    .inA(countA),
    .inB(countB),
    .inC(countC),
    .out(countVotedC),
    .tmrErr(countTmrErrorC)
    );
endmodule

