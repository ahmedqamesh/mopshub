/****************************************************************************************************
 *                          ! THIS FILE WAS AUTO-GENERATED BY TMRG TOOL !                           *
 *                                   ! DO NOT EDIT IT MANUALLY !                                    *
 *                                                                                                  *
 * file    : ./output/rcrc_cell2TMR.v                                                               *
 *                                                                                                  *
 * user    : lucas                                                                                  *
 * host    : DESKTOP-BFDSFP2                                                                        *
 * date    : 06/10/2022 13:52:57                                                                    *
 *                                                                                                  *
 * workdir : /mnt/c/Users/Lucas/Documents/GitHub/mopshub_triplicated/triplicated/mopshub_top_board/hdl *
 * cmd     : /mnt/c/Users/Lucas/Desktop/mopshub_triplication/tmrg-master/bin/tmrg -vv -c tmrg.cfg   *
 * tmrg rev:                                                                                        *
 *                                                                                                  *
 * src file: rcrc_cell2.v                                                                           *
 *           Git SHA           : c110441b08b692cc54ebd4a3b84a2599430e8f93                           *
 *           Modification time : 2022-08-25 10:01:33                                                *
 *           File Size         : 1913                                                               *
 *           MD5 hash          : 0667231ae4e38926d0db19a3141a27f1                                   *
 *                                                                                                  *
 ****************************************************************************************************/

module rcrc_cell2TMR(
  input wire  enable ,
  input wire  clock ,
  input wire  reset ,
  input wire  Input ,
  output wire  q 
);
wire resetC;
wire resetB;
wire resetA;
wire qC;
wire qB;
wire qA;
wire enableC;
wire enableB;
wire enableA;
wire edge_varVC;
wire edge_varVB;
wire edge_varVA;
wire clockC;
wire clockB;
wire clockA;
wire InputC;
wire InputB;
wire InputA;
wor q_iTmrError;
wire q_i;
wor edge_varTmrError;
wire edge_var;
reg  edge_varA ;
reg  edge_varB ;
reg  edge_varC ;
reg  q_iA ;
reg  q_iB ;
reg  q_iC ;
assign q =  q_i;
wire edge_varV =  edge_var;

always @( posedge clockA )
  begin
    if (resetA==1'b0)
      begin
        q_iA <= 1'b0;
        edge_varA =  1'b0;
      end
    else
      begin
        q_iA <= qA;
        edge_varA =  edge_varVA;
        if ((enableA==1'b1)&&(edge_varVA==1'b0))
          begin
            q_iA <= InputA;
            edge_varA =  1'b1;
          end
        else
          if ((enableA==1'b0)&&(edge_varVA==1'b1))
            begin
              edge_varA =  1'b0;
            end
      end
  end

always @( posedge clockB )
  begin
    if (resetB==1'b0)
      begin
        q_iB <= 1'b0;
        edge_varB =  1'b0;
      end
    else
      begin
        q_iB <= qB;
        edge_varB =  edge_varVB;
        if ((enableB==1'b1)&&(edge_varVB==1'b0))
          begin
            q_iB <= InputB;
            edge_varB =  1'b1;
          end
        else
          if ((enableB==1'b0)&&(edge_varVB==1'b1))
            begin
              edge_varB =  1'b0;
            end
      end
  end

always @( posedge clockC )
  begin
    if (resetC==1'b0)
      begin
        q_iC <= 1'b0;
        edge_varC =  1'b0;
      end
    else
      begin
        q_iC <= qC;
        edge_varC =  edge_varVC;
        if ((enableC==1'b1)&&(edge_varVC==1'b0))
          begin
            q_iC <= InputC;
            edge_varC =  1'b1;
          end
        else
          if ((enableC==1'b0)&&(edge_varVC==1'b1))
            begin
              edge_varC =  1'b0;
            end
      end
  end

majorityVoter edge_varVoter (
    .inA(edge_varA),
    .inB(edge_varB),
    .inC(edge_varC),
    .out(edge_var),
    .tmrErr(edge_varTmrError)
    );

majorityVoter q_iVoter (
    .inA(q_iA),
    .inB(q_iB),
    .inC(q_iC),
    .out(q_i),
    .tmrErr(q_iTmrError)
    );

fanout InputFanout (
    .in(Input),
    .outA(InputA),
    .outB(InputB),
    .outC(InputC)
    );

fanout clockFanout (
    .in(clock),
    .outA(clockA),
    .outB(clockB),
    .outC(clockC)
    );

fanout edge_varVFanout (
    .in(edge_varV),
    .outA(edge_varVA),
    .outB(edge_varVB),
    .outC(edge_varVC)
    );

fanout enableFanout (
    .in(enable),
    .outA(enableA),
    .outB(enableB),
    .outC(enableC)
    );

fanout qFanout (
    .in(q),
    .outA(qA),
    .outB(qB),
    .outC(qC)
    );

fanout resetFanout (
    .in(reset),
    .outA(resetA),
    .outB(resetB),
    .outC(resetC)
    );
endmodule

