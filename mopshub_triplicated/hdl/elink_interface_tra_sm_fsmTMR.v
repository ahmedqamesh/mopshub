/****************************************************************************************************
 *                          ! THIS FILE WAS AUTO-GENERATED BY TMRG TOOL !                           *
 *                                   ! DO NOT EDIT IT MANUALLY !                                    *
 *                                                                                                  *
 * file    : ./output/elink_interface_tra_sm_fsmTMR.v                                               *
 *                                                                                                  *
 * user    : lucas                                                                                  *
 * host    : DESKTOP-BFDSFP2                                                                        *
 * date    : 05/12/2022 13:28:08                                                                    *
 *                                                                                                  *
 * workdir : /mnt/c/Users/Lucas/Documents/GitHub/mopshub_triplicated/triplicated/mopshub_top_board_16/hdl *
 * cmd     : /mnt/c/Users/Lucas/Documents/GitHub/mopshub_triplicated/tmrg-master/bin/tmrg -vv -c    *
 *           tmrg.cfg                                                                               *
 * tmrg rev: b25f042058e4e97751df2a0933c24aeadd5a78a5                                               *
 *                                                                                                  *
 * src file: elink_interface_tra_sm_fsm.v                                                           *
 *           Git SHA           : b25f042058e4e97751df2a0933c24aeadd5a78a5 (?? elink_interface_tra_sm_fsm.v) *
 *           Modification time : 2022-12-04 15:41:31.642210                                         *
 *           File Size         : 19899                                                              *
 *           MD5 hash          : 8616653d73f3eb1129042b7ac24a9c07                                   *
 *                                                                                                  *
 ****************************************************************************************************/

`resetall 
`timescale  1ns/10ps
module elink_interface_tra_SMTMR(
  input wire  abort ,
  input wire  can_id ,
  input wire  clk ,
  input wire  fifo_data_eop ,
  input wire  fifo_data_sop ,
  input wire  fifo_elink_rdy ,
  input wire  fifo_packet_rdy ,
  input wire  rst ,
  input wire  spi_can_id ,
  input wire  spi_mon_id ,
  input wire  start_read_elink ,
  input wire  timeoutrst ,
  output reg [4:0] addr_read ,
  output reg  buffer_elink_en ,
  output reg  buffer_elink_spi_en ,
  output reg  buffer_spi_en ,
  output reg  buffer_tra_en ,
  output reg  cs_eread ,
  output reg  end_read_elink ,
  output reg  entimeout ,
  output reg  irq_elink_tra ,
  output reg  irq_spi_tra ,
  output reg  spi_tra_mode ,
  output reg [6:0] statedeb 
);
parameter ST_waittoact =6'd0;
parameter ST_reset =6'd1;
parameter ST_wait_sop =6'd2;
parameter RB0 =6'd3;
parameter ST_skip_msg =6'd4;
parameter RB2 =6'd5;
parameter store_RB2 =6'd6;
parameter RB3 =6'd7;
parameter RB4 =6'd8;
parameter store_RB3 =6'd9;
parameter store_RB4 =6'd10;
parameter store_RB0 =6'd11;
parameter RB1 =6'd12;
parameter store_RB1 =6'd13;
parameter RB5 =6'd14;
parameter store_RB5 =6'd15;
parameter RB6 =6'd16;
parameter store_RB6 =6'd17;
parameter RB7 =6'd18;
parameter store_RB7 =6'd19;
parameter store_RB8 =6'd20;
parameter RB8 =6'd21;
parameter store_RB9 =6'd22;
parameter RB9 =6'd23;
parameter ST_wait_eop =6'd24;
parameter ST_end_read_en =6'd25;
parameter ST_GOToWait =6'd26;
parameter ST_en_buffer =6'd27;
parameter store_SPI0 =6'd28;
parameter SPI1 =6'd29;
parameter store_SPI1 =6'd30;
parameter SPI2 =6'd31;
parameter store_SPI2 =6'd32;
parameter ST_end_read_en1 =6'd33;
parameter ST_en_buffer1 =6'd34;
parameter ST_GOToWait1 =6'd35;
parameter SPI3 =6'd36;
parameter store_SPI3 =6'd37;
parameter ST_wait_eop1 =6'd38;
parameter RB10 =6'd39;
parameter store_RB10 =6'd40;
parameter RB11 =6'd41;
parameter RB12 =6'd42;
parameter store_RB11 =6'd43;
parameter store_RB12 =6'd44;
parameter store_RB13 =6'd45;
parameter RB13 =6'd46;
parameter store_RB14 =6'd47;
parameter RB14 =6'd48;
parameter store_RB15 =6'd49;
parameter RB15 =6'd50;
parameter store_RB16 =6'd51;
parameter RB16 =6'd52;
parameter store_RB17 =6'd53;
parameter store_RB18 =6'd54;
parameter RB17 =6'd55;
parameter store_RB19 =6'd56;
parameter RB18 =6'd57;
parameter ST_wait_eop2 =6'd58;
parameter ST_end_read_en2 =6'd59;
parameter ST_GOToWait2 =6'd60;
parameter ST_en_buffer2 =6'd61;
wire timeoutrstC;
wire timeoutrstB;
wire timeoutrstA;
wire rstC;
wire rstB;
wire rstA;
wire [5:0] next_stateC;
wire [5:0] next_stateB;
wire [5:0] next_stateA;
wire clkC;
wire clkB;
wire clkA;
wire abortC;
wire abortB;
wire abortA;
wor current_stateTmrError;
wire [5:0] current_state;
reg  [5:0] current_stateA ;
reg  [5:0] current_stateB ;
reg  [5:0] current_stateC ;
reg  [5:0] next_state ;
wire [5:0] current_stateV =  current_state;

always @( can_id or current_state or fifo_data_eop or fifo_data_sop or fifo_elink_rdy or fifo_packet_rdy or rst or spi_can_id or spi_mon_id or start_read_elink )
  begin : next_state_block_proc
    case (current_state)
      ST_waittoact : 
        begin
          if (fifo_elink_rdy==1)
            next_state =  ST_wait_sop;
          else
            next_state =  ST_waittoact;
        end
      ST_reset : 
        begin
          if (rst==1)
            next_state =  ST_waittoact;
          else
            next_state =  ST_reset;
        end
      ST_wait_sop : 
        begin
          if (fifo_data_sop==1)
            next_state =  RB0;
          else
            next_state =  ST_wait_sop;
        end
      RB0 : 
        begin
          if (can_id==1)
            next_state =  store_RB0;
          else
            if ((spi_mon_id==1)&&(fifo_packet_rdy==1))
              next_state =  store_SPI0;
            else
              if (spi_can_id==1)
                next_state =  store_RB13;
              else
                next_state =  RB0;
        end
      ST_skip_msg : 
        begin
          next_state =  ST_waittoact;
        end
      RB2 : 
        begin
          next_state =  store_RB2;
        end
      store_RB2 : 
        begin
          if (fifo_elink_rdy&&fifo_packet_rdy==1)
            next_state =  RB3;
          else
            next_state =  store_RB2;
        end
      RB3 : 
        begin
          next_state =  store_RB3;
        end
      RB4 : 
        begin
          next_state =  store_RB4;
        end
      store_RB3 : 
        begin
          if (fifo_elink_rdy&&fifo_packet_rdy==1)
            next_state =  RB4;
          else
            next_state =  store_RB3;
        end
      store_RB4 : 
        begin
          if (fifo_elink_rdy&&fifo_packet_rdy==1)
            next_state =  RB5;
          else
            next_state =  store_RB4;
        end
      store_RB0 : 
        begin
          if (fifo_elink_rdy&&fifo_packet_rdy==1)
            next_state =  RB1;
          else
            next_state =  store_RB0;
        end
      RB1 : 
        begin
          next_state =  store_RB1;
        end
      store_RB1 : 
        begin
          if (fifo_elink_rdy&&fifo_packet_rdy==1)
            next_state =  RB2;
          else
            next_state =  store_RB1;
        end
      RB5 : 
        begin
          next_state =  store_RB5;
        end
      store_RB5 : 
        begin
          if (fifo_elink_rdy&&fifo_packet_rdy==1)
            next_state =  RB6;
          else
            next_state =  store_RB5;
        end
      RB6 : 
        begin
          next_state =  store_RB6;
        end
      store_RB6 : 
        begin
          if (fifo_elink_rdy&&fifo_packet_rdy==1)
            next_state =  RB7;
          else
            next_state =  store_RB6;
        end
      RB7 : 
        begin
          next_state =  store_RB7;
        end
      store_RB7 : 
        begin
          if (fifo_elink_rdy&&fifo_packet_rdy==1)
            next_state =  RB8;
          else
            next_state =  store_RB7;
        end
      store_RB8 : 
        begin
          if (fifo_elink_rdy&&fifo_packet_rdy==1)
            next_state =  RB9;
          else
            next_state =  store_RB8;
        end
      RB8 : 
        begin
          next_state =  store_RB8;
        end
      store_RB9 : 
        begin
          if (fifo_elink_rdy&&fifo_packet_rdy==1)
            next_state =  ST_wait_eop;
          else
            next_state =  store_RB9;
        end
      RB9 : 
        begin
          next_state =  store_RB9;
        end
      ST_wait_eop : 
        begin
          if (fifo_data_eop==1)
            next_state =  ST_end_read_en;
          else
            next_state =  ST_wait_eop;
        end
      ST_end_read_en : 
        begin
          if (start_read_elink==1)
            next_state =  ST_en_buffer;
          else
            next_state =  ST_end_read_en;
        end
      ST_GOToWait : 
        begin
          next_state =  ST_waittoact;
        end
      ST_en_buffer : 
        begin
          next_state =  ST_GOToWait;
        end
      store_SPI0 : 
        begin
          if (fifo_elink_rdy&&fifo_packet_rdy==1)
            next_state =  SPI1;
          else
            next_state =  store_SPI0;
        end
      SPI1 : 
        begin
          next_state =  store_SPI1;
        end
      store_SPI1 : 
        begin
          if (fifo_elink_rdy&&fifo_packet_rdy==1)
            next_state =  SPI2;
          else
            next_state =  store_SPI1;
        end
      SPI2 : 
        begin
          next_state =  store_SPI2;
        end
      store_SPI2 : 
        begin
          if (fifo_elink_rdy&&fifo_packet_rdy==1)
            next_state =  SPI3;
          else
            next_state =  store_SPI2;
        end
      ST_end_read_en1 : 
        begin
          if (start_read_elink==1)
            next_state =  ST_en_buffer1;
          else
            next_state =  ST_end_read_en1;
        end
      ST_en_buffer1 : 
        begin
          next_state =  ST_GOToWait1;
        end
      ST_GOToWait1 : 
        begin
          next_state =  ST_waittoact;
        end
      SPI3 : 
        begin
          next_state =  store_SPI3;
        end
      store_SPI3 : 
        begin
          if (fifo_elink_rdy&&fifo_packet_rdy==1)
            next_state =  ST_wait_eop1;
          else
            next_state =  store_SPI3;
        end
      ST_wait_eop1 : 
        begin
          if (fifo_data_eop==1)
            next_state =  ST_end_read_en1;
          else
            next_state =  ST_wait_eop1;
        end
      RB10 : 
        begin
          next_state =  store_RB10;
        end
      store_RB10 : 
        begin
          if (fifo_elink_rdy&&fifo_packet_rdy==1)
            next_state =  RB11;
          else
            next_state =  store_RB10;
        end
      RB11 : 
        begin
          next_state =  store_RB11;
        end
      RB12 : 
        begin
          next_state =  store_RB12;
        end
      store_RB11 : 
        begin
          if (fifo_elink_rdy&&fifo_packet_rdy==1)
            next_state =  RB12;
          else
            next_state =  store_RB11;
        end
      store_RB12 : 
        begin
          next_state =  RB14;
        end
      store_RB13 : 
        begin
          if (fifo_elink_rdy&&fifo_packet_rdy==1)
            next_state =  RB13;
          else
            next_state =  store_RB13;
        end
      RB13 : 
        begin
          next_state =  store_RB14;
        end
      store_RB14 : 
        begin
          if (fifo_elink_rdy&&fifo_packet_rdy==1)
            next_state =  RB10;
          else
            next_state =  store_RB14;
        end
      RB14 : 
        begin
          next_state =  store_RB15;
        end
      store_RB15 : 
        begin
          next_state =  RB15;
        end
      RB15 : 
        begin
          next_state =  store_RB16;
        end
      store_RB16 : 
        begin
          next_state =  RB16;
        end
      RB16 : 
        begin
          next_state =  store_RB17;
        end
      store_RB17 : 
        begin
          next_state =  RB17;
        end
      store_RB18 : 
        begin
          next_state =  RB18;
        end
      RB17 : 
        begin
          next_state =  store_RB18;
        end
      store_RB19 : 
        begin
          next_state =  ST_wait_eop2;
        end
      RB18 : 
        begin
          next_state =  store_RB19;
        end
      ST_wait_eop2 : 
        begin
          if (fifo_data_eop==1)
            next_state =  ST_end_read_en2;
          else
            next_state =  ST_wait_eop2;
        end
      ST_end_read_en2 : 
        begin
          if (start_read_elink==1)
            next_state =  ST_en_buffer2;
          else
            next_state =  ST_end_read_en2;
        end
      ST_GOToWait2 : 
        begin
          next_state =  ST_waittoact;
        end
      ST_en_buffer2 : 
        begin
          next_state =  ST_GOToWait2;
        end
      default : next_state =  ST_reset;
    endcase
  end

always @( current_state )
  begin : output_block_proc
    addr_read =  5'b0;
    buffer_elink_en =  0;
    buffer_elink_spi_en =  0;
    buffer_spi_en =  0;
    buffer_tra_en =  0;
    cs_eread =  0;
    end_read_elink =  0;
    entimeout =  1;
    irq_elink_tra =  0;
    irq_spi_tra =  0;
    spi_tra_mode =  0;
    case (current_state)
      ST_waittoact : 
        begin
          entimeout =  0;
        end
      ST_reset : 
        begin
          entimeout =  0;
          spi_tra_mode =  0;
        end
      ST_wait_sop : 
        begin
          addr_read =  5'b00000;
          cs_eread =  1;
        end
      RB0 : 
        begin
          addr_read =  5'b00010;
          cs_eread =  1;
        end
      RB2 : 
        begin
          addr_read =  5'b00100;
          cs_eread =  1;
        end
      store_RB2 : 
        begin
          addr_read =  5'b00100;
          cs_eread =  1;
          buffer_elink_en =  1;
        end
      RB3 : 
        begin
          addr_read =  5'b00101;
          cs_eread =  1;
        end
      RB4 : 
        begin
          addr_read =  5'b00110;
          cs_eread =  1;
        end
      store_RB3 : 
        begin
          addr_read =  5'b00101;
          cs_eread =  1;
          buffer_elink_en =  1;
        end
      store_RB4 : 
        begin
          addr_read =  5'b00110;
          cs_eread =  1;
          buffer_elink_en =  1;
        end
      store_RB0 : 
        begin
          addr_read =  5'b00010;
          buffer_elink_en =  1;
          cs_eread =  1;
        end
      RB1 : 
        begin
          addr_read =  5'b00011;
          cs_eread =  1;
        end
      store_RB1 : 
        begin
          addr_read =  5'b00011;
          cs_eread =  1;
          buffer_elink_en =  1;
        end
      RB5 : 
        begin
          addr_read =  5'b00111;
          cs_eread =  1;
        end
      store_RB5 : 
        begin
          addr_read =  5'b00111;
          cs_eread =  1;
          buffer_elink_en =  1;
        end
      RB6 : 
        begin
          addr_read =  5'b01000;
          cs_eread =  1;
        end
      store_RB6 : 
        begin
          addr_read =  5'b01000;
          cs_eread =  1;
          buffer_elink_en =  1;
        end
      RB7 : 
        begin
          addr_read =  5'b01001;
          cs_eread =  1;
        end
      store_RB7 : 
        begin
          addr_read =  5'b01001;
          cs_eread =  1;
          buffer_elink_en =  1;
        end
      store_RB8 : 
        begin
          addr_read =  5'b01010;
          cs_eread =  1;
          buffer_elink_en =  1;
        end
      RB8 : 
        begin
          addr_read =  5'b01010;
          cs_eread =  1;
        end
      store_RB9 : 
        begin
          addr_read =  5'b01011;
          cs_eread =  1;
          buffer_elink_en =  1;
        end
      RB9 : 
        begin
          addr_read =  5'b01011;
          cs_eread =  1;
        end
      ST_wait_eop : 
        begin
          addr_read =  5'b00000;
          cs_eread =  1;
          buffer_elink_en =  0;
        end
      ST_end_read_en : 
        begin
          addr_read =  5'b00000;
          irq_elink_tra =  1'b1;
        end
      ST_GOToWait : 
        begin
          end_read_elink =  1;
          addr_read =  5'b00000;
        end
      ST_en_buffer : 
        begin
          addr_read =  5'b00000;
          buffer_tra_en =  1;
        end
      store_SPI0 : 
        begin
          addr_read =  5'b00010;
          buffer_elink_spi_en =  1;
          cs_eread =  1;
          spi_tra_mode =  1;
        end
      SPI1 : 
        begin
          addr_read =  5'b00011;
          cs_eread =  1;
          spi_tra_mode =  1;
        end
      store_SPI1 : 
        begin
          addr_read =  5'b00011;
          cs_eread =  1;
          buffer_elink_spi_en =  1;
          spi_tra_mode =  1;
        end
      SPI2 : 
        begin
          addr_read =  5'b00100;
          cs_eread =  1;
          spi_tra_mode =  1;
        end
      store_SPI2 : 
        begin
          addr_read =  5'b00100;
          cs_eread =  1;
          buffer_elink_spi_en =  1;
          spi_tra_mode =  1;
        end
      ST_end_read_en1 : 
        begin
          addr_read =  5'b00000;
          irq_spi_tra =  1'b1;
          spi_tra_mode =  1;
        end
      ST_en_buffer1 : 
        begin
          addr_read =  5'b00000;
          buffer_spi_en =  1;
          spi_tra_mode =  1;
        end
      ST_GOToWait1 : 
        begin
          end_read_elink =  1;
          addr_read =  5'b00000;
          spi_tra_mode =  1;
        end
      SPI3 : 
        begin
          addr_read =  5'b00101;
          cs_eread =  1;
          spi_tra_mode =  1;
        end
      store_SPI3 : 
        begin
          addr_read =  5'b00101;
          cs_eread =  1;
          buffer_elink_spi_en =  1;
          spi_tra_mode =  1;
        end
      ST_wait_eop1 : 
        begin
          addr_read =  5'b00000;
          cs_eread =  1;
          buffer_elink_spi_en =  0;
          spi_tra_mode =  1;
        end
      RB10 : 
        begin
          addr_read =  5'b00100;
          cs_eread =  1;
        end
      store_RB10 : 
        begin
          addr_read =  5'b00100;
          cs_eread =  1;
          buffer_elink_en =  1;
        end
      RB11 : 
        begin
          addr_read =  5'b00101;
          cs_eread =  1;
        end
      RB12 : 
        begin
          addr_read =  5'b00110;
          cs_eread =  1;
        end
      store_RB11 : 
        begin
          addr_read =  5'b00101;
          cs_eread =  1;
          buffer_elink_en =  1;
        end
      store_RB12 : 
        begin
          addr_read =  5'b00110;
          cs_eread =  1;
          buffer_elink_en =  1;
        end
      store_RB13 : 
        begin
          addr_read =  5'b00010;
          buffer_elink_en =  1;
          cs_eread =  1;
        end
      RB13 : 
        begin
          addr_read =  5'b00011;
          cs_eread =  1;
        end
      store_RB14 : 
        begin
          addr_read =  5'b00011;
          cs_eread =  1;
          buffer_elink_en =  1;
        end
      RB14 : 
        begin
          addr_read =  5'b00111;
          cs_eread =  1;
        end
      store_RB15 : 
        begin
          addr_read =  5'b00111;
          cs_eread =  1;
          buffer_elink_en =  1;
        end
      RB15 : 
        begin
          addr_read =  5'b01000;
          cs_eread =  1;
        end
      store_RB16 : 
        begin
          addr_read =  5'b01000;
          cs_eread =  1;
          buffer_elink_en =  1;
        end
      RB16 : 
        begin
          addr_read =  5'b01001;
          cs_eread =  1;
        end
      store_RB17 : 
        begin
          addr_read =  5'b01001;
          cs_eread =  1;
          buffer_elink_en =  1;
        end
      store_RB18 : 
        begin
          addr_read =  5'b01010;
          cs_eread =  1;
          buffer_elink_en =  1;
        end
      RB17 : 
        begin
          addr_read =  5'b01010;
          cs_eread =  1;
        end
      store_RB19 : 
        begin
          addr_read =  5'b01011;
          cs_eread =  1;
          buffer_elink_en =  1;
        end
      RB18 : 
        begin
          addr_read =  5'b01011;
          cs_eread =  1;
        end
      ST_wait_eop2 : 
        begin
          addr_read =  5'b00000;
          cs_eread =  1;
        end
      ST_end_read_en2 : 
        begin
          addr_read =  5'b00000;
          irq_elink_tra =  1'b1;
        end
      ST_GOToWait2 : 
        begin
          end_read_elink =  1;
          addr_read =  5'b00000;
        end
      ST_en_buffer2 : 
        begin
          addr_read =  5'b00000;
          buffer_tra_en =  1;
        end
    endcase
  end

always @( posedge clkA )
  begin : clocked_block_procA
    if (!rstA)
      begin
        current_stateA <= ST_reset;
      end
    else
      if (timeoutrstA)
        begin
          current_stateA <= ST_skip_msg;
        end
      else
        if (abortA)
          begin
            current_stateA <= ST_skip_msg;
          end
        else
          begin
            current_stateA <= next_stateA;
          end
  end

always @( posedge clkB )
  begin : clocked_block_procB
    if (!rstB)
      begin
        current_stateB <= ST_reset;
      end
    else
      if (timeoutrstB)
        begin
          current_stateB <= ST_skip_msg;
        end
      else
        if (abortB)
          begin
            current_stateB <= ST_skip_msg;
          end
        else
          begin
            current_stateB <= next_stateB;
          end
  end

always @( posedge clkC )
  begin : clocked_block_procC
    if (!rstC)
      begin
        current_stateC <= ST_reset;
      end
    else
      if (timeoutrstC)
        begin
          current_stateC <= ST_skip_msg;
        end
      else
        if (abortC)
          begin
            current_stateC <= ST_skip_msg;
          end
        else
          begin
            current_stateC <= next_stateC;
          end
  end

always @( current_state )
  begin
    statedeb =  7'b0;
    statedeb[5:0]  =  current_state;
  end

majorityVoter #(.WIDTH(6)) current_stateVoter (
    .inA(current_stateA),
    .inB(current_stateB),
    .inC(current_stateC),
    .out(current_state),
    .tmrErr(current_stateTmrError)
    );

fanout abortFanout (
    .in(abort),
    .outA(abortA),
    .outB(abortB),
    .outC(abortC)
    );

fanout clkFanout (
    .in(clk),
    .outA(clkA),
    .outB(clkB),
    .outC(clkC)
    );

fanout #(.WIDTH(6)) next_stateFanout (
    .in(next_state),
    .outA(next_stateA),
    .outB(next_stateB),
    .outC(next_stateC)
    );

fanout rstFanout (
    .in(rst),
    .outA(rstA),
    .outB(rstB),
    .outC(rstC)
    );

fanout timeoutrstFanout (
    .in(timeoutrst),
    .outA(timeoutrstA),
    .outB(timeoutrstB),
    .outC(timeoutrstC)
    );
endmodule

