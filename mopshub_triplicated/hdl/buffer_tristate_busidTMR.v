/****************************************************************************************************
 *                          ! THIS FILE WAS AUTO-GENERATED BY TMRG TOOL !                           *
 *                                   ! DO NOT EDIT IT MANUALLY !                                    *
 *                                                                                                  *
 * file    : ./output/buffer_tristate_busidTMR.v                                                    *
 *                                                                                                  *
 * user    : lucas                                                                                  *
 * host    : DESKTOP-BFDSFP2                                                                        *
 * date    : 06/10/2022 13:52:38                                                                    *
 *                                                                                                  *
 * workdir : /mnt/c/Users/Lucas/Documents/GitHub/mopshub_triplicated/triplicated/mopshub_top_board/hdl *
 * cmd     : /mnt/c/Users/Lucas/Desktop/mopshub_triplication/tmrg-master/bin/tmrg -vv -c tmrg.cfg   *
 * tmrg rev:                                                                                        *
 *                                                                                                  *
 * src file: buffer_tristate_busid.v                                                                *
 *           Git SHA           : c110441b08b692cc54ebd4a3b84a2599430e8f93                           *
 *           Modification time : 2022-10-05 20:59:05                                                *
 *           File Size         : 1398                                                               *
 *           MD5 hash          : 23411ef7fd4833a6ec8e84f1b65bcb60                                   *
 *                                                                                                  *
 ****************************************************************************************************/

module buffer_tristate_busidTMR(
  input wire  clk ,
  input wire  rst ,
  input wire [4:0] data_tra_in0 ,
  input wire [4:0] data_tra_in1 ,
  input wire [4:0] data_tra_in2 ,
  input wire [4:0] data_tra_in3 ,
  input wire  buffer_en0 ,
  input wire  buffer_en1 ,
  input wire  buffer_en2 ,
  input wire  buffer_en3 ,
  output wire [4:0] data_tra_out 
);
wire rstC;
wire rstB;
wire rstA;
wire [4:0] data_tra_outC;
wire [4:0] data_tra_outB;
wire [4:0] data_tra_outA;
wire [4:0] data_tra_in3C;
wire [4:0] data_tra_in3B;
wire [4:0] data_tra_in3A;
wire [4:0] data_tra_in2C;
wire [4:0] data_tra_in2B;
wire [4:0] data_tra_in2A;
wire [4:0] data_tra_in1C;
wire [4:0] data_tra_in1B;
wire [4:0] data_tra_in1A;
wire [4:0] data_tra_in0C;
wire [4:0] data_tra_in0B;
wire [4:0] data_tra_in0A;
wire clkC;
wire clkB;
wire clkA;
wire buffer_en3C;
wire buffer_en3B;
wire buffer_en3A;
wire buffer_en2C;
wire buffer_en2B;
wire buffer_en2A;
wire buffer_en1C;
wire buffer_en1B;
wire buffer_en1A;
wire buffer_en0C;
wire buffer_en0B;
wire buffer_en0A;
wor data_tra_regTmrError;
wire [4:0] data_tra_reg;
reg  [4:0] data_tra_regA ;
reg  [4:0] data_tra_regB ;
reg  [4:0] data_tra_regC ;
initial
  data_tra_regA =  5'h0;
initial
  data_tra_regB =  5'h0;
initial
  data_tra_regC =  5'h0;

always @( posedge clkA )
  begin
    if (!rstA)
      data_tra_regA <= 5'd0;
    else
      begin
        if (buffer_en0A)
          data_tra_regA <= data_tra_in0A;
        else
          if (buffer_en1A)
            data_tra_regA <= data_tra_in1A;
          else
            if (buffer_en2A)
              data_tra_regA <= data_tra_in2A;
            else
              if (buffer_en3A)
                data_tra_regA <= data_tra_in3A;
              else
                data_tra_regA <= data_tra_outA;
      end
  end

always @( posedge clkB )
  begin
    if (!rstB)
      data_tra_regB <= 5'd0;
    else
      begin
        if (buffer_en0B)
          data_tra_regB <= data_tra_in0B;
        else
          if (buffer_en1B)
            data_tra_regB <= data_tra_in1B;
          else
            if (buffer_en2B)
              data_tra_regB <= data_tra_in2B;
            else
              if (buffer_en3B)
                data_tra_regB <= data_tra_in3B;
              else
                data_tra_regB <= data_tra_outB;
      end
  end

always @( posedge clkC )
  begin
    if (!rstC)
      data_tra_regC <= 5'd0;
    else
      begin
        if (buffer_en0C)
          data_tra_regC <= data_tra_in0C;
        else
          if (buffer_en1C)
            data_tra_regC <= data_tra_in1C;
          else
            if (buffer_en2C)
              data_tra_regC <= data_tra_in2C;
            else
              if (buffer_en3C)
                data_tra_regC <= data_tra_in3C;
              else
                data_tra_regC <= data_tra_outC;
      end
  end
assign data_tra_out =  data_tra_reg;

majorityVoter #(.WIDTH(5)) data_tra_regVoter (
    .inA(data_tra_regA),
    .inB(data_tra_regB),
    .inC(data_tra_regC),
    .out(data_tra_reg),
    .tmrErr(data_tra_regTmrError)
    );

fanout buffer_en0Fanout (
    .in(buffer_en0),
    .outA(buffer_en0A),
    .outB(buffer_en0B),
    .outC(buffer_en0C)
    );

fanout buffer_en1Fanout (
    .in(buffer_en1),
    .outA(buffer_en1A),
    .outB(buffer_en1B),
    .outC(buffer_en1C)
    );

fanout buffer_en2Fanout (
    .in(buffer_en2),
    .outA(buffer_en2A),
    .outB(buffer_en2B),
    .outC(buffer_en2C)
    );

fanout buffer_en3Fanout (
    .in(buffer_en3),
    .outA(buffer_en3A),
    .outB(buffer_en3B),
    .outC(buffer_en3C)
    );

fanout clkFanout (
    .in(clk),
    .outA(clkA),
    .outB(clkB),
    .outC(clkC)
    );

fanout #(.WIDTH(5)) data_tra_in0Fanout (
    .in(data_tra_in0),
    .outA(data_tra_in0A),
    .outB(data_tra_in0B),
    .outC(data_tra_in0C)
    );

fanout #(.WIDTH(5)) data_tra_in1Fanout (
    .in(data_tra_in1),
    .outA(data_tra_in1A),
    .outB(data_tra_in1B),
    .outC(data_tra_in1C)
    );

fanout #(.WIDTH(5)) data_tra_in2Fanout (
    .in(data_tra_in2),
    .outA(data_tra_in2A),
    .outB(data_tra_in2B),
    .outC(data_tra_in2C)
    );

fanout #(.WIDTH(5)) data_tra_in3Fanout (
    .in(data_tra_in3),
    .outA(data_tra_in3A),
    .outB(data_tra_in3B),
    .outC(data_tra_in3C)
    );

fanout #(.WIDTH(5)) data_tra_outFanout (
    .in(data_tra_out),
    .outA(data_tra_outA),
    .outB(data_tra_outB),
    .outC(data_tra_outC)
    );

fanout rstFanout (
    .in(rst),
    .outA(rstA),
    .outB(rstB),
    .outC(rstC)
    );
endmodule

