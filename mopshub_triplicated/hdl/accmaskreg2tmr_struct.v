//
// Module mopshub_triplicated.accmaskreg2TMR.struct
//
// Created:
//          by - dcs.dcs (localhost)
//          at - 09:18:05 05/10/22
//
// Generated by Mentor Graphics' HDL Designer(TM) 2019.4 (Build 4)
//


module accmaskreg2TMR( 
   // Port Declarations
   input   wire            clkA, 
   input   wire            clkB, 
   input   wire            clkC, 
   input   wire            rstA, 
   input   wire            rstB, 
   input   wire            rstC, 
   input   wire            cpuA, 
   input   wire            cpuB, 
   input   wire            cpuC, 
   input   wire    [15:0]  reginpA, 
   input   wire    [15:0]  reginpB, 
   input   wire    [15:0]  reginpC, 
   output  wire    [15:0]  regoutA, 
   output  wire    [15:0]  regoutB, 
   output  wire    [15:0]  regoutC
);


// Internal Declarations


// Local declarations

// Internal signal declarations
wor          reg_iTmrErrorC;
wire  [15:0] reg_iVotedC;
wor          reg_iTmrErrorB;
wire  [15:0] reg_iVotedB;
wor          reg_iTmrErrorA;
wire  [15:0] reg_iVotedA;
reg   [15:0] reg_iA;
reg   [15:0] reg_iB;
reg   [15:0] reg_iC;


// Instances 
majorityVoter #(16) reg_iVoterA( 
   .inA    (reg_iA), 
   .inB    (reg_iB), 
   .inC    (reg_iC), 
   .out    (reg_iVotedA), 
   .tmrErr (reg_iTmrErrorA)
); 

majorityVoter #(16) reg_iVoterB( 
   .inA    (reg_iA), 
   .inB    (reg_iB), 
   .inC    (reg_iC), 
   .out    (reg_iVotedB), 
   .tmrErr (reg_iTmrErrorB)
); 

majorityVoter #(16) reg_iVoterC( 
   .inA    (reg_iA), 
   .inB    (reg_iB), 
   .inC    (reg_iC), 
   .out    (reg_iVotedC), 
   .tmrErr (reg_iTmrErrorC)
); 

// HDL Embedded Text Block 1 eb1
assign regoutA =  reg_iVotedA;
assign regoutB =  reg_iVotedB;
assign regoutC =  reg_iVotedC;
// HDL Embedded Text Block 2 eb2
always @( posedge clkA )
  begin
    if (rstA==1'b0)
      begin
        reg_iA <= 16'd0;
      end
    else
      begin
        reg_iA <= reg_iVotedA;
        if (cpuA==1'b1)
          begin
            reg_iA <= reginpA;
          end
      end
  end
// HDL Embedded Text Block 3 eb3
always @( posedge clkB )
  begin
    if (rstB==1'b0)
      begin
        reg_iB <= 16'd0;
      end
    else
      begin
        reg_iB <= reg_iVotedB;
        if (cpuB==1'b1)
          begin
            reg_iB <= reginpB;
          end
      end
  end
// HDL Embedded Text Block 4 eb4
always @( posedge clkC )
  begin
    if (rstC==1'b0)
      begin
        reg_iC <= 16'd0;
      end
    else
      begin
        reg_iC <= reg_iVotedC;
        if (cpuC==1'b1)
          begin
            reg_iC <= reginpC;
          end
      end
  end

endmodule // accmaskreg2TMR

