/****************************************************************************************************
 *                          ! THIS FILE WAS AUTO-GENERATED BY TMRG TOOL !                           *
 *                                   ! DO NOT EDIT IT MANUALLY !                                    *
 *                                                                                                  *
 * file    : ./output/elink_proc_out_enc8b10b_structTMR.v                                           *
 *                                                                                                  *
 * user    : lucas                                                                                  *
 * host    : DESKTOP-BFDSFP2                                                                        *
 * date    : 03/04/2022 20:08:34                                                                    *
 *                                                                                                  *
 * workdir : /mnt/c/Users/Lucas/Desktop/mopshub_triplication/triplicated/mopshub_top_canakari_ftrim/hdl *
 * cmd     : /mnt/c/Users/Lucas/Desktop/mopshub_triplication/tmrg-master/bin/tmrg -vv -c tmrg.cfg   *
 * tmrg rev:                                                                                        *
 *                                                                                                  *
 * src file: elink_proc_out_enc8b10b_struct.v                                                       *
 *           Git SHA           : File not in git repository!                                        *
 *           Modification time : 2022-03-28 21:55:54                                                *
 *           File Size         : 3342                                                               *
 *           MD5 hash          : 6fd2661bb9b498a90ac1f4f350eec83b                                   *
 *                                                                                                  *
 ****************************************************************************************************/

module elink_proc_out_enc8b10bTMR(
  input wire  clkA ,
  input wire  clkB ,
  input wire  clkC ,
  input wire [9:0] data_10bit_inA ,
  input wire [9:0] data_10bit_inB ,
  input wire [9:0] data_10bit_inC ,
  input wire  data_in_rdyA ,
  input wire  data_in_rdyB ,
  input wire  data_in_rdyC ,
  input wire  rstA ,
  input wire  rstB ,
  input wire  rstC ,
  output wire  get_data_trigA ,
  output wire  get_data_trigB ,
  output wire  get_data_trigC ,
  output wire [1:0] data_2bit_outA ,
  output wire [1:0] data_2bit_outB ,
  output wire [1:0] data_2bit_outC ,
  input wire [9:0] COMMAnA ,
  input wire [9:0] COMMAnB ,
  input wire [9:0] COMMAnC ,
  input wire [9:0] COMMApA ,
  input wire [9:0] COMMApB ,
  input wire [9:0] COMMApC ,
  input wire [7:0] Kchar_commaA ,
  input wire [7:0] Kchar_commaB ,
  input wire [7:0] Kchar_commaC ,
  input wire [7:0] Kchar_eopA ,
  input wire [7:0] Kchar_eopB ,
  input wire [7:0] Kchar_eopC ,
  input wire [7:0] Kchar_sopA ,
  input wire [7:0] Kchar_sopB ,
  input wire [7:0] Kchar_sopC 
);
wire [9:0] enc10bitA;
wire [9:0] enc10bitB;
wire [9:0] enc10bitC;
reg  [9:0] enc10bit_rA ;
reg  [9:0] enc10bit_rB ;
reg  [9:0] enc10bit_rC ;
reg  [1:0] zeros2bitA ;
reg  [1:0] zeros2bitB ;
reg  [1:0] zeros2bitC ;
reg  [2:0] send_countA ;
reg  [2:0] send_countB ;
reg  [2:0] send_countC ;

enc8b10b_wrapTMR enc8b10b_wrap10 (
    .clkA(clkA),
    .clkB(clkB),
    .clkC(clkC),
    .rstA(rstA),
    .rstB(rstB),
    .rstC(rstC),
    .data_codeA(data_10bit_inA[9:8] ),
    .data_codeB(data_10bit_inB[9:8] ),
    .data_codeC(data_10bit_inC[9:8] ),
    .data_inA(data_10bit_inA[7:0] ),
    .data_inB(data_10bit_inB[7:0] ),
    .data_inC(data_10bit_inC[7:0] ),
    .data_in_rdyA(data_in_rdyA),
    .data_in_rdyB(data_in_rdyB),
    .data_in_rdyC(data_in_rdyC),
    .enc_10b_data_outA(enc10bitA),
    .enc_10b_data_outB(enc10bitB),
    .enc_10b_data_outC(enc10bitC),
    .Kchar_commaA(Kchar_commaA),
    .Kchar_commaB(Kchar_commaB),
    .Kchar_commaC(Kchar_commaC),
    .Kchar_eopA(Kchar_eopA),
    .Kchar_eopB(Kchar_eopB),
    .Kchar_eopC(Kchar_eopC),
    .Kchar_sopA(Kchar_sopA),
    .Kchar_sopB(Kchar_sopB),
    .Kchar_sopC(Kchar_sopC),
    .COMMApA(COMMApA),
    .COMMApB(COMMApB),
    .COMMApC(COMMApC),
    .COMMAnA(COMMAnA),
    .COMMAnB(COMMAnB),
    .COMMAnC(COMMAnC)
    );

mux8_NbitTMR bitMUX (
    .data0A(enc10bit_rA[1:0] ),
    .data0B(enc10bit_rB[1:0] ),
    .data0C(enc10bit_rC[1:0] ),
    .data1A(enc10bit_rA[3:2] ),
    .data1B(enc10bit_rB[3:2] ),
    .data1C(enc10bit_rC[3:2] ),
    .data2A(enc10bit_rA[5:4] ),
    .data2B(enc10bit_rB[5:4] ),
    .data2C(enc10bit_rC[5:4] ),
    .data3A(enc10bit_rA[7:6] ),
    .data3B(enc10bit_rB[7:6] ),
    .data3C(enc10bit_rC[7:6] ),
    .data4A(enc10bit_rA[9:8] ),
    .data4B(enc10bit_rB[9:8] ),
    .data4C(enc10bit_rC[9:8] ),
    .data5A(zeros2bitA),
    .data5B(zeros2bitB),
    .data5C(zeros2bitC),
    .data6A(zeros2bitA),
    .data6B(zeros2bitB),
    .data6C(zeros2bitC),
    .data7A(zeros2bitA),
    .data7B(zeros2bitB),
    .data7C(zeros2bitC),
    .selA(send_countA),
    .selB(send_countB),
    .selC(send_countC),
    .data_outA(data_2bit_outA),
    .data_outB(data_2bit_outB),
    .data_outC(data_2bit_outC)
    );

triger_counterTMR triger_counter1 (
    .rstA(rstA),
    .rstB(rstB),
    .rstC(rstC),
    .clkA(clkA),
    .clkB(clkB),
    .clkC(clkC),
    .request_trigA(get_data_trigA),
    .request_trigB(get_data_trigB),
    .request_trigC(get_data_trigC)
    );
initial
  zeros2bitA =  2'b0;
initial
  zeros2bitB =  2'b0;
initial
  zeros2bitC =  2'b0;
initial
  send_countA =  0;
initial
  send_countB =  0;
initial
  send_countC =  0;

always @( posedge clkA )
  begin
    if (!rstA)
      enc10bit_rA <= COMMAnA;
    else
      if (get_data_trigA==1)
        begin
          enc10bit_rA <= enc10bitA;
        end
  end

always @( posedge clkB )
  begin
    if (!rstB)
      enc10bit_rB <= COMMAnB;
    else
      if (get_data_trigB==1)
        begin
          enc10bit_rB <= enc10bitB;
        end
  end

always @( posedge clkC )
  begin
    if (!rstC)
      enc10bit_rC <= COMMAnC;
    else
      if (get_data_trigC==1)
        begin
          enc10bit_rC <= enc10bitC;
        end
  end

always @( posedge clkA )
  begin
    if (!rstA)
      send_countA <= 3'b0;
    else
      begin
        if (get_data_trigA==1)
          send_countA <= 3'b0;
        else
          send_countA <= send_countA+1;
      end
  end

always @( posedge clkB )
  begin
    if (!rstB)
      send_countB <= 3'b0;
    else
      begin
        if (get_data_trigB==1)
          send_countB <= 3'b0;
        else
          send_countB <= send_countB+1;
      end
  end

always @( posedge clkC )
  begin
    if (!rstC)
      send_countC <= 3'b0;
    else
      begin
        if (get_data_trigC==1)
          send_countC <= 3'b0;
        else
          send_countC <= send_countC+1;
      end
  end
endmodule

