/****************************************************************************************************
 *                          ! THIS FILE WAS AUTO-GENERATED BY TMRG TOOL !                           *
 *                                   ! DO NOT EDIT IT MANUALLY !                                    *
 *                                                                                                  *
 * file    : ./output/generalregister2TMR.v                                                         *
 *                                                                                                  *
 * user    : lucas                                                                                  *
 * host    : DESKTOP-BFDSFP2                                                                        *
 * date    : 06/10/2022 13:52:50                                                                    *
 *                                                                                                  *
 * workdir : /mnt/c/Users/Lucas/Documents/GitHub/mopshub_triplicated/triplicated/mopshub_top_board/hdl *
 * cmd     : /mnt/c/Users/Lucas/Desktop/mopshub_triplication/tmrg-master/bin/tmrg -vv -c tmrg.cfg   *
 * tmrg rev:                                                                                        *
 *                                                                                                  *
 * src file: generalregister2.v                                                                     *
 *           Git SHA           : c110441b08b692cc54ebd4a3b84a2599430e8f93                           *
 *           Modification time : 2022-08-25 09:19:34                                                *
 *           File Size         : 2580                                                               *
 *           MD5 hash          : 63f8f57021ac6b91d84b6aca108c9518                                   *
 *                                                                                                  *
 ****************************************************************************************************/

module generalregister2TMR(
  input wire  clk ,
  input wire  rst ,
  input wire  cpu ,
  input wire  can ,
  input wire  bof ,
  input wire  era ,
  input wire  erp ,
  input wire  war ,
  input wire [2:0] sjw ,
  input wire [2:0] tseg1 ,
  input wire [2:0] tseg2 ,
  input wire  ssp ,
  input wire  srp ,
  input wire  ssc ,
  input wire  src ,
  input wire  rsp ,
  output wire [15:0] register 
);
wire warC;
wire warB;
wire warA;
wire [2:0] tseg2C;
wire [2:0] tseg2B;
wire [2:0] tseg2A;
wire [2:0] tseg1C;
wire [2:0] tseg1B;
wire [2:0] tseg1A;
wire sspC;
wire sspB;
wire sspA;
wire sscC;
wire sscB;
wire sscA;
wire srpC;
wire srpB;
wire srpA;
wire srcC;
wire srcB;
wire srcA;
wire [2:0] sjwC;
wire [2:0] sjwB;
wire [2:0] sjwA;
wire rstC;
wire rstB;
wire rstA;
wire rspC;
wire rspB;
wire rspA;
wire [15:0] registerC;
wire [15:0] registerB;
wire [15:0] registerA;
wire erpC;
wire erpB;
wire erpA;
wire eraC;
wire eraB;
wire eraA;
wire cpuC;
wire cpuB;
wire cpuA;
wire clkC;
wire clkB;
wire clkA;
wire canC;
wire canB;
wire canA;
wire bofC;
wire bofB;
wire bofA;
wor register_iTmrError;
wire [15:0] register_i;
reg  [15:0] register_iA ;
reg  [15:0] register_iB ;
reg  [15:0] register_iC ;
assign register =  register_i;

always @( posedge clkA )
  begin
    if (rstA==1'b0)
      begin
        register_iA <= 16'b0000000010101100;
      end
    else
      begin
        register_iA <= registerA;
        register_iA[15]  <= bofA;
        register_iA[14]  <= eraA;
        register_iA[13]  <= erpA;
        register_iA[12]  <= warA;
        if (canA==1'b1)
          begin
            register_iA[11]  <= sscA;
            register_iA[10]  <= srcA;
          end
        else
          if (cpuA==1'b1)
            begin
              register_iA[11]  <= sspA;
              register_iA[10]  <= srpA;
              register_iA[9]  <= rspA;
              register_iA[8:6]  <= sjwA;
              register_iA[5:3]  <= tseg1A;
              register_iA[2:0]  <= tseg2A;
            end
      end
  end

always @( posedge clkB )
  begin
    if (rstB==1'b0)
      begin
        register_iB <= 16'b0000000010101100;
      end
    else
      begin
        register_iB <= registerB;
        register_iB[15]  <= bofB;
        register_iB[14]  <= eraB;
        register_iB[13]  <= erpB;
        register_iB[12]  <= warB;
        if (canB==1'b1)
          begin
            register_iB[11]  <= sscB;
            register_iB[10]  <= srcB;
          end
        else
          if (cpuB==1'b1)
            begin
              register_iB[11]  <= sspB;
              register_iB[10]  <= srpB;
              register_iB[9]  <= rspB;
              register_iB[8:6]  <= sjwB;
              register_iB[5:3]  <= tseg1B;
              register_iB[2:0]  <= tseg2B;
            end
      end
  end

always @( posedge clkC )
  begin
    if (rstC==1'b0)
      begin
        register_iC <= 16'b0000000010101100;
      end
    else
      begin
        register_iC <= registerC;
        register_iC[15]  <= bofC;
        register_iC[14]  <= eraC;
        register_iC[13]  <= erpC;
        register_iC[12]  <= warC;
        if (canC==1'b1)
          begin
            register_iC[11]  <= sscC;
            register_iC[10]  <= srcC;
          end
        else
          if (cpuC==1'b1)
            begin
              register_iC[11]  <= sspC;
              register_iC[10]  <= srpC;
              register_iC[9]  <= rspC;
              register_iC[8:6]  <= sjwC;
              register_iC[5:3]  <= tseg1C;
              register_iC[2:0]  <= tseg2C;
            end
      end
  end

majorityVoter #(.WIDTH(16)) register_iVoter (
    .inA(register_iA),
    .inB(register_iB),
    .inC(register_iC),
    .out(register_i),
    .tmrErr(register_iTmrError)
    );

fanout bofFanout (
    .in(bof),
    .outA(bofA),
    .outB(bofB),
    .outC(bofC)
    );

fanout canFanout (
    .in(can),
    .outA(canA),
    .outB(canB),
    .outC(canC)
    );

fanout clkFanout (
    .in(clk),
    .outA(clkA),
    .outB(clkB),
    .outC(clkC)
    );

fanout cpuFanout (
    .in(cpu),
    .outA(cpuA),
    .outB(cpuB),
    .outC(cpuC)
    );

fanout eraFanout (
    .in(era),
    .outA(eraA),
    .outB(eraB),
    .outC(eraC)
    );

fanout erpFanout (
    .in(erp),
    .outA(erpA),
    .outB(erpB),
    .outC(erpC)
    );

fanout #(.WIDTH(16)) registerFanout (
    .in(register),
    .outA(registerA),
    .outB(registerB),
    .outC(registerC)
    );

fanout rspFanout (
    .in(rsp),
    .outA(rspA),
    .outB(rspB),
    .outC(rspC)
    );

fanout rstFanout (
    .in(rst),
    .outA(rstA),
    .outB(rstB),
    .outC(rstC)
    );

fanout #(.WIDTH(3)) sjwFanout (
    .in(sjw),
    .outA(sjwA),
    .outB(sjwB),
    .outC(sjwC)
    );

fanout srcFanout (
    .in(src),
    .outA(srcA),
    .outB(srcB),
    .outC(srcC)
    );

fanout srpFanout (
    .in(srp),
    .outA(srpA),
    .outB(srpB),
    .outC(srpC)
    );

fanout sscFanout (
    .in(ssc),
    .outA(sscA),
    .outB(sscB),
    .outC(sscC)
    );

fanout sspFanout (
    .in(ssp),
    .outA(sspA),
    .outB(sspB),
    .outC(sspC)
    );

fanout #(.WIDTH(3)) tseg1Fanout (
    .in(tseg1),
    .outA(tseg1A),
    .outB(tseg1B),
    .outC(tseg1C)
    );

fanout #(.WIDTH(3)) tseg2Fanout (
    .in(tseg2),
    .outA(tseg2A),
    .outB(tseg2B),
    .outC(tseg2C)
    );

fanout warFanout (
    .in(war),
    .outA(warA),
    .outB(warB),
    .outC(warC)
    );
endmodule

