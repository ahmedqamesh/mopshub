/****************************************************************************************************
 *                          ! THIS FILE WAS AUTO-GENERATED BY TMRG TOOL !                           *
 *                                   ! DO NOT EDIT IT MANUALLY !                                    *
 *                                                                                                  *
 * file    : ./output/iocpuavalon2TMR.v                                                             *
 *                                                                                                  *
 * user    : lucas                                                                                  *
 * host    : DESKTOP-BFDSFP2                                                                        *
 * date    : 06/10/2022 13:52:51                                                                    *
 *                                                                                                  *
 * workdir : /mnt/c/Users/Lucas/Documents/GitHub/mopshub_triplicated/triplicated/mopshub_top_board/hdl *
 * cmd     : /mnt/c/Users/Lucas/Desktop/mopshub_triplication/tmrg-master/bin/tmrg -vv -c tmrg.cfg   *
 * tmrg rev:                                                                                        *
 *                                                                                                  *
 * src file: iocpuavalon2.v                                                                         *
 *           Git SHA           : c110441b08b692cc54ebd4a3b84a2599430e8f93                           *
 *           Modification time : 2022-08-25 09:25:46                                                *
 *           File Size         : 20517                                                              *
 *           MD5 hash          : aaf2bfc1a917bf6c57bec53db41fadfb                                   *
 *                                                                                                  *
 ****************************************************************************************************/

module iocpu2TMR(
  input wire  clock ,
  input wire  reset ,
  input wire [4:0] address ,
  output wire [15:0] readdata ,
  input wire [15:0] writedata ,
  input wire  read_n ,
  input wire  write_n ,
  input wire  cs ,
  input wire  activgreg ,
  input wire  activtreg ,
  input wire  activrreg ,
  input wire  activintreg ,
  input wire  ldrecid ,
  input wire  sucftrani ,
  input wire  sucfrecvi ,
  input wire  overflowo ,
  input wire  erroractive ,
  input wire  errorpassive ,
  input wire  busoff ,
  input wire  warning ,
  input wire  irqstatus ,
  input wire  irqsuctra ,
  input wire  irqsucrec ,
  input wire [28:0] rec_id ,
  input wire  rremote ,
  input wire [3:0] rdlc ,
  input wire [7:0] data1r ,
  input wire [7:0] data2r ,
  input wire [7:0] data3r ,
  input wire [7:0] data4r ,
  input wire [7:0] data5r ,
  input wire [7:0] data6r ,
  input wire [7:0] data7r ,
  input wire [7:0] data8r ,
  input wire [7:0] teccan ,
  input wire [7:0] reccan ,
  output wire [2:0] sjw ,
  output wire [2:0] tseg1 ,
  output wire [2:0] tseg2 ,
  output wire  sucfrecvo ,
  output wire  sucftrano ,
  output wire  initreqr ,
  output wire  traregbit ,
  output wire [28:0] accmask ,
  output wire [28:0] ridentifier ,
  output wire  rextended ,
  output wire [2:0] ienable ,
  output wire [2:0] irqstd ,
  output wire [28:0] tidentifier ,
  output wire [7:0] data1t ,
  output wire [7:0] data2t ,
  output wire [7:0] data3t ,
  output wire [7:0] data4t ,
  output wire [7:0] data5t ,
  output wire [7:0] data6t ,
  output wire [7:0] data7t ,
  output wire [7:0] data8t ,
  output wire  textended ,
  output wire  tremote ,
  output wire [3:0] tdlc ,
  output wire [7:0] prescale_out ,
  output wire  onoffn 
);
parameter [15:0] system_id =16'hCA05;
wire [15:0] preregr;
wire [15:0] genregr;
wire [15:0] intregr;
wire [15:0] traconr;
wire [15:0] traar1r;
wire [15:0] traar2r;
wire [15:0] trad01r;
wire [15:0] trad23r;
wire [15:0] trad45r;
wire [15:0] trad67r;
wire [15:0] recconr;
wire [15:0] recar1r;
wire [15:0] recar2r;
wire [15:0] accmask1r;
wire [15:0] accmask2r;
wire [15:0] recd01r;
wire [15:0] recd23r;
wire [15:0] recd45r;
wire [15:0] recd67r;
wire [15:0] fehlregout;
wire [15:0] register_bus;
wire presca;
wire genrega;
wire intrega;
wire tracona;
wire traar1a;
wire traar2a;
wire trad01a;
wire trad23a;
wire trad45a;
wire trad67a;
wire reccona;
wire recar1a;
wire recar2a;
wire [15:0] recidin1;
wire [15:0] recidin2;
wire accmask1a;
wire accmask2a;
assign prescale_out =  preregr[7:0] ;
assign sjw =  genregr[8:6] ;
assign tseg1 =  genregr[5:3] ;
assign tseg2 =  genregr[2:0] ;
assign sucfrecvo =  genregr[10] ;
assign sucftrano =  genregr[11] ;
assign initreqr =  genregr[9] ;
assign traregbit =  traconr[15] ;
assign textended =  traconr[4] ;
assign tremote =  traconr[5] ;
assign tdlc =  traconr[3:0] ;
assign tidentifier[28:13]  =  traar1r;
assign tidentifier[12:0]  =  traar2r[15:3] ;
assign data1t =  trad01r[15:8] ;
assign data2t =  trad01r[7:0] ;
assign data3t =  trad23r[15:8] ;
assign data4t =  trad23r[7:0] ;
assign data5t =  trad45r[15:8] ;
assign data6t =  trad45r[7:0] ;
assign data7t =  trad67r[15:8] ;
assign data8t =  trad67r[7:0] ;
assign rextended =  recconr[4] ;
assign recidin1 =  rec_id[28:13] ;
assign recidin2[15:0]  =  {rec_id[12:0] ,3'b000};
assign ridentifier[28:13]  =  recar1r;
assign ridentifier[12:0]  =  recar2r[15:3] ;
assign accmask[28:13]  =  accmask1r;
assign accmask[12:0]  =  accmask2r[15:3] ;
assign onoffn =  intregr[15] ;
assign ienable =  intregr[6:4] ;
assign irqstd =  intregr[2:0] ;
assign fehlregout =  {teccan,reccan};

multiplexer2TMR #(.system_id(system_id)) komplexe (
    .readdata(readdata),
    .writedata(writedata),
    .address(address),
    .cs(cs),
    .read_n(read_n),
    .write_n(write_n),
    .preregr(preregr),
    .genregr(genregr),
    .intregr(intregr),
    .traconr(traconr),
    .traar1r(traar1r),
    .traar2r(traar2r),
    .trad01r(trad01r),
    .trad23r(trad23r),
    .trad45r(trad45r),
    .trad67r(trad67r),
    .recconr(recconr),
    .accmask1r(accmask1r),
    .accmask2r(accmask2r),
    .recar1r(recar1r),
    .recar2r(recar2r),
    .recd01r(recd01r),
    .recd23r(recd23r),
    .recd45r(recd45r),
    .recd67r(recd67r),
    .fehlregr(fehlregout),
    .regbus(register_bus),
    .presca(presca),
    .genrega(genrega),
    .intrega(intrega),
    .tracona(tracona),
    .traar1a(traar1a),
    .traar2a(traar2a),
    .trad01a(trad01a),
    .trad23a(trad23a),
    .trad45a(trad45a),
    .trad67a(trad67a),
    .reccona(reccona),
    .recar1a(recar1a),
    .recar2a(recar2a),
    .accmask1a(accmask1a),
    .accmask2a(accmask2a)
    );

generalregister2TMR general (
    .clk(clock),
    .rst(reset),
    .cpu(genrega),
    .can(activgreg),
    .bof(busoff),
    .era(erroractive),
    .erp(errorpassive),
    .war(warning),
    .sjw(register_bus[8:6] ),
    .tseg1(register_bus[5:3] ),
    .tseg2(register_bus[2:0] ),
    .ssp(register_bus[11] ),
    .srp(register_bus[10] ),
    .ssc(sucftrani),
    .src(sucfrecvi),
    .rsp(register_bus[9] ),
    .register(genregr)
    );

recmescontrolreg2TMR mcontrol (
    .clk(clock),
    .rst(reset),
    .cpu(reccona),
    .can(activrreg),
    .ofp(register_bus[15] ),
    .ofc(overflowo),
    .rip(register_bus[14] ),
    .ric(activrreg),
    .ien(register_bus[8] ),
    .rtr(rremote),
    .ext(register_bus[4] ),
    .dlc(rdlc),
    .regout(recconr)
    );

recarbitreg2TMR rarbit1 (
    .clk(clock),
    .rst(reset),
    .cpu(recar1a),
    .can(ldrecid),
    .reginp(register_bus),
    .recidin(recidin1),
    .regout(recar1r)
    );

recarbitreg2TMR rarbit2 (
    .clk(clock),
    .rst(reset),
    .cpu(recar2a),
    .can(ldrecid),
    .reginp(register_bus),
    .recidin(recidin2),
    .regout(recar2r)
    );

accmaskreg2TMR accmask1 (
    .clk(clock),
    .rst(reset),
    .cpu(accmask1a),
    .reginp(register_bus),
    .regout(accmask1r)
    );

accmaskreg2TMR accmask2 (
    .clk(clock),
    .rst(reset),
    .cpu(accmask2a),
    .reginp(register_bus),
    .regout(accmask2r)
    );

interrupregister2TMR interruptreg (
    .clk(clock),
    .rst(reset),
    .cpu(intrega),
    .can(activintreg),
    .onoffnin(register_bus[15] ),
    .iestatusp(register_bus[6] ),
    .iesuctrap(register_bus[5] ),
    .iesucrecp(register_bus[4] ),
    .irqstatusp(register_bus[2] ),
    .irqsuctrap(register_bus[1] ),
    .irqsucrecp(register_bus[0] ),
    .irqstatusc(irqstatus),
    .irqsuctrac(irqsuctra),
    .irqsucrecc(irqsucrec),
    .register(intregr)
    );

prescalereg2TMR prescaleregister (
    .clk(clock),
    .rst(reset),
    .cpu(presca),
    .reginp(register_bus),
    .regout(preregr)
    );

recregister2TMR rdata12 (
    .clk(clock),
    .rst(reset),
    .can(activrreg),
    .regin1(data1r),
    .regin2(data2r),
    .regout(recd01r)
    );

recregister2TMR rdata34 (
    .clk(clock),
    .rst(reset),
    .can(activrreg),
    .regin1(data3r),
    .regin2(data4r),
    .regout(recd23r)
    );

recregister2TMR rdata56 (
    .clk(clock),
    .rst(reset),
    .can(activrreg),
    .regin1(data5r),
    .regin2(data6r),
    .regout(recd45r)
    );

recregister2TMR rdata78 (
    .clk(clock),
    .rst(reset),
    .can(activrreg),
    .regin1(data7r),
    .regin2(data8r),
    .regout(recd67r)
    );

transmesconreg2TMR tcontrol (
    .clk(clock),
    .rst(reset),
    .cpu(tracona),
    .can(activtreg),
    .tsucf(sucftrani),
    .reginp(register_bus),
    .regout(traconr)
    );

transmitreg2TMR tarbit1 (
    .clk(clock),
    .rst(reset),
    .cpu(traar1a),
    .reginp(register_bus),
    .regout(traar1r)
    );

transmitreg2TMR tarbit2 (
    .clk(clock),
    .rst(reset),
    .cpu(traar2a),
    .reginp(register_bus),
    .regout(traar2r)
    );

transmitreg2TMR tdata12 (
    .clk(clock),
    .rst(reset),
    .cpu(trad01a),
    .reginp(register_bus),
    .regout(trad01r)
    );

transmitreg2TMR tdata34 (
    .clk(clock),
    .rst(reset),
    .cpu(trad23a),
    .reginp(register_bus),
    .regout(trad23r)
    );

transmitreg2TMR tdata56 (
    .clk(clock),
    .rst(reset),
    .cpu(trad45a),
    .reginp(register_bus),
    .regout(trad45r)
    );

transmitreg2TMR tdata78 (
    .clk(clock),
    .rst(reset),
    .cpu(trad67a),
    .reginp(register_bus),
    .regout(trad67r)
    );
endmodule

