/****************************************************************************************************
 *                          ! THIS FILE WAS AUTO-GENERATED BY TMRG TOOL !                           *
 *                                   ! DO NOT EDIT IT MANUALLY !                                    *
 *                                                                                                  *
 * file    : ./output/AccumulatorTMR.v                                                              *
 *                                                                                                  *
 * user    : lucas                                                                                  *
 * host    : DESKTOP-BFDSFP2                                                                        *
 * date    : 16/08/2022 12:58:06                                                                    *
 *                                                                                                  *
 * workdir : /mnt/c/Users/Lucas/Desktop/mopshub_triplication/mopshub_top_board_canakari_ftrim/hdl   *
 * cmd     : /mnt/c/Users/Lucas/Desktop/mopshub_triplication/tmrg-master/bin/tmrg -c tmrg.cfg -vvv  *
 * tmrg rev:                                                                                        *
 *                                                                                                  *
 * src file: Accumulator.v                                                                          *
 *           Git SHA           : File not in git repository!                                        *
 *           Modification time : 2022-03-29 13:49:21                                                *
 *           File Size         : 1146                                                               *
 *           MD5 hash          : d28c93e1a457554fc6e36a957a366042                                   *
 *                                                                                                  *
 ****************************************************************************************************/

module AccumulatorTMR #(
  parameter  WidthA  = 8,
  parameter  WidthAcc  = WidthA+1
)(
  input wire  clk_iA ,
  input wire  clk_iB ,
  input wire  clk_iC ,
  input wire  rst_niA ,
  input wire  rst_niB ,
  input wire  rst_niC ,
  input wire  EnableA ,
  input wire  EnableB ,
  input wire  EnableC ,
  input wire signed [WidthA-1:0] a_iA ,
  input wire signed [WidthA-1:0] a_iB ,
  input wire signed [WidthA-1:0] a_iC ,
  output reg signed [WidthAcc-1:0] sum_oA ,
  output reg signed [WidthAcc-1:0] sum_oB ,
  output reg signed [WidthAcc-1:0] sum_oC 
);
localparam Max =(2**(WidthAcc-1))-1;
localparam Min =-(2**(WidthAcc-1));
wor accTmrErrorC;
wire signed  [WidthAcc-1:0] accVotedC;
wor accTmrErrorB;
wire signed  [WidthAcc-1:0] accVotedB;
wor accTmrErrorA;
wire signed  [WidthAcc-1:0] accVotedA;
reg signed  [WidthAcc-1:0] accA ;
reg signed  [WidthAcc-1:0] accB ;
reg signed  [WidthAcc-1:0] accC ;
reg signed  [WidthAcc-1:0] acc_addedA ;
reg signed  [WidthAcc-1:0] acc_addedB ;
reg signed  [WidthAcc-1:0] acc_addedC ;

always @*
  begin
    acc_addedA =  accVotedA+{a_iA[7] ,a_iA};
    if (accVotedA>0&&a_iA>0&&acc_addedA<0)
      begin
        sum_oA =  Max;
      end
    else
      if (accVotedA<0&&a_iA<0&&acc_addedA>0)
        begin
          sum_oA =  Min;
        end
      else
        begin
          sum_oA =  acc_addedA;
        end
  end

always @*
  begin
    acc_addedB =  accVotedB+{a_iB[7] ,a_iB};
    if (accVotedB>0&&a_iB>0&&acc_addedB<0)
      begin
        sum_oB =  Max;
      end
    else
      if (accVotedB<0&&a_iB<0&&acc_addedB>0)
        begin
          sum_oB =  Min;
        end
      else
        begin
          sum_oB =  acc_addedB;
        end
  end

always @*
  begin
    acc_addedC =  accVotedC+{a_iC[7] ,a_iC};
    if (accVotedC>0&&a_iC>0&&acc_addedC<0)
      begin
        sum_oC =  Max;
      end
    else
      if (accVotedC<0&&a_iC<0&&acc_addedC>0)
        begin
          sum_oC =  Min;
        end
      else
        begin
          sum_oC =  acc_addedC;
        end
  end

always @( posedge clk_iA or negedge rst_niA )
  begin
    if (rst_niA==1'b0)
      begin
        accA <= {WidthAcc{1'b0}};
      end
    else
      if (EnableA)
        begin
          accA <= sum_oA;
        end
      else
        begin
          accA <= accVotedA;
        end
  end

always @( posedge clk_iB or negedge rst_niB )
  begin
    if (rst_niB==1'b0)
      begin
        accB <= {WidthAcc{1'b0}};
      end
    else
      if (EnableB)
        begin
          accB <= sum_oB;
        end
      else
        begin
          accB <= accVotedB;
        end
  end

always @( posedge clk_iC or negedge rst_niC )
  begin
    if (rst_niC==1'b0)
      begin
        accC <= {WidthAcc{1'b0}};
      end
    else
      if (EnableC)
        begin
          accC <= sum_oC;
        end
      else
        begin
          accC <= accVotedC;
        end
  end

majorityVoter #(.WIDTH(((WidthAcc-1)>(0)) ? ((WidthAcc-1)-(0)+1) : ((0)-(WidthAcc-1)+1))) accVoterA (
    .inA(accA),
    .inB(accB),
    .inC(accC),
    .out(accVotedA),
    .tmrErr(accTmrErrorA)
    );

majorityVoter #(.WIDTH(((WidthAcc-1)>(0)) ? ((WidthAcc-1)-(0)+1) : ((0)-(WidthAcc-1)+1))) accVoterB (
    .inA(accA),
    .inB(accB),
    .inC(accC),
    .out(accVotedB),
    .tmrErr(accTmrErrorB)
    );

majorityVoter #(.WIDTH(((WidthAcc-1)>(0)) ? ((WidthAcc-1)-(0)+1) : ((0)-(WidthAcc-1)+1))) accVoterC (
    .inA(accA),
    .inB(accB),
    .inC(accC),
    .out(accVotedC),
    .tmrErr(accTmrErrorC)
    );
endmodule

