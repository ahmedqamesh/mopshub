/****************************************************************************************************
 *                          ! THIS FILE WAS AUTO-GENERATED BY TMRG TOOL !                           *
 *                                   ! DO NOT EDIT IT MANUALLY !                                    *
 *                                                                                                  *
 * file    : ./output/AccumulatorTMR.v                                                              *
 *                                                                                                  *
 * user    : lucas                                                                                  *
 * host    : DESKTOP-BFDSFP2                                                                        *
 * date    : 06/10/2022 13:52:31                                                                    *
 *                                                                                                  *
 * workdir : /mnt/c/Users/Lucas/Documents/GitHub/mopshub_triplicated/triplicated/mopshub_top_board/hdl *
 * cmd     : /mnt/c/Users/Lucas/Desktop/mopshub_triplication/tmrg-master/bin/tmrg -vv -c tmrg.cfg   *
 * tmrg rev:                                                                                        *
 *                                                                                                  *
 * src file: Accumulator.v                                                                          *
 *           Git SHA           : c110441b08b692cc54ebd4a3b84a2599430e8f93                           *
 *           Modification time : 2022-08-30 11:26:16                                                *
 *           File Size         : 1103                                                               *
 *           MD5 hash          : 64b212a2bf13103e19eb196498ab6a10                                   *
 *                                                                                                  *
 ****************************************************************************************************/

module AccumulatorTMR #(
  parameter  WidthA  = 8,
  parameter  WidthAcc  = WidthA+1
)(
  input wire  clk_i ,
  input wire  rst_ni ,
  input wire  Enable ,
  input wire signed [WidthA-1:0] a_i ,
  output reg signed [WidthAcc-1:0] sum_o 
);
localparam Max =(2**(WidthAcc-1))-1;
localparam Min =-(2**(WidthAcc-1));
wire signed  [WidthAcc-1:0] sum_oC;
wire signed  [WidthAcc-1:0] sum_oB;
wire signed  [WidthAcc-1:0] sum_oA;
wire rst_niC;
wire rst_niB;
wire rst_niA;
wire clk_iC;
wire clk_iB;
wire clk_iA;
wire signed  [WidthAcc-1:0] accVC;
wire signed  [WidthAcc-1:0] accVB;
wire signed  [WidthAcc-1:0] accVA;
wire EnableC;
wire EnableB;
wire EnableA;
wor accTmrError;
wire signed  [WidthAcc-1:0] acc;
reg signed  [WidthAcc-1:0] accA ;
reg signed  [WidthAcc-1:0] accB ;
reg signed  [WidthAcc-1:0] accC ;
wire signed [WidthAcc-1:0] accV =  acc;
reg signed  [WidthAcc-1:0] acc_added ;

always @*
  begin
    acc_added =  accV+{a_i[7] ,a_i};
    if (accV>0&&a_i>0&&acc_added<0)
      begin
        sum_o =  Max;
      end
    else
      if (accV<0&&a_i<0&&acc_added>0)
        begin
          sum_o =  Min;
        end
      else
        begin
          sum_o =  acc_added;
        end
  end

always @( posedge clk_iA or negedge rst_niA )
  begin
    if (rst_niA==1'b0)
      begin
        accA <= {WidthAcc{1'b0}};
      end
    else
      if (EnableA)
        begin
          accA <= sum_oA;
        end
      else
        begin
          accA <= accVA;
        end
  end

always @( posedge clk_iB or negedge rst_niB )
  begin
    if (rst_niB==1'b0)
      begin
        accB <= {WidthAcc{1'b0}};
      end
    else
      if (EnableB)
        begin
          accB <= sum_oB;
        end
      else
        begin
          accB <= accVB;
        end
  end

always @( posedge clk_iC or negedge rst_niC )
  begin
    if (rst_niC==1'b0)
      begin
        accC <= {WidthAcc{1'b0}};
      end
    else
      if (EnableC)
        begin
          accC <= sum_oC;
        end
      else
        begin
          accC <= accVC;
        end
  end

majorityVoter #(.WIDTH(((WidthAcc-1)>(0)) ? ((WidthAcc-1)-(0)+1) : ((0)-(WidthAcc-1)+1))) accVoter (
    .inA(accA),
    .inB(accB),
    .inC(accC),
    .out(acc),
    .tmrErr(accTmrError)
    );

fanout EnableFanout (
    .in(Enable),
    .outA(EnableA),
    .outB(EnableB),
    .outC(EnableC)
    );

fanout #(.WIDTH(((WidthAcc-1)>(0)) ? ((WidthAcc-1)-(0)+1) : ((0)-(WidthAcc-1)+1))) accVFanout (
    .in(accV),
    .outA(accVA),
    .outB(accVB),
    .outC(accVC)
    );

fanout clk_iFanout (
    .in(clk_i),
    .outA(clk_iA),
    .outB(clk_iB),
    .outC(clk_iC)
    );

fanout rst_niFanout (
    .in(rst_ni),
    .outA(rst_niA),
    .outB(rst_niB),
    .outC(rst_niC)
    );

fanout #(.WIDTH(((WidthAcc-1)>(0)) ? ((WidthAcc-1)-(0)+1) : ((0)-(WidthAcc-1)+1))) sum_oFanout (
    .in(sum_o),
    .outA(sum_oA),
    .outB(sum_oB),
    .outC(sum_oC)
    );
endmodule

