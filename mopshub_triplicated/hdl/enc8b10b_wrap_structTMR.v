/****************************************************************************************************
 *                          ! THIS FILE WAS AUTO-GENERATED BY TMRG TOOL !                           *
 *                                   ! DO NOT EDIT IT MANUALLY !                                    *
 *                                                                                                  *
 * file    : ./output/enc8b10b_wrap_structTMR.v                                                     *
 *                                                                                                  *
 * user    : lucas                                                                                  *
 * host    : DESKTOP-BFDSFP2                                                                        *
 * date    : 03/04/2022 20:08:34                                                                    *
 *                                                                                                  *
 * workdir : /mnt/c/Users/Lucas/Desktop/mopshub_triplication/triplicated/mopshub_top_canakari_ftrim/hdl *
 * cmd     : /mnt/c/Users/Lucas/Desktop/mopshub_triplication/tmrg-master/bin/tmrg -vv -c tmrg.cfg   *
 * tmrg rev:                                                                                        *
 *                                                                                                  *
 * src file: enc8b10b_wrap_struct.v                                                                 *
 *           Git SHA           : File not in git repository!                                        *
 *           Modification time : 2022-03-28 21:55:54                                                *
 *           File Size         : 2296                                                               *
 *           MD5 hash          : 04f31e31890c04db23892690a339c6c2                                   *
 *                                                                                                  *
 ****************************************************************************************************/

module enc8b10b_wrapTMR(
  input wire  clkA ,
  input wire  clkB ,
  input wire  clkC ,
  input wire  rstA ,
  input wire  rstB ,
  input wire  rstC ,
  input wire [1:0] data_codeA ,
  input wire [1:0] data_codeB ,
  input wire [1:0] data_codeC ,
  input wire [7:0] data_inA ,
  input wire [7:0] data_inB ,
  input wire [7:0] data_inC ,
  input wire  data_in_rdyA ,
  input wire  data_in_rdyB ,
  input wire  data_in_rdyC ,
  output wire [9:0] enc_10b_data_outA ,
  output wire [9:0] enc_10b_data_outB ,
  output wire [9:0] enc_10b_data_outC ,
  input wire [7:0] Kchar_commaA ,
  input wire [7:0] Kchar_commaB ,
  input wire [7:0] Kchar_commaC ,
  input wire [7:0] Kchar_eopA ,
  input wire [7:0] Kchar_eopB ,
  input wire [7:0] Kchar_eopC ,
  input wire [7:0] Kchar_sopA ,
  input wire [7:0] Kchar_sopB ,
  input wire [7:0] Kchar_sopC ,
  input wire [9:0] COMMApA ,
  input wire [9:0] COMMApB ,
  input wire [9:0] COMMApC ,
  input wire [9:0] COMMAnA ,
  input wire [9:0] COMMAnB ,
  input wire [9:0] COMMAnC 
);
wire [9:0] data_out;
wor rstTmrError;
wire rst;
wor data_in_rdyTmrError;
wire data_in_rdy;
wor clkTmrError;
wire clk;
wor byteTmrError;
wire [7:0] byte;
wor KITmrError;
wire KI;
reg  [9:0] enc_10b_data_out_rA ;
reg  [9:0] enc_10b_data_out_rB ;
reg  [9:0] enc_10b_data_out_rC ;
wire [7:0] byteA;
wire [7:0] byteB;
wire [7:0] byteC;
wire KIA;
wire KIB;
wire KIC;
wire [9:0] data_outA;
wire [9:0] data_outB;
wire [9:0] data_outC;

enc_8b10b enc_8b10bTMR (
    .rst(rst),
    .clk(clk),
    .ena(data_in_rdy),
    .KI(KI),
    .datain(byte),
    .dataout(data_out)
    );

mux4_NbitTMR mux4_Nbit0 (
    .data0A(data_inA),
    .data0B(data_inB),
    .data0C(data_inC),
    .data1A(Kchar_eopA),
    .data1B(Kchar_eopB),
    .data1C(Kchar_eopC),
    .data2A(Kchar_sopA),
    .data2B(Kchar_sopB),
    .data2C(Kchar_sopC),
    .data3A(Kchar_commaA),
    .data3B(Kchar_commaB),
    .data3C(Kchar_commaC),
    .selA(data_codeA),
    .selB(data_codeB),
    .selC(data_codeC),
    .data_outA(byteA),
    .data_outB(byteB),
    .data_outC(byteC),
    .def_valueA(Kchar_commaA),
    .def_valueB(Kchar_commaB),
    .def_valueC(Kchar_commaC)
    );
assign KIA =  data_codeA[1] |data_codeA[0] ;
assign KIB =  data_codeB[1] |data_codeB[0] ;
assign KIC =  data_codeC[1] |data_codeC[0] ;
assign enc_10b_data_outA =  enc_10b_data_out_rA;
assign enc_10b_data_outB =  enc_10b_data_out_rB;
assign enc_10b_data_outC =  enc_10b_data_out_rC;

always @( posedge clkA )
  if (!rstA)
    enc_10b_data_out_rA <= COMMAnA;
  else
    begin
      if (data_inA==Kchar_commaA&&KIA==1)
        enc_10b_data_out_rA <= COMMAnA;
      else
        enc_10b_data_out_rA <= data_outA;
    end

always @( posedge clkB )
  if (!rstB)
    enc_10b_data_out_rB <= COMMAnB;
  else
    begin
      if (data_inB==Kchar_commaB&&KIB==1)
        enc_10b_data_out_rB <= COMMAnB;
      else
        enc_10b_data_out_rB <= data_outB;
    end

always @( posedge clkC )
  if (!rstC)
    enc_10b_data_out_rC <= COMMAnC;
  else
    begin
      if (data_inC==Kchar_commaC&&KIC==1)
        enc_10b_data_out_rC <= COMMAnC;
      else
        enc_10b_data_out_rC <= data_outC;
    end

majorityVoter KIVoter (
    .inA(KIA),
    .inB(KIB),
    .inC(KIC),
    .out(KI),
    .tmrErr(KITmrError)
    );

majorityVoter #(.WIDTH(8)) byteVoter (
    .inA(byteA),
    .inB(byteB),
    .inC(byteC),
    .out(byte),
    .tmrErr(byteTmrError)
    );

majorityVoter clkVoter (
    .inA(clkA),
    .inB(clkB),
    .inC(clkC),
    .out(clk),
    .tmrErr(clkTmrError)
    );

majorityVoter data_in_rdyVoter (
    .inA(data_in_rdyA),
    .inB(data_in_rdyB),
    .inC(data_in_rdyC),
    .out(data_in_rdy),
    .tmrErr(data_in_rdyTmrError)
    );

majorityVoter rstVoter (
    .inA(rstA),
    .inB(rstB),
    .inC(rstC),
    .out(rst),
    .tmrErr(rstTmrError)
    );

fanout #(.WIDTH(10)) data_outFanout (
    .in(data_out),
    .outA(data_outA),
    .outB(data_outB),
    .outC(data_outC)
    );
endmodule

