/****************************************************************************************************
 *                          ! THIS FILE WAS AUTO-GENERATED BY TMRG TOOL !                           *
 *                                   ! DO NOT EDIT IT MANUALLY !                                    *
 *                                                                                                  *
 * file    : ./output/buffer_rec_spi_dataTMR.v                                                      *
 *                                                                                                  *
 * user    : lucas                                                                                  *
 * host    : DESKTOP-BFDSFP2                                                                        *
 * date    : 05/12/2022 13:28:01                                                                    *
 *                                                                                                  *
 * workdir : /mnt/c/Users/Lucas/Documents/GitHub/mopshub_triplicated/triplicated/mopshub_top_board_16/hdl *
 * cmd     : /mnt/c/Users/Lucas/Documents/GitHub/mopshub_triplicated/tmrg-master/bin/tmrg -vv -c    *
 *           tmrg.cfg                                                                               *
 * tmrg rev: b25f042058e4e97751df2a0933c24aeadd5a78a5                                               *
 *                                                                                                  *
 * src file: buffer_rec_spi_data.v                                                                  *
 *           Git SHA           : b25f042058e4e97751df2a0933c24aeadd5a78a5 (?? buffer_rec_spi_data.v) *
 *           Modification time : 2022-12-04 14:53:38                                                *
 *           File Size         : 1975                                                               *
 *           MD5 hash          : 2eb8b6b9b0e80d887e905c0e695b22a3                                   *
 *                                                                                                  *
 ****************************************************************************************************/

`resetall 
`timescale  1ns/10ps
module buffer_rec_spi_dataTMR(
  input wire  clk ,
  input wire  rst ,
  input wire  buffer_en ,
  input wire [7:0] spi_id_in ,
  input wire [7:0] spi_reg ,
  input wire [7:0] data_rec_in ,
  input wire [7:0] spi_select ,
  output wire  end_read_miso ,
  output wire [31:0] data_rec_out 
);
wire [7:0] spi_selectC;
wire [7:0] spi_selectB;
wire [7:0] spi_selectA;
wire [7:0] spi_regC;
wire [7:0] spi_regB;
wire [7:0] spi_regA;
wire [7:0] spi_id_inC;
wire [7:0] spi_id_inB;
wire [7:0] spi_id_inA;
wire rstC;
wire rstB;
wire rstA;
wire [7:0] data_rec_inC;
wire [7:0] data_rec_inB;
wire [7:0] data_rec_inA;
wire clkC;
wire clkB;
wire clkA;
wire buffer_enC;
wire buffer_enB;
wire buffer_enA;
wor idTmrError;
wire [7:0] id;
wor end_read_miso_regTmrError;
wire end_read_miso_reg;
wor b3TmrError;
wire [7:0] b3;
wor b2TmrError;
wire [7:0] b2;
wor b1TmrError;
wire [7:0] b1;
reg  [7:0] idA ;
reg  [7:0] idB ;
reg  [7:0] idC ;
reg  [7:0] b1A ;
reg  [7:0] b1B ;
reg  [7:0] b1C ;
reg  [7:0] b2A ;
reg  [7:0] b2B ;
reg  [7:0] b2C ;
reg  [7:0] b3A ;
reg  [7:0] b3B ;
reg  [7:0] b3C ;
reg  end_read_miso_regA ;
reg  end_read_miso_regB ;
reg  end_read_miso_regC ;
initial
  idA =  8'h0;
initial
  idB =  8'h0;
initial
  idC =  8'h0;
initial
  b1A =  8'h0;
initial
  b1B =  8'h0;
initial
  b1C =  8'h0;
initial
  b2A =  8'h0;
initial
  b2B =  8'h0;
initial
  b2C =  8'h0;
initial
  b3A =  8'h0;
initial
  b3B =  8'h0;
initial
  b3C =  8'h0;
initial
  end_read_miso_regA =  1'b0;
initial
  end_read_miso_regB =  1'b0;
initial
  end_read_miso_regC =  1'b0;
wire [7:0] id_v =  id;
wire [7:0] b1_v =  b1;
wire [7:0] b2_v =  b2;
wire [7:0] b3_v =  b3;
wire end_read_miso_regV =  end_read_miso_reg;

always @( posedge clkA )
  begin
    if (!rstA)
      begin
        idA <= 8'h00;
        b1A <= 8'h00;
        b2A <= 8'h00;
        b3A <= 8'h00;
        end_read_miso_regA =  1'b0;
      end
    if (buffer_enA)
      begin
        idA <= spi_id_inA;
        b1A <= spi_selectA;
        b2A <= spi_regA;
        b3A <= data_rec_inA;
        end_read_miso_regA =  1'b1;
      end
    else
      begin
        idA <= idA;
        b1A <= b1A;
        b2A <= b2A;
        b3A <= b3A;
        end_read_miso_regA =  1'b0;
      end
  end

always @( posedge clkB )
  begin
    if (!rstB)
      begin
        idB <= 8'h00;
        b1B <= 8'h00;
        b2B <= 8'h00;
        b3B <= 8'h00;
        end_read_miso_regB =  1'b0;
      end
    if (buffer_enB)
      begin
        idB <= spi_id_inB;
        b1B <= spi_selectB;
        b2B <= spi_regB;
        b3B <= data_rec_inB;
        end_read_miso_regB =  1'b1;
      end
    else
      begin
        idB <= idB;
        b1B <= b1B;
        b2B <= b2B;
        b3B <= b3B;
        end_read_miso_regB =  1'b0;
      end
  end

always @( posedge clkC )
  begin
    if (!rstC)
      begin
        idC <= 8'h00;
        b1C <= 8'h00;
        b2C <= 8'h00;
        b3C <= 8'h00;
        end_read_miso_regC =  1'b0;
      end
    if (buffer_enC)
      begin
        idC <= spi_id_inC;
        b1C <= spi_selectC;
        b2C <= spi_regC;
        b3C <= data_rec_inC;
        end_read_miso_regC =  1'b1;
      end
    else
      begin
        idC <= idC;
        b1C <= b1C;
        b2C <= b2C;
        b3C <= b3C;
        end_read_miso_regC =  1'b0;
      end
  end
assign end_read_miso =  end_read_miso_reg;
assign data_rec_out =  {id,b1,b2,b3};

majorityVoter #(.WIDTH(8)) b1Voter (
    .inA(b1A),
    .inB(b1B),
    .inC(b1C),
    .out(b1),
    .tmrErr(b1TmrError)
    );

majorityVoter #(.WIDTH(8)) b2Voter (
    .inA(b2A),
    .inB(b2B),
    .inC(b2C),
    .out(b2),
    .tmrErr(b2TmrError)
    );

majorityVoter #(.WIDTH(8)) b3Voter (
    .inA(b3A),
    .inB(b3B),
    .inC(b3C),
    .out(b3),
    .tmrErr(b3TmrError)
    );

majorityVoter end_read_miso_regVoter (
    .inA(end_read_miso_regA),
    .inB(end_read_miso_regB),
    .inC(end_read_miso_regC),
    .out(end_read_miso_reg),
    .tmrErr(end_read_miso_regTmrError)
    );

majorityVoter #(.WIDTH(8)) idVoter (
    .inA(idA),
    .inB(idB),
    .inC(idC),
    .out(id),
    .tmrErr(idTmrError)
    );

fanout buffer_enFanout (
    .in(buffer_en),
    .outA(buffer_enA),
    .outB(buffer_enB),
    .outC(buffer_enC)
    );

fanout clkFanout (
    .in(clk),
    .outA(clkA),
    .outB(clkB),
    .outC(clkC)
    );

fanout #(.WIDTH(8)) data_rec_inFanout (
    .in(data_rec_in),
    .outA(data_rec_inA),
    .outB(data_rec_inB),
    .outC(data_rec_inC)
    );

fanout rstFanout (
    .in(rst),
    .outA(rstA),
    .outB(rstB),
    .outC(rstC)
    );

fanout #(.WIDTH(8)) spi_id_inFanout (
    .in(spi_id_in),
    .outA(spi_id_inA),
    .outB(spi_id_inB),
    .outC(spi_id_inC)
    );

fanout #(.WIDTH(8)) spi_regFanout (
    .in(spi_reg),
    .outA(spi_regA),
    .outB(spi_regB),
    .outC(spi_regC)
    );

fanout #(.WIDTH(8)) spi_selectFanout (
    .in(spi_select),
    .outA(spi_selectA),
    .outB(spi_selectB),
    .outC(spi_selectC)
    );
endmodule

