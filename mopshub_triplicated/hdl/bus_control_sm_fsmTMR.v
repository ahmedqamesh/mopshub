/****************************************************************************************************
 *                          ! THIS FILE WAS AUTO-GENERATED BY TMRG TOOL !                           *
 *                                   ! DO NOT EDIT IT MANUALLY !                                    *
 *                                                                                                  *
 * file    : ./output/bus_control_sm_fsmTMR.v                                                       *
 *                                                                                                  *
 * user    : lucas                                                                                  *
 * host    : DESKTOP-BFDSFP2                                                                        *
 * date    : 03/04/2022 20:08:31                                                                    *
 *                                                                                                  *
 * workdir : /mnt/c/Users/Lucas/Desktop/mopshub_triplication/triplicated/mopshub_top_canakari_ftrim/hdl *
 * cmd     : /mnt/c/Users/Lucas/Desktop/mopshub_triplication/tmrg-master/bin/tmrg -vv -c tmrg.cfg   *
 * tmrg rev:                                                                                        *
 *                                                                                                  *
 * src file: bus_control_sm_fsm.v                                                                   *
 *           Git SHA           : File not in git repository!                                        *
 *           Modification time : 2022-03-28 21:55:51                                                *
 *           File Size         : 23993                                                              *
 *           MD5 hash          : 9166e173c35e21541622c13bd7b8b7be                                   *
 *                                                                                                  *
 ****************************************************************************************************/

module bus_control_SMTMR(
  input wire  abortA ,
  input wire  abortB ,
  input wire  abortC ,
  input wire  clkA ,
  input wire  clkB ,
  input wire  clkC ,
  input wire  cnt_doneA ,
  input wire  cnt_doneB ,
  input wire  cnt_doneC ,
  input wire  end_cntA ,
  input wire  end_cntB ,
  input wire  end_cntC ,
  input wire  end_read_elinkA ,
  input wire  end_read_elinkB ,
  input wire  end_read_elinkC ,
  input wire  end_read_misoA ,
  input wire  end_read_misoB ,
  input wire  end_read_misoC ,
  input wire  end_write_elink_spiA ,
  input wire  end_write_elink_spiB ,
  input wire  end_write_elink_spiC ,
  input wire  irq_spi_traA ,
  input wire  irq_spi_traB ,
  input wire  irq_spi_traC ,
  input wire  rstA ,
  input wire  rstB ,
  input wire  rstC ,
  input wire  start_bus_initA ,
  input wire  start_bus_initB ,
  input wire  start_bus_initC ,
  input wire  start_mon_initA ,
  input wire  start_mon_initB ,
  input wire  start_mon_initC ,
  input wire  start_power_offA ,
  input wire  start_power_offB ,
  input wire  start_power_offC ,
  input wire  start_power_onA ,
  input wire  start_power_onB ,
  input wire  start_power_onC ,
  input wire  start_read_monA ,
  input wire  start_read_monB ,
  input wire  start_read_monC ,
  input wire  timeoutrstA ,
  input wire  timeoutrstB ,
  input wire  timeoutrstC ,
  output reg [4:0] addrA ,
  output reg [4:0] addrB ,
  output reg [4:0] addrC ,
  output reg  bus_en_doneA ,
  output reg  bus_en_doneB ,
  output reg  bus_en_doneC ,
  output reg  cs_mA ,
  output reg  cs_mB ,
  output reg  cs_mC ,
  output reg  cs_pA ,
  output reg  cs_pB ,
  output reg  cs_pC ,
  output reg  end_spi_procA ,
  output reg  end_spi_procB ,
  output reg  end_spi_procC ,
  output reg  entimeoutA ,
  output reg  entimeoutB ,
  output reg  entimeoutC ,
  output reg  mon_en_doneA ,
  output reg  mon_en_doneB ,
  output reg  mon_en_doneC ,
  output reg  read_spi_modeA ,
  output reg  read_spi_modeB ,
  output reg  read_spi_modeC ,
  output reg  spi_csA ,
  output reg  spi_csB ,
  output reg  spi_csC ,
  output reg  start_cntA ,
  output reg  start_cntB ,
  output reg  start_cntC ,
  output reg  start_initA ,
  output reg  start_initB ,
  output reg  start_initC ,
  output reg  start_read_elinkA ,
  output reg  start_read_elinkB ,
  output reg  start_read_elinkC ,
  output reg  start_read_misoA ,
  output reg  start_read_misoB ,
  output reg  start_read_misoC ,
  output reg  start_write_elink_spiA ,
  output reg  start_write_elink_spiB ,
  output reg  start_write_elink_spiC ,
  output reg [6:0] statedebA ,
  output reg [6:0] statedebB ,
  output reg [6:0] statedebC 
);
parameter waittoact =7'd0;
parameter reset =7'd1;
parameter ST_IODIRA =7'd2;
parameter start =7'd3;
parameter ST_Init_1 =7'd4;
parameter st_Init_2 =7'd5;
parameter ST_Config1 =7'd6;
parameter write_csrs1 =7'd7;
parameter ST_Gain_calibrate =7'd8;
parameter endinit1 =7'd9;
parameter start1 =7'd10;
parameter ST_Rest_1 =7'd11;
parameter ST_Rest_2 =7'd12;
parameter ST_Rest_4 =7'd13;
parameter ST_Rest_RS_1 =7'd14;
parameter ST_Rest_RS_2 =7'd15;
parameter St_wait =7'd16;
parameter St_wait1 =7'd17;
parameter St_wait2 =7'd18;
parameter ST_Config2 =7'd19;
parameter ST_Config3 =7'd20;
parameter ST_Config4 =7'd21;
parameter ST_Read_reg =7'd22;
parameter ST_Read_RS_3 =7'd23;
parameter ST_Read_reg1 =7'd24;
parameter ST_Read_RS_4 =7'd25;
parameter St_wait3 =7'd26;
parameter write_csrs2 =7'd27;
parameter write_csrs3 =7'd28;
parameter write_csrs4 =7'd29;
parameter write_csrs5 =7'd30;
parameter write_csrs6 =7'd31;
parameter write_csrs7 =7'd32;
parameter ST_Read_reg2 =7'd33;
parameter ST_Read_RS_5 =7'd34;
parameter St_wait4 =7'd35;
parameter ST_calibrate1 =7'd36;
parameter ST_calibrate2 =7'd37;
parameter ST_calibrate3 =7'd38;
parameter ST_Rest_RS_3 =7'd39;
parameter ST_Rest_RS_4 =7'd40;
parameter ST_Rest_RS_5 =7'd41;
parameter ST_Rest_RS_6 =7'd42;
parameter ST_IODIRA1 =7'd43;
parameter st_IODIRB =7'd44;
parameter st_IODIRB1 =7'd45;
parameter st_IODIRB2 =7'd46;
parameter St_wait5 =7'd47;
parameter St_wait6 =7'd48;
parameter st_GPIOB =7'd49;
parameter st_GPIOB1 =7'd50;
parameter st_GPIOB2 =7'd51;
parameter St_wait7 =7'd52;
parameter st_GPPUA =7'd53;
parameter st_GPPUA1 =7'd54;
parameter st_GPPUA2 =7'd55;
parameter St_wait8 =7'd56;
parameter st_GPPUB =7'd57;
parameter st_GPPUB1 =7'd58;
parameter st_GPPUB2 =7'd59;
parameter St_wait9 =7'd60;
parameter st_GPIOA =7'd61;
parameter st_GPIOA1 =7'd62;
parameter st_GPIOA2 =7'd63;
parameter St_wait10 =7'd64;
parameter End_Select =7'd65;
parameter st_GPIOA3 =7'd66;
parameter st_GPIOA4 =7'd67;
parameter st_GPIOA5 =7'd68;
parameter st_GPIOA6 =7'd69;
parameter st_GPIOA7 =7'd70;
parameter st_GPIOA8 =7'd71;
parameter ST_Read_reg5 =7'd72;
parameter ST_Read_RS_8 =7'd73;
parameter Write_Mosi =7'd74;
parameter read_elink_mes1 =7'd75;
parameter CS_low =7'd76;
parameter Read_Miso =7'd77;
parameter Done =7'd78;
parameter write_elink =7'd79;
parameter Wait_Miso =7'd80;
reg  [6:0] current_stateA ;
reg  [6:0] next_stateA ;
reg  [6:0] current_stateB ;
reg  [6:0] next_stateB ;
reg  [6:0] current_stateC ;
reg  [6:0] next_stateC ;
reg  [5:0] csm_timerA ;
reg  [5:0] csm_timerB ;
reg  [5:0] csm_timerC ;
reg  [5:0] csm_next_timerA ;
reg  [5:0] csm_next_timerB ;
reg  [5:0] csm_next_timerC ;
reg  csm_timeoutA ;
reg  csm_timeoutB ;
reg  csm_timeoutC ;
reg  csm_to_ST_Init_1A ;
reg  csm_to_ST_Init_1B ;
reg  csm_to_ST_Init_1C ;
reg  csm_to_ST_Rest_2A ;
reg  csm_to_ST_Rest_2B ;
reg  csm_to_ST_Rest_2C ;
reg  csm_to_ST_Rest_RS_2A ;
reg  csm_to_ST_Rest_RS_2B ;
reg  csm_to_ST_Rest_RS_2C ;
reg  csm_to_ST_Read_RS_3A ;
reg  csm_to_ST_Read_RS_3B ;
reg  csm_to_ST_Read_RS_3C ;
reg  csm_to_ST_Read_RS_4A ;
reg  csm_to_ST_Read_RS_4B ;
reg  csm_to_ST_Read_RS_4C ;
reg  csm_to_ST_Read_RS_5A ;
reg  csm_to_ST_Read_RS_5B ;
reg  csm_to_ST_Read_RS_5C ;
reg  csm_to_ST_Rest_RS_3A ;
reg  csm_to_ST_Rest_RS_3B ;
reg  csm_to_ST_Rest_RS_3C ;
reg  csm_to_ST_Rest_RS_4A ;
reg  csm_to_ST_Rest_RS_4B ;
reg  csm_to_ST_Rest_RS_4C ;
reg  csm_to_ST_Rest_RS_5A ;
reg  csm_to_ST_Rest_RS_5B ;
reg  csm_to_ST_Rest_RS_5C ;
reg  csm_to_ST_Rest_RS_6A ;
reg  csm_to_ST_Rest_RS_6B ;
reg  csm_to_ST_Rest_RS_6C ;
reg  csm_to_ST_IODIRA1A ;
reg  csm_to_ST_IODIRA1B ;
reg  csm_to_ST_IODIRA1C ;
reg  csm_to_ST_Read_RS_8A ;
reg  csm_to_ST_Read_RS_8B ;
reg  csm_to_ST_Read_RS_8C ;
reg  csm_to_CS_lowA ;
reg  csm_to_CS_lowB ;
reg  csm_to_CS_lowC ;
reg  csm_to_Read_MisoA ;
reg  csm_to_Read_MisoB ;
reg  csm_to_Read_MisoC ;

always @( csm_timeoutA or current_stateA or end_read_elinkA or end_read_misoA or end_write_elink_spiA or irq_spi_traA or rstA or start_bus_initA or start_mon_initA or start_power_offA or start_power_onA or start_read_monA )
  begin : next_state_block_procA
    csm_to_ST_Init_1A =  1'b0;
    csm_to_ST_Rest_2A =  1'b0;
    csm_to_ST_Rest_RS_2A =  1'b0;
    csm_to_ST_Read_RS_3A =  1'b0;
    csm_to_ST_Read_RS_4A =  1'b0;
    csm_to_ST_Read_RS_5A =  1'b0;
    csm_to_ST_Rest_RS_3A =  1'b0;
    csm_to_ST_Rest_RS_4A =  1'b0;
    csm_to_ST_Rest_RS_5A =  1'b0;
    csm_to_ST_Rest_RS_6A =  1'b0;
    csm_to_ST_IODIRA1A =  1'b0;
    csm_to_ST_Read_RS_8A =  1'b0;
    csm_to_CS_lowA =  1'b0;
    csm_to_Read_MisoA =  1'b0;
    case (current_stateA)
      waittoact : 
        begin
          if (start_bus_initA==1)
            next_stateA =  start;
          else
            if (start_mon_initA==1)
              next_stateA =  start1;
            else
              if (start_power_onA==1)
                next_stateA =  st_GPIOA3;
              else
                if (start_power_offA==1)
                  next_stateA =  st_GPIOA6;
                else
                  if (start_read_monA==1)
                    next_stateA =  ST_Read_reg5;
                  else
                    if (irq_spi_traA==1)
                      next_stateA =  read_elink_mes1;
                    else
                      next_stateA =  waittoact;
        end
      reset : 
        begin
          if (rstA==1)
            next_stateA =  waittoact;
          else
            next_stateA =  reset;
        end
      ST_IODIRA : 
        begin
          next_stateA =  ST_IODIRA1;
          csm_to_ST_IODIRA1A =  1'b1;
        end
      start : 
        begin
          next_stateA =  ST_IODIRA;
        end
      ST_Init_1 : 
        begin
          if (csm_timeoutA)
            next_stateA =  st_Init_2;
          else
            next_stateA =  ST_Init_1;
        end
      st_Init_2 : 
        begin
          next_stateA =  ST_Rest_1;
        end
      ST_Config1 : 
        begin
          next_stateA =  ST_Config2;
        end
      write_csrs1 : 
        begin
          next_stateA =  write_csrs2;
        end
      ST_Gain_calibrate : 
        begin
          next_stateA =  ST_Rest_RS_3;
          csm_to_ST_Rest_RS_3A =  1'b1;
        end
      endinit1 : 
        begin
          next_stateA =  waittoact;
        end
      start1 : 
        begin
          next_stateA =  ST_Init_1;
          csm_to_ST_Init_1A =  1'b1;
        end
      ST_Rest_1 : 
        begin
          next_stateA =  ST_Rest_2;
          csm_to_ST_Rest_2A =  1'b1;
        end
      ST_Rest_2 : 
        begin
          if (csm_timeoutA)
            next_stateA =  ST_Rest_4;
          else
            next_stateA =  ST_Rest_2;
        end
      ST_Rest_4 : 
        begin
          next_stateA =  St_wait;
        end
      ST_Rest_RS_1 : 
        begin
          next_stateA =  ST_Rest_RS_2;
          csm_to_ST_Rest_RS_2A =  1'b1;
        end
      ST_Rest_RS_2 : 
        begin
          if (csm_timeoutA)
            next_stateA =  St_wait1;
          else
            next_stateA =  ST_Rest_RS_2;
        end
      St_wait : 
        begin
          next_stateA =  ST_Rest_RS_1;
        end
      St_wait1 : 
        begin
          next_stateA =  ST_Read_reg;
        end
      St_wait2 : 
        begin
          next_stateA =  ST_Config1;
        end
      ST_Config2 : 
        begin
          next_stateA =  ST_Config3;
        end
      ST_Config3 : 
        begin
          next_stateA =  ST_Config4;
        end
      ST_Config4 : 
        begin
          next_stateA =  ST_Read_reg1;
        end
      ST_Read_reg : 
        begin
          next_stateA =  ST_Read_RS_3;
          csm_to_ST_Read_RS_3A =  1'b1;
        end
      ST_Read_RS_3 : 
        begin
          if (csm_timeoutA)
            next_stateA =  St_wait2;
          else
            next_stateA =  ST_Read_RS_3;
        end
      ST_Read_reg1 : 
        begin
          next_stateA =  ST_Read_RS_4;
          csm_to_ST_Read_RS_4A =  1'b1;
        end
      ST_Read_RS_4 : 
        begin
          if (csm_timeoutA)
            next_stateA =  St_wait3;
          else
            next_stateA =  ST_Read_RS_4;
        end
      St_wait3 : 
        begin
          next_stateA =  write_csrs1;
        end
      write_csrs2 : 
        begin
          next_stateA =  write_csrs3;
        end
      write_csrs3 : 
        begin
          next_stateA =  write_csrs4;
        end
      write_csrs4 : 
        begin
          next_stateA =  write_csrs5;
        end
      write_csrs5 : 
        begin
          next_stateA =  write_csrs6;
        end
      write_csrs6 : 
        begin
          next_stateA =  write_csrs7;
        end
      write_csrs7 : 
        begin
          next_stateA =  St_wait4;
        end
      ST_Read_reg2 : 
        begin
          next_stateA =  ST_Read_RS_5;
          csm_to_ST_Read_RS_5A =  1'b1;
        end
      ST_Read_RS_5 : 
        begin
          if (csm_timeoutA)
            next_stateA =  ST_Gain_calibrate;
          else
            next_stateA =  ST_Read_RS_5;
        end
      St_wait4 : 
        begin
          next_stateA =  ST_Read_reg2;
        end
      ST_calibrate1 : 
        begin
          next_stateA =  ST_Rest_RS_4;
          csm_to_ST_Rest_RS_4A =  1'b1;
        end
      ST_calibrate2 : 
        begin
          next_stateA =  ST_Rest_RS_5;
          csm_to_ST_Rest_RS_5A =  1'b1;
        end
      ST_calibrate3 : 
        begin
          next_stateA =  ST_Rest_RS_6;
          csm_to_ST_Rest_RS_6A =  1'b1;
        end
      ST_Rest_RS_3 : 
        begin
          if (csm_timeoutA)
            next_stateA =  ST_calibrate1;
          else
            next_stateA =  ST_Rest_RS_3;
        end
      ST_Rest_RS_4 : 
        begin
          if (csm_timeoutA)
            next_stateA =  ST_calibrate2;
          else
            next_stateA =  ST_Rest_RS_4;
        end
      ST_Rest_RS_5 : 
        begin
          if (csm_timeoutA)
            next_stateA =  ST_calibrate3;
          else
            next_stateA =  ST_Rest_RS_5;
        end
      ST_Rest_RS_6 : 
        begin
          if (csm_timeoutA)
            next_stateA =  endinit1;
          else
            next_stateA =  ST_Rest_RS_6;
        end
      ST_IODIRA1 : 
        begin
          if (csm_timeoutA)
            next_stateA =  St_wait5;
          else
            next_stateA =  ST_IODIRA1;
        end
      st_IODIRB : 
        begin
          next_stateA =  st_IODIRB1;
        end
      st_IODIRB1 : 
        begin
          next_stateA =  st_IODIRB2;
        end
      st_IODIRB2 : 
        begin
          next_stateA =  St_wait6;
        end
      St_wait5 : 
        begin
          next_stateA =  st_IODIRB;
        end
      St_wait6 : 
        begin
          next_stateA =  st_GPIOB;
        end
      st_GPIOB : 
        begin
          next_stateA =  st_GPIOB1;
        end
      st_GPIOB1 : 
        begin
          next_stateA =  st_GPIOB2;
        end
      st_GPIOB2 : 
        begin
          next_stateA =  St_wait7;
        end
      St_wait7 : 
        begin
          next_stateA =  st_GPPUA;
        end
      st_GPPUA : 
        begin
          next_stateA =  st_GPPUA1;
        end
      st_GPPUA1 : 
        begin
          next_stateA =  st_GPPUA2;
        end
      st_GPPUA2 : 
        begin
          next_stateA =  St_wait8;
        end
      St_wait8 : 
        begin
          next_stateA =  st_GPPUB;
        end
      st_GPPUB : 
        begin
          next_stateA =  st_GPPUB1;
        end
      st_GPPUB1 : 
        begin
          next_stateA =  st_GPPUB2;
        end
      st_GPPUB2 : 
        begin
          next_stateA =  St_wait9;
        end
      St_wait9 : 
        begin
          next_stateA =  st_GPIOA;
        end
      st_GPIOA : 
        begin
          next_stateA =  st_GPIOA1;
        end
      st_GPIOA1 : 
        begin
          next_stateA =  st_GPIOA2;
        end
      st_GPIOA2 : 
        begin
          next_stateA =  St_wait10;
        end
      St_wait10 : 
        begin
          next_stateA =  End_Select;
        end
      End_Select : 
        begin
          next_stateA =  waittoact;
        end
      st_GPIOA3 : 
        begin
          next_stateA =  st_GPIOA4;
        end
      st_GPIOA4 : 
        begin
          next_stateA =  st_GPIOA5;
        end
      st_GPIOA5 : 
        begin
          next_stateA =  waittoact;
        end
      st_GPIOA6 : 
        begin
          next_stateA =  st_GPIOA7;
        end
      st_GPIOA7 : 
        begin
          next_stateA =  st_GPIOA8;
        end
      st_GPIOA8 : 
        begin
          next_stateA =  waittoact;
        end
      ST_Read_reg5 : 
        begin
          next_stateA =  ST_Read_RS_8;
          csm_to_ST_Read_RS_8A =  1'b1;
        end
      ST_Read_RS_8 : 
        begin
          if (csm_timeoutA)
            next_stateA =  waittoact;
          else
            next_stateA =  ST_Read_RS_8;
        end
      Write_Mosi : 
        begin
          next_stateA =  CS_low;
          csm_to_CS_lowA =  1'b1;
        end
      read_elink_mes1 : 
        begin
          if (end_read_elinkA==1)
            next_stateA =  Write_Mosi;
          else
            next_stateA =  read_elink_mes1;
        end
      CS_low : 
        begin
          if (csm_timeoutA)
            begin
              next_stateA =  Read_Miso;
              csm_to_Read_MisoA =  1'b1;
            end
          else
            next_stateA =  CS_low;
        end
      Read_Miso : 
        begin
          if (csm_timeoutA)
            next_stateA =  Wait_Miso;
          else
            next_stateA =  Read_Miso;
        end
      Done : 
        begin
          next_stateA =  waittoact;
        end
      write_elink : 
        begin
          if (end_write_elink_spiA==1)
            next_stateA =  Done;
          else
            next_stateA =  write_elink;
        end
      Wait_Miso : 
        begin
          if (end_read_misoA==1)
            next_stateA =  write_elink;
          else
            next_stateA =  Wait_Miso;
        end
      default : next_stateA =  reset;
    endcase
  end

always @( csm_timeoutB or current_stateB or end_read_elinkB or end_read_misoB or end_write_elink_spiB or irq_spi_traB or rstB or start_bus_initB or start_mon_initB or start_power_offB or start_power_onB or start_read_monB )
  begin : next_state_block_procB
    csm_to_ST_Init_1B =  1'b0;
    csm_to_ST_Rest_2B =  1'b0;
    csm_to_ST_Rest_RS_2B =  1'b0;
    csm_to_ST_Read_RS_3B =  1'b0;
    csm_to_ST_Read_RS_4B =  1'b0;
    csm_to_ST_Read_RS_5B =  1'b0;
    csm_to_ST_Rest_RS_3B =  1'b0;
    csm_to_ST_Rest_RS_4B =  1'b0;
    csm_to_ST_Rest_RS_5B =  1'b0;
    csm_to_ST_Rest_RS_6B =  1'b0;
    csm_to_ST_IODIRA1B =  1'b0;
    csm_to_ST_Read_RS_8B =  1'b0;
    csm_to_CS_lowB =  1'b0;
    csm_to_Read_MisoB =  1'b0;
    case (current_stateB)
      waittoact : 
        begin
          if (start_bus_initB==1)
            next_stateB =  start;
          else
            if (start_mon_initB==1)
              next_stateB =  start1;
            else
              if (start_power_onB==1)
                next_stateB =  st_GPIOA3;
              else
                if (start_power_offB==1)
                  next_stateB =  st_GPIOA6;
                else
                  if (start_read_monB==1)
                    next_stateB =  ST_Read_reg5;
                  else
                    if (irq_spi_traB==1)
                      next_stateB =  read_elink_mes1;
                    else
                      next_stateB =  waittoact;
        end
      reset : 
        begin
          if (rstB==1)
            next_stateB =  waittoact;
          else
            next_stateB =  reset;
        end
      ST_IODIRA : 
        begin
          next_stateB =  ST_IODIRA1;
          csm_to_ST_IODIRA1B =  1'b1;
        end
      start : 
        begin
          next_stateB =  ST_IODIRA;
        end
      ST_Init_1 : 
        begin
          if (csm_timeoutB)
            next_stateB =  st_Init_2;
          else
            next_stateB =  ST_Init_1;
        end
      st_Init_2 : 
        begin
          next_stateB =  ST_Rest_1;
        end
      ST_Config1 : 
        begin
          next_stateB =  ST_Config2;
        end
      write_csrs1 : 
        begin
          next_stateB =  write_csrs2;
        end
      ST_Gain_calibrate : 
        begin
          next_stateB =  ST_Rest_RS_3;
          csm_to_ST_Rest_RS_3B =  1'b1;
        end
      endinit1 : 
        begin
          next_stateB =  waittoact;
        end
      start1 : 
        begin
          next_stateB =  ST_Init_1;
          csm_to_ST_Init_1B =  1'b1;
        end
      ST_Rest_1 : 
        begin
          next_stateB =  ST_Rest_2;
          csm_to_ST_Rest_2B =  1'b1;
        end
      ST_Rest_2 : 
        begin
          if (csm_timeoutB)
            next_stateB =  ST_Rest_4;
          else
            next_stateB =  ST_Rest_2;
        end
      ST_Rest_4 : 
        begin
          next_stateB =  St_wait;
        end
      ST_Rest_RS_1 : 
        begin
          next_stateB =  ST_Rest_RS_2;
          csm_to_ST_Rest_RS_2B =  1'b1;
        end
      ST_Rest_RS_2 : 
        begin
          if (csm_timeoutB)
            next_stateB =  St_wait1;
          else
            next_stateB =  ST_Rest_RS_2;
        end
      St_wait : 
        begin
          next_stateB =  ST_Rest_RS_1;
        end
      St_wait1 : 
        begin
          next_stateB =  ST_Read_reg;
        end
      St_wait2 : 
        begin
          next_stateB =  ST_Config1;
        end
      ST_Config2 : 
        begin
          next_stateB =  ST_Config3;
        end
      ST_Config3 : 
        begin
          next_stateB =  ST_Config4;
        end
      ST_Config4 : 
        begin
          next_stateB =  ST_Read_reg1;
        end
      ST_Read_reg : 
        begin
          next_stateB =  ST_Read_RS_3;
          csm_to_ST_Read_RS_3B =  1'b1;
        end
      ST_Read_RS_3 : 
        begin
          if (csm_timeoutB)
            next_stateB =  St_wait2;
          else
            next_stateB =  ST_Read_RS_3;
        end
      ST_Read_reg1 : 
        begin
          next_stateB =  ST_Read_RS_4;
          csm_to_ST_Read_RS_4B =  1'b1;
        end
      ST_Read_RS_4 : 
        begin
          if (csm_timeoutB)
            next_stateB =  St_wait3;
          else
            next_stateB =  ST_Read_RS_4;
        end
      St_wait3 : 
        begin
          next_stateB =  write_csrs1;
        end
      write_csrs2 : 
        begin
          next_stateB =  write_csrs3;
        end
      write_csrs3 : 
        begin
          next_stateB =  write_csrs4;
        end
      write_csrs4 : 
        begin
          next_stateB =  write_csrs5;
        end
      write_csrs5 : 
        begin
          next_stateB =  write_csrs6;
        end
      write_csrs6 : 
        begin
          next_stateB =  write_csrs7;
        end
      write_csrs7 : 
        begin
          next_stateB =  St_wait4;
        end
      ST_Read_reg2 : 
        begin
          next_stateB =  ST_Read_RS_5;
          csm_to_ST_Read_RS_5B =  1'b1;
        end
      ST_Read_RS_5 : 
        begin
          if (csm_timeoutB)
            next_stateB =  ST_Gain_calibrate;
          else
            next_stateB =  ST_Read_RS_5;
        end
      St_wait4 : 
        begin
          next_stateB =  ST_Read_reg2;
        end
      ST_calibrate1 : 
        begin
          next_stateB =  ST_Rest_RS_4;
          csm_to_ST_Rest_RS_4B =  1'b1;
        end
      ST_calibrate2 : 
        begin
          next_stateB =  ST_Rest_RS_5;
          csm_to_ST_Rest_RS_5B =  1'b1;
        end
      ST_calibrate3 : 
        begin
          next_stateB =  ST_Rest_RS_6;
          csm_to_ST_Rest_RS_6B =  1'b1;
        end
      ST_Rest_RS_3 : 
        begin
          if (csm_timeoutB)
            next_stateB =  ST_calibrate1;
          else
            next_stateB =  ST_Rest_RS_3;
        end
      ST_Rest_RS_4 : 
        begin
          if (csm_timeoutB)
            next_stateB =  ST_calibrate2;
          else
            next_stateB =  ST_Rest_RS_4;
        end
      ST_Rest_RS_5 : 
        begin
          if (csm_timeoutB)
            next_stateB =  ST_calibrate3;
          else
            next_stateB =  ST_Rest_RS_5;
        end
      ST_Rest_RS_6 : 
        begin
          if (csm_timeoutB)
            next_stateB =  endinit1;
          else
            next_stateB =  ST_Rest_RS_6;
        end
      ST_IODIRA1 : 
        begin
          if (csm_timeoutB)
            next_stateB =  St_wait5;
          else
            next_stateB =  ST_IODIRA1;
        end
      st_IODIRB : 
        begin
          next_stateB =  st_IODIRB1;
        end
      st_IODIRB1 : 
        begin
          next_stateB =  st_IODIRB2;
        end
      st_IODIRB2 : 
        begin
          next_stateB =  St_wait6;
        end
      St_wait5 : 
        begin
          next_stateB =  st_IODIRB;
        end
      St_wait6 : 
        begin
          next_stateB =  st_GPIOB;
        end
      st_GPIOB : 
        begin
          next_stateB =  st_GPIOB1;
        end
      st_GPIOB1 : 
        begin
          next_stateB =  st_GPIOB2;
        end
      st_GPIOB2 : 
        begin
          next_stateB =  St_wait7;
        end
      St_wait7 : 
        begin
          next_stateB =  st_GPPUA;
        end
      st_GPPUA : 
        begin
          next_stateB =  st_GPPUA1;
        end
      st_GPPUA1 : 
        begin
          next_stateB =  st_GPPUA2;
        end
      st_GPPUA2 : 
        begin
          next_stateB =  St_wait8;
        end
      St_wait8 : 
        begin
          next_stateB =  st_GPPUB;
        end
      st_GPPUB : 
        begin
          next_stateB =  st_GPPUB1;
        end
      st_GPPUB1 : 
        begin
          next_stateB =  st_GPPUB2;
        end
      st_GPPUB2 : 
        begin
          next_stateB =  St_wait9;
        end
      St_wait9 : 
        begin
          next_stateB =  st_GPIOA;
        end
      st_GPIOA : 
        begin
          next_stateB =  st_GPIOA1;
        end
      st_GPIOA1 : 
        begin
          next_stateB =  st_GPIOA2;
        end
      st_GPIOA2 : 
        begin
          next_stateB =  St_wait10;
        end
      St_wait10 : 
        begin
          next_stateB =  End_Select;
        end
      End_Select : 
        begin
          next_stateB =  waittoact;
        end
      st_GPIOA3 : 
        begin
          next_stateB =  st_GPIOA4;
        end
      st_GPIOA4 : 
        begin
          next_stateB =  st_GPIOA5;
        end
      st_GPIOA5 : 
        begin
          next_stateB =  waittoact;
        end
      st_GPIOA6 : 
        begin
          next_stateB =  st_GPIOA7;
        end
      st_GPIOA7 : 
        begin
          next_stateB =  st_GPIOA8;
        end
      st_GPIOA8 : 
        begin
          next_stateB =  waittoact;
        end
      ST_Read_reg5 : 
        begin
          next_stateB =  ST_Read_RS_8;
          csm_to_ST_Read_RS_8B =  1'b1;
        end
      ST_Read_RS_8 : 
        begin
          if (csm_timeoutB)
            next_stateB =  waittoact;
          else
            next_stateB =  ST_Read_RS_8;
        end
      Write_Mosi : 
        begin
          next_stateB =  CS_low;
          csm_to_CS_lowB =  1'b1;
        end
      read_elink_mes1 : 
        begin
          if (end_read_elinkB==1)
            next_stateB =  Write_Mosi;
          else
            next_stateB =  read_elink_mes1;
        end
      CS_low : 
        begin
          if (csm_timeoutB)
            begin
              next_stateB =  Read_Miso;
              csm_to_Read_MisoB =  1'b1;
            end
          else
            next_stateB =  CS_low;
        end
      Read_Miso : 
        begin
          if (csm_timeoutB)
            next_stateB =  Wait_Miso;
          else
            next_stateB =  Read_Miso;
        end
      Done : 
        begin
          next_stateB =  waittoact;
        end
      write_elink : 
        begin
          if (end_write_elink_spiB==1)
            next_stateB =  Done;
          else
            next_stateB =  write_elink;
        end
      Wait_Miso : 
        begin
          if (end_read_misoB==1)
            next_stateB =  write_elink;
          else
            next_stateB =  Wait_Miso;
        end
      default : next_stateB =  reset;
    endcase
  end

always @( csm_timeoutC or current_stateC or end_read_elinkC or end_read_misoC or end_write_elink_spiC or irq_spi_traC or rstC or start_bus_initC or start_mon_initC or start_power_offC or start_power_onC or start_read_monC )
  begin : next_state_block_procC
    csm_to_ST_Init_1C =  1'b0;
    csm_to_ST_Rest_2C =  1'b0;
    csm_to_ST_Rest_RS_2C =  1'b0;
    csm_to_ST_Read_RS_3C =  1'b0;
    csm_to_ST_Read_RS_4C =  1'b0;
    csm_to_ST_Read_RS_5C =  1'b0;
    csm_to_ST_Rest_RS_3C =  1'b0;
    csm_to_ST_Rest_RS_4C =  1'b0;
    csm_to_ST_Rest_RS_5C =  1'b0;
    csm_to_ST_Rest_RS_6C =  1'b0;
    csm_to_ST_IODIRA1C =  1'b0;
    csm_to_ST_Read_RS_8C =  1'b0;
    csm_to_CS_lowC =  1'b0;
    csm_to_Read_MisoC =  1'b0;
    case (current_stateC)
      waittoact : 
        begin
          if (start_bus_initC==1)
            next_stateC =  start;
          else
            if (start_mon_initC==1)
              next_stateC =  start1;
            else
              if (start_power_onC==1)
                next_stateC =  st_GPIOA3;
              else
                if (start_power_offC==1)
                  next_stateC =  st_GPIOA6;
                else
                  if (start_read_monC==1)
                    next_stateC =  ST_Read_reg5;
                  else
                    if (irq_spi_traC==1)
                      next_stateC =  read_elink_mes1;
                    else
                      next_stateC =  waittoact;
        end
      reset : 
        begin
          if (rstC==1)
            next_stateC =  waittoact;
          else
            next_stateC =  reset;
        end
      ST_IODIRA : 
        begin
          next_stateC =  ST_IODIRA1;
          csm_to_ST_IODIRA1C =  1'b1;
        end
      start : 
        begin
          next_stateC =  ST_IODIRA;
        end
      ST_Init_1 : 
        begin
          if (csm_timeoutC)
            next_stateC =  st_Init_2;
          else
            next_stateC =  ST_Init_1;
        end
      st_Init_2 : 
        begin
          next_stateC =  ST_Rest_1;
        end
      ST_Config1 : 
        begin
          next_stateC =  ST_Config2;
        end
      write_csrs1 : 
        begin
          next_stateC =  write_csrs2;
        end
      ST_Gain_calibrate : 
        begin
          next_stateC =  ST_Rest_RS_3;
          csm_to_ST_Rest_RS_3C =  1'b1;
        end
      endinit1 : 
        begin
          next_stateC =  waittoact;
        end
      start1 : 
        begin
          next_stateC =  ST_Init_1;
          csm_to_ST_Init_1C =  1'b1;
        end
      ST_Rest_1 : 
        begin
          next_stateC =  ST_Rest_2;
          csm_to_ST_Rest_2C =  1'b1;
        end
      ST_Rest_2 : 
        begin
          if (csm_timeoutC)
            next_stateC =  ST_Rest_4;
          else
            next_stateC =  ST_Rest_2;
        end
      ST_Rest_4 : 
        begin
          next_stateC =  St_wait;
        end
      ST_Rest_RS_1 : 
        begin
          next_stateC =  ST_Rest_RS_2;
          csm_to_ST_Rest_RS_2C =  1'b1;
        end
      ST_Rest_RS_2 : 
        begin
          if (csm_timeoutC)
            next_stateC =  St_wait1;
          else
            next_stateC =  ST_Rest_RS_2;
        end
      St_wait : 
        begin
          next_stateC =  ST_Rest_RS_1;
        end
      St_wait1 : 
        begin
          next_stateC =  ST_Read_reg;
        end
      St_wait2 : 
        begin
          next_stateC =  ST_Config1;
        end
      ST_Config2 : 
        begin
          next_stateC =  ST_Config3;
        end
      ST_Config3 : 
        begin
          next_stateC =  ST_Config4;
        end
      ST_Config4 : 
        begin
          next_stateC =  ST_Read_reg1;
        end
      ST_Read_reg : 
        begin
          next_stateC =  ST_Read_RS_3;
          csm_to_ST_Read_RS_3C =  1'b1;
        end
      ST_Read_RS_3 : 
        begin
          if (csm_timeoutC)
            next_stateC =  St_wait2;
          else
            next_stateC =  ST_Read_RS_3;
        end
      ST_Read_reg1 : 
        begin
          next_stateC =  ST_Read_RS_4;
          csm_to_ST_Read_RS_4C =  1'b1;
        end
      ST_Read_RS_4 : 
        begin
          if (csm_timeoutC)
            next_stateC =  St_wait3;
          else
            next_stateC =  ST_Read_RS_4;
        end
      St_wait3 : 
        begin
          next_stateC =  write_csrs1;
        end
      write_csrs2 : 
        begin
          next_stateC =  write_csrs3;
        end
      write_csrs3 : 
        begin
          next_stateC =  write_csrs4;
        end
      write_csrs4 : 
        begin
          next_stateC =  write_csrs5;
        end
      write_csrs5 : 
        begin
          next_stateC =  write_csrs6;
        end
      write_csrs6 : 
        begin
          next_stateC =  write_csrs7;
        end
      write_csrs7 : 
        begin
          next_stateC =  St_wait4;
        end
      ST_Read_reg2 : 
        begin
          next_stateC =  ST_Read_RS_5;
          csm_to_ST_Read_RS_5C =  1'b1;
        end
      ST_Read_RS_5 : 
        begin
          if (csm_timeoutC)
            next_stateC =  ST_Gain_calibrate;
          else
            next_stateC =  ST_Read_RS_5;
        end
      St_wait4 : 
        begin
          next_stateC =  ST_Read_reg2;
        end
      ST_calibrate1 : 
        begin
          next_stateC =  ST_Rest_RS_4;
          csm_to_ST_Rest_RS_4C =  1'b1;
        end
      ST_calibrate2 : 
        begin
          next_stateC =  ST_Rest_RS_5;
          csm_to_ST_Rest_RS_5C =  1'b1;
        end
      ST_calibrate3 : 
        begin
          next_stateC =  ST_Rest_RS_6;
          csm_to_ST_Rest_RS_6C =  1'b1;
        end
      ST_Rest_RS_3 : 
        begin
          if (csm_timeoutC)
            next_stateC =  ST_calibrate1;
          else
            next_stateC =  ST_Rest_RS_3;
        end
      ST_Rest_RS_4 : 
        begin
          if (csm_timeoutC)
            next_stateC =  ST_calibrate2;
          else
            next_stateC =  ST_Rest_RS_4;
        end
      ST_Rest_RS_5 : 
        begin
          if (csm_timeoutC)
            next_stateC =  ST_calibrate3;
          else
            next_stateC =  ST_Rest_RS_5;
        end
      ST_Rest_RS_6 : 
        begin
          if (csm_timeoutC)
            next_stateC =  endinit1;
          else
            next_stateC =  ST_Rest_RS_6;
        end
      ST_IODIRA1 : 
        begin
          if (csm_timeoutC)
            next_stateC =  St_wait5;
          else
            next_stateC =  ST_IODIRA1;
        end
      st_IODIRB : 
        begin
          next_stateC =  st_IODIRB1;
        end
      st_IODIRB1 : 
        begin
          next_stateC =  st_IODIRB2;
        end
      st_IODIRB2 : 
        begin
          next_stateC =  St_wait6;
        end
      St_wait5 : 
        begin
          next_stateC =  st_IODIRB;
        end
      St_wait6 : 
        begin
          next_stateC =  st_GPIOB;
        end
      st_GPIOB : 
        begin
          next_stateC =  st_GPIOB1;
        end
      st_GPIOB1 : 
        begin
          next_stateC =  st_GPIOB2;
        end
      st_GPIOB2 : 
        begin
          next_stateC =  St_wait7;
        end
      St_wait7 : 
        begin
          next_stateC =  st_GPPUA;
        end
      st_GPPUA : 
        begin
          next_stateC =  st_GPPUA1;
        end
      st_GPPUA1 : 
        begin
          next_stateC =  st_GPPUA2;
        end
      st_GPPUA2 : 
        begin
          next_stateC =  St_wait8;
        end
      St_wait8 : 
        begin
          next_stateC =  st_GPPUB;
        end
      st_GPPUB : 
        begin
          next_stateC =  st_GPPUB1;
        end
      st_GPPUB1 : 
        begin
          next_stateC =  st_GPPUB2;
        end
      st_GPPUB2 : 
        begin
          next_stateC =  St_wait9;
        end
      St_wait9 : 
        begin
          next_stateC =  st_GPIOA;
        end
      st_GPIOA : 
        begin
          next_stateC =  st_GPIOA1;
        end
      st_GPIOA1 : 
        begin
          next_stateC =  st_GPIOA2;
        end
      st_GPIOA2 : 
        begin
          next_stateC =  St_wait10;
        end
      St_wait10 : 
        begin
          next_stateC =  End_Select;
        end
      End_Select : 
        begin
          next_stateC =  waittoact;
        end
      st_GPIOA3 : 
        begin
          next_stateC =  st_GPIOA4;
        end
      st_GPIOA4 : 
        begin
          next_stateC =  st_GPIOA5;
        end
      st_GPIOA5 : 
        begin
          next_stateC =  waittoact;
        end
      st_GPIOA6 : 
        begin
          next_stateC =  st_GPIOA7;
        end
      st_GPIOA7 : 
        begin
          next_stateC =  st_GPIOA8;
        end
      st_GPIOA8 : 
        begin
          next_stateC =  waittoact;
        end
      ST_Read_reg5 : 
        begin
          next_stateC =  ST_Read_RS_8;
          csm_to_ST_Read_RS_8C =  1'b1;
        end
      ST_Read_RS_8 : 
        begin
          if (csm_timeoutC)
            next_stateC =  waittoact;
          else
            next_stateC =  ST_Read_RS_8;
        end
      Write_Mosi : 
        begin
          next_stateC =  CS_low;
          csm_to_CS_lowC =  1'b1;
        end
      read_elink_mes1 : 
        begin
          if (end_read_elinkC==1)
            next_stateC =  Write_Mosi;
          else
            next_stateC =  read_elink_mes1;
        end
      CS_low : 
        begin
          if (csm_timeoutC)
            begin
              next_stateC =  Read_Miso;
              csm_to_Read_MisoC =  1'b1;
            end
          else
            next_stateC =  CS_low;
        end
      Read_Miso : 
        begin
          if (csm_timeoutC)
            next_stateC =  Wait_Miso;
          else
            next_stateC =  Read_Miso;
        end
      Done : 
        begin
          next_stateC =  waittoact;
        end
      write_elink : 
        begin
          if (end_write_elink_spiC==1)
            next_stateC =  Done;
          else
            next_stateC =  write_elink;
        end
      Wait_Miso : 
        begin
          if (end_read_misoC==1)
            next_stateC =  write_elink;
          else
            next_stateC =  Wait_Miso;
        end
      default : next_stateC =  reset;
    endcase
  end

always @( current_stateA )
  begin : output_block_procA
    addrA =  5'b11111;
    bus_en_doneA =  0;
    cs_mA =  1;
    cs_pA =  1;
    end_spi_procA =  0;
    entimeoutA =  1;
    mon_en_doneA =  0;
    read_spi_modeA =  0;
    spi_csA =  1;
    start_cntA =  0;
    start_initA =  0;
    start_read_elinkA =  0;
    start_read_misoA =  0;
    start_write_elink_spiA =  0;
    case (current_stateA)
      waittoact : 
        begin
          entimeoutA =  0;
        end
      reset : 
        begin
          read_spi_modeA =  0;
        end
      ST_IODIRA : 
        begin
          addrA =  5'h13;
          cs_pA =  0;
        end
      start : 
        begin
          start_initA =  1;
        end
      ST_Init_1 : 
        begin
          addrA =  5'h1;
          cs_mA =  0;
        end
      st_Init_2 : 
        begin
          addrA =  5'h2;
          cs_mA =  0;
        end
      ST_Config1 : 
        begin
          addrA =  5'h3;
          cs_mA =  0;
        end
      write_csrs1 : 
        begin
          addrA =  5'h9;
          cs_mA =  0;
        end
      ST_Gain_calibrate : 
        begin
          addrA =  5'hF;
          cs_mA =  0;
        end
      endinit1 : 
        begin
          mon_en_doneA =  1;
        end
      start1 : 
        begin
          start_initA =  1;
        end
      ST_Rest_1 : 
        begin
          addrA =  5'h3;
          cs_mA =  0;
        end
      ST_Rest_2 : 
        begin
          addrA =  5'h4;
          cs_mA =  0;
        end
      ST_Rest_4 : 
        begin
          addrA =  5'h5;
          cs_mA =  0;
        end
      ST_Rest_RS_1 : 
        begin
          addrA =  5'h3;
          cs_mA =  0;
        end
      ST_Rest_RS_2 : 
        begin
          addrA =  5'h4;
          cs_mA =  0;
        end
      St_wait : 
        begin
          cs_mA =  0;
        end
      St_wait1 : 
        begin
          cs_mA =  0;
        end
      St_wait2 : 
        begin
          cs_mA =  0;
        end
      ST_Config2 : 
        begin
          addrA =  5'h4;
          cs_mA =  0;
        end
      ST_Config3 : 
        begin
          addrA =  5'h8;
          cs_mA =  0;
        end
      ST_Config4 : 
        begin
          addrA =  5'h4;
          cs_mA =  0;
        end
      ST_Read_reg : 
        begin
          addrA =  5'h7;
          cs_mA =  0;
        end
      ST_Read_RS_3 : 
        begin
          addrA =  5'h4;
          cs_mA =  0;
        end
      ST_Read_reg1 : 
        begin
          addrA =  5'h7;
          cs_mA =  0;
        end
      ST_Read_RS_4 : 
        begin
          addrA =  5'h4;
          cs_mA =  0;
        end
      St_wait3 : 
        begin
          cs_mA =  0;
        end
      write_csrs2 : 
        begin
          addrA =  5'h4;
          cs_mA =  0;
        end
      write_csrs3 : 
        begin
          addrA =  5'hA;
          cs_mA =  0;
        end
      write_csrs4 : 
        begin
          addrA =  5'hB;
          cs_mA =  0;
        end
      write_csrs5 : 
        begin
          addrA =  5'hC;
          cs_mA =  0;
        end
      write_csrs6 : 
        begin
          addrA =  5'hD;
          cs_mA =  0;
        end
      write_csrs7 : 
        begin
          addrA =  5'hB;
          cs_mA =  0;
        end
      ST_Read_reg2 : 
        begin
          addrA =  5'hE;
          cs_mA =  0;
        end
      ST_Read_RS_5 : 
        begin
          addrA =  5'h4;
          cs_mA =  0;
        end
      St_wait4 : 
        begin
          cs_mA =  0;
        end
      ST_calibrate1 : 
        begin
          addrA =  5'h10;
          cs_mA =  0;
        end
      ST_calibrate2 : 
        begin
          addrA =  5'h11;
          cs_mA =  0;
        end
      ST_calibrate3 : 
        begin
          addrA =  5'h12;
          cs_mA =  0;
        end
      ST_Rest_RS_3 : 
        begin
          addrA =  5'h4;
          cs_mA =  0;
        end
      ST_Rest_RS_4 : 
        begin
          addrA =  5'h4;
          cs_mA =  0;
        end
      ST_Rest_RS_5 : 
        begin
          addrA =  5'h4;
          cs_mA =  0;
        end
      ST_Rest_RS_6 : 
        begin
          addrA =  5'h4;
          cs_mA =  0;
        end
      ST_IODIRA1 : 
        begin
          addrA =  5'h1A;
          cs_pA =  0;
        end
      st_IODIRB : 
        begin
          addrA =  5'h13;
          cs_pA =  0;
        end
      st_IODIRB1 : 
        begin
          addrA =  5'h14;
          cs_pA =  0;
        end
      st_IODIRB2 : 
        begin
          addrA =  5'h1A;
          cs_pA =  0;
        end
      St_wait5 : 
        begin
          cs_pA =  0;
        end
      St_wait6 : 
        begin
          cs_pA =  0;
        end
      st_GPIOB : 
        begin
          addrA =  5'h13;
          cs_pA =  0;
        end
      st_GPIOB1 : 
        begin
          addrA =  5'h15;
          cs_pA =  0;
        end
      st_GPIOB2 : 
        begin
          addrA =  5'h1A;
          cs_pA =  0;
        end
      St_wait7 : 
        begin
          cs_pA =  0;
        end
      st_GPPUA : 
        begin
          addrA =  5'h13;
          cs_pA =  0;
        end
      st_GPPUA1 : 
        begin
          addrA =  5'h16;
          cs_pA =  0;
        end
      st_GPPUA2 : 
        begin
          addrA =  5'h18;
          cs_pA =  0;
        end
      St_wait8 : 
        begin
          cs_pA =  0;
        end
      st_GPPUB : 
        begin
          addrA =  5'h13;
          cs_pA =  0;
        end
      st_GPPUB1 : 
        begin
          addrA =  5'h17;
          cs_pA =  0;
        end
      st_GPPUB2 : 
        begin
          addrA =  5'h19;
          cs_pA =  0;
        end
      St_wait9 : 
        begin
          cs_pA =  0;
        end
      st_GPIOA : 
        begin
          addrA =  5'h13;
          cs_pA =  0;
        end
      st_GPIOA1 : 
        begin
          addrA =  5'h1B;
          cs_pA =  0;
        end
      st_GPIOA2 : 
        begin
          addrA =  5'h14;
          cs_pA =  0;
        end
      St_wait10 : 
        begin
          cs_pA =  0;
        end
      End_Select : 
        begin
          bus_en_doneA =  1;
        end
      st_GPIOA3 : 
        begin
          addrA =  5'h13;
          cs_pA =  0;
        end
      st_GPIOA4 : 
        begin
          addrA =  5'h1B;
          cs_pA =  0;
        end
      st_GPIOA5 : 
        begin
          addrA =  5'h14;
          cs_pA =  0;
        end
      st_GPIOA6 : 
        begin
          addrA =  5'h13;
          cs_pA =  0;
        end
      st_GPIOA7 : 
        begin
          addrA =  5'h1B;
          cs_pA =  0;
        end
      st_GPIOA8 : 
        begin
          addrA =  5'h1A;
          cs_pA =  0;
        end
      ST_Read_reg5 : 
        begin
          addrA =  5'h7;
          cs_mA =  0;
        end
      ST_Read_RS_8 : 
        begin
          addrA =  5'h4;
          cs_mA =  0;
        end
      Write_Mosi : 
        begin
          spi_csA =  0;
          read_spi_modeA =  1;
        end
      read_elink_mes1 : 
        begin
          start_read_elinkA =  1;
          read_spi_modeA =  1;
        end
      CS_low : 
        begin
          spi_csA =  0;
          read_spi_modeA =  1;
        end
      Read_Miso : 
        begin
          start_read_misoA =  1;
          spi_csA =  0;
          read_spi_modeA =  1;
        end
      Done : 
        begin
          end_spi_procA =  1;
          read_spi_modeA =  1;
        end
      write_elink : 
        begin
          start_write_elink_spiA =  1;
          read_spi_modeA =  1;
        end
    endcase
  end

always @( current_stateB )
  begin : output_block_procB
    addrB =  5'b11111;
    bus_en_doneB =  0;
    cs_mB =  1;
    cs_pB =  1;
    end_spi_procB =  0;
    entimeoutB =  1;
    mon_en_doneB =  0;
    read_spi_modeB =  0;
    spi_csB =  1;
    start_cntB =  0;
    start_initB =  0;
    start_read_elinkB =  0;
    start_read_misoB =  0;
    start_write_elink_spiB =  0;
    case (current_stateB)
      waittoact : 
        begin
          entimeoutB =  0;
        end
      reset : 
        begin
          read_spi_modeB =  0;
        end
      ST_IODIRA : 
        begin
          addrB =  5'h13;
          cs_pB =  0;
        end
      start : 
        begin
          start_initB =  1;
        end
      ST_Init_1 : 
        begin
          addrB =  5'h1;
          cs_mB =  0;
        end
      st_Init_2 : 
        begin
          addrB =  5'h2;
          cs_mB =  0;
        end
      ST_Config1 : 
        begin
          addrB =  5'h3;
          cs_mB =  0;
        end
      write_csrs1 : 
        begin
          addrB =  5'h9;
          cs_mB =  0;
        end
      ST_Gain_calibrate : 
        begin
          addrB =  5'hF;
          cs_mB =  0;
        end
      endinit1 : 
        begin
          mon_en_doneB =  1;
        end
      start1 : 
        begin
          start_initB =  1;
        end
      ST_Rest_1 : 
        begin
          addrB =  5'h3;
          cs_mB =  0;
        end
      ST_Rest_2 : 
        begin
          addrB =  5'h4;
          cs_mB =  0;
        end
      ST_Rest_4 : 
        begin
          addrB =  5'h5;
          cs_mB =  0;
        end
      ST_Rest_RS_1 : 
        begin
          addrB =  5'h3;
          cs_mB =  0;
        end
      ST_Rest_RS_2 : 
        begin
          addrB =  5'h4;
          cs_mB =  0;
        end
      St_wait : 
        begin
          cs_mB =  0;
        end
      St_wait1 : 
        begin
          cs_mB =  0;
        end
      St_wait2 : 
        begin
          cs_mB =  0;
        end
      ST_Config2 : 
        begin
          addrB =  5'h4;
          cs_mB =  0;
        end
      ST_Config3 : 
        begin
          addrB =  5'h8;
          cs_mB =  0;
        end
      ST_Config4 : 
        begin
          addrB =  5'h4;
          cs_mB =  0;
        end
      ST_Read_reg : 
        begin
          addrB =  5'h7;
          cs_mB =  0;
        end
      ST_Read_RS_3 : 
        begin
          addrB =  5'h4;
          cs_mB =  0;
        end
      ST_Read_reg1 : 
        begin
          addrB =  5'h7;
          cs_mB =  0;
        end
      ST_Read_RS_4 : 
        begin
          addrB =  5'h4;
          cs_mB =  0;
        end
      St_wait3 : 
        begin
          cs_mB =  0;
        end
      write_csrs2 : 
        begin
          addrB =  5'h4;
          cs_mB =  0;
        end
      write_csrs3 : 
        begin
          addrB =  5'hA;
          cs_mB =  0;
        end
      write_csrs4 : 
        begin
          addrB =  5'hB;
          cs_mB =  0;
        end
      write_csrs5 : 
        begin
          addrB =  5'hC;
          cs_mB =  0;
        end
      write_csrs6 : 
        begin
          addrB =  5'hD;
          cs_mB =  0;
        end
      write_csrs7 : 
        begin
          addrB =  5'hB;
          cs_mB =  0;
        end
      ST_Read_reg2 : 
        begin
          addrB =  5'hE;
          cs_mB =  0;
        end
      ST_Read_RS_5 : 
        begin
          addrB =  5'h4;
          cs_mB =  0;
        end
      St_wait4 : 
        begin
          cs_mB =  0;
        end
      ST_calibrate1 : 
        begin
          addrB =  5'h10;
          cs_mB =  0;
        end
      ST_calibrate2 : 
        begin
          addrB =  5'h11;
          cs_mB =  0;
        end
      ST_calibrate3 : 
        begin
          addrB =  5'h12;
          cs_mB =  0;
        end
      ST_Rest_RS_3 : 
        begin
          addrB =  5'h4;
          cs_mB =  0;
        end
      ST_Rest_RS_4 : 
        begin
          addrB =  5'h4;
          cs_mB =  0;
        end
      ST_Rest_RS_5 : 
        begin
          addrB =  5'h4;
          cs_mB =  0;
        end
      ST_Rest_RS_6 : 
        begin
          addrB =  5'h4;
          cs_mB =  0;
        end
      ST_IODIRA1 : 
        begin
          addrB =  5'h1A;
          cs_pB =  0;
        end
      st_IODIRB : 
        begin
          addrB =  5'h13;
          cs_pB =  0;
        end
      st_IODIRB1 : 
        begin
          addrB =  5'h14;
          cs_pB =  0;
        end
      st_IODIRB2 : 
        begin
          addrB =  5'h1A;
          cs_pB =  0;
        end
      St_wait5 : 
        begin
          cs_pB =  0;
        end
      St_wait6 : 
        begin
          cs_pB =  0;
        end
      st_GPIOB : 
        begin
          addrB =  5'h13;
          cs_pB =  0;
        end
      st_GPIOB1 : 
        begin
          addrB =  5'h15;
          cs_pB =  0;
        end
      st_GPIOB2 : 
        begin
          addrB =  5'h1A;
          cs_pB =  0;
        end
      St_wait7 : 
        begin
          cs_pB =  0;
        end
      st_GPPUA : 
        begin
          addrB =  5'h13;
          cs_pB =  0;
        end
      st_GPPUA1 : 
        begin
          addrB =  5'h16;
          cs_pB =  0;
        end
      st_GPPUA2 : 
        begin
          addrB =  5'h18;
          cs_pB =  0;
        end
      St_wait8 : 
        begin
          cs_pB =  0;
        end
      st_GPPUB : 
        begin
          addrB =  5'h13;
          cs_pB =  0;
        end
      st_GPPUB1 : 
        begin
          addrB =  5'h17;
          cs_pB =  0;
        end
      st_GPPUB2 : 
        begin
          addrB =  5'h19;
          cs_pB =  0;
        end
      St_wait9 : 
        begin
          cs_pB =  0;
        end
      st_GPIOA : 
        begin
          addrB =  5'h13;
          cs_pB =  0;
        end
      st_GPIOA1 : 
        begin
          addrB =  5'h1B;
          cs_pB =  0;
        end
      st_GPIOA2 : 
        begin
          addrB =  5'h14;
          cs_pB =  0;
        end
      St_wait10 : 
        begin
          cs_pB =  0;
        end
      End_Select : 
        begin
          bus_en_doneB =  1;
        end
      st_GPIOA3 : 
        begin
          addrB =  5'h13;
          cs_pB =  0;
        end
      st_GPIOA4 : 
        begin
          addrB =  5'h1B;
          cs_pB =  0;
        end
      st_GPIOA5 : 
        begin
          addrB =  5'h14;
          cs_pB =  0;
        end
      st_GPIOA6 : 
        begin
          addrB =  5'h13;
          cs_pB =  0;
        end
      st_GPIOA7 : 
        begin
          addrB =  5'h1B;
          cs_pB =  0;
        end
      st_GPIOA8 : 
        begin
          addrB =  5'h1A;
          cs_pB =  0;
        end
      ST_Read_reg5 : 
        begin
          addrB =  5'h7;
          cs_mB =  0;
        end
      ST_Read_RS_8 : 
        begin
          addrB =  5'h4;
          cs_mB =  0;
        end
      Write_Mosi : 
        begin
          spi_csB =  0;
          read_spi_modeB =  1;
        end
      read_elink_mes1 : 
        begin
          start_read_elinkB =  1;
          read_spi_modeB =  1;
        end
      CS_low : 
        begin
          spi_csB =  0;
          read_spi_modeB =  1;
        end
      Read_Miso : 
        begin
          start_read_misoB =  1;
          spi_csB =  0;
          read_spi_modeB =  1;
        end
      Done : 
        begin
          end_spi_procB =  1;
          read_spi_modeB =  1;
        end
      write_elink : 
        begin
          start_write_elink_spiB =  1;
          read_spi_modeB =  1;
        end
    endcase
  end

always @( current_stateC )
  begin : output_block_procC
    addrC =  5'b11111;
    bus_en_doneC =  0;
    cs_mC =  1;
    cs_pC =  1;
    end_spi_procC =  0;
    entimeoutC =  1;
    mon_en_doneC =  0;
    read_spi_modeC =  0;
    spi_csC =  1;
    start_cntC =  0;
    start_initC =  0;
    start_read_elinkC =  0;
    start_read_misoC =  0;
    start_write_elink_spiC =  0;
    case (current_stateC)
      waittoact : 
        begin
          entimeoutC =  0;
        end
      reset : 
        begin
          read_spi_modeC =  0;
        end
      ST_IODIRA : 
        begin
          addrC =  5'h13;
          cs_pC =  0;
        end
      start : 
        begin
          start_initC =  1;
        end
      ST_Init_1 : 
        begin
          addrC =  5'h1;
          cs_mC =  0;
        end
      st_Init_2 : 
        begin
          addrC =  5'h2;
          cs_mC =  0;
        end
      ST_Config1 : 
        begin
          addrC =  5'h3;
          cs_mC =  0;
        end
      write_csrs1 : 
        begin
          addrC =  5'h9;
          cs_mC =  0;
        end
      ST_Gain_calibrate : 
        begin
          addrC =  5'hF;
          cs_mC =  0;
        end
      endinit1 : 
        begin
          mon_en_doneC =  1;
        end
      start1 : 
        begin
          start_initC =  1;
        end
      ST_Rest_1 : 
        begin
          addrC =  5'h3;
          cs_mC =  0;
        end
      ST_Rest_2 : 
        begin
          addrC =  5'h4;
          cs_mC =  0;
        end
      ST_Rest_4 : 
        begin
          addrC =  5'h5;
          cs_mC =  0;
        end
      ST_Rest_RS_1 : 
        begin
          addrC =  5'h3;
          cs_mC =  0;
        end
      ST_Rest_RS_2 : 
        begin
          addrC =  5'h4;
          cs_mC =  0;
        end
      St_wait : 
        begin
          cs_mC =  0;
        end
      St_wait1 : 
        begin
          cs_mC =  0;
        end
      St_wait2 : 
        begin
          cs_mC =  0;
        end
      ST_Config2 : 
        begin
          addrC =  5'h4;
          cs_mC =  0;
        end
      ST_Config3 : 
        begin
          addrC =  5'h8;
          cs_mC =  0;
        end
      ST_Config4 : 
        begin
          addrC =  5'h4;
          cs_mC =  0;
        end
      ST_Read_reg : 
        begin
          addrC =  5'h7;
          cs_mC =  0;
        end
      ST_Read_RS_3 : 
        begin
          addrC =  5'h4;
          cs_mC =  0;
        end
      ST_Read_reg1 : 
        begin
          addrC =  5'h7;
          cs_mC =  0;
        end
      ST_Read_RS_4 : 
        begin
          addrC =  5'h4;
          cs_mC =  0;
        end
      St_wait3 : 
        begin
          cs_mC =  0;
        end
      write_csrs2 : 
        begin
          addrC =  5'h4;
          cs_mC =  0;
        end
      write_csrs3 : 
        begin
          addrC =  5'hA;
          cs_mC =  0;
        end
      write_csrs4 : 
        begin
          addrC =  5'hB;
          cs_mC =  0;
        end
      write_csrs5 : 
        begin
          addrC =  5'hC;
          cs_mC =  0;
        end
      write_csrs6 : 
        begin
          addrC =  5'hD;
          cs_mC =  0;
        end
      write_csrs7 : 
        begin
          addrC =  5'hB;
          cs_mC =  0;
        end
      ST_Read_reg2 : 
        begin
          addrC =  5'hE;
          cs_mC =  0;
        end
      ST_Read_RS_5 : 
        begin
          addrC =  5'h4;
          cs_mC =  0;
        end
      St_wait4 : 
        begin
          cs_mC =  0;
        end
      ST_calibrate1 : 
        begin
          addrC =  5'h10;
          cs_mC =  0;
        end
      ST_calibrate2 : 
        begin
          addrC =  5'h11;
          cs_mC =  0;
        end
      ST_calibrate3 : 
        begin
          addrC =  5'h12;
          cs_mC =  0;
        end
      ST_Rest_RS_3 : 
        begin
          addrC =  5'h4;
          cs_mC =  0;
        end
      ST_Rest_RS_4 : 
        begin
          addrC =  5'h4;
          cs_mC =  0;
        end
      ST_Rest_RS_5 : 
        begin
          addrC =  5'h4;
          cs_mC =  0;
        end
      ST_Rest_RS_6 : 
        begin
          addrC =  5'h4;
          cs_mC =  0;
        end
      ST_IODIRA1 : 
        begin
          addrC =  5'h1A;
          cs_pC =  0;
        end
      st_IODIRB : 
        begin
          addrC =  5'h13;
          cs_pC =  0;
        end
      st_IODIRB1 : 
        begin
          addrC =  5'h14;
          cs_pC =  0;
        end
      st_IODIRB2 : 
        begin
          addrC =  5'h1A;
          cs_pC =  0;
        end
      St_wait5 : 
        begin
          cs_pC =  0;
        end
      St_wait6 : 
        begin
          cs_pC =  0;
        end
      st_GPIOB : 
        begin
          addrC =  5'h13;
          cs_pC =  0;
        end
      st_GPIOB1 : 
        begin
          addrC =  5'h15;
          cs_pC =  0;
        end
      st_GPIOB2 : 
        begin
          addrC =  5'h1A;
          cs_pC =  0;
        end
      St_wait7 : 
        begin
          cs_pC =  0;
        end
      st_GPPUA : 
        begin
          addrC =  5'h13;
          cs_pC =  0;
        end
      st_GPPUA1 : 
        begin
          addrC =  5'h16;
          cs_pC =  0;
        end
      st_GPPUA2 : 
        begin
          addrC =  5'h18;
          cs_pC =  0;
        end
      St_wait8 : 
        begin
          cs_pC =  0;
        end
      st_GPPUB : 
        begin
          addrC =  5'h13;
          cs_pC =  0;
        end
      st_GPPUB1 : 
        begin
          addrC =  5'h17;
          cs_pC =  0;
        end
      st_GPPUB2 : 
        begin
          addrC =  5'h19;
          cs_pC =  0;
        end
      St_wait9 : 
        begin
          cs_pC =  0;
        end
      st_GPIOA : 
        begin
          addrC =  5'h13;
          cs_pC =  0;
        end
      st_GPIOA1 : 
        begin
          addrC =  5'h1B;
          cs_pC =  0;
        end
      st_GPIOA2 : 
        begin
          addrC =  5'h14;
          cs_pC =  0;
        end
      St_wait10 : 
        begin
          cs_pC =  0;
        end
      End_Select : 
        begin
          bus_en_doneC =  1;
        end
      st_GPIOA3 : 
        begin
          addrC =  5'h13;
          cs_pC =  0;
        end
      st_GPIOA4 : 
        begin
          addrC =  5'h1B;
          cs_pC =  0;
        end
      st_GPIOA5 : 
        begin
          addrC =  5'h14;
          cs_pC =  0;
        end
      st_GPIOA6 : 
        begin
          addrC =  5'h13;
          cs_pC =  0;
        end
      st_GPIOA7 : 
        begin
          addrC =  5'h1B;
          cs_pC =  0;
        end
      st_GPIOA8 : 
        begin
          addrC =  5'h1A;
          cs_pC =  0;
        end
      ST_Read_reg5 : 
        begin
          addrC =  5'h7;
          cs_mC =  0;
        end
      ST_Read_RS_8 : 
        begin
          addrC =  5'h4;
          cs_mC =  0;
        end
      Write_Mosi : 
        begin
          spi_csC =  0;
          read_spi_modeC =  1;
        end
      read_elink_mes1 : 
        begin
          start_read_elinkC =  1;
          read_spi_modeC =  1;
        end
      CS_low : 
        begin
          spi_csC =  0;
          read_spi_modeC =  1;
        end
      Read_Miso : 
        begin
          start_read_misoC =  1;
          spi_csC =  0;
          read_spi_modeC =  1;
        end
      Done : 
        begin
          end_spi_procC =  1;
          read_spi_modeC =  1;
        end
      write_elink : 
        begin
          start_write_elink_spiC =  1;
          read_spi_modeC =  1;
        end
    endcase
  end

always @( posedge clkA )
  begin : clocked_block_procA
    if (!rstA)
      begin
        current_stateA <= reset;
        csm_timerA <= 6'd0;
      end
    else
      if (timeoutrstA)
        begin
          current_stateA <= reset;
          csm_timerA <= 6'd0;
        end
      else
        if (abortA)
          begin
            current_stateA <= reset;
            csm_timerA <= 6'd0;
          end
        else
          begin
            current_stateA <= next_stateA;
            csm_timerA <= csm_next_timerA;
          end
  end

always @( posedge clkB )
  begin : clocked_block_procB
    if (!rstB)
      begin
        current_stateB <= reset;
        csm_timerB <= 6'd0;
      end
    else
      if (timeoutrstB)
        begin
          current_stateB <= reset;
          csm_timerB <= 6'd0;
        end
      else
        if (abortB)
          begin
            current_stateB <= reset;
            csm_timerB <= 6'd0;
          end
        else
          begin
            current_stateB <= next_stateB;
            csm_timerB <= csm_next_timerB;
          end
  end

always @( posedge clkC )
  begin : clocked_block_procC
    if (!rstC)
      begin
        current_stateC <= reset;
        csm_timerC <= 6'd0;
      end
    else
      if (timeoutrstC)
        begin
          current_stateC <= reset;
          csm_timerC <= 6'd0;
        end
      else
        if (abortC)
          begin
            current_stateC <= reset;
            csm_timerC <= 6'd0;
          end
        else
          begin
            current_stateC <= next_stateC;
            csm_timerC <= csm_next_timerC;
          end
  end

always @( csm_timerA or csm_to_ST_Init_1A or csm_to_ST_Rest_2A or csm_to_ST_Rest_RS_2A or csm_to_ST_Read_RS_3A or csm_to_ST_Read_RS_4A or csm_to_ST_Read_RS_5A or csm_to_ST_Rest_RS_3A or csm_to_ST_Rest_RS_4A or csm_to_ST_Rest_RS_5A or csm_to_ST_Rest_RS_6A or csm_to_ST_IODIRA1A or csm_to_ST_Read_RS_8A or csm_to_CS_lowA or csm_to_Read_MisoA )
  begin : csm_wait_block_procA
    csm_timeoutA =  (csm_timerA==6'd0);
    if (csm_to_ST_Init_1A==1'b1)
      begin
        csm_next_timerA =  6'd14;
      end
    else
      if (csm_to_ST_Rest_2A==1'b1)
        begin
          csm_next_timerA =  6'd1;
        end
      else
        if (csm_to_ST_Rest_RS_2A==1'b1)
          begin
            csm_next_timerA =  6'd2;
          end
        else
          if (csm_to_ST_Read_RS_3A==1'b1)
            begin
              csm_next_timerA =  6'd2;
            end
          else
            if (csm_to_ST_Read_RS_4A==1'b1)
              begin
                csm_next_timerA =  6'd2;
              end
            else
              if (csm_to_ST_Read_RS_5A==1'b1)
                begin
                  csm_next_timerA =  6'd11;
                end
              else
                if (csm_to_ST_Rest_RS_3A==1'b1)
                  begin
                    csm_next_timerA =  6'd2;
                  end
                else
                  if (csm_to_ST_Rest_RS_4A==1'b1)
                    begin
                      csm_next_timerA =  6'd2;
                    end
                  else
                    if (csm_to_ST_Rest_RS_5A==1'b1)
                      begin
                        csm_next_timerA =  6'd2;
                      end
                    else
                      if (csm_to_ST_Rest_RS_6A==1'b1)
                        begin
                          csm_next_timerA =  6'd2;
                        end
                      else
                        if (csm_to_ST_IODIRA1A==1'b1)
                          begin
                            csm_next_timerA =  6'd1;
                          end
                        else
                          if (csm_to_ST_Read_RS_8A==1'b1)
                            begin
                              csm_next_timerA =  6'd2;
                            end
                          else
                            if (csm_to_CS_lowA==1'b1)
                              begin
                                csm_next_timerA =  6'd9;
                              end
                            else
                              if (csm_to_Read_MisoA==1'b1)
                                begin
                                  csm_next_timerA =  6'd39;
                                end
                              else
                                begin
                                  csm_next_timerA =  (csm_timeoutA) ? 6'd0 : (csm_timerA-6'd1);
                                end
  end

always @( csm_timerB or csm_to_ST_Init_1B or csm_to_ST_Rest_2B or csm_to_ST_Rest_RS_2B or csm_to_ST_Read_RS_3B or csm_to_ST_Read_RS_4B or csm_to_ST_Read_RS_5B or csm_to_ST_Rest_RS_3B or csm_to_ST_Rest_RS_4B or csm_to_ST_Rest_RS_5B or csm_to_ST_Rest_RS_6B or csm_to_ST_IODIRA1B or csm_to_ST_Read_RS_8B or csm_to_CS_lowB or csm_to_Read_MisoB )
  begin : csm_wait_block_procB
    csm_timeoutB =  (csm_timerB==6'd0);
    if (csm_to_ST_Init_1B==1'b1)
      begin
        csm_next_timerB =  6'd14;
      end
    else
      if (csm_to_ST_Rest_2B==1'b1)
        begin
          csm_next_timerB =  6'd1;
        end
      else
        if (csm_to_ST_Rest_RS_2B==1'b1)
          begin
            csm_next_timerB =  6'd2;
          end
        else
          if (csm_to_ST_Read_RS_3B==1'b1)
            begin
              csm_next_timerB =  6'd2;
            end
          else
            if (csm_to_ST_Read_RS_4B==1'b1)
              begin
                csm_next_timerB =  6'd2;
              end
            else
              if (csm_to_ST_Read_RS_5B==1'b1)
                begin
                  csm_next_timerB =  6'd11;
                end
              else
                if (csm_to_ST_Rest_RS_3B==1'b1)
                  begin
                    csm_next_timerB =  6'd2;
                  end
                else
                  if (csm_to_ST_Rest_RS_4B==1'b1)
                    begin
                      csm_next_timerB =  6'd2;
                    end
                  else
                    if (csm_to_ST_Rest_RS_5B==1'b1)
                      begin
                        csm_next_timerB =  6'd2;
                      end
                    else
                      if (csm_to_ST_Rest_RS_6B==1'b1)
                        begin
                          csm_next_timerB =  6'd2;
                        end
                      else
                        if (csm_to_ST_IODIRA1B==1'b1)
                          begin
                            csm_next_timerB =  6'd1;
                          end
                        else
                          if (csm_to_ST_Read_RS_8B==1'b1)
                            begin
                              csm_next_timerB =  6'd2;
                            end
                          else
                            if (csm_to_CS_lowB==1'b1)
                              begin
                                csm_next_timerB =  6'd9;
                              end
                            else
                              if (csm_to_Read_MisoB==1'b1)
                                begin
                                  csm_next_timerB =  6'd39;
                                end
                              else
                                begin
                                  csm_next_timerB =  (csm_timeoutB) ? 6'd0 : (csm_timerB-6'd1);
                                end
  end

always @( csm_timerC or csm_to_ST_Init_1C or csm_to_ST_Rest_2C or csm_to_ST_Rest_RS_2C or csm_to_ST_Read_RS_3C or csm_to_ST_Read_RS_4C or csm_to_ST_Read_RS_5C or csm_to_ST_Rest_RS_3C or csm_to_ST_Rest_RS_4C or csm_to_ST_Rest_RS_5C or csm_to_ST_Rest_RS_6C or csm_to_ST_IODIRA1C or csm_to_ST_Read_RS_8C or csm_to_CS_lowC or csm_to_Read_MisoC )
  begin : csm_wait_block_procC
    csm_timeoutC =  (csm_timerC==6'd0);
    if (csm_to_ST_Init_1C==1'b1)
      begin
        csm_next_timerC =  6'd14;
      end
    else
      if (csm_to_ST_Rest_2C==1'b1)
        begin
          csm_next_timerC =  6'd1;
        end
      else
        if (csm_to_ST_Rest_RS_2C==1'b1)
          begin
            csm_next_timerC =  6'd2;
          end
        else
          if (csm_to_ST_Read_RS_3C==1'b1)
            begin
              csm_next_timerC =  6'd2;
            end
          else
            if (csm_to_ST_Read_RS_4C==1'b1)
              begin
                csm_next_timerC =  6'd2;
              end
            else
              if (csm_to_ST_Read_RS_5C==1'b1)
                begin
                  csm_next_timerC =  6'd11;
                end
              else
                if (csm_to_ST_Rest_RS_3C==1'b1)
                  begin
                    csm_next_timerC =  6'd2;
                  end
                else
                  if (csm_to_ST_Rest_RS_4C==1'b1)
                    begin
                      csm_next_timerC =  6'd2;
                    end
                  else
                    if (csm_to_ST_Rest_RS_5C==1'b1)
                      begin
                        csm_next_timerC =  6'd2;
                      end
                    else
                      if (csm_to_ST_Rest_RS_6C==1'b1)
                        begin
                          csm_next_timerC =  6'd2;
                        end
                      else
                        if (csm_to_ST_IODIRA1C==1'b1)
                          begin
                            csm_next_timerC =  6'd1;
                          end
                        else
                          if (csm_to_ST_Read_RS_8C==1'b1)
                            begin
                              csm_next_timerC =  6'd2;
                            end
                          else
                            if (csm_to_CS_lowC==1'b1)
                              begin
                                csm_next_timerC =  6'd9;
                              end
                            else
                              if (csm_to_Read_MisoC==1'b1)
                                begin
                                  csm_next_timerC =  6'd39;
                                end
                              else
                                begin
                                  csm_next_timerC =  (csm_timeoutC) ? 6'd0 : (csm_timerC-6'd1);
                                end
  end

always @( current_stateA )
  statedebA =  current_stateA;

always @( current_stateB )
  statedebB =  current_stateB;

always @( current_stateC )
  statedebC =  current_stateC;
endmodule

