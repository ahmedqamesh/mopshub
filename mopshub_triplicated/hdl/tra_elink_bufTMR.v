/****************************************************************************************************
 *                          ! THIS FILE WAS AUTO-GENERATED BY TMRG TOOL !                           *
 *                                   ! DO NOT EDIT IT MANUALLY !                                    *
 *                                                                                                  *
 * file    : ./output/tra_elink_bufTMR.v                                                            *
 *                                                                                                  *
 * user    : lucas                                                                                  *
 * host    : DESKTOP-BFDSFP2                                                                        *
 * date    : 05/12/2022 13:28:37                                                                    *
 *                                                                                                  *
 * workdir : /mnt/c/Users/Lucas/Documents/GitHub/mopshub_triplicated/triplicated/mopshub_top_board_16/hdl *
 * cmd     : /mnt/c/Users/Lucas/Documents/GitHub/mopshub_triplicated/tmrg-master/bin/tmrg -vv -c    *
 *           tmrg.cfg                                                                               *
 * tmrg rev: b25f042058e4e97751df2a0933c24aeadd5a78a5                                               *
 *                                                                                                  *
 * src file: tra_elink_buf.v                                                                        *
 *           Git SHA           : b25f042058e4e97751df2a0933c24aeadd5a78a5 (?? tra_elink_buf.v)      *
 *           Modification time : 2022-12-04 14:47:05                                                *
 *           File Size         : 3187                                                               *
 *           MD5 hash          : 53399905ab556708b55fbf5cc0301f88                                   *
 *                                                                                                  *
 ****************************************************************************************************/

`resetall 
`timescale  1ns/10ps
module buffer_tra_elinkTMR(
  input wire  clk ,
  input wire [7:0] data_tra_8bitin ,
  input wire  buffer_en ,
  input wire  rst ,
  input wire [4:0] addr ,
  output wire [75:0] data_tra_out 
);
wire rstC;
wire rstB;
wire rstA;
wire [7:0] data_tra_8bitinC;
wire [7:0] data_tra_8bitinB;
wire [7:0] data_tra_8bitinA;
wire clkC;
wire clkB;
wire clkA;
wire buffer_enC;
wire buffer_enB;
wire buffer_enA;
wire [4:0] addrC;
wire [4:0] addrB;
wire [4:0] addrA;
wor b9TmrError;
wire [7:0] b9;
wor b8TmrError;
wire [7:0] b8;
wor b7TmrError;
wire [7:0] b7;
wor b6TmrError;
wire [7:0] b6;
wor b5TmrError;
wire [7:0] b5;
wor b4TmrError;
wire [7:0] b4;
wor b3TmrError;
wire [7:0] b3;
wor b2TmrError;
wire [7:0] b2;
wor b1TmrError;
wire [7:0] b1;
wor b0TmrError;
wire [7:0] b0;
reg  [7:0] b0A ;
reg  [7:0] b0B ;
reg  [7:0] b0C ;
reg  [7:0] b1A ;
reg  [7:0] b1B ;
reg  [7:0] b1C ;
reg  [7:0] b2A ;
reg  [7:0] b2B ;
reg  [7:0] b2C ;
reg  [7:0] b3A ;
reg  [7:0] b3B ;
reg  [7:0] b3C ;
reg  [7:0] b4A ;
reg  [7:0] b4B ;
reg  [7:0] b4C ;
reg  [7:0] b5A ;
reg  [7:0] b5B ;
reg  [7:0] b5C ;
reg  [7:0] b6A ;
reg  [7:0] b6B ;
reg  [7:0] b6C ;
reg  [7:0] b7A ;
reg  [7:0] b7B ;
reg  [7:0] b7C ;
reg  [7:0] b8A ;
reg  [7:0] b8B ;
reg  [7:0] b8C ;
reg  [7:0] b9A ;
reg  [7:0] b9B ;
reg  [7:0] b9C ;
initial
  b0A =  8'h00;
initial
  b0B =  8'h00;
initial
  b0C =  8'h00;
initial
  b1A =  8'h00;
initial
  b1B =  8'h00;
initial
  b1C =  8'h00;
initial
  b2A =  8'h00;
initial
  b2B =  8'h00;
initial
  b2C =  8'h00;
initial
  b3A =  8'h00;
initial
  b3B =  8'h00;
initial
  b3C =  8'h00;
initial
  b4A =  8'h00;
initial
  b4B =  8'h00;
initial
  b4C =  8'h00;
initial
  b5A =  8'h00;
initial
  b5B =  8'h00;
initial
  b5C =  8'h00;
initial
  b6A =  8'h00;
initial
  b6B =  8'h00;
initial
  b6C =  8'h00;
initial
  b7A =  8'h00;
initial
  b7B =  8'h00;
initial
  b7C =  8'h00;
initial
  b8A =  8'h00;
initial
  b8B =  8'h00;
initial
  b8C =  8'h00;
initial
  b9A =  8'h00;
initial
  b9B =  8'h00;
initial
  b9C =  8'h00;
wire [7:0] b0_v =  b0;
wire [7:0] b1_v =  b1;
wire [7:0] b2_v =  b2;
wire [7:0] b3_v =  b3;
wire [7:0] b4_v =  b4;
wire [7:0] b5_v =  b5;
wire [7:0] b6_v =  b6;
wire [7:0] b7_v =  b7;
wire [7:0] b8_v =  b8;
wire [7:0] b9_v =  b9;

always @( posedge clkA )
  begin
    if (!rstA)
      begin
        b0A <= 8'h00;
        b1A <= 8'h00;
        b2A <= 8'h00;
        b3A <= 8'h00;
        b4A <= 8'h00;
        b5A <= 8'h00;
        b6A <= 8'h00;
        b7A <= 8'h00;
        b8A <= 8'h00;
        b9A <= 8'h00;
      end
    if (buffer_enA)
      begin
        case (addrA)
          5'b00010 : b0A <= data_tra_8bitinA[7:0] ;
          5'b00011 : b1A <= data_tra_8bitinA[7:0] ;
          5'b00100 : b2A <= data_tra_8bitinA[7:0] ;
          5'b00101 : b3A <= data_tra_8bitinA[7:0] ;
          5'b00110 : b4A <= data_tra_8bitinA[7:0] ;
          5'b00111 : b5A <= data_tra_8bitinA[7:0] ;
          5'b01000 : b6A <= data_tra_8bitinA[7:0] ;
          5'b01001 : b7A <= data_tra_8bitinA[7:0] ;
          5'b01010 : b8A <= data_tra_8bitinA[7:0] ;
          5'b01011 : b9A <= data_tra_8bitinA[7:0] ;
          default begin
  b0A <= 8'h00;
  b1A <= 8'h00;
  b2A <= 8'h00;
  b3A <= 8'h00;
  b4A <= 8'h00;
  b5A <= 8'h00;
  b6A <= 8'h00;
  b7A <= 8'h00;
  b8A <= 8'h00;
  b9A <= 8'h00;
end 
        endcase
      end
    else
      begin
        b0A <= b0A;
        b1A <= b1A;
        b2A <= b2A;
        b3A <= b3A;
        b4A <= b4A;
        b5A <= b5A;
        b6A <= b6A;
        b7A <= b7A;
        b8A <= b8A;
        b9A <= b9A;
      end
  end

always @( posedge clkB )
  begin
    if (!rstB)
      begin
        b0B <= 8'h00;
        b1B <= 8'h00;
        b2B <= 8'h00;
        b3B <= 8'h00;
        b4B <= 8'h00;
        b5B <= 8'h00;
        b6B <= 8'h00;
        b7B <= 8'h00;
        b8B <= 8'h00;
        b9B <= 8'h00;
      end
    if (buffer_enB)
      begin
        case (addrB)
          5'b00010 : b0B <= data_tra_8bitinB[7:0] ;
          5'b00011 : b1B <= data_tra_8bitinB[7:0] ;
          5'b00100 : b2B <= data_tra_8bitinB[7:0] ;
          5'b00101 : b3B <= data_tra_8bitinB[7:0] ;
          5'b00110 : b4B <= data_tra_8bitinB[7:0] ;
          5'b00111 : b5B <= data_tra_8bitinB[7:0] ;
          5'b01000 : b6B <= data_tra_8bitinB[7:0] ;
          5'b01001 : b7B <= data_tra_8bitinB[7:0] ;
          5'b01010 : b8B <= data_tra_8bitinB[7:0] ;
          5'b01011 : b9B <= data_tra_8bitinB[7:0] ;
          default begin
  b0B <= 8'h00;
  b1B <= 8'h00;
  b2B <= 8'h00;
  b3B <= 8'h00;
  b4B <= 8'h00;
  b5B <= 8'h00;
  b6B <= 8'h00;
  b7B <= 8'h00;
  b8B <= 8'h00;
  b9B <= 8'h00;
end 
        endcase
      end
    else
      begin
        b0B <= b0B;
        b1B <= b1B;
        b2B <= b2B;
        b3B <= b3B;
        b4B <= b4B;
        b5B <= b5B;
        b6B <= b6B;
        b7B <= b7B;
        b8B <= b8B;
        b9B <= b9B;
      end
  end

always @( posedge clkC )
  begin
    if (!rstC)
      begin
        b0C <= 8'h00;
        b1C <= 8'h00;
        b2C <= 8'h00;
        b3C <= 8'h00;
        b4C <= 8'h00;
        b5C <= 8'h00;
        b6C <= 8'h00;
        b7C <= 8'h00;
        b8C <= 8'h00;
        b9C <= 8'h00;
      end
    if (buffer_enC)
      begin
        case (addrC)
          5'b00010 : b0C <= data_tra_8bitinC[7:0] ;
          5'b00011 : b1C <= data_tra_8bitinC[7:0] ;
          5'b00100 : b2C <= data_tra_8bitinC[7:0] ;
          5'b00101 : b3C <= data_tra_8bitinC[7:0] ;
          5'b00110 : b4C <= data_tra_8bitinC[7:0] ;
          5'b00111 : b5C <= data_tra_8bitinC[7:0] ;
          5'b01000 : b6C <= data_tra_8bitinC[7:0] ;
          5'b01001 : b7C <= data_tra_8bitinC[7:0] ;
          5'b01010 : b8C <= data_tra_8bitinC[7:0] ;
          5'b01011 : b9C <= data_tra_8bitinC[7:0] ;
          default begin
  b0C <= 8'h00;
  b1C <= 8'h00;
  b2C <= 8'h00;
  b3C <= 8'h00;
  b4C <= 8'h00;
  b5C <= 8'h00;
  b6C <= 8'h00;
  b7C <= 8'h00;
  b8C <= 8'h00;
  b9C <= 8'h00;
end 
        endcase
      end
    else
      begin
        b0C <= b0C;
        b1C <= b1C;
        b2C <= b2C;
        b3C <= b3C;
        b4C <= b4C;
        b5C <= b5C;
        b6C <= b6C;
        b7C <= b7C;
        b8C <= b8C;
        b9C <= b9C;
      end
  end
assign data_tra_out =  {b0,b1,b2,b3,b4,b5,b6,b7,b8,b9[7:4] };

majorityVoter #(.WIDTH(8)) b0Voter (
    .inA(b0A),
    .inB(b0B),
    .inC(b0C),
    .out(b0),
    .tmrErr(b0TmrError)
    );

majorityVoter #(.WIDTH(8)) b1Voter (
    .inA(b1A),
    .inB(b1B),
    .inC(b1C),
    .out(b1),
    .tmrErr(b1TmrError)
    );

majorityVoter #(.WIDTH(8)) b2Voter (
    .inA(b2A),
    .inB(b2B),
    .inC(b2C),
    .out(b2),
    .tmrErr(b2TmrError)
    );

majorityVoter #(.WIDTH(8)) b3Voter (
    .inA(b3A),
    .inB(b3B),
    .inC(b3C),
    .out(b3),
    .tmrErr(b3TmrError)
    );

majorityVoter #(.WIDTH(8)) b4Voter (
    .inA(b4A),
    .inB(b4B),
    .inC(b4C),
    .out(b4),
    .tmrErr(b4TmrError)
    );

majorityVoter #(.WIDTH(8)) b5Voter (
    .inA(b5A),
    .inB(b5B),
    .inC(b5C),
    .out(b5),
    .tmrErr(b5TmrError)
    );

majorityVoter #(.WIDTH(8)) b6Voter (
    .inA(b6A),
    .inB(b6B),
    .inC(b6C),
    .out(b6),
    .tmrErr(b6TmrError)
    );

majorityVoter #(.WIDTH(8)) b7Voter (
    .inA(b7A),
    .inB(b7B),
    .inC(b7C),
    .out(b7),
    .tmrErr(b7TmrError)
    );

majorityVoter #(.WIDTH(8)) b8Voter (
    .inA(b8A),
    .inB(b8B),
    .inC(b8C),
    .out(b8),
    .tmrErr(b8TmrError)
    );

majorityVoter #(.WIDTH(8)) b9Voter (
    .inA(b9A),
    .inB(b9B),
    .inC(b9C),
    .out(b9),
    .tmrErr(b9TmrError)
    );

fanout #(.WIDTH(5)) addrFanout (
    .in(addr),
    .outA(addrA),
    .outB(addrB),
    .outC(addrC)
    );

fanout buffer_enFanout (
    .in(buffer_en),
    .outA(buffer_enA),
    .outB(buffer_enB),
    .outC(buffer_enC)
    );

fanout clkFanout (
    .in(clk),
    .outA(clkA),
    .outB(clkB),
    .outC(clkC)
    );

fanout #(.WIDTH(8)) data_tra_8bitinFanout (
    .in(data_tra_8bitin),
    .outA(data_tra_8bitinA),
    .outB(data_tra_8bitinB),
    .outC(data_tra_8bitinC)
    );

fanout rstFanout (
    .in(rst),
    .outA(rstA),
    .outB(rstB),
    .outC(rstC)
    );
endmodule

