/****************************************************************************************************
 *                          ! THIS FILE WAS AUTO-GENERATED BY TMRG TOOL !                           *
 *                                   ! DO NOT EDIT IT MANUALLY !                                    *
 *                                                                                                  *
 * file    : ./output/tra_elink_bufTMR.v                                                            *
 *                                                                                                  *
 * user    : lucas                                                                                  *
 * host    : DESKTOP-BFDSFP2                                                                        *
 * date    : 16/08/2022 12:58:39                                                                    *
 *                                                                                                  *
 * workdir : /mnt/c/Users/Lucas/Desktop/mopshub_triplication/mopshub_top_board_canakari_ftrim/hdl   *
 * cmd     : /mnt/c/Users/Lucas/Desktop/mopshub_triplication/tmrg-master/bin/tmrg -c tmrg.cfg -vvv  *
 * tmrg rev:                                                                                        *
 *                                                                                                  *
 * src file: tra_elink_buf.v                                                                        *
 *           Git SHA           : File not in git repository!                                        *
 *           Modification time : 2022-08-12 09:55:50                                                *
 *           File Size         : 3282                                                               *
 *           MD5 hash          : 7be2863c34ada41617ff1d8e2911f0f0                                   *
 *                                                                                                  *
 ****************************************************************************************************/

module buffer_tra_elinkTMR(
  input wire  clk ,
  input wire [7:0] data_tra_8bitin ,
  input wire  buffer_en ,
  input wire  rst ,
  input wire [4:0] addr ,
  output wire [75:0] data_tra_out 
);
wor b8TmrError;
wire [7:0] b8;
wor b7TmrError;
wire [7:0] b7;
wor b6TmrError;
wire [7:0] b6;
wor b5TmrError;
wire [7:0] b5;
wor b4TmrError;
wire [7:0] b4;
wor b3TmrError;
wire [7:0] b3;
wor b2TmrError;
wire [7:0] b2;
wor b1TmrError;
wire [7:0] b1;
wor b0TmrError;
wire [7:0] b0;
reg  [7:0] b0A ;
reg  [7:0] b0B ;
reg  [7:0] b0C ;
reg  [7:0] b1A ;
reg  [7:0] b1B ;
reg  [7:0] b1C ;
reg  [7:0] b2A ;
reg  [7:0] b2B ;
reg  [7:0] b2C ;
reg  [7:0] b3A ;
reg  [7:0] b3B ;
reg  [7:0] b3C ;
reg  [7:0] b4A ;
reg  [7:0] b4B ;
reg  [7:0] b4C ;
reg  [7:0] b5A ;
reg  [7:0] b5B ;
reg  [7:0] b5C ;
reg  [7:0] b6A ;
reg  [7:0] b6B ;
reg  [7:0] b6C ;
reg  [7:0] b7A ;
reg  [7:0] b7B ;
reg  [7:0] b7C ;
reg  [7:0] b8A ;
reg  [7:0] b8B ;
reg  [7:0] b8C ;
reg  [7:0] b9 ;
initial
  begin
    b0 =  8'h00;
    b1 =  8'h00;
    b2 =  8'h00;
    b3 =  8'h00;
    b4 =  8'h00;
    b5 =  8'h00;
    b6 =  8'h00;
    b7 =  8'h00;
    b8 =  8'h00;
    b9 =  8'h00;
  end
wire [7:0] b0_v =  b0;
wire [7:0] b1_v =  b1;
wire [7:0] b2_v =  b2;
wire [7:0] b3_v =  b3;
wire [7:0] b4_v =  b4;
wire [7:0] b5_v =  b5;
wire [7:0] b6_v =  b6;
wire [7:0] b7_v =  b7;
wire [7:0] b8_v =  b8;
wire [7:0] b9_v =  b9;

always @( posedge clk )
  begin
    if (!rst)
      begin
        b0 <= 8'h00;
        b1 <= 8'h00;
        b2 <= 8'h00;
        b3 <= 8'h00;
        b4 <= 8'h00;
        b5 <= 8'h00;
        b6 <= 8'h00;
        b7 <= 8'h00;
        b8 <= 8'h00;
        b9 <= 8'h00;
      end
    if (buffer_en)
      begin
        case (addr)
          5'b00010 : b0 <= data_tra_8bitin[7:0] ;
          5'b00011 : b1 <= data_tra_8bitin[7:0] ;
          5'b00100 : b2 <= data_tra_8bitin[7:0] ;
          5'b00101 : b3 <= data_tra_8bitin[7:0] ;
          5'b00110 : b4 <= data_tra_8bitin[7:0] ;
          5'b00111 : b5 <= data_tra_8bitin[7:0] ;
          5'b01000 : b6 <= data_tra_8bitin[7:0] ;
          5'b01001 : b7 <= data_tra_8bitin[7:0] ;
          5'b01010 : b8 <= data_tra_8bitin[7:0] ;
          5'b01011 : b9 <= data_tra_8bitin[7:0] ;
          default begin
  b0 <= 8'h00;
  b1 <= 8'h00;
  b2 <= 8'h00;
  b3 <= 8'h00;
  b4 <= 8'h00;
  b5 <= 8'h00;
  b6 <= 8'h00;
  b7 <= 8'h00;
  b8 <= 8'h00;
  b9 <= 8'h00;
end 
        endcase
      end
    else
      begin
        b0 <= b0_v;
        b1 <= b1_v;
        b2 <= b2_v;
        b3 <= b3_v;
        b4 <= b4_v;
        b5 <= b5_v;
        b6 <= b6_v;
        b7 <= b7_v;
        b8 <= b8_v;
        b9 <= b9_v;
      end
  end
assign data_tra_out =  {b0,b1,b2,b3,b4,b5,b6,b7,b8,b9[7:4] };

majorityVoter #(.WIDTH(8)) b0Voter (
    .inA(b0A),
    .inB(b0B),
    .inC(b0C),
    .out(b0),
    .tmrErr(b0TmrError)
    );

majorityVoter #(.WIDTH(8)) b1Voter (
    .inA(b1A),
    .inB(b1B),
    .inC(b1C),
    .out(b1),
    .tmrErr(b1TmrError)
    );

majorityVoter #(.WIDTH(8)) b2Voter (
    .inA(b2A),
    .inB(b2B),
    .inC(b2C),
    .out(b2),
    .tmrErr(b2TmrError)
    );

majorityVoter #(.WIDTH(8)) b3Voter (
    .inA(b3A),
    .inB(b3B),
    .inC(b3C),
    .out(b3),
    .tmrErr(b3TmrError)
    );

majorityVoter #(.WIDTH(8)) b4Voter (
    .inA(b4A),
    .inB(b4B),
    .inC(b4C),
    .out(b4),
    .tmrErr(b4TmrError)
    );

majorityVoter #(.WIDTH(8)) b5Voter (
    .inA(b5A),
    .inB(b5B),
    .inC(b5C),
    .out(b5),
    .tmrErr(b5TmrError)
    );

majorityVoter #(.WIDTH(8)) b6Voter (
    .inA(b6A),
    .inB(b6B),
    .inC(b6C),
    .out(b6),
    .tmrErr(b6TmrError)
    );

majorityVoter #(.WIDTH(8)) b7Voter (
    .inA(b7A),
    .inB(b7B),
    .inC(b7C),
    .out(b7),
    .tmrErr(b7TmrError)
    );

majorityVoter #(.WIDTH(8)) b8Voter (
    .inA(b8A),
    .inB(b8B),
    .inC(b8C),
    .out(b8),
    .tmrErr(b8TmrError)
    );
endmodule

