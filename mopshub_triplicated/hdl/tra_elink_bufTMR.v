/****************************************************************************************************
 *                          ! THIS FILE WAS AUTO-GENERATED BY TMRG TOOL !                           *
 *                                   ! DO NOT EDIT IT MANUALLY !                                    *
 *                                                                                                  *
 * file    : ./output/tra_elink_bufTMR.v                                                            *
 *                                                                                                  *
 * user    : lucas                                                                                  *
 * host    : DESKTOP-BFDSFP2                                                                        *
 * date    : 03/04/2022 20:08:57                                                                    *
 *                                                                                                  *
 * workdir : /mnt/c/Users/Lucas/Desktop/mopshub_triplication/triplicated/mopshub_top_canakari_ftrim/hdl *
 * cmd     : /mnt/c/Users/Lucas/Desktop/mopshub_triplication/tmrg-master/bin/tmrg -vv -c tmrg.cfg   *
 * tmrg rev:                                                                                        *
 *                                                                                                  *
 * src file: tra_elink_buf.v                                                                        *
 *           Git SHA           : File not in git repository!                                        *
 *           Modification time : 2022-03-28 18:32:33                                                *
 *           File Size         : 2702                                                               *
 *           MD5 hash          : e5cb0b05e92a65d96bf4c2e7e1d77551                                   *
 *                                                                                                  *
 ****************************************************************************************************/

module buffer_tra_elinkTMR(
  input wire  clkA ,
  input wire  clkB ,
  input wire  clkC ,
  input wire [7:0] data_tra_8bitinA ,
  input wire [7:0] data_tra_8bitinB ,
  input wire [7:0] data_tra_8bitinC ,
  input wire  buffer_enA ,
  input wire  buffer_enB ,
  input wire  buffer_enC ,
  input wire  rstA ,
  input wire  rstB ,
  input wire  rstC ,
  input wire [4:0] addrA ,
  input wire [4:0] addrB ,
  input wire [4:0] addrC ,
  output wire [75:0] data_tra_outA ,
  output wire [75:0] data_tra_outB ,
  output wire [75:0] data_tra_outC 
);
reg  [7:0] b0A ;
reg  [7:0] b0B ;
reg  [7:0] b0C ;
reg  [7:0] b1A ;
reg  [7:0] b1B ;
reg  [7:0] b1C ;
reg  [7:0] b2A ;
reg  [7:0] b2B ;
reg  [7:0] b2C ;
reg  [7:0] b3A ;
reg  [7:0] b3B ;
reg  [7:0] b3C ;
reg  [7:0] b4A ;
reg  [7:0] b4B ;
reg  [7:0] b4C ;
reg  [7:0] b5A ;
reg  [7:0] b5B ;
reg  [7:0] b5C ;
reg  [7:0] b6A ;
reg  [7:0] b6B ;
reg  [7:0] b6C ;
reg  [7:0] b7A ;
reg  [7:0] b7B ;
reg  [7:0] b7C ;
reg  [7:0] b8A ;
reg  [7:0] b8B ;
reg  [7:0] b8C ;
reg  [7:0] b9A ;
reg  [7:0] b9B ;
reg  [7:0] b9C ;
initial
  begin
    b0A =  8'h00;
    b1A =  8'h00;
    b2A =  8'h00;
    b3A =  8'h00;
    b4A =  8'h00;
    b5A =  8'h00;
    b6A =  8'h00;
    b7A =  8'h00;
    b8A =  8'h00;
    b9A =  8'h00;
  end
initial
  begin
    b0B =  8'h00;
    b1B =  8'h00;
    b2B =  8'h00;
    b3B =  8'h00;
    b4B =  8'h00;
    b5B =  8'h00;
    b6B =  8'h00;
    b7B =  8'h00;
    b8B =  8'h00;
    b9B =  8'h00;
  end
initial
  begin
    b0C =  8'h00;
    b1C =  8'h00;
    b2C =  8'h00;
    b3C =  8'h00;
    b4C =  8'h00;
    b5C =  8'h00;
    b6C =  8'h00;
    b7C =  8'h00;
    b8C =  8'h00;
    b9C =  8'h00;
  end

always @( posedge clkA )
  begin
    if (!rstA)
      begin
        b0A <= 8'h00;
        b1A <= 8'h00;
        b2A <= 8'h00;
        b3A <= 8'h00;
        b4A <= 8'h00;
        b5A <= 8'h00;
        b6A <= 8'h00;
        b7A <= 8'h00;
        b8A <= 8'h00;
        b9A <= 8'h00;
      end
    if (buffer_enA)
      begin
        case (addrA)
          5'b00010 : b0A <= data_tra_8bitinA[7:0] ;
          5'b00011 : b1A <= data_tra_8bitinA[7:0] ;
          5'b00100 : b2A <= data_tra_8bitinA[7:0] ;
          5'b00101 : b3A <= data_tra_8bitinA[7:0] ;
          5'b00110 : b4A <= data_tra_8bitinA[7:0] ;
          5'b00111 : b5A <= data_tra_8bitinA[7:0] ;
          5'b01000 : b6A <= data_tra_8bitinA[7:0] ;
          5'b01001 : b7A <= data_tra_8bitinA[7:0] ;
          5'b01010 : b8A <= data_tra_8bitinA[7:0] ;
          5'b01011 : b9A <= data_tra_8bitinA[7:0] ;
          default begin
  b0A <= 8'h00;
  b1A <= 8'h00;
  b2A <= 8'h00;
  b3A <= 8'h00;
  b4A <= 8'h00;
  b5A <= 8'h00;
  b6A <= 8'h00;
  b7A <= 8'h00;
  b8A <= 8'h00;
  b9A <= 8'h00;
end 
        endcase
      end
    else
      begin
        b0A <= b0A;
        b1A <= b1A;
        b2A <= b2A;
        b3A <= b3A;
        b4A <= b4A;
        b5A <= b5A;
        b6A <= b6A;
        b7A <= b7A;
        b8A <= b8A;
        b9A <= b9A;
      end
  end

always @( posedge clkB )
  begin
    if (!rstB)
      begin
        b0B <= 8'h00;
        b1B <= 8'h00;
        b2B <= 8'h00;
        b3B <= 8'h00;
        b4B <= 8'h00;
        b5B <= 8'h00;
        b6B <= 8'h00;
        b7B <= 8'h00;
        b8B <= 8'h00;
        b9B <= 8'h00;
      end
    if (buffer_enB)
      begin
        case (addrB)
          5'b00010 : b0B <= data_tra_8bitinB[7:0] ;
          5'b00011 : b1B <= data_tra_8bitinB[7:0] ;
          5'b00100 : b2B <= data_tra_8bitinB[7:0] ;
          5'b00101 : b3B <= data_tra_8bitinB[7:0] ;
          5'b00110 : b4B <= data_tra_8bitinB[7:0] ;
          5'b00111 : b5B <= data_tra_8bitinB[7:0] ;
          5'b01000 : b6B <= data_tra_8bitinB[7:0] ;
          5'b01001 : b7B <= data_tra_8bitinB[7:0] ;
          5'b01010 : b8B <= data_tra_8bitinB[7:0] ;
          5'b01011 : b9B <= data_tra_8bitinB[7:0] ;
          default begin
  b0B <= 8'h00;
  b1B <= 8'h00;
  b2B <= 8'h00;
  b3B <= 8'h00;
  b4B <= 8'h00;
  b5B <= 8'h00;
  b6B <= 8'h00;
  b7B <= 8'h00;
  b8B <= 8'h00;
  b9B <= 8'h00;
end 
        endcase
      end
    else
      begin
        b0B <= b0B;
        b1B <= b1B;
        b2B <= b2B;
        b3B <= b3B;
        b4B <= b4B;
        b5B <= b5B;
        b6B <= b6B;
        b7B <= b7B;
        b8B <= b8B;
        b9B <= b9B;
      end
  end

always @( posedge clkC )
  begin
    if (!rstC)
      begin
        b0C <= 8'h00;
        b1C <= 8'h00;
        b2C <= 8'h00;
        b3C <= 8'h00;
        b4C <= 8'h00;
        b5C <= 8'h00;
        b6C <= 8'h00;
        b7C <= 8'h00;
        b8C <= 8'h00;
        b9C <= 8'h00;
      end
    if (buffer_enC)
      begin
        case (addrC)
          5'b00010 : b0C <= data_tra_8bitinC[7:0] ;
          5'b00011 : b1C <= data_tra_8bitinC[7:0] ;
          5'b00100 : b2C <= data_tra_8bitinC[7:0] ;
          5'b00101 : b3C <= data_tra_8bitinC[7:0] ;
          5'b00110 : b4C <= data_tra_8bitinC[7:0] ;
          5'b00111 : b5C <= data_tra_8bitinC[7:0] ;
          5'b01000 : b6C <= data_tra_8bitinC[7:0] ;
          5'b01001 : b7C <= data_tra_8bitinC[7:0] ;
          5'b01010 : b8C <= data_tra_8bitinC[7:0] ;
          5'b01011 : b9C <= data_tra_8bitinC[7:0] ;
          default begin
  b0C <= 8'h00;
  b1C <= 8'h00;
  b2C <= 8'h00;
  b3C <= 8'h00;
  b4C <= 8'h00;
  b5C <= 8'h00;
  b6C <= 8'h00;
  b7C <= 8'h00;
  b8C <= 8'h00;
  b9C <= 8'h00;
end 
        endcase
      end
    else
      begin
        b0C <= b0C;
        b1C <= b1C;
        b2C <= b2C;
        b3C <= b3C;
        b4C <= b4C;
        b5C <= b5C;
        b6C <= b6C;
        b7C <= b7C;
        b8C <= b8C;
        b9C <= b9C;
      end
  end
assign data_tra_outA =  {b0A,b1A,b2A,b3A,b4A,b5A,b6A,b7A,b8A,b9A[7:4] };
assign data_tra_outB =  {b0B,b1B,b2B,b3B,b4B,b5B,b6B,b7B,b8B,b9B[7:4] };
assign data_tra_outC =  {b0C,b1C,b2C,b3C,b4C,b5C,b6C,b7C,b8C,b9C[7:4] };
endmodule

