//
// Module mopshub_triplicated.counter2TMR.struct
//
// Created:
//          by - dcs.dcs (localhost)
//          at - 09:18:06 05/10/22
//
// Generated by Mentor Graphics' HDL Designer(TM) 2019.4 (Build 4)
//


module counter2TMR( 
   // Port Declarations
   input   wire           clockA, 
   input   wire           clockB, 
   input   wire           clockC, 
   input   wire           Prescale_ENA, 
   input   wire           Prescale_ENB, 
   input   wire           Prescale_ENC, 
   input   wire           incA, 
   input   wire           incB, 
   input   wire           incC, 
   input   wire           resetA, 
   input   wire           resetB, 
   input   wire           resetC, 
   output  reg            lt3A, 
   output  reg            lt3B, 
   output  reg            lt3C, 
   output  reg            gt3A, 
   output  reg            gt3B, 
   output  reg            gt3C, 
   output  reg            eq3A, 
   output  reg            eq3B, 
   output  reg            eq3C, 
   output  reg            lt11A, 
   output  reg            lt11B, 
   output  reg            lt11C, 
   output  reg            eq11A, 
   output  reg            eq11B, 
   output  reg            eq11C, 
   output  wire    [6:0]  countoA, 
   output  wire    [6:0]  countoB, 
   output  wire    [6:0]  countoC
);


// Internal Declarations


// Local declarations

// Internal signal declarations
wor         inc_rise_merkerTmrErrorC;
wire        inc_rise_merkerVotedC;
wor         countTmrErrorC;
wire  [6:0] countVotedC;
wor         inc_rise_merkerTmrErrorB;
wire        inc_rise_merkerVotedB;
wor         countTmrErrorB;
wire  [6:0] countVotedB;
wor         inc_rise_merkerTmrErrorA;
wire        inc_rise_merkerVotedA;
wor         countTmrErrorA;
wire  [6:0] countVotedA;
reg         inc_rise_merkerA;
reg         inc_rise_merkerB;
reg         inc_rise_merkerC;
reg   [6:0] countA;
reg   [6:0] countB;
reg   [6:0] countC;


// Instances 
majorityVoter #(7) countVoterA( 
   .inA    (countA), 
   .inB    (countB), 
   .inC    (countC), 
   .out    (countVotedA), 
   .tmrErr (countTmrErrorA)
); 

majorityVoter #(7) countVoterB( 
   .inA    (countA), 
   .inB    (countB), 
   .inC    (countC), 
   .out    (countVotedB), 
   .tmrErr (countTmrErrorB)
); 

majorityVoter #(7) countVoterC( 
   .inA    (countA), 
   .inB    (countB), 
   .inC    (countC), 
   .out    (countVotedC), 
   .tmrErr (countTmrErrorC)
); 

majorityVoter inc_rise_merkerVoterA( 
   .inA    (inc_rise_merkerA), 
   .inB    (inc_rise_merkerB), 
   .inC    (inc_rise_merkerC), 
   .out    (inc_rise_merkerVotedA), 
   .tmrErr (inc_rise_merkerTmrErrorA)
); 

majorityVoter inc_rise_merkerVoterB( 
   .inA    (inc_rise_merkerA), 
   .inB    (inc_rise_merkerB), 
   .inC    (inc_rise_merkerC), 
   .out    (inc_rise_merkerVotedB), 
   .tmrErr (inc_rise_merkerTmrErrorB)
); 

majorityVoter inc_rise_merkerVoterC( 
   .inA    (inc_rise_merkerA), 
   .inB    (inc_rise_merkerB), 
   .inC    (inc_rise_merkerC), 
   .out    (inc_rise_merkerVotedC), 
   .tmrErr (inc_rise_merkerTmrErrorC)
); 

// HDL Embedded Text Block 1 eb1
assign countoA =  countVotedA;
assign countoB =  countVotedB;
assign countoC =  countVotedC;
// HDL Embedded Text Block 2 eb2
always @( posedge clockA )
  begin
    countA <= countVotedA;
    inc_rise_merkerA <= inc_rise_merkerVotedA;
    if (Prescale_ENA==1'b1)
      begin
        if (resetA==1'b0)
          begin
            countA <= 7'd0;
            inc_rise_merkerA <= 1'b0;
          end
        else
          if (incA==1'b1)
            begin
              if (inc_rise_merkerVotedA==1'b0)
                begin
                  inc_rise_merkerA <= 1'b1;
                  if (countVotedA==7'd127)
                    countA <= 7'd0;
                  else
                    countA <= countVotedA+1;
                end
            end
          else
            inc_rise_merkerA <= 1'b0;
      end
  end
// HDL Embedded Text Block 3 eb3
always @( posedge clockB )
  begin
    countB <= countVotedB;
    inc_rise_merkerB <= inc_rise_merkerVotedB;
    if (Prescale_ENB==1'b1)
      begin
        if (resetB==1'b0)
          begin
            countB <= 7'd0;
            inc_rise_merkerB <= 1'b0;
          end
        else
          if (incB==1'b1)
            begin
              if (inc_rise_merkerVotedB==1'b0)
                begin
                  inc_rise_merkerB <= 1'b1;
                  if (countVotedB==7'd127)
                    countB <= 7'd0;
                  else
                    countB <= countVotedB+1;
                end
            end
          else
            inc_rise_merkerB <= 1'b0;
      end
  end
// HDL Embedded Text Block 4 eb4
always @( posedge clockC )
  begin
    countC <= countVotedC;
    inc_rise_merkerC <= inc_rise_merkerVotedC;
    if (Prescale_ENC==1'b1)
      begin
        if (resetC==1'b0)
          begin
            countC <= 7'd0;
            inc_rise_merkerC <= 1'b0;
          end
        else
          if (incC==1'b1)
            begin
              if (inc_rise_merkerVotedC==1'b0)
                begin
                  inc_rise_merkerC <= 1'b1;
                  if (countVotedC==7'd127)
                    countC <= 7'd0;
                  else
                    countC <= countVotedC+1;
                end
            end
          else
            inc_rise_merkerC <= 1'b0;
      end
  end
// HDL Embedded Text Block 5 eb5
always @( countVotedA )
  begin
    if (countVotedA<3)
      begin
        lt3A =  1'b1;
        gt3A =  1'b0;
        eq3A =  1'b0;
      end
    else
      if (countVotedA==3)
        begin
          lt3A =  1'b0;
          gt3A =  1'b0;
          eq3A =  1'b1;
        end
      else
        begin
          lt3A =  1'b0;
          gt3A =  1'b1;
          eq3A =  1'b0;
        end
  end
// HDL Embedded Text Block 6 eb6
always @( countVotedB )
  begin
    if (countVotedB<3)
      begin
        lt3B =  1'b1;
        gt3B =  1'b0;
        eq3B =  1'b0;
      end
    else
      if (countVotedB==3)
        begin
          lt3B =  1'b0;
          gt3B =  1'b0;
          eq3B =  1'b1;
        end
      else
        begin
          lt3B =  1'b0;
          gt3B =  1'b1;
          eq3B =  1'b0;
        end
  end
// HDL Embedded Text Block 7 eb7
always @( countVotedC )
  begin
    if (countVotedC<3)
      begin
        lt3C =  1'b1;
        gt3C =  1'b0;
        eq3C =  1'b0;
      end
    else
      if (countVotedC==3)
        begin
          lt3C =  1'b0;
          gt3C =  1'b0;
          eq3C =  1'b1;
        end
      else
        begin
          lt3C =  1'b0;
          gt3C =  1'b1;
          eq3C =  1'b0;
        end
  end
// HDL Embedded Text Block 8 eb8
always @( countVotedA )
  begin
    if (countVotedA<11)
      begin
        lt11A =  1'b1;
        eq11A =  1'b0;
      end
    else
      if (countVotedA==11)
        begin
          lt11A =  1'b0;
          eq11A =  1'b1;
        end
      else
        begin
          lt11A =  1'b0;
          eq11A =  1'b0;
        end
  end
// HDL Embedded Text Block 9 eb9
always @( countVotedB )
  begin
    if (countVotedB<11)
      begin
        lt11B =  1'b1;
        eq11B =  1'b0;
      end
    else
      if (countVotedB==11)
        begin
          lt11B =  1'b0;
          eq11B =  1'b1;
        end
      else
        begin
          lt11B =  1'b0;
          eq11B =  1'b0;
        end
  end
// HDL Embedded Text Block 10 eb10
always @( countVotedC )
  begin
    if (countVotedC<11)
      begin
        lt11C =  1'b1;
        eq11C =  1'b0;
      end
    else
      if (countVotedC==11)
        begin
          lt11C =  1'b0;
          eq11C =  1'b1;
        end
      else
        begin
          lt11C =  1'b0;
          eq11C =  1'b0;
        end
  end

endmodule // counter2TMR

