//
// Verilog Module mopshub_testbench.data_gen_uart_sm
//
// Created:
//          by - dcs.dcs (chipdev2.physik.uni-wuppertal.de)
//          at - 15:17:00 08/08/23
//
// using Mentor Graphics HDL Designer(TM) 2019.4 (Build 4)
//

`resetall
`timescale 1ns/10ps
module data_gen_uart_sm  (
    input wire clk,
    input wire rst,
    input wire [7:0] data_byte,
    output wire out_rx_serial
);

    // States
    typedef enum logic [2:0] {
        IDLE,
        START_BIT,
        DATA_BITS,
        STOP_BIT
    } state_t;

    // Registers
    reg [2:0] state = IDLE;
    reg [3:0] bit_counter;
    reg out_rx_serial;

    // Parameters
    parameter real BAUD_RATE = 115200;
    parameter real BAUD_TICKS = $ceil((1 / BAUD_RATE) * 1e9);

    always @(posedge clk or negedge rst) begin
        if (!rst) begin
            state <= IDLE;
            bit_counter <= 4'd0;
            out_rx_serial <= 1'b1; // Default stop bit value
        end else begin
            case (state)
                IDLE:
                    if (data_byte != 8'h0) begin
                        state <= START_BIT;
                        bit_counter <= 4'd0;
                    end
                START_BIT:
                    out_rx_serial <= 1'b0; // Start bit
                    if (bit_counter == 4'd7) begin
                        state <= DATA_BITS;
                        bit_counter <= 4'd0;
                    end else begin
                        bit_counter <= bit_counter + 1;
                    end
                DATA_BITS:
                    out_rx_serial <= data_byte[bit_counter];
                    if (bit_counter == 4'd7) begin
                        state <= STOP_BIT;
                        bit_counter <= 4'd0;
                    end else begin
                        bit_counter <= bit_counter + 1;
                    end
                STOP_BIT:
                    out_rx_serial <= 1'b1; // Stop bit
                    if (bit_counter == 4'd7) begin
                        state <= IDLE;
                        bit_counter <= 4'd0;
                    end else begin
                        bit_counter <= bit_counter + 1;
                    end
                default:
                    state <= IDLE;
            endcase
        end
    end

endmodule
