//
// Module mopshub_testbench.data_generator_SM.fsm
//
// Created:
//          by - dcs.dcs (chipdev2.physik.uni-wuppertal.de)
//          at - 09:31:44 10/28/21
//
// Generated by Mentor Graphics' HDL Designer(TM) 2019.4 (Build 4)
//
`resetall
`timescale 1ns/10ps
module data_generator_SM( 
   // Port Declarations
   // Port Declarations
   // Port Declarations
   // Port Declarations
   // Port Declarations
   // Port Declarations
   // Port Declarations
   input   wire               clk,                   // write FIFO clk
   input   wire               rst,                   // should be used through VIO
   output  reg                irq_elink,             //  ena signal
   output  reg        [2:0]   state_o, 
   input   wire               loop_en, 
   input   wire               start_read_elink, 
   output  reg                end_read_elink, 
   input   wire               txdec,                 // Axknowledgment of succesfully sent message
   input   wire               irq_can_ack, 
   input   wire               cnt_done, 
   output  reg                counter_gen_en, 
   output  reg                buffer_en, 
   output  integer            ch, 
   output  reg                custommsg,             // To start a custom message
   output  reg        [63:0]  data,                  // Complete 8 bytes of data to be sent in a custom message
   output  reg                start,                 // To start Driver /generator
   output  reg                reqmsg,                // Indicates a sent request to the testbench
   output  reg                respmsg,               // Indicates a reponse from the MOPS chip 
   output  reg        [23:0]  indexsubindex,         // Value of index should be LSByte first 
   output  reg                read,                  // Prepare SDO read request
   output  reg        [31:0]  taildata,              // Data which must be written to the chip 
   output  reg                write,                 // Prepare SDO write request
   output  reg                readadc,               // indicates to read an ADC channel 
   output  reg        [10:0]  customcanid,           // ID to be sent in a custom message
   input   wire               osc_auto_trim,         // Indicates if Automated trim is en/disabled
   output  reg                sign_in_start,         // To indicate arrival of sign-in message
   output  reg                sign_in_end,           // To indicate arrival of sign-in message
   input   wire               test_rx, 
   output  reg                test_rx_start, 
   output  reg                test_rx_end, 
   output  reg                trim_sig_start, 
   input   wire               trim_response_done,    // Active high. When MOPS sends acknowledgement to a message.Trimming is done. 
   output  reg                trim_sig_end, 
   input   wire               start_data_gen,        // This dignal should start the SM and comes from TB
   input   wire               test_mopshub_core, 
   input   wire               sel_bus, 
   output  reg                test_elink_data_done,  // dbg
   output  reg                rst_cnt, 
   input   wire               rxdec, 
   output  reg                start_write_emulator, 
   input   wire               test_tx, 
   input   wire               end_write_emulator, 
   output  reg                test_tx_end, 
   output  reg                test_tx_start, 
   output  reg                rst_mops_dbg, 
   output  reg                trim_sig_done
);


// Internal Declarations


// Module Declarations

// State encoding
parameter 
          ST_Reset          = 8'd0,
          ST_WAIT           = 8'd1,
          READ62            = 8'd2,
          ACK127            = 8'd3,
          ACK128            = 8'd4,
          REQMSGWAIT64      = 8'd5,
          RESPMSGWAIT63     = 8'd6,
          REQMSG64          = 8'd7,
          RESPMSG63         = 8'd8,
          READ63            = 8'd9,
          ACK129            = 8'd10,
          ACK130            = 8'd11,
          REQMSGWAIT65      = 8'd12,
          RESPMSGWAIT64     = 8'd13,
          REQMSG65          = 8'd14,
          RESPMSG64         = 8'd15,
          READ64            = 8'd16,
          ACK131            = 8'd17,
          ACK132            = 8'd18,
          REQMSGWAIT66      = 8'd19,
          RESPMSGWAIT65     = 8'd20,
          REQMSG66          = 8'd21,
          RESPMSG65         = 8'd22,
          READ65            = 8'd23,
          ACK133            = 8'd24,
          ACK134            = 8'd25,
          REQMSGWAIT67      = 8'd26,
          RESPMSGWAIT66     = 8'd27,
          REQMSG67          = 8'd28,
          RESPMSG66         = 8'd29,
          READ66            = 8'd30,
          ACK135            = 8'd31,
          ACK136            = 8'd32,
          REQMSGWAIT68      = 8'd33,
          RESPMSGWAIT67     = 8'd34,
          REQMSG68          = 8'd35,
          RESPMSG67         = 8'd36,
          READ67            = 8'd37,
          ACK137            = 8'd38,
          ACK138            = 8'd39,
          REQMSGWAIT69      = 8'd40,
          RESPMSGWAIT68     = 8'd41,
          REQMSG69          = 8'd42,
          RESPMSG68         = 8'd43,
          READ68            = 8'd44,
          ACK139            = 8'd45,
          ACK140            = 8'd46,
          REQMSGWAIT70      = 8'd47,
          RESPMSGWAIT69     = 8'd48,
          REQMSG70          = 8'd49,
          RESPMSG69         = 8'd50,
          READ69            = 8'd51,
          ACK141            = 8'd52,
          ACK142            = 8'd53,
          REQMSGWAIT71      = 8'd54,
          RESPMSGWAIT70     = 8'd55,
          REQMSG71          = 8'd56,
          RESPMSG70         = 8'd57,
          READ70            = 8'd58,
          ACK143            = 8'd59,
          ACK144            = 8'd60,
          REQMSGWAIT72      = 8'd61,
          RESPMSGWAIT71     = 8'd62,
          REQMSG72          = 8'd63,
          RESPMSG71         = 8'd64,
          END_ADC           = 8'd65,
          TRIMORNOT         = 8'd66,
          SIGN_IN           = 8'd67,
          s4                = 8'd68,
          READ_SIGN_IN      = 8'd69,
          READ75            = 8'd70,
          ACK153            = 8'd71,
          REQMSGWAIT78      = 8'd72,
          REQMSG78          = 8'd73,
          RESPMSG77         = 8'd74,
          finishtrim        = 8'd75,
          ST_Start_Trim     = 8'd76,
          START_ADC         = 8'd77,
          ST_Done           = 8'd78,
          ST_Done_Wait      = 8'd79,
          ST_Loop_cnt       = 8'd80,
          ST_Loop_cnt1      = 8'd81,
          ST_counter_Wait   = 8'd82,
          ST_Rst_Cnt1       = 8'd83,
          ST_Rst_Cnt2       = 8'd84,
          ST_counter_Wait1  = 8'd85,
          ST_Wait_To_Act1   = 8'd86,
          ST_Done1          = 8'd87,
          ST_Done_Wait1     = 8'd88,
          ST_Loop_cnt2      = 8'd89,
          ST_Rst_Cnt3       = 8'd90,
          ST_counter_Wait2  = 8'd91,
          ST_Enable_Data1   = 8'd92,
          ST_Wait_Suc_Tra2  = 8'd93,
          REQMSG7           = 8'd94,
          ST_Wait_Suc_Rec2  = 8'd95,
          RESPMSG7          = 8'd96,
          RESPMSGWAIT73     = 8'd97,
          ST_Enable_Data2   = 8'd98,
          ST_Wait_Suc_Tra3  = 8'd99,
          REQMSG8           = 8'd100,
          ST_Wait_Suc_Rec3  = 8'd101,
          RESPMSG8          = 8'd102,
          RESPMSGWAIT74     = 8'd103,
          ST_Done_Wait2     = 8'd104,
          ST_Done_Wait3     = 8'd105,
          ST_Enable_Data3   = 8'd106,
          ST_Wait_Suc_Tra4  = 8'd107,
          REQMSG9           = 8'd108,
          ST_Wait_Suc_Rec4  = 8'd109,
          RESPMSG9          = 8'd110,
          RESPMSGWAIT75     = 8'd111,
          ST_Done_Wait4     = 8'd112,
          ST_Enable_Data4   = 8'd113,
          ST_Wait_Suc_Tra5  = 8'd114,
          REQMSG10          = 8'd115,
          ST_Wait_Suc_Rec5  = 8'd116,
          RESPMSG10         = 8'd117,
          RESPMSGWAIT76     = 8'd118,
          ST_Done_Wait5     = 8'd119,
          ST_Enable_Data5   = 8'd120,
          ST_Wait_Suc_Tra6  = 8'd121,
          REQMSG11          = 8'd122,
          ST_Wait_Suc_Rec6  = 8'd123,
          RESPMSG11         = 8'd124,
          RESPMSGWAIT77     = 8'd125,
          ST_Done_Wait6     = 8'd126,
          ST_Enable_Data6   = 8'd127,
          ST_Wait_Suc_Tra7  = 8'd128,
          REQMSG12          = 8'd129,
          ST_Wait_Suc_Rec7  = 8'd130,
          RESPMSG12         = 8'd131,
          RESPMSGWAIT83     = 8'd132,
          ST_Done_Wait7     = 8'd133,
          ST_test_tx_end    = 8'd134,
          ST_En_Buffer1     = 8'd135,
          ST_End_Read1      = 8'd136,
          REQMSG5           = 8'd137,
          RESPMSGWAIT85     = 8'd138,
          ST_Wait_Suc_Rec1  = 8'd139,
          RESPMSG5          = 8'd140,
          ST_Done_Wait9     = 8'd141,
          ST_Bus_cnt2       = 8'd142,
          ST_Irq1           = 8'd143,
          ST_Enable_Data7   = 8'd144,
          ST_Wait_Suc_Tra8  = 8'd145,
          REQMSG13          = 8'd146,
          ST_Wait_Suc_Rec8  = 8'd147,
          RESPMSG13         = 8'd148,
          RESPMSGWAIT84     = 8'd149,
          ST_Done_Wait8     = 8'd150,
          ST_Enable_Data8   = 8'd151,
          ST_Wait_Suc_Tra9  = 8'd152,
          REQMSG14          = 8'd153,
          ST_Wait_Suc_Rec9  = 8'd154,
          RESPMSG14         = 8'd155,
          RESPMSGWAIT86     = 8'd156,
          ST_Done_Wait10    = 8'd157,
          ST_Enable_Data9   = 8'd158,
          ST_Wait_Suc_Tra10 = 8'd159,
          REQMSG15          = 8'd160,
          ST_Wait_Suc_Rec10 = 8'd161,
          RESPMSG15         = 8'd162,
          RESPMSGWAIT87     = 8'd163,
          ST_Done_Wait11    = 8'd164,
          ST_Enable_Data10  = 8'd165,
          ST_Wait_Suc_Tra11 = 8'd166,
          REQMSG16          = 8'd167,
          ST_Wait_Suc_Rec11 = 8'd168,
          RESPMSG16         = 8'd169,
          RESPMSGWAIT88     = 8'd170,
          ST_Done_Wait12    = 8'd171,
          ST_Enable_Data11  = 8'd172,
          ST_Wait_Suc_Tra12 = 8'd173,
          REQMSG17          = 8'd174,
          ST_Wait_Suc_Rec12 = 8'd175,
          RESPMSG17         = 8'd176,
          RESPMSGWAIT89     = 8'd177,
          ST_Done_Wait13    = 8'd178,
          ST_Enable_Data12  = 8'd179,
          ST_Wait_Suc_Tra13 = 8'd180,
          REQMSG18          = 8'd181,
          ST_Wait_Suc_Rec13 = 8'd182,
          RESPMSG18         = 8'd183,
          RESPMSGWAIT90     = 8'd184,
          ST_Done_Wait14    = 8'd185,
          ST_Rst_Cnt4       = 8'd186,
          ST_Loop_Cnt1      = 8'd187,
          s56               = 8'd188,
          SIGN_IN1          = 8'd189,
          s5                = 8'd190,
          END_SIGN_IN2      = 8'd191,
          s6                = 8'd192,
          s1                = 8'd193,
          END_SIGN_IN3      = 8'd194,
          END_SIGN_IN1      = 8'd195,
          ST_Wait_To_Act    = 8'd196,
          Osc_REG           = 8'd197,
          WRITE2            = 8'd198,
          ACK8              = 8'd199,
          ACK9              = 8'd200,
          RESPMSGWAIT80     = 8'd201,
          RESPMSG95         = 8'd202,
          REQMSGWAIT96      = 8'd203,
          REQMSG96          = 8'd204,
          WRITE3            = 8'd205,
          ACK10             = 8'd206,
          ACK174            = 8'd207,
          RESPMSGWAIT81     = 8'd208,
          RESPMSG96         = 8'd209,
          REQMSGWAIT97      = 8'd210,
          REQMSG97          = 8'd211,
          WRITE1            = 8'd212,
          ACK6              = 8'd213,
          ACK7              = 8'd214,
          RESPMSGWAIT6      = 8'd215,
          RESPMSG6          = 8'd216,
          REQMSGWAIT6       = 8'd217,
          REQMSG6           = 8'd218,
          READ92            = 8'd219,
          ACK172            = 8'd220,
          ACK173            = 8'd221,
          REQMSGWAIT95      = 8'd222,
          RESPMSGWAIT79     = 8'd223,
          REQMSG95          = 8'd224,
          RESPMSG94         = 8'd225,
          READ93            = 8'd226,
          ACK175            = 8'd227,
          ACK176            = 8'd228,
          REQMSGWAIT98      = 8'd229,
          RESPMSGWAIT82     = 8'd230,
          REQMSG98          = 8'd231,
          RESPMSG97         = 8'd232,
          READ97            = 8'd233,
          ACK184            = 8'd234,
          ACK185            = 8'd235,
          REQMSGWAIT104     = 8'd236,
          RESPMSGWAIT96     = 8'd237,
          REQMSG104         = 8'd238,
          RESPMSG103        = 8'd239;

reg [7:0] current_state, next_state;

// Wait State Signals
reg [14:0] csm_timer;
reg [14:0] csm_next_timer;
reg        csm_timeout;
reg        csm_to_READ62;
reg        csm_to_ACK127;
reg        csm_to_ACK128;
reg        csm_to_REQMSGWAIT64;
reg        csm_to_RESPMSGWAIT63;
reg        csm_to_READ63;
reg        csm_to_ACK129;
reg        csm_to_ACK130;
reg        csm_to_REQMSGWAIT65;
reg        csm_to_RESPMSGWAIT64;
reg        csm_to_READ64;
reg        csm_to_ACK131;
reg        csm_to_ACK132;
reg        csm_to_REQMSGWAIT66;
reg        csm_to_RESPMSGWAIT65;
reg        csm_to_READ65;
reg        csm_to_ACK133;
reg        csm_to_ACK134;
reg        csm_to_REQMSGWAIT67;
reg        csm_to_RESPMSGWAIT66;
reg        csm_to_READ66;
reg        csm_to_ACK135;
reg        csm_to_ACK136;
reg        csm_to_REQMSGWAIT68;
reg        csm_to_RESPMSGWAIT67;
reg        csm_to_READ67;
reg        csm_to_ACK137;
reg        csm_to_ACK138;
reg        csm_to_REQMSGWAIT69;
reg        csm_to_RESPMSGWAIT68;
reg        csm_to_READ68;
reg        csm_to_ACK139;
reg        csm_to_ACK140;
reg        csm_to_REQMSGWAIT70;
reg        csm_to_RESPMSGWAIT69;
reg        csm_to_READ69;
reg        csm_to_ACK141;
reg        csm_to_ACK142;
reg        csm_to_REQMSGWAIT71;
reg        csm_to_RESPMSGWAIT70;
reg        csm_to_READ70;
reg        csm_to_ACK143;
reg        csm_to_ACK144;
reg        csm_to_REQMSGWAIT72;
reg        csm_to_RESPMSGWAIT71;
reg        csm_to_SIGN_IN;
reg        csm_to_s4;
reg        csm_to_READ75;
reg        csm_to_ACK153;
reg        csm_to_REQMSGWAIT78;
reg        csm_to_ST_Done_Wait;
reg        csm_to_ST_counter_Wait;
reg        csm_to_ST_counter_Wait1;
reg        csm_to_ST_Wait_To_Act1;
reg        csm_to_ST_Done_Wait1;
reg        csm_to_ST_counter_Wait2;
reg        csm_to_ST_Wait_Suc_Tra2;
reg        csm_to_ST_Wait_Suc_Rec2;
reg        csm_to_RESPMSGWAIT73;
reg        csm_to_ST_Wait_Suc_Tra3;
reg        csm_to_ST_Wait_Suc_Rec3;
reg        csm_to_RESPMSGWAIT74;
reg        csm_to_ST_Done_Wait2;
reg        csm_to_ST_Done_Wait3;
reg        csm_to_ST_Wait_Suc_Tra4;
reg        csm_to_ST_Wait_Suc_Rec4;
reg        csm_to_RESPMSGWAIT75;
reg        csm_to_ST_Done_Wait4;
reg        csm_to_ST_Wait_Suc_Tra5;
reg        csm_to_ST_Wait_Suc_Rec5;
reg        csm_to_RESPMSGWAIT76;
reg        csm_to_ST_Done_Wait5;
reg        csm_to_ST_Wait_Suc_Tra6;
reg        csm_to_ST_Wait_Suc_Rec6;
reg        csm_to_RESPMSGWAIT77;
reg        csm_to_ST_Done_Wait6;
reg        csm_to_ST_Wait_Suc_Tra7;
reg        csm_to_ST_Wait_Suc_Rec7;
reg        csm_to_RESPMSGWAIT83;
reg        csm_to_ST_Done_Wait7;
reg        csm_to_RESPMSGWAIT85;
reg        csm_to_ST_Wait_Suc_Rec1;
reg        csm_to_ST_Done_Wait9;
reg        csm_to_ST_Wait_Suc_Tra8;
reg        csm_to_ST_Wait_Suc_Rec8;
reg        csm_to_RESPMSGWAIT84;
reg        csm_to_ST_Done_Wait8;
reg        csm_to_ST_Wait_Suc_Tra9;
reg        csm_to_ST_Wait_Suc_Rec9;
reg        csm_to_RESPMSGWAIT86;
reg        csm_to_ST_Done_Wait10;
reg        csm_to_ST_Wait_Suc_Tra10;
reg        csm_to_ST_Wait_Suc_Rec10;
reg        csm_to_RESPMSGWAIT87;
reg        csm_to_ST_Done_Wait11;
reg        csm_to_ST_Wait_Suc_Tra11;
reg        csm_to_ST_Wait_Suc_Rec11;
reg        csm_to_RESPMSGWAIT88;
reg        csm_to_ST_Done_Wait12;
reg        csm_to_ST_Wait_Suc_Tra12;
reg        csm_to_ST_Wait_Suc_Rec12;
reg        csm_to_RESPMSGWAIT89;
reg        csm_to_ST_Done_Wait13;
reg        csm_to_ST_Wait_Suc_Tra13;
reg        csm_to_ST_Wait_Suc_Rec13;
reg        csm_to_RESPMSGWAIT90;
reg        csm_to_ST_Done_Wait14;
reg        csm_to_s56;
reg        csm_to_SIGN_IN1;
reg        csm_to_s5;
reg        csm_to_s6;
reg        csm_to_s1;
reg        csm_to_ST_Wait_To_Act;
reg        csm_to_WRITE2;
reg        csm_to_ACK8;
reg        csm_to_ACK9;
reg        csm_to_RESPMSGWAIT80;
reg        csm_to_REQMSGWAIT96;
reg        csm_to_WRITE3;
reg        csm_to_ACK10;
reg        csm_to_ACK174;
reg        csm_to_RESPMSGWAIT81;
reg        csm_to_REQMSGWAIT97;
reg        csm_to_WRITE1;
reg        csm_to_ACK6;
reg        csm_to_ACK7;
reg        csm_to_RESPMSGWAIT6;
reg        csm_to_REQMSGWAIT6;
reg        csm_to_READ92;
reg        csm_to_ACK172;
reg        csm_to_ACK173;
reg        csm_to_REQMSGWAIT95;
reg        csm_to_RESPMSGWAIT79;
reg        csm_to_READ93;
reg        csm_to_ACK175;
reg        csm_to_ACK176;
reg        csm_to_REQMSGWAIT98;
reg        csm_to_RESPMSGWAIT82;
reg        csm_to_READ97;
reg        csm_to_ACK184;
reg        csm_to_ACK185;
reg        csm_to_REQMSGWAIT104;
reg        csm_to_RESPMSGWAIT96;

//-----------------------------------------------------------------
// Next State Block for machine csm
//-----------------------------------------------------------------
always @(
   cnt_done, 
   csm_timeout, 
   current_state, 
   end_write_emulator, 
   irq_can_ack, 
   loop_en, 
   osc_auto_trim, 
   rxdec, 
   sel_bus, 
   start_data_gen, 
   start_read_elink, 
   test_mopshub_core, 
   test_rx, 
   test_tx, 
   trim_response_done, 
   txdec
)
begin : next_state_block_proc
   // Default assignments to Wait State entry flags
   csm_to_READ62 = 1'b0;
   csm_to_ACK127 = 1'b0;
   csm_to_ACK128 = 1'b0;
   csm_to_REQMSGWAIT64 = 1'b0;
   csm_to_RESPMSGWAIT63 = 1'b0;
   csm_to_READ63 = 1'b0;
   csm_to_ACK129 = 1'b0;
   csm_to_ACK130 = 1'b0;
   csm_to_REQMSGWAIT65 = 1'b0;
   csm_to_RESPMSGWAIT64 = 1'b0;
   csm_to_READ64 = 1'b0;
   csm_to_ACK131 = 1'b0;
   csm_to_ACK132 = 1'b0;
   csm_to_REQMSGWAIT66 = 1'b0;
   csm_to_RESPMSGWAIT65 = 1'b0;
   csm_to_READ65 = 1'b0;
   csm_to_ACK133 = 1'b0;
   csm_to_ACK134 = 1'b0;
   csm_to_REQMSGWAIT67 = 1'b0;
   csm_to_RESPMSGWAIT66 = 1'b0;
   csm_to_READ66 = 1'b0;
   csm_to_ACK135 = 1'b0;
   csm_to_ACK136 = 1'b0;
   csm_to_REQMSGWAIT68 = 1'b0;
   csm_to_RESPMSGWAIT67 = 1'b0;
   csm_to_READ67 = 1'b0;
   csm_to_ACK137 = 1'b0;
   csm_to_ACK138 = 1'b0;
   csm_to_REQMSGWAIT69 = 1'b0;
   csm_to_RESPMSGWAIT68 = 1'b0;
   csm_to_READ68 = 1'b0;
   csm_to_ACK139 = 1'b0;
   csm_to_ACK140 = 1'b0;
   csm_to_REQMSGWAIT70 = 1'b0;
   csm_to_RESPMSGWAIT69 = 1'b0;
   csm_to_READ69 = 1'b0;
   csm_to_ACK141 = 1'b0;
   csm_to_ACK142 = 1'b0;
   csm_to_REQMSGWAIT71 = 1'b0;
   csm_to_RESPMSGWAIT70 = 1'b0;
   csm_to_READ70 = 1'b0;
   csm_to_ACK143 = 1'b0;
   csm_to_ACK144 = 1'b0;
   csm_to_REQMSGWAIT72 = 1'b0;
   csm_to_RESPMSGWAIT71 = 1'b0;
   csm_to_SIGN_IN = 1'b0;
   csm_to_s4 = 1'b0;
   csm_to_READ75 = 1'b0;
   csm_to_ACK153 = 1'b0;
   csm_to_REQMSGWAIT78 = 1'b0;
   csm_to_ST_Done_Wait = 1'b0;
   csm_to_ST_counter_Wait = 1'b0;
   csm_to_ST_counter_Wait1 = 1'b0;
   csm_to_ST_Wait_To_Act1 = 1'b0;
   csm_to_ST_Done_Wait1 = 1'b0;
   csm_to_ST_counter_Wait2 = 1'b0;
   csm_to_ST_Wait_Suc_Tra2 = 1'b0;
   csm_to_ST_Wait_Suc_Rec2 = 1'b0;
   csm_to_RESPMSGWAIT73 = 1'b0;
   csm_to_ST_Wait_Suc_Tra3 = 1'b0;
   csm_to_ST_Wait_Suc_Rec3 = 1'b0;
   csm_to_RESPMSGWAIT74 = 1'b0;
   csm_to_ST_Done_Wait2 = 1'b0;
   csm_to_ST_Done_Wait3 = 1'b0;
   csm_to_ST_Wait_Suc_Tra4 = 1'b0;
   csm_to_ST_Wait_Suc_Rec4 = 1'b0;
   csm_to_RESPMSGWAIT75 = 1'b0;
   csm_to_ST_Done_Wait4 = 1'b0;
   csm_to_ST_Wait_Suc_Tra5 = 1'b0;
   csm_to_ST_Wait_Suc_Rec5 = 1'b0;
   csm_to_RESPMSGWAIT76 = 1'b0;
   csm_to_ST_Done_Wait5 = 1'b0;
   csm_to_ST_Wait_Suc_Tra6 = 1'b0;
   csm_to_ST_Wait_Suc_Rec6 = 1'b0;
   csm_to_RESPMSGWAIT77 = 1'b0;
   csm_to_ST_Done_Wait6 = 1'b0;
   csm_to_ST_Wait_Suc_Tra7 = 1'b0;
   csm_to_ST_Wait_Suc_Rec7 = 1'b0;
   csm_to_RESPMSGWAIT83 = 1'b0;
   csm_to_ST_Done_Wait7 = 1'b0;
   csm_to_RESPMSGWAIT85 = 1'b0;
   csm_to_ST_Wait_Suc_Rec1 = 1'b0;
   csm_to_ST_Done_Wait9 = 1'b0;
   csm_to_ST_Wait_Suc_Tra8 = 1'b0;
   csm_to_ST_Wait_Suc_Rec8 = 1'b0;
   csm_to_RESPMSGWAIT84 = 1'b0;
   csm_to_ST_Done_Wait8 = 1'b0;
   csm_to_ST_Wait_Suc_Tra9 = 1'b0;
   csm_to_ST_Wait_Suc_Rec9 = 1'b0;
   csm_to_RESPMSGWAIT86 = 1'b0;
   csm_to_ST_Done_Wait10 = 1'b0;
   csm_to_ST_Wait_Suc_Tra10 = 1'b0;
   csm_to_ST_Wait_Suc_Rec10 = 1'b0;
   csm_to_RESPMSGWAIT87 = 1'b0;
   csm_to_ST_Done_Wait11 = 1'b0;
   csm_to_ST_Wait_Suc_Tra11 = 1'b0;
   csm_to_ST_Wait_Suc_Rec11 = 1'b0;
   csm_to_RESPMSGWAIT88 = 1'b0;
   csm_to_ST_Done_Wait12 = 1'b0;
   csm_to_ST_Wait_Suc_Tra12 = 1'b0;
   csm_to_ST_Wait_Suc_Rec12 = 1'b0;
   csm_to_RESPMSGWAIT89 = 1'b0;
   csm_to_ST_Done_Wait13 = 1'b0;
   csm_to_ST_Wait_Suc_Tra13 = 1'b0;
   csm_to_ST_Wait_Suc_Rec13 = 1'b0;
   csm_to_RESPMSGWAIT90 = 1'b0;
   csm_to_ST_Done_Wait14 = 1'b0;
   csm_to_s56 = 1'b0;
   csm_to_SIGN_IN1 = 1'b0;
   csm_to_s5 = 1'b0;
   csm_to_s6 = 1'b0;
   csm_to_s1 = 1'b0;
   csm_to_ST_Wait_To_Act = 1'b0;
   csm_to_WRITE2 = 1'b0;
   csm_to_ACK8 = 1'b0;
   csm_to_ACK9 = 1'b0;
   csm_to_RESPMSGWAIT80 = 1'b0;
   csm_to_REQMSGWAIT96 = 1'b0;
   csm_to_WRITE3 = 1'b0;
   csm_to_ACK10 = 1'b0;
   csm_to_ACK174 = 1'b0;
   csm_to_RESPMSGWAIT81 = 1'b0;
   csm_to_REQMSGWAIT97 = 1'b0;
   csm_to_WRITE1 = 1'b0;
   csm_to_ACK6 = 1'b0;
   csm_to_ACK7 = 1'b0;
   csm_to_RESPMSGWAIT6 = 1'b0;
   csm_to_REQMSGWAIT6 = 1'b0;
   csm_to_READ92 = 1'b0;
   csm_to_ACK172 = 1'b0;
   csm_to_ACK173 = 1'b0;
   csm_to_REQMSGWAIT95 = 1'b0;
   csm_to_RESPMSGWAIT79 = 1'b0;
   csm_to_READ93 = 1'b0;
   csm_to_ACK175 = 1'b0;
   csm_to_ACK176 = 1'b0;
   csm_to_REQMSGWAIT98 = 1'b0;
   csm_to_RESPMSGWAIT82 = 1'b0;
   csm_to_READ97 = 1'b0;
   csm_to_ACK184 = 1'b0;
   csm_to_ACK185 = 1'b0;
   csm_to_REQMSGWAIT104 = 1'b0;
   csm_to_RESPMSGWAIT96 = 1'b0;
   case (current_state) 
      ST_Reset: begin
         if (start_data_gen == 1)
            next_state = TRIMORNOT;
         else
            next_state = ST_Reset;
      end
      ST_WAIT: begin
         if (test_rx ==1)
            next_state = START_ADC;
         else if (test_tx ==1)
            next_state = ST_test_tx_end;
         else if (test_mopshub_core ==1)
            next_state = ST_Irq1;
         else if (loop_en == 1)
            next_state = ST_Reset;
         else
            next_state = ST_WAIT;
      end
      READ62: begin
         if (csm_timeout && (txdec == 0)) begin
            next_state = REQMSGWAIT64;
            csm_to_REQMSGWAIT64 = 1'b1;
         end
         else
            next_state = READ62;
      end
      ACK127: begin
         if (csm_timeout && (txdec == 0)) begin
            next_state = RESPMSGWAIT63;
            csm_to_RESPMSGWAIT63 = 1'b1;
         end
         else
            next_state = ACK127;
      end
      ACK128: begin
         if (csm_timeout) begin
            next_state = READ63;
            csm_to_READ63 = 1'b1;
         end
         else
            next_state = ACK128;
      end
      REQMSGWAIT64: begin
         if (csm_timeout)
            next_state = REQMSG64;
         else
            next_state = REQMSGWAIT64;
      end
      RESPMSGWAIT63: begin
         if (csm_timeout)
            next_state = RESPMSG63;
         else
            next_state = RESPMSGWAIT63;
      end
      REQMSG64: begin
         next_state = ACK127;
         csm_to_ACK127 = 1'b1;
      end
      RESPMSG63: begin
         next_state = ACK128;
         csm_to_ACK128 = 1'b1;
      end
      READ63: begin
         if (csm_timeout && (txdec == 0)) begin
            next_state = REQMSGWAIT65;
            csm_to_REQMSGWAIT65 = 1'b1;
         end
         else
            next_state = READ63;
      end
      ACK129: begin
         if (csm_timeout && (txdec == 0)) begin
            next_state = RESPMSGWAIT64;
            csm_to_RESPMSGWAIT64 = 1'b1;
         end
         else
            next_state = ACK129;
      end
      ACK130: begin
         if (csm_timeout) begin
            next_state = READ64;
            csm_to_READ64 = 1'b1;
         end
         else
            next_state = ACK130;
      end
      REQMSGWAIT65: begin
         if (csm_timeout)
            next_state = REQMSG65;
         else
            next_state = REQMSGWAIT65;
      end
      RESPMSGWAIT64: begin
         if (csm_timeout)
            next_state = RESPMSG64;
         else
            next_state = RESPMSGWAIT64;
      end
      REQMSG65: begin
         next_state = ACK129;
         csm_to_ACK129 = 1'b1;
      end
      RESPMSG64: begin
         next_state = ACK130;
         csm_to_ACK130 = 1'b1;
      end
      READ64: begin
         if (csm_timeout && (txdec == 0)) begin
            next_state = REQMSGWAIT66;
            csm_to_REQMSGWAIT66 = 1'b1;
         end
         else
            next_state = READ64;
      end
      ACK131: begin
         if (csm_timeout && (txdec == 0)) begin
            next_state = RESPMSGWAIT65;
            csm_to_RESPMSGWAIT65 = 1'b1;
         end
         else
            next_state = ACK131;
      end
      ACK132: begin
         if (csm_timeout) begin
            next_state = READ65;
            csm_to_READ65 = 1'b1;
         end
         else
            next_state = ACK132;
      end
      REQMSGWAIT66: begin
         if (csm_timeout)
            next_state = REQMSG66;
         else
            next_state = REQMSGWAIT66;
      end
      RESPMSGWAIT65: begin
         if (csm_timeout)
            next_state = RESPMSG65;
         else
            next_state = RESPMSGWAIT65;
      end
      REQMSG66: begin
         next_state = ACK131;
         csm_to_ACK131 = 1'b1;
      end
      RESPMSG65: begin
         next_state = ACK132;
         csm_to_ACK132 = 1'b1;
      end
      READ65: begin
         if (csm_timeout && (txdec == 0)) begin
            next_state = REQMSGWAIT67;
            csm_to_REQMSGWAIT67 = 1'b1;
         end
         else
            next_state = READ65;
      end
      ACK133: begin
         if (csm_timeout && (txdec == 0)) begin
            next_state = RESPMSGWAIT66;
            csm_to_RESPMSGWAIT66 = 1'b1;
         end
         else
            next_state = ACK133;
      end
      ACK134: begin
         if (csm_timeout) begin
            next_state = READ66;
            csm_to_READ66 = 1'b1;
         end
         else
            next_state = ACK134;
      end
      REQMSGWAIT67: begin
         if (csm_timeout)
            next_state = REQMSG67;
         else
            next_state = REQMSGWAIT67;
      end
      RESPMSGWAIT66: begin
         if (csm_timeout)
            next_state = RESPMSG66;
         else
            next_state = RESPMSGWAIT66;
      end
      REQMSG67: begin
         next_state = ACK133;
         csm_to_ACK133 = 1'b1;
      end
      RESPMSG66: begin
         next_state = ACK134;
         csm_to_ACK134 = 1'b1;
      end
      READ66: begin
         if (csm_timeout && (txdec == 0)) begin
            next_state = REQMSGWAIT68;
            csm_to_REQMSGWAIT68 = 1'b1;
         end
         else
            next_state = READ66;
      end
      ACK135: begin
         if (csm_timeout && (txdec == 0)) begin
            next_state = RESPMSGWAIT67;
            csm_to_RESPMSGWAIT67 = 1'b1;
         end
         else
            next_state = ACK135;
      end
      ACK136: begin
         if (csm_timeout) begin
            next_state = READ67;
            csm_to_READ67 = 1'b1;
         end
         else
            next_state = ACK136;
      end
      REQMSGWAIT68: begin
         if (csm_timeout)
            next_state = REQMSG68;
         else
            next_state = REQMSGWAIT68;
      end
      RESPMSGWAIT67: begin
         if (csm_timeout)
            next_state = RESPMSG67;
         else
            next_state = RESPMSGWAIT67;
      end
      REQMSG68: begin
         next_state = ACK135;
         csm_to_ACK135 = 1'b1;
      end
      RESPMSG67: begin
         next_state = ACK136;
         csm_to_ACK136 = 1'b1;
      end
      READ67: begin
         if (csm_timeout && (txdec == 0)) begin
            next_state = REQMSGWAIT69;
            csm_to_REQMSGWAIT69 = 1'b1;
         end
         else
            next_state = READ67;
      end
      ACK137: begin
         if (csm_timeout && (txdec == 0)) begin
            next_state = RESPMSGWAIT68;
            csm_to_RESPMSGWAIT68 = 1'b1;
         end
         else
            next_state = ACK137;
      end
      ACK138: begin
         if (csm_timeout) begin
            next_state = READ68;
            csm_to_READ68 = 1'b1;
         end
         else
            next_state = ACK138;
      end
      REQMSGWAIT69: begin
         if (csm_timeout)
            next_state = REQMSG69;
         else
            next_state = REQMSGWAIT69;
      end
      RESPMSGWAIT68: begin
         if (csm_timeout)
            next_state = RESPMSG68;
         else
            next_state = RESPMSGWAIT68;
      end
      REQMSG69: begin
         next_state = ACK137;
         csm_to_ACK137 = 1'b1;
      end
      RESPMSG68: begin
         next_state = ACK138;
         csm_to_ACK138 = 1'b1;
      end
      READ68: begin
         if (csm_timeout && (txdec == 0)) begin
            next_state = REQMSGWAIT70;
            csm_to_REQMSGWAIT70 = 1'b1;
         end
         else
            next_state = READ68;
      end
      ACK139: begin
         if (csm_timeout && (txdec == 0)) begin
            next_state = RESPMSGWAIT69;
            csm_to_RESPMSGWAIT69 = 1'b1;
         end
         else
            next_state = ACK139;
      end
      ACK140: begin
         if (csm_timeout) begin
            next_state = READ69;
            csm_to_READ69 = 1'b1;
         end
         else
            next_state = ACK140;
      end
      REQMSGWAIT70: begin
         if (csm_timeout)
            next_state = REQMSG70;
         else
            next_state = REQMSGWAIT70;
      end
      RESPMSGWAIT69: begin
         if (csm_timeout)
            next_state = RESPMSG69;
         else
            next_state = RESPMSGWAIT69;
      end
      REQMSG70: begin
         next_state = ACK139;
         csm_to_ACK139 = 1'b1;
      end
      RESPMSG69: begin
         next_state = ACK140;
         csm_to_ACK140 = 1'b1;
      end
      READ69: begin
         if (csm_timeout && (txdec == 0)) begin
            next_state = REQMSGWAIT71;
            csm_to_REQMSGWAIT71 = 1'b1;
         end
         else
            next_state = READ69;
      end
      ACK141: begin
         if (csm_timeout && (txdec == 0)) begin
            next_state = RESPMSGWAIT70;
            csm_to_RESPMSGWAIT70 = 1'b1;
         end
         else
            next_state = ACK141;
      end
      ACK142: begin
         if (csm_timeout) begin
            next_state = READ70;
            csm_to_READ70 = 1'b1;
         end
         else
            next_state = ACK142;
      end
      REQMSGWAIT71: begin
         if (csm_timeout)
            next_state = REQMSG71;
         else
            next_state = REQMSGWAIT71;
      end
      RESPMSGWAIT70: begin
         if (csm_timeout)
            next_state = RESPMSG70;
         else
            next_state = RESPMSGWAIT70;
      end
      REQMSG71: begin
         next_state = ACK141;
         csm_to_ACK141 = 1'b1;
      end
      RESPMSG70: begin
         next_state = ACK142;
         csm_to_ACK142 = 1'b1;
      end
      READ70: begin
         if (csm_timeout && (txdec == 0)) begin
            next_state = REQMSGWAIT72;
            csm_to_REQMSGWAIT72 = 1'b1;
         end
         else
            next_state = READ70;
      end
      ACK143: begin
         if (csm_timeout && (txdec == 0)) begin
            next_state = RESPMSGWAIT71;
            csm_to_RESPMSGWAIT71 = 1'b1;
         end
         else
            next_state = ACK143;
      end
      ACK144: begin
         if ((csm_timeout) && (sel_bus ==1 || cnt_done ==1))
            next_state = ST_Rst_Cnt1;
         else if (csm_timeout)
            next_state = ST_Loop_cnt1;
         else
            next_state = ACK144;
      end
      REQMSGWAIT72: begin
         if (csm_timeout)
            next_state = REQMSG72;
         else
            next_state = REQMSGWAIT72;
      end
      RESPMSGWAIT71: begin
         if (csm_timeout)
            next_state = RESPMSG71;
         else
            next_state = RESPMSGWAIT71;
      end
      REQMSG72: begin
         next_state = ACK143;
         csm_to_ACK143 = 1'b1;
      end
      RESPMSG71: begin
         next_state = ACK144;
         csm_to_ACK144 = 1'b1;
      end
      END_ADC: begin
         next_state = ST_WAIT;
      end
      TRIMORNOT: begin
         if (osc_auto_trim == 1)
            next_state = ST_Start_Trim;
         else begin
            next_state = s5;
            csm_to_s5 = 1'b1;
         end
      end
      SIGN_IN: begin
         if (csm_timeout)
            next_state = READ_SIGN_IN;
         else
            next_state = SIGN_IN;
      end
      s4: begin
         if (csm_timeout) begin
            next_state = SIGN_IN;
            csm_to_SIGN_IN = 1'b1;
         end
         else
            next_state = s4;
      end
      READ_SIGN_IN: begin
         next_state = s1;
         csm_to_s1 = 1'b1;
      end
      READ75: begin
         if (trim_response_done == 1)
            next_state = finishtrim;
         else if (txdec == 0) begin
            next_state = REQMSGWAIT78;
            csm_to_REQMSGWAIT78 = 1'b1;
         end
         else
            next_state = READ75;
      end
      ACK153: begin
         next_state = RESPMSG77;
      end
      REQMSGWAIT78: begin
         if (csm_timeout)
            next_state = REQMSG78;
         else
            next_state = REQMSGWAIT78;
      end
      REQMSG78: begin
         next_state = ACK153;
         csm_to_ACK153 = 1'b1;
      end
      RESPMSG77: begin
         next_state = READ75;
         csm_to_READ75 = 1'b1;
      end
      finishtrim: begin
         next_state = s4;
         csm_to_s4 = 1'b1;
      end
      ST_Start_Trim: begin
         next_state = READ75;
         csm_to_READ75 = 1'b1;
      end
      START_ADC: begin
         if (sel_bus ==1)
            next_state = Osc_REG;
         else begin
            next_state = READ67;
            csm_to_READ67 = 1'b1;
         end
      end
      ST_Done: begin
         next_state = ST_WAIT;
      end
      ST_Done_Wait: begin
         if (sel_bus ==1)
            next_state = ST_Done;
         else if (cnt_done ==1)
            next_state = ST_Rst_Cnt2;
         else
            next_state = ST_Loop_cnt;
      end
      ST_Loop_cnt: begin
         next_state = ST_counter_Wait1;
         csm_to_ST_counter_Wait1 = 1'b1;
      end
      ST_Loop_cnt1: begin
         next_state = ST_counter_Wait;
         csm_to_ST_counter_Wait = 1'b1;
      end
      ST_counter_Wait: begin
         if (csm_timeout && (txdec ==1))
            next_state = START_ADC;
         else
            next_state = ST_counter_Wait;
      end
      ST_Rst_Cnt1: begin
         next_state = ST_Wait_To_Act1;
         csm_to_ST_Wait_To_Act1 = 1'b1;
      end
      ST_Rst_Cnt2: begin
         next_state = ST_Done;
      end
      ST_counter_Wait1: begin
         if (csm_timeout)
            next_state = ST_Irq1;
         else
            next_state = ST_counter_Wait1;
      end
      ST_Wait_To_Act1: begin
         if (csm_timeout && (txdec ==1 & rxdec ==1))
            next_state = END_ADC;
         else
            next_state = ST_Wait_To_Act1;
      end
      ST_Done1: begin
         next_state = ST_WAIT;
      end
      ST_Done_Wait1: begin
         if (sel_bus ==1 || cnt_done ==1)
            next_state = ST_Rst_Cnt3;
         else
            next_state = ST_Loop_cnt2;
      end
      ST_Loop_cnt2: begin
         next_state = ST_counter_Wait2;
         csm_to_ST_counter_Wait2 = 1'b1;
      end
      ST_Rst_Cnt3: begin
         next_state = ST_Done1;
      end
      ST_counter_Wait2: begin
         if (csm_timeout)
            next_state = ST_test_tx_end;
         else
            next_state = ST_counter_Wait2;
      end
      ST_Enable_Data1: begin
         if (end_write_emulator ==1) begin
            next_state = ST_Wait_Suc_Tra2;
            csm_to_ST_Wait_Suc_Tra2 = 1'b1;
         end
         else
            next_state = ST_Enable_Data1;
      end
      ST_Wait_Suc_Tra2: begin
         if (csm_timeout)
            next_state = REQMSG7;
         else
            next_state = ST_Wait_Suc_Tra2;
      end
      REQMSG7: begin
         next_state = ST_Wait_Suc_Rec2;
         csm_to_ST_Wait_Suc_Rec2 = 1'b1;
      end
      ST_Wait_Suc_Rec2: begin
         if (csm_timeout && (txdec == 0)) begin
            next_state = RESPMSGWAIT73;
            csm_to_RESPMSGWAIT73 = 1'b1;
         end
         else
            next_state = ST_Wait_Suc_Rec2;
      end
      RESPMSG7: begin
         next_state = ST_Done_Wait2;
         csm_to_ST_Done_Wait2 = 1'b1;
      end
      RESPMSGWAIT73: begin
         if (csm_timeout)
            next_state = RESPMSG7;
         else
            next_state = RESPMSGWAIT73;
      end
      ST_Enable_Data2: begin
         if (end_write_emulator ==1) begin
            next_state = ST_Wait_Suc_Tra3;
            csm_to_ST_Wait_Suc_Tra3 = 1'b1;
         end
         else
            next_state = ST_Enable_Data2;
      end
      ST_Wait_Suc_Tra3: begin
         if (csm_timeout)
            next_state = REQMSG8;
         else
            next_state = ST_Wait_Suc_Tra3;
      end
      REQMSG8: begin
         next_state = ST_Wait_Suc_Rec3;
         csm_to_ST_Wait_Suc_Rec3 = 1'b1;
      end
      ST_Wait_Suc_Rec3: begin
         if (csm_timeout && (txdec == 0)) begin
            next_state = RESPMSGWAIT74;
            csm_to_RESPMSGWAIT74 = 1'b1;
         end
         else
            next_state = ST_Wait_Suc_Rec3;
      end
      RESPMSG8: begin
         next_state = ST_Done_Wait3;
         csm_to_ST_Done_Wait3 = 1'b1;
      end
      RESPMSGWAIT74: begin
         if (csm_timeout)
            next_state = RESPMSG8;
         else
            next_state = RESPMSGWAIT74;
      end
      ST_Done_Wait2: begin
         next_state = ST_Enable_Data2;
      end
      ST_Done_Wait3: begin
         next_state = ST_Enable_Data3;
      end
      ST_Enable_Data3: begin
         if (end_write_emulator ==1) begin
            next_state = ST_Wait_Suc_Tra4;
            csm_to_ST_Wait_Suc_Tra4 = 1'b1;
         end
         else
            next_state = ST_Enable_Data3;
      end
      ST_Wait_Suc_Tra4: begin
         if (csm_timeout)
            next_state = REQMSG9;
         else
            next_state = ST_Wait_Suc_Tra4;
      end
      REQMSG9: begin
         next_state = ST_Wait_Suc_Rec4;
         csm_to_ST_Wait_Suc_Rec4 = 1'b1;
      end
      ST_Wait_Suc_Rec4: begin
         if (csm_timeout && (txdec == 0)) begin
            next_state = RESPMSGWAIT75;
            csm_to_RESPMSGWAIT75 = 1'b1;
         end
         else
            next_state = ST_Wait_Suc_Rec4;
      end
      RESPMSG9: begin
         next_state = ST_Done_Wait4;
         csm_to_ST_Done_Wait4 = 1'b1;
      end
      RESPMSGWAIT75: begin
         if (csm_timeout)
            next_state = RESPMSG9;
         else
            next_state = RESPMSGWAIT75;
      end
      ST_Done_Wait4: begin
         next_state = ST_Enable_Data4;
      end
      ST_Enable_Data4: begin
         if (end_write_emulator ==1) begin
            next_state = ST_Wait_Suc_Tra5;
            csm_to_ST_Wait_Suc_Tra5 = 1'b1;
         end
         else
            next_state = ST_Enable_Data4;
      end
      ST_Wait_Suc_Tra5: begin
         if (csm_timeout)
            next_state = REQMSG10;
         else
            next_state = ST_Wait_Suc_Tra5;
      end
      REQMSG10: begin
         next_state = ST_Wait_Suc_Rec5;
         csm_to_ST_Wait_Suc_Rec5 = 1'b1;
      end
      ST_Wait_Suc_Rec5: begin
         if (csm_timeout && (txdec == 0)) begin
            next_state = RESPMSGWAIT76;
            csm_to_RESPMSGWAIT76 = 1'b1;
         end
         else
            next_state = ST_Wait_Suc_Rec5;
      end
      RESPMSG10: begin
         next_state = ST_Done_Wait5;
         csm_to_ST_Done_Wait5 = 1'b1;
      end
      RESPMSGWAIT76: begin
         if (csm_timeout)
            next_state = RESPMSG10;
         else
            next_state = RESPMSGWAIT76;
      end
      ST_Done_Wait5: begin
         next_state = ST_Enable_Data12;
      end
      ST_Enable_Data5: begin
         if (end_write_emulator ==1) begin
            next_state = ST_Wait_Suc_Tra6;
            csm_to_ST_Wait_Suc_Tra6 = 1'b1;
         end
         else
            next_state = ST_Enable_Data5;
      end
      ST_Wait_Suc_Tra6: begin
         if (csm_timeout)
            next_state = REQMSG11;
         else
            next_state = ST_Wait_Suc_Tra6;
      end
      REQMSG11: begin
         next_state = ST_Wait_Suc_Rec6;
         csm_to_ST_Wait_Suc_Rec6 = 1'b1;
      end
      ST_Wait_Suc_Rec6: begin
         if (csm_timeout && (txdec == 0)) begin
            next_state = RESPMSGWAIT77;
            csm_to_RESPMSGWAIT77 = 1'b1;
         end
         else
            next_state = ST_Wait_Suc_Rec6;
      end
      RESPMSG11: begin
         next_state = ST_Done_Wait6;
         csm_to_ST_Done_Wait6 = 1'b1;
      end
      RESPMSGWAIT77: begin
         if (csm_timeout)
            next_state = RESPMSG11;
         else
            next_state = RESPMSGWAIT77;
      end
      ST_Done_Wait6: begin
         next_state = ST_Enable_Data1;
      end
      ST_Enable_Data6: begin
         if (end_write_emulator ==1) begin
            next_state = ST_Wait_Suc_Tra7;
            csm_to_ST_Wait_Suc_Tra7 = 1'b1;
         end
         else
            next_state = ST_Enable_Data6;
      end
      ST_Wait_Suc_Tra7: begin
         if (csm_timeout)
            next_state = REQMSG12;
         else
            next_state = ST_Wait_Suc_Tra7;
      end
      REQMSG12: begin
         next_state = ST_Wait_Suc_Rec7;
         csm_to_ST_Wait_Suc_Rec7 = 1'b1;
      end
      ST_Wait_Suc_Rec7: begin
         if (csm_timeout && (txdec == 0)) begin
            next_state = RESPMSGWAIT83;
            csm_to_RESPMSGWAIT83 = 1'b1;
         end
         else
            next_state = ST_Wait_Suc_Rec7;
      end
      RESPMSG12: begin
         next_state = ST_Done_Wait7;
         csm_to_ST_Done_Wait7 = 1'b1;
      end
      RESPMSGWAIT83: begin
         if (csm_timeout)
            next_state = RESPMSG12;
         else
            next_state = RESPMSGWAIT83;
      end
      ST_Done_Wait7: begin
         next_state = ST_Enable_Data5;
      end
      ST_test_tx_end: begin
         if (sel_bus == 1'b1)
            next_state = ST_Enable_Data6;
         else
            next_state = ST_Enable_Data9;
      end
      ST_En_Buffer1: begin
         next_state = ST_End_Read1;
      end
      ST_End_Read1: begin
         if (irq_can_ack ==1)
            next_state = REQMSG5;
         else
            next_state = ST_End_Read1;
      end
      REQMSG5: begin
         next_state = ST_Wait_Suc_Rec1;
         csm_to_ST_Wait_Suc_Rec1 = 1'b1;
      end
      RESPMSGWAIT85: begin
         if (csm_timeout)
            next_state = RESPMSG5;
         else
            next_state = RESPMSGWAIT85;
      end
      ST_Wait_Suc_Rec1: begin
         if (csm_timeout && (txdec == 0)) begin
            next_state = RESPMSGWAIT85;
            csm_to_RESPMSGWAIT85 = 1'b1;
         end
         else
            next_state = ST_Wait_Suc_Rec1;
      end
      RESPMSG5: begin
         next_state = ST_Done_Wait9;
         csm_to_ST_Done_Wait9 = 1'b1;
      end
      ST_Done_Wait9: begin
         next_state = ST_Done_Wait;
         csm_to_ST_Done_Wait = 1'b1;
      end
      ST_Bus_cnt2: begin
         next_state = ST_En_Buffer1;
      end
      ST_Irq1: begin
         if (start_read_elink ==1)
            next_state = ST_Bus_cnt2;
         else
            next_state = ST_Irq1;
      end
      ST_Enable_Data7: begin
         if (end_write_emulator ==1) begin
            next_state = ST_Wait_Suc_Tra8;
            csm_to_ST_Wait_Suc_Tra8 = 1'b1;
         end
         else
            next_state = ST_Enable_Data7;
      end
      ST_Wait_Suc_Tra8: begin
         if (csm_timeout)
            next_state = REQMSG13;
         else
            next_state = ST_Wait_Suc_Tra8;
      end
      REQMSG13: begin
         next_state = ST_Wait_Suc_Rec8;
         csm_to_ST_Wait_Suc_Rec8 = 1'b1;
      end
      ST_Wait_Suc_Rec8: begin
         if (csm_timeout && (txdec == 0)) begin
            next_state = RESPMSGWAIT84;
            csm_to_RESPMSGWAIT84 = 1'b1;
         end
         else
            next_state = ST_Wait_Suc_Rec8;
      end
      RESPMSG13: begin
         next_state = ST_Done_Wait8;
         csm_to_ST_Done_Wait8 = 1'b1;
      end
      RESPMSGWAIT84: begin
         if (csm_timeout)
            next_state = RESPMSG13;
         else
            next_state = RESPMSGWAIT84;
      end
      ST_Done_Wait8: begin
         next_state = ST_Done_Wait1;
         csm_to_ST_Done_Wait1 = 1'b1;
      end
      ST_Enable_Data8: begin
         if (end_write_emulator ==1) begin
            next_state = ST_Wait_Suc_Tra9;
            csm_to_ST_Wait_Suc_Tra9 = 1'b1;
         end
         else
            next_state = ST_Enable_Data8;
      end
      ST_Wait_Suc_Tra9: begin
         if (csm_timeout)
            next_state = REQMSG14;
         else
            next_state = ST_Wait_Suc_Tra9;
      end
      REQMSG14: begin
         next_state = ST_Wait_Suc_Rec9;
         csm_to_ST_Wait_Suc_Rec9 = 1'b1;
      end
      ST_Wait_Suc_Rec9: begin
         if (csm_timeout && (txdec == 0)) begin
            next_state = RESPMSGWAIT86;
            csm_to_RESPMSGWAIT86 = 1'b1;
         end
         else
            next_state = ST_Wait_Suc_Rec9;
      end
      RESPMSG14: begin
         next_state = ST_Done_Wait10;
         csm_to_ST_Done_Wait10 = 1'b1;
      end
      RESPMSGWAIT86: begin
         if (csm_timeout)
            next_state = RESPMSG14;
         else
            next_state = RESPMSGWAIT86;
      end
      ST_Done_Wait10: begin
         next_state = ST_Enable_Data7;
      end
      ST_Enable_Data9: begin
         if (end_write_emulator ==1) begin
            next_state = ST_Wait_Suc_Tra10;
            csm_to_ST_Wait_Suc_Tra10 = 1'b1;
         end
         else
            next_state = ST_Enable_Data9;
      end
      ST_Wait_Suc_Tra10: begin
         if (csm_timeout)
            next_state = REQMSG15;
         else
            next_state = ST_Wait_Suc_Tra10;
      end
      REQMSG15: begin
         next_state = ST_Wait_Suc_Rec10;
         csm_to_ST_Wait_Suc_Rec10 = 1'b1;
      end
      ST_Wait_Suc_Rec10: begin
         if (csm_timeout && (txdec == 0)) begin
            next_state = RESPMSGWAIT87;
            csm_to_RESPMSGWAIT87 = 1'b1;
         end
         else
            next_state = ST_Wait_Suc_Rec10;
      end
      RESPMSG15: begin
         next_state = ST_Done_Wait11;
         csm_to_ST_Done_Wait11 = 1'b1;
      end
      RESPMSGWAIT87: begin
         if (csm_timeout)
            next_state = RESPMSG15;
         else
            next_state = RESPMSGWAIT87;
      end
      ST_Done_Wait11: begin
         next_state = ST_Enable_Data8;
      end
      ST_Enable_Data10: begin
         if (end_write_emulator ==1) begin
            next_state = ST_Wait_Suc_Tra11;
            csm_to_ST_Wait_Suc_Tra11 = 1'b1;
         end
         else
            next_state = ST_Enable_Data10;
      end
      ST_Wait_Suc_Tra11: begin
         if (csm_timeout)
            next_state = REQMSG16;
         else
            next_state = ST_Wait_Suc_Tra11;
      end
      REQMSG16: begin
         next_state = ST_Wait_Suc_Rec11;
         csm_to_ST_Wait_Suc_Rec11 = 1'b1;
      end
      ST_Wait_Suc_Rec11: begin
         if (csm_timeout && (txdec == 0)) begin
            next_state = RESPMSGWAIT88;
            csm_to_RESPMSGWAIT88 = 1'b1;
         end
         else
            next_state = ST_Wait_Suc_Rec11;
      end
      RESPMSG16: begin
         next_state = ST_Done_Wait12;
         csm_to_ST_Done_Wait12 = 1'b1;
      end
      RESPMSGWAIT88: begin
         if (csm_timeout)
            next_state = RESPMSG16;
         else
            next_state = RESPMSGWAIT88;
      end
      ST_Done_Wait12: begin
         next_state = ST_Enable_Data9;
      end
      ST_Enable_Data11: begin
         if (end_write_emulator ==1) begin
            next_state = ST_Wait_Suc_Tra12;
            csm_to_ST_Wait_Suc_Tra12 = 1'b1;
         end
         else
            next_state = ST_Enable_Data11;
      end
      ST_Wait_Suc_Tra12: begin
         if (csm_timeout)
            next_state = REQMSG17;
         else
            next_state = ST_Wait_Suc_Tra12;
      end
      REQMSG17: begin
         next_state = ST_Wait_Suc_Rec12;
         csm_to_ST_Wait_Suc_Rec12 = 1'b1;
      end
      ST_Wait_Suc_Rec12: begin
         if (csm_timeout && (txdec == 0)) begin
            next_state = RESPMSGWAIT89;
            csm_to_RESPMSGWAIT89 = 1'b1;
         end
         else
            next_state = ST_Wait_Suc_Rec12;
      end
      RESPMSG17: begin
         next_state = ST_Done_Wait13;
         csm_to_ST_Done_Wait13 = 1'b1;
      end
      RESPMSGWAIT89: begin
         if (csm_timeout)
            next_state = RESPMSG17;
         else
            next_state = RESPMSGWAIT89;
      end
      ST_Done_Wait13: begin
         next_state = ST_Enable_Data10;
      end
      ST_Enable_Data12: begin
         if (end_write_emulator ==1) begin
            next_state = ST_Wait_Suc_Tra13;
            csm_to_ST_Wait_Suc_Tra13 = 1'b1;
         end
         else
            next_state = ST_Enable_Data12;
      end
      ST_Wait_Suc_Tra13: begin
         if (csm_timeout)
            next_state = REQMSG18;
         else
            next_state = ST_Wait_Suc_Tra13;
      end
      REQMSG18: begin
         next_state = ST_Wait_Suc_Rec13;
         csm_to_ST_Wait_Suc_Rec13 = 1'b1;
      end
      ST_Wait_Suc_Rec13: begin
         if (csm_timeout && (txdec == 0)) begin
            next_state = RESPMSGWAIT90;
            csm_to_RESPMSGWAIT90 = 1'b1;
         end
         else
            next_state = ST_Wait_Suc_Rec13;
      end
      RESPMSG18: begin
         next_state = ST_Done_Wait14;
         csm_to_ST_Done_Wait14 = 1'b1;
      end
      RESPMSGWAIT90: begin
         if (csm_timeout)
            next_state = RESPMSG18;
         else
            next_state = RESPMSGWAIT90;
      end
      ST_Done_Wait14: begin
         next_state = ST_Enable_Data11;
      end
      ST_Rst_Cnt4: begin
         next_state = s6;
         csm_to_s6 = 1'b1;
      end
      ST_Loop_Cnt1: begin
         next_state = s56;
         csm_to_s56 = 1'b1;
      end
      s56: begin
         if (csm_timeout)
            next_state = ST_Start_Trim;
         else
            next_state = s56;
      end
      SIGN_IN1: begin
         if (csm_timeout)
            next_state = READ_SIGN_IN;
         else
            next_state = SIGN_IN1;
      end
      s5: begin
         if (csm_timeout) begin
            next_state = SIGN_IN1;
            csm_to_SIGN_IN1 = 1'b1;
         end
         else
            next_state = s5;
      end
      END_SIGN_IN2: begin
         if (sel_bus ==1 || cnt_done ==1)
            next_state = ST_Rst_Cnt4;
         else if (osc_auto_trim == 1)
            next_state = ST_Loop_Cnt1;
         else begin
            next_state = s6;
            csm_to_s6 = 1'b1;
         end
      end
      s6: begin
         if (csm_timeout)
            next_state = END_SIGN_IN3;
         else
            next_state = s6;
      end
      s1: begin
         if (csm_timeout)
            next_state = END_SIGN_IN2;
         else
            next_state = s1;
      end
      END_SIGN_IN3: begin
         next_state = ST_WAIT;
      end
      END_SIGN_IN1: begin
         next_state = READ62;
         csm_to_READ62 = 1'b1;
      end
      ST_Wait_To_Act: begin
         if (csm_timeout && (txdec ==1 & rxdec ==1))
            next_state = END_SIGN_IN1;
         else
            next_state = ST_Wait_To_Act;
      end
      Osc_REG: begin
         next_state = READ97;
         csm_to_READ97 = 1'b1;
      end
      WRITE2: begin
         if (csm_timeout && (txdec == 0)) begin
            next_state = REQMSGWAIT96;
            csm_to_REQMSGWAIT96 = 1'b1;
         end
         else
            next_state = WRITE2;
      end
      ACK8: begin
         if (csm_timeout && (txdec == 0)) begin
            next_state = RESPMSGWAIT80;
            csm_to_RESPMSGWAIT80 = 1'b1;
         end
         else
            next_state = ACK8;
      end
      ACK9: begin
         if (csm_timeout) begin
            next_state = WRITE3;
            csm_to_WRITE3 = 1'b1;
         end
         else
            next_state = ACK9;
      end
      RESPMSGWAIT80: begin
         if (csm_timeout)
            next_state = RESPMSG95;
         else
            next_state = RESPMSGWAIT80;
      end
      RESPMSG95: begin
         next_state = ACK9;
         csm_to_ACK9 = 1'b1;
      end
      REQMSGWAIT96: begin
         if (csm_timeout)
            next_state = REQMSG96;
         else
            next_state = REQMSGWAIT96;
      end
      REQMSG96: begin
         next_state = ACK8;
         csm_to_ACK8 = 1'b1;
      end
      WRITE3: begin
         if (csm_timeout && (txdec == 0)) begin
            next_state = REQMSGWAIT97;
            csm_to_REQMSGWAIT97 = 1'b1;
         end
         else
            next_state = WRITE3;
      end
      ACK10: begin
         if (csm_timeout && (txdec == 0)) begin
            next_state = RESPMSGWAIT81;
            csm_to_RESPMSGWAIT81 = 1'b1;
         end
         else
            next_state = ACK10;
      end
      ACK174: begin
         if (csm_timeout) begin
            next_state = ST_Wait_To_Act;
            csm_to_ST_Wait_To_Act = 1'b1;
         end
         else
            next_state = ACK174;
      end
      RESPMSGWAIT81: begin
         if (csm_timeout)
            next_state = RESPMSG96;
         else
            next_state = RESPMSGWAIT81;
      end
      RESPMSG96: begin
         next_state = ACK174;
         csm_to_ACK174 = 1'b1;
      end
      REQMSGWAIT97: begin
         if (csm_timeout)
            next_state = REQMSG97;
         else
            next_state = REQMSGWAIT97;
      end
      REQMSG97: begin
         next_state = ACK10;
         csm_to_ACK10 = 1'b1;
      end
      WRITE1: begin
         if (csm_timeout && (txdec == 0)) begin
            next_state = REQMSGWAIT6;
            csm_to_REQMSGWAIT6 = 1'b1;
         end
         else
            next_state = WRITE1;
      end
      ACK6: begin
         if (csm_timeout && (txdec == 0)) begin
            next_state = RESPMSGWAIT6;
            csm_to_RESPMSGWAIT6 = 1'b1;
         end
         else
            next_state = ACK6;
      end
      ACK7: begin
         if (csm_timeout) begin
            next_state = WRITE2;
            csm_to_WRITE2 = 1'b1;
         end
         else
            next_state = ACK7;
      end
      RESPMSGWAIT6: begin
         if (csm_timeout)
            next_state = RESPMSG6;
         else
            next_state = RESPMSGWAIT6;
      end
      RESPMSG6: begin
         next_state = ACK7;
         csm_to_ACK7 = 1'b1;
      end
      REQMSGWAIT6: begin
         if (csm_timeout)
            next_state = REQMSG6;
         else
            next_state = REQMSGWAIT6;
      end
      REQMSG6: begin
         next_state = ACK6;
         csm_to_ACK6 = 1'b1;
      end
      READ92: begin
         if (csm_timeout && (txdec == 0)) begin
            next_state = REQMSGWAIT95;
            csm_to_REQMSGWAIT95 = 1'b1;
         end
         else
            next_state = READ92;
      end
      ACK172: begin
         if (csm_timeout && (txdec == 0)) begin
            next_state = RESPMSGWAIT79;
            csm_to_RESPMSGWAIT79 = 1'b1;
         end
         else
            next_state = ACK172;
      end
      ACK173: begin
         if (csm_timeout) begin
            next_state = WRITE1;
            csm_to_WRITE1 = 1'b1;
         end
         else
            next_state = ACK173;
      end
      REQMSGWAIT95: begin
         if (csm_timeout)
            next_state = REQMSG95;
         else
            next_state = REQMSGWAIT95;
      end
      RESPMSGWAIT79: begin
         if (csm_timeout)
            next_state = RESPMSG94;
         else
            next_state = RESPMSGWAIT79;
      end
      REQMSG95: begin
         next_state = ACK172;
         csm_to_ACK172 = 1'b1;
      end
      RESPMSG94: begin
         next_state = ACK173;
         csm_to_ACK173 = 1'b1;
      end
      READ93: begin
         if (csm_timeout && (txdec == 0)) begin
            next_state = REQMSGWAIT98;
            csm_to_REQMSGWAIT98 = 1'b1;
         end
         else
            next_state = READ93;
      end
      ACK175: begin
         if (csm_timeout && (txdec == 0)) begin
            next_state = RESPMSGWAIT82;
            csm_to_RESPMSGWAIT82 = 1'b1;
         end
         else
            next_state = ACK175;
      end
      ACK176: begin
         if (csm_timeout) begin
            next_state = READ92;
            csm_to_READ92 = 1'b1;
         end
         else
            next_state = ACK176;
      end
      REQMSGWAIT98: begin
         if (csm_timeout)
            next_state = REQMSG98;
         else
            next_state = REQMSGWAIT98;
      end
      RESPMSGWAIT82: begin
         if (csm_timeout)
            next_state = RESPMSG97;
         else
            next_state = RESPMSGWAIT82;
      end
      REQMSG98: begin
         next_state = ACK175;
         csm_to_ACK175 = 1'b1;
      end
      RESPMSG97: begin
         next_state = ACK176;
         csm_to_ACK176 = 1'b1;
      end
      READ97: begin
         if (csm_timeout && (txdec == 0)) begin
            next_state = REQMSGWAIT104;
            csm_to_REQMSGWAIT104 = 1'b1;
         end
         else
            next_state = READ97;
      end
      ACK184: begin
         if (csm_timeout && (txdec == 0)) begin
            next_state = RESPMSGWAIT96;
            csm_to_RESPMSGWAIT96 = 1'b1;
         end
         else
            next_state = ACK184;
      end
      ACK185: begin
         if (csm_timeout) begin
            next_state = READ93;
            csm_to_READ93 = 1'b1;
         end
         else
            next_state = ACK185;
      end
      REQMSGWAIT104: begin
         if (csm_timeout)
            next_state = REQMSG104;
         else
            next_state = REQMSGWAIT104;
      end
      RESPMSGWAIT96: begin
         if (csm_timeout)
            next_state = RESPMSG103;
         else
            next_state = RESPMSGWAIT96;
      end
      REQMSG104: begin
         next_state = ACK184;
         csm_to_ACK184 = 1'b1;
      end
      RESPMSG103: begin
         next_state = ACK185;
         csm_to_ACK185 = 1'b1;
      end
      default: 
         next_state = ST_Reset;
   endcase
end // Next State Block

//-----------------------------------------------------------------
// Output Block for machine csm
//-----------------------------------------------------------------
always @(
   current_state
)
begin : output_block_proc
   // Default Assignment
   irq_elink = 0;
   state_o = 0;
   end_read_elink = 0;
   counter_gen_en = 0;
   buffer_en = 0;
   ch = 0;
   custommsg = 0;
   data = 0;
   start = 0;
   reqmsg = 0;
   respmsg = 0;
   indexsubindex = 0;
   read = 0;
   taildata = 0;
   write = 0;
   readadc = 0;
   customcanid = 0;
   sign_in_start = 0;
   sign_in_end = 0;
   test_rx_start = 0;
   test_rx_end = 0;
   trim_sig_start = 0;
   trim_sig_end = 0;
   test_elink_data_done = 0;
   rst_cnt = 0;
   start_write_emulator = 0;
   test_tx_end = 0;
   test_tx_start = 0;
   rst_mops_dbg = 0;
   trim_sig_done = 0;

   // Combined Actions
   case (current_state) 
      ST_Reset: begin
         state_o     = 3'b000;
         test_elink_data_done = 0;
         irq_elink = 0;
         counter_gen_en = 0;
         buffer_en = 0;
         end_read_elink = 0;
         test_rx_start = 0;
         rst_cnt =0;
      end
      READ62: begin
         start = 1;
         readadc = 1 ;
         ch = 26 ;
      end
      REQMSG64: begin
         reqmsg = 1 ;
      end
      RESPMSG63: begin
         respmsg = 1 ;
      end
      READ63: begin
         start = 1;
         readadc = 1 ;
         ch = 27 ;
      end
      REQMSG65: begin
         reqmsg = 1 ;
      end
      RESPMSG64: begin
         respmsg = 1 ;
      end
      READ64: begin
         start = 1;
         readadc = 1 ;
         ch = 28 ;
      end
      REQMSG66: begin
         reqmsg = 1 ;
      end
      RESPMSG65: begin
         respmsg = 1 ;
      end
      READ65: begin
         start = 1;
         readadc = 1 ;
         ch = 29 ;
      end
      REQMSG67: begin
         reqmsg = 1 ;
      end
      RESPMSG66: begin
         respmsg = 1 ;
      end
      READ66: begin
         start = 1;
         readadc = 1 ;
         ch = 30 ;
      end
      REQMSG68: begin
         reqmsg = 1 ;
      end
      RESPMSG67: begin
         respmsg = 1 ;
      end
      READ67: begin
         start = 1;
         readadc = 1 ;
         ch = 31 ;
      end
      REQMSG69: begin
         reqmsg = 1 ;
      end
      RESPMSG68: begin
         respmsg = 1 ;
      end
      READ68: begin
         start = 1;
         readadc = 1 ;
         ch = 32 ;
      end
      REQMSG70: begin
         reqmsg = 1 ;
      end
      RESPMSG69: begin
         respmsg = 1 ;
      end
      READ69: begin
         start = 1;
         readadc = 1 ;
         ch = 33 ;
      end
      REQMSG71: begin
         reqmsg = 1 ;
      end
      RESPMSG70: begin
         respmsg = 1 ;
      end
      READ70: begin
         start = 1;
         readadc = 1 ;
         ch = 34 ;
      end
      REQMSG72: begin
         reqmsg = 1 ;
      end
      RESPMSG71: begin
         respmsg = 1 ;
      end
      END_ADC: begin
         test_rx_end = 1;
      end
      READ_SIGN_IN: begin
         sign_in_start = 1;
      end
      READ75: begin
         start = 1;
         custommsg = 1;
         customcanid = 11'h555;
         data = 64'hAAAAAAAAAAAAAAAA;
      end
      REQMSG78: begin
         reqmsg = 1 ;
      end
      RESPMSG77: begin
         respmsg = 1 ;
      end
      finishtrim: begin
         trim_sig_end = 1;
      end
      ST_Start_Trim: begin
         trim_sig_start = 1;
      end
      START_ADC: begin
         test_rx_start= 1;
      end
      ST_Done: begin
         state_o = 3'b110;
         test_elink_data_done =1;
      end
      ST_Done_Wait: begin
         state_o     = 3'b101;
      end
      ST_Loop_cnt: begin
         state_o     = 3'b010;
         counter_gen_en = 1;
      end
      ST_Loop_cnt1: begin
         state_o     = 3'b010;
         counter_gen_en = 1;
      end
      ST_counter_Wait: begin
         state_o     = 3'b101;
      end
      ST_Rst_Cnt1: begin
         rst_cnt = 1 ;
      end
      ST_Rst_Cnt2: begin
         rst_cnt = 1 ;
      end
      ST_counter_Wait1: begin
         state_o     = 3'b101;
      end
      ST_Done1: begin
         state_o = 3'b110;
         test_tx_end =1;
      end
      ST_Done_Wait1: begin
         state_o     = 3'b101;
      end
      ST_Loop_cnt2: begin
         state_o     = 3'b010;
         counter_gen_en = 1;
      end
      ST_Rst_Cnt3: begin
         rst_cnt = 1 ;
      end
      ST_counter_Wait2: begin
         state_o     = 3'b101;
      end
      ST_Enable_Data1: begin
         state_o     = 3'b001;
         ch = 12 ;
         start_write_emulator      = 1;
      end
      ST_Wait_Suc_Tra2: begin
         ch = 12;
      end
      REQMSG7: begin
         reqmsg = 1 ;
         ch = 12;
      end
      RESPMSG7: begin
         respmsg = 1 ;
      end
      ST_Enable_Data2: begin
         state_o     = 3'b001;
         ch = 13 ;
         start_write_emulator      = 1;
      end
      ST_Wait_Suc_Tra3: begin
         ch = 13;
      end
      REQMSG8: begin
         reqmsg = 1 ;
         ch = 13;
      end
      RESPMSG8: begin
         respmsg = 1 ;
      end
      ST_Done_Wait2: begin
         state_o     = 3'b101;
      end
      ST_Done_Wait3: begin
         state_o     = 3'b101;
      end
      ST_Enable_Data3: begin
         state_o     = 3'b001;
         ch = 14 ;
         start_write_emulator      = 1;
      end
      ST_Wait_Suc_Tra4: begin
         ch = 14;
      end
      REQMSG9: begin
         reqmsg = 1 ;
         ch = 14;
      end
      RESPMSG9: begin
         respmsg = 1 ;
      end
      ST_Done_Wait4: begin
         state_o     = 3'b101;
      end
      ST_Enable_Data4: begin
         state_o     = 3'b001;
         ch = 15 ;
         start_write_emulator      = 1;
      end
      ST_Wait_Suc_Tra5: begin
         ch = 15;
      end
      REQMSG10: begin
         reqmsg = 1 ;
         ch = 15;
      end
      RESPMSG10: begin
         respmsg = 1 ;
      end
      ST_Done_Wait5: begin
         state_o     = 3'b101;
      end
      ST_Enable_Data5: begin
         state_o     = 3'b001;
         ch = 11 ;
         start_write_emulator      = 1;
      end
      ST_Wait_Suc_Tra6: begin
         ch = 11;
      end
      REQMSG11: begin
         reqmsg = 1 ;
         ch = 11;
      end
      RESPMSG11: begin
         respmsg = 1 ;
      end
      ST_Done_Wait6: begin
         state_o     = 3'b101;
      end
      ST_Enable_Data6: begin
         state_o     = 3'b001;
         ch = 10 ;
         start_write_emulator      = 1;
      end
      ST_Wait_Suc_Tra7: begin
         ch = 10;
      end
      REQMSG12: begin
         reqmsg = 1 ;
         ch = 10;
      end
      RESPMSG12: begin
         respmsg = 1 ;
      end
      ST_Done_Wait7: begin
         state_o     = 3'b101;
      end
      ST_test_tx_end: begin
         test_tx_start =1;
      end
      ST_En_Buffer1: begin
         state_o     = 3'b011;
         counter_gen_en = 0;
         buffer_en = 1;
      end
      ST_End_Read1: begin
         state_o     = 3'b100;
         end_read_elink =1;
      end
      REQMSG5: begin
         reqmsg = 1 ;
      end
      RESPMSG5: begin
         respmsg = 1 ;
      end
      ST_Done_Wait9: begin
         state_o     = 3'b101;
      end
      ST_Bus_cnt2: begin
         state_o     = 3'b010;
         ch =12;
      end
      ST_Irq1: begin
         state_o     = 3'b001;
         irq_elink      = 1;
         ch =12;
      end
      ST_Enable_Data7: begin
         state_o     = 3'b001;
         ch = 21 ;
         start_write_emulator      = 1;
      end
      REQMSG13: begin
         reqmsg = 1 ;
      end
      RESPMSG13: begin
         respmsg = 1 ;
      end
      ST_Done_Wait8: begin
         state_o     = 3'b101;
      end
      ST_Enable_Data8: begin
         state_o     = 3'b001;
         ch = 20 ;
         start_write_emulator      = 1;
      end
      REQMSG14: begin
         reqmsg = 1 ;
      end
      RESPMSG14: begin
         respmsg = 1 ;
      end
      ST_Done_Wait10: begin
         state_o     = 3'b101;
      end
      ST_Enable_Data9: begin
         state_o     = 3'b001;
         ch = 12 ;
         start_write_emulator      = 1;
      end
      REQMSG15: begin
         reqmsg = 1 ;
      end
      RESPMSG15: begin
         respmsg = 1 ;
      end
      ST_Done_Wait11: begin
         state_o     = 3'b101;
      end
      ST_Enable_Data10: begin
         state_o     = 3'b001;
         ch = 18;
         start_write_emulator      = 1;
      end
      REQMSG16: begin
         reqmsg = 1 ;
      end
      RESPMSG16: begin
         respmsg = 1 ;
      end
      ST_Done_Wait12: begin
         state_o     = 3'b101;
      end
      ST_Enable_Data11: begin
         state_o     = 3'b001;
         ch = 17 ;
         start_write_emulator      = 1;
      end
      REQMSG17: begin
         reqmsg = 1 ;
      end
      RESPMSG17: begin
         respmsg = 1 ;
      end
      ST_Done_Wait13: begin
         state_o     = 3'b101;
      end
      ST_Enable_Data12: begin
         state_o     = 3'b001;
         ch = 16 ;
         start_write_emulator      = 1;
      end
      REQMSG18: begin
         reqmsg = 1 ;
      end
      RESPMSG18: begin
         respmsg = 1 ;
      end
      ST_Done_Wait14: begin
         state_o     = 3'b101;
      end
      ST_Rst_Cnt4: begin
         rst_cnt = 1 ;
         trim_sig_done =1;
      end
      ST_Loop_Cnt1: begin
         counter_gen_en = 1 ;
         rst_mops_dbg =1;
      end
      END_SIGN_IN2: begin
         sign_in_end = 1 ;
      end
      WRITE2: begin
         start = 1;
         write = 1;
         indexsubindex = 24'h032000;
         taildata = 32'h01000000 ;
      end
      RESPMSG95: begin
         respmsg = 1 ;
      end
      REQMSG96: begin
         reqmsg = 1 ;
      end
      WRITE3: begin
         start = 1;
         write = 1;
         indexsubindex = 24'h042000;
         taildata = 32'h00000000 ;
      end
      RESPMSG96: begin
         respmsg = 1 ;
      end
      REQMSG97: begin
         reqmsg = 1 ;
      end
      WRITE1: begin
         start = 1;
         write = 1;
         indexsubindex = 24'h022000;
         taildata = 32'h01000000 ;
      end
      RESPMSG6: begin
         respmsg = 1 ;
      end
      REQMSG6: begin
         reqmsg = 1 ;
      end
      READ92: begin
         start = 1;
         read = 1;
         indexsubindex = 24'h042000;
      end
      REQMSG95: begin
         reqmsg = 1 ;
      end
      RESPMSG94: begin
         respmsg = 1 ;
      end
      READ93: begin
         start = 1;
         read = 1;
         indexsubindex = 24'h032000;
      end
      REQMSG98: begin
         reqmsg = 1 ;
      end
      RESPMSG97: begin
         respmsg = 1 ;
      end
      READ97: begin
         start = 1;
         read = 1;
         indexsubindex = 24'h022000;
      end
      REQMSG104: begin
         reqmsg = 1 ;
      end
      RESPMSG103: begin
         respmsg = 1 ;
      end
   endcase
end // Output Block

//-----------------------------------------------------------------
// Clocked Block for machine csm
//-----------------------------------------------------------------
always @(
   posedge clk, 
   negedge rst
) 
begin : clocked_block_proc
   if (!rst) begin
      current_state <= ST_Reset;
      csm_timer <= 15'd0;
   end
   else 
   begin
      current_state <= next_state;
      csm_timer <= csm_next_timer;
   end
end // Clocked Block

//-----------------------------------------------------------------
// Wait state logic for machine csm
//-----------------------------------------------------------------
always @(
   csm_timer,
   csm_to_READ62,
   csm_to_ACK127,
   csm_to_ACK128,
   csm_to_REQMSGWAIT64,
   csm_to_RESPMSGWAIT63,
   csm_to_READ63,
   csm_to_ACK129,
   csm_to_ACK130,
   csm_to_REQMSGWAIT65,
   csm_to_RESPMSGWAIT64,
   csm_to_READ64,
   csm_to_ACK131,
   csm_to_ACK132,
   csm_to_REQMSGWAIT66,
   csm_to_RESPMSGWAIT65,
   csm_to_READ65,
   csm_to_ACK133,
   csm_to_ACK134,
   csm_to_REQMSGWAIT67,
   csm_to_RESPMSGWAIT66,
   csm_to_READ66,
   csm_to_ACK135,
   csm_to_ACK136,
   csm_to_REQMSGWAIT68,
   csm_to_RESPMSGWAIT67,
   csm_to_READ67,
   csm_to_ACK137,
   csm_to_ACK138,
   csm_to_REQMSGWAIT69,
   csm_to_RESPMSGWAIT68,
   csm_to_READ68,
   csm_to_ACK139,
   csm_to_ACK140,
   csm_to_REQMSGWAIT70,
   csm_to_RESPMSGWAIT69,
   csm_to_READ69,
   csm_to_ACK141,
   csm_to_ACK142,
   csm_to_REQMSGWAIT71,
   csm_to_RESPMSGWAIT70,
   csm_to_READ70,
   csm_to_ACK143,
   csm_to_ACK144,
   csm_to_REQMSGWAIT72,
   csm_to_RESPMSGWAIT71,
   csm_to_SIGN_IN,
   csm_to_s4,
   csm_to_READ75,
   csm_to_ACK153,
   csm_to_REQMSGWAIT78,
   csm_to_ST_Done_Wait,
   csm_to_ST_counter_Wait,
   csm_to_ST_counter_Wait1,
   csm_to_ST_Wait_To_Act1,
   csm_to_ST_Done_Wait1,
   csm_to_ST_counter_Wait2,
   csm_to_ST_Wait_Suc_Tra2,
   csm_to_ST_Wait_Suc_Rec2,
   csm_to_RESPMSGWAIT73,
   csm_to_ST_Wait_Suc_Tra3,
   csm_to_ST_Wait_Suc_Rec3,
   csm_to_RESPMSGWAIT74,
   csm_to_ST_Done_Wait2,
   csm_to_ST_Done_Wait3,
   csm_to_ST_Wait_Suc_Tra4,
   csm_to_ST_Wait_Suc_Rec4,
   csm_to_RESPMSGWAIT75,
   csm_to_ST_Done_Wait4,
   csm_to_ST_Wait_Suc_Tra5,
   csm_to_ST_Wait_Suc_Rec5,
   csm_to_RESPMSGWAIT76,
   csm_to_ST_Done_Wait5,
   csm_to_ST_Wait_Suc_Tra6,
   csm_to_ST_Wait_Suc_Rec6,
   csm_to_RESPMSGWAIT77,
   csm_to_ST_Done_Wait6,
   csm_to_ST_Wait_Suc_Tra7,
   csm_to_ST_Wait_Suc_Rec7,
   csm_to_RESPMSGWAIT83,
   csm_to_ST_Done_Wait7,
   csm_to_RESPMSGWAIT85,
   csm_to_ST_Wait_Suc_Rec1,
   csm_to_ST_Done_Wait9,
   csm_to_ST_Wait_Suc_Tra8,
   csm_to_ST_Wait_Suc_Rec8,
   csm_to_RESPMSGWAIT84,
   csm_to_ST_Done_Wait8,
   csm_to_ST_Wait_Suc_Tra9,
   csm_to_ST_Wait_Suc_Rec9,
   csm_to_RESPMSGWAIT86,
   csm_to_ST_Done_Wait10,
   csm_to_ST_Wait_Suc_Tra10,
   csm_to_ST_Wait_Suc_Rec10,
   csm_to_RESPMSGWAIT87,
   csm_to_ST_Done_Wait11,
   csm_to_ST_Wait_Suc_Tra11,
   csm_to_ST_Wait_Suc_Rec11,
   csm_to_RESPMSGWAIT88,
   csm_to_ST_Done_Wait12,
   csm_to_ST_Wait_Suc_Tra12,
   csm_to_ST_Wait_Suc_Rec12,
   csm_to_RESPMSGWAIT89,
   csm_to_ST_Done_Wait13,
   csm_to_ST_Wait_Suc_Tra13,
   csm_to_ST_Wait_Suc_Rec13,
   csm_to_RESPMSGWAIT90,
   csm_to_ST_Done_Wait14,
   csm_to_s56,
   csm_to_SIGN_IN1,
   csm_to_s5,
   csm_to_s6,
   csm_to_s1,
   csm_to_ST_Wait_To_Act,
   csm_to_WRITE2,
   csm_to_ACK8,
   csm_to_ACK9,
   csm_to_RESPMSGWAIT80,
   csm_to_REQMSGWAIT96,
   csm_to_WRITE3,
   csm_to_ACK10,
   csm_to_ACK174,
   csm_to_RESPMSGWAIT81,
   csm_to_REQMSGWAIT97,
   csm_to_WRITE1,
   csm_to_ACK6,
   csm_to_ACK7,
   csm_to_RESPMSGWAIT6,
   csm_to_REQMSGWAIT6,
   csm_to_READ92,
   csm_to_ACK172,
   csm_to_ACK173,
   csm_to_REQMSGWAIT95,
   csm_to_RESPMSGWAIT79,
   csm_to_READ93,
   csm_to_ACK175,
   csm_to_ACK176,
   csm_to_REQMSGWAIT98,
   csm_to_RESPMSGWAIT82,
   csm_to_READ97,
   csm_to_ACK184,
   csm_to_ACK185,
   csm_to_REQMSGWAIT104,
   csm_to_RESPMSGWAIT96
)
begin : csm_wait_block_proc
   csm_timeout = (csm_timer == 15'd0);
   if (csm_to_READ62 == 1'b1) begin
      csm_next_timer = 15'd1499;  //no cycles(1500)-1=1499
   end
   else if (csm_to_ACK127 == 1'b1) begin
      csm_next_timer = 15'd1499;  //no cycles(1500)-1=1499
   end
   else if (csm_to_ACK128 == 1'b1) begin
      csm_next_timer = 15'd1499;  //no cycles(1500)-1=1499
   end
   else if (csm_to_REQMSGWAIT64 == 1'b1) begin
      csm_next_timer = 15'd1499;  //no cycles(1500)-1=1499
   end
   else if (csm_to_RESPMSGWAIT63 == 1'b1) begin
      csm_next_timer = 15'd1499;  //no cycles(1500)-1=1499
   end
   else if (csm_to_READ63 == 1'b1) begin
      csm_next_timer = 15'd1499;  //no cycles(1500)-1=1499
   end
   else if (csm_to_ACK129 == 1'b1) begin
      csm_next_timer = 15'd1499;  //no cycles(1500)-1=1499
   end
   else if (csm_to_ACK130 == 1'b1) begin
      csm_next_timer = 15'd1499;  //no cycles(1500)-1=1499
   end
   else if (csm_to_REQMSGWAIT65 == 1'b1) begin
      csm_next_timer = 15'd1499;  //no cycles(1500)-1=1499
   end
   else if (csm_to_RESPMSGWAIT64 == 1'b1) begin
      csm_next_timer = 15'd1499;  //no cycles(1500)-1=1499
   end
   else if (csm_to_READ64 == 1'b1) begin
      csm_next_timer = 15'd1499;  //no cycles(1500)-1=1499
   end
   else if (csm_to_ACK131 == 1'b1) begin
      csm_next_timer = 15'd1499;  //no cycles(1500)-1=1499
   end
   else if (csm_to_ACK132 == 1'b1) begin
      csm_next_timer = 15'd1499;  //no cycles(1500)-1=1499
   end
   else if (csm_to_REQMSGWAIT66 == 1'b1) begin
      csm_next_timer = 15'd1499;  //no cycles(1500)-1=1499
   end
   else if (csm_to_RESPMSGWAIT65 == 1'b1) begin
      csm_next_timer = 15'd1499;  //no cycles(1500)-1=1499
   end
   else if (csm_to_READ65 == 1'b1) begin
      csm_next_timer = 15'd1499;  //no cycles(1500)-1=1499
   end
   else if (csm_to_ACK133 == 1'b1) begin
      csm_next_timer = 15'd1499;  //no cycles(1500)-1=1499
   end
   else if (csm_to_ACK134 == 1'b1) begin
      csm_next_timer = 15'd1499;  //no cycles(1500)-1=1499
   end
   else if (csm_to_REQMSGWAIT67 == 1'b1) begin
      csm_next_timer = 15'd1499;  //no cycles(1500)-1=1499
   end
   else if (csm_to_RESPMSGWAIT66 == 1'b1) begin
      csm_next_timer = 15'd1499;  //no cycles(1500)-1=1499
   end
   else if (csm_to_READ66 == 1'b1) begin
      csm_next_timer = 15'd1499;  //no cycles(1500)-1=1499
   end
   else if (csm_to_ACK135 == 1'b1) begin
      csm_next_timer = 15'd1499;  //no cycles(1500)-1=1499
   end
   else if (csm_to_ACK136 == 1'b1) begin
      csm_next_timer = 15'd1499;  //no cycles(1500)-1=1499
   end
   else if (csm_to_REQMSGWAIT68 == 1'b1) begin
      csm_next_timer = 15'd1499;  //no cycles(1500)-1=1499
   end
   else if (csm_to_RESPMSGWAIT67 == 1'b1) begin
      csm_next_timer = 15'd1499;  //no cycles(1500)-1=1499
   end
   else if (csm_to_READ67 == 1'b1) begin
      csm_next_timer = 15'd1499;  //no cycles(1500)-1=1499
   end
   else if (csm_to_ACK137 == 1'b1) begin
      csm_next_timer = 15'd1499;  //no cycles(1500)-1=1499
   end
   else if (csm_to_ACK138 == 1'b1) begin
      csm_next_timer = 15'd1499;  //no cycles(1500)-1=1499
   end
   else if (csm_to_REQMSGWAIT69 == 1'b1) begin
      csm_next_timer = 15'd1499;  //no cycles(1500)-1=1499
   end
   else if (csm_to_RESPMSGWAIT68 == 1'b1) begin
      csm_next_timer = 15'd1499;  //no cycles(1500)-1=1499
   end
   else if (csm_to_READ68 == 1'b1) begin
      csm_next_timer = 15'd1499;  //no cycles(1500)-1=1499
   end
   else if (csm_to_ACK139 == 1'b1) begin
      csm_next_timer = 15'd1499;  //no cycles(1500)-1=1499
   end
   else if (csm_to_ACK140 == 1'b1) begin
      csm_next_timer = 15'd1499;  //no cycles(1500)-1=1499
   end
   else if (csm_to_REQMSGWAIT70 == 1'b1) begin
      csm_next_timer = 15'd1499;  //no cycles(1500)-1=1499
   end
   else if (csm_to_RESPMSGWAIT69 == 1'b1) begin
      csm_next_timer = 15'd1499;  //no cycles(1500)-1=1499
   end
   else if (csm_to_READ69 == 1'b1) begin
      csm_next_timer = 15'd1499;  //no cycles(1500)-1=1499
   end
   else if (csm_to_ACK141 == 1'b1) begin
      csm_next_timer = 15'd1499;  //no cycles(1500)-1=1499
   end
   else if (csm_to_ACK142 == 1'b1) begin
      csm_next_timer = 15'd1499;  //no cycles(1500)-1=1499
   end
   else if (csm_to_REQMSGWAIT71 == 1'b1) begin
      csm_next_timer = 15'd1499;  //no cycles(1500)-1=1499
   end
   else if (csm_to_RESPMSGWAIT70 == 1'b1) begin
      csm_next_timer = 15'd1499;  //no cycles(1500)-1=1499
   end
   else if (csm_to_READ70 == 1'b1) begin
      csm_next_timer = 15'd1499;  //no cycles(1500)-1=1499
   end
   else if (csm_to_ACK143 == 1'b1) begin
      csm_next_timer = 15'd1499;  //no cycles(1500)-1=1499
   end
   else if (csm_to_ACK144 == 1'b1) begin
      csm_next_timer = 15'd1499;  //no cycles(1500)-1=1499
   end
   else if (csm_to_REQMSGWAIT72 == 1'b1) begin
      csm_next_timer = 15'd1499;  //no cycles(1500)-1=1499
   end
   else if (csm_to_RESPMSGWAIT71 == 1'b1) begin
      csm_next_timer = 15'd1499;  //no cycles(1500)-1=1499
   end
   else if (csm_to_SIGN_IN == 1'b1) begin
      csm_next_timer = 15'd19999;  //no cycles(20000)-1=19999
   end
   else if (csm_to_s4 == 1'b1) begin
      csm_next_timer = 15'd3999;  //no cycles(4000)-1=3999
   end
   else if (csm_to_READ75 == 1'b1) begin
      csm_next_timer = 15'd1499;  //no cycles(1500)-1=1499
   end
   else if (csm_to_ACK153 == 1'b1) begin
      csm_next_timer = 15'd1499;  //no cycles(1500)-1=1499
   end
   else if (csm_to_REQMSGWAIT78 == 1'b1) begin
      csm_next_timer = 15'd999;  //no cycles(1000)-1=999
   end
   else if (csm_to_ST_Done_Wait == 1'b1) begin
      csm_next_timer = 15'd4999;  //no cycles(5000)-1=4999
   end
   else if (csm_to_ST_counter_Wait == 1'b1) begin
      csm_next_timer = 15'd14999;  //no cycles(15000)-1=14999
   end
   else if (csm_to_ST_counter_Wait1 == 1'b1) begin
      csm_next_timer = 15'd1499;  //no cycles(1500)-1=1499
   end
   else if (csm_to_ST_Wait_To_Act1 == 1'b1) begin
      csm_next_timer = 15'd14999;  //no cycles(15000)-1=14999
   end
   else if (csm_to_ST_Done_Wait1 == 1'b1) begin
      csm_next_timer = 15'd4999;  //no cycles(5000)-1=4999
   end
   else if (csm_to_ST_counter_Wait2 == 1'b1) begin
      csm_next_timer = 15'd1499;  //no cycles(1500)-1=1499
   end
   else if (csm_to_ST_Wait_Suc_Tra2 == 1'b1) begin
      csm_next_timer = 15'd4999;  //no cycles(5000)-1=4999
   end
   else if (csm_to_ST_Wait_Suc_Rec2 == 1'b1) begin
      csm_next_timer = 15'd4999;  //no cycles(5000)-1=4999
   end
   else if (csm_to_RESPMSGWAIT73 == 1'b1) begin
      csm_next_timer = 15'd1499;  //no cycles(1500)-1=1499
   end
   else if (csm_to_ST_Wait_Suc_Tra3 == 1'b1) begin
      csm_next_timer = 15'd4999;  //no cycles(5000)-1=4999
   end
   else if (csm_to_ST_Wait_Suc_Rec3 == 1'b1) begin
      csm_next_timer = 15'd4999;  //no cycles(5000)-1=4999
   end
   else if (csm_to_RESPMSGWAIT74 == 1'b1) begin
      csm_next_timer = 15'd1499;  //no cycles(1500)-1=1499
   end
   else if (csm_to_ST_Done_Wait2 == 1'b1) begin
      csm_next_timer = 15'd1499;  //no cycles(1500)-1=1499
   end
   else if (csm_to_ST_Done_Wait3 == 1'b1) begin
      csm_next_timer = 15'd1499;  //no cycles(1500)-1=1499
   end
   else if (csm_to_ST_Wait_Suc_Tra4 == 1'b1) begin
      csm_next_timer = 15'd4999;  //no cycles(5000)-1=4999
   end
   else if (csm_to_ST_Wait_Suc_Rec4 == 1'b1) begin
      csm_next_timer = 15'd4999;  //no cycles(5000)-1=4999
   end
   else if (csm_to_RESPMSGWAIT75 == 1'b1) begin
      csm_next_timer = 15'd1499;  //no cycles(1500)-1=1499
   end
   else if (csm_to_ST_Done_Wait4 == 1'b1) begin
      csm_next_timer = 15'd1499;  //no cycles(1500)-1=1499
   end
   else if (csm_to_ST_Wait_Suc_Tra5 == 1'b1) begin
      csm_next_timer = 15'd4999;  //no cycles(5000)-1=4999
   end
   else if (csm_to_ST_Wait_Suc_Rec5 == 1'b1) begin
      csm_next_timer = 15'd4999;  //no cycles(5000)-1=4999
   end
   else if (csm_to_RESPMSGWAIT76 == 1'b1) begin
      csm_next_timer = 15'd1499;  //no cycles(1500)-1=1499
   end
   else if (csm_to_ST_Done_Wait5 == 1'b1) begin
      csm_next_timer = 15'd1499;  //no cycles(1500)-1=1499
   end
   else if (csm_to_ST_Wait_Suc_Tra6 == 1'b1) begin
      csm_next_timer = 15'd4999;  //no cycles(5000)-1=4999
   end
   else if (csm_to_ST_Wait_Suc_Rec6 == 1'b1) begin
      csm_next_timer = 15'd4999;  //no cycles(5000)-1=4999
   end
   else if (csm_to_RESPMSGWAIT77 == 1'b1) begin
      csm_next_timer = 15'd1499;  //no cycles(1500)-1=1499
   end
   else if (csm_to_ST_Done_Wait6 == 1'b1) begin
      csm_next_timer = 15'd1499;  //no cycles(1500)-1=1499
   end
   else if (csm_to_ST_Wait_Suc_Tra7 == 1'b1) begin
      csm_next_timer = 15'd4999;  //no cycles(5000)-1=4999
   end
   else if (csm_to_ST_Wait_Suc_Rec7 == 1'b1) begin
      csm_next_timer = 15'd4999;  //no cycles(5000)-1=4999
   end
   else if (csm_to_RESPMSGWAIT83 == 1'b1) begin
      csm_next_timer = 15'd1499;  //no cycles(1500)-1=1499
   end
   else if (csm_to_ST_Done_Wait7 == 1'b1) begin
      csm_next_timer = 15'd1499;  //no cycles(1500)-1=1499
   end
   else if (csm_to_RESPMSGWAIT85 == 1'b1) begin
      csm_next_timer = 15'd1499;  //no cycles(1500)-1=1499
   end
   else if (csm_to_ST_Wait_Suc_Rec1 == 1'b1) begin
      csm_next_timer = 15'd4999;  //no cycles(5000)-1=4999
   end
   else if (csm_to_ST_Done_Wait9 == 1'b1) begin
      csm_next_timer = 15'd1499;  //no cycles(1500)-1=1499
   end
   else if (csm_to_ST_Wait_Suc_Tra8 == 1'b1) begin
      csm_next_timer = 15'd4999;  //no cycles(5000)-1=4999
   end
   else if (csm_to_ST_Wait_Suc_Rec8 == 1'b1) begin
      csm_next_timer = 15'd4999;  //no cycles(5000)-1=4999
   end
   else if (csm_to_RESPMSGWAIT84 == 1'b1) begin
      csm_next_timer = 15'd1499;  //no cycles(1500)-1=1499
   end
   else if (csm_to_ST_Done_Wait8 == 1'b1) begin
      csm_next_timer = 15'd1499;  //no cycles(1500)-1=1499
   end
   else if (csm_to_ST_Wait_Suc_Tra9 == 1'b1) begin
      csm_next_timer = 15'd4999;  //no cycles(5000)-1=4999
   end
   else if (csm_to_ST_Wait_Suc_Rec9 == 1'b1) begin
      csm_next_timer = 15'd4999;  //no cycles(5000)-1=4999
   end
   else if (csm_to_RESPMSGWAIT86 == 1'b1) begin
      csm_next_timer = 15'd1499;  //no cycles(1500)-1=1499
   end
   else if (csm_to_ST_Done_Wait10 == 1'b1) begin
      csm_next_timer = 15'd1499;  //no cycles(1500)-1=1499
   end
   else if (csm_to_ST_Wait_Suc_Tra10 == 1'b1) begin
      csm_next_timer = 15'd4999;  //no cycles(5000)-1=4999
   end
   else if (csm_to_ST_Wait_Suc_Rec10 == 1'b1) begin
      csm_next_timer = 15'd4999;  //no cycles(5000)-1=4999
   end
   else if (csm_to_RESPMSGWAIT87 == 1'b1) begin
      csm_next_timer = 15'd1499;  //no cycles(1500)-1=1499
   end
   else if (csm_to_ST_Done_Wait11 == 1'b1) begin
      csm_next_timer = 15'd1499;  //no cycles(1500)-1=1499
   end
   else if (csm_to_ST_Wait_Suc_Tra11 == 1'b1) begin
      csm_next_timer = 15'd4999;  //no cycles(5000)-1=4999
   end
   else if (csm_to_ST_Wait_Suc_Rec11 == 1'b1) begin
      csm_next_timer = 15'd4999;  //no cycles(5000)-1=4999
   end
   else if (csm_to_RESPMSGWAIT88 == 1'b1) begin
      csm_next_timer = 15'd1499;  //no cycles(1500)-1=1499
   end
   else if (csm_to_ST_Done_Wait12 == 1'b1) begin
      csm_next_timer = 15'd1499;  //no cycles(1500)-1=1499
   end
   else if (csm_to_ST_Wait_Suc_Tra12 == 1'b1) begin
      csm_next_timer = 15'd4999;  //no cycles(5000)-1=4999
   end
   else if (csm_to_ST_Wait_Suc_Rec12 == 1'b1) begin
      csm_next_timer = 15'd4999;  //no cycles(5000)-1=4999
   end
   else if (csm_to_RESPMSGWAIT89 == 1'b1) begin
      csm_next_timer = 15'd1499;  //no cycles(1500)-1=1499
   end
   else if (csm_to_ST_Done_Wait13 == 1'b1) begin
      csm_next_timer = 15'd1499;  //no cycles(1500)-1=1499
   end
   else if (csm_to_ST_Wait_Suc_Tra13 == 1'b1) begin
      csm_next_timer = 15'd4999;  //no cycles(5000)-1=4999
   end
   else if (csm_to_ST_Wait_Suc_Rec13 == 1'b1) begin
      csm_next_timer = 15'd4999;  //no cycles(5000)-1=4999
   end
   else if (csm_to_RESPMSGWAIT90 == 1'b1) begin
      csm_next_timer = 15'd1499;  //no cycles(1500)-1=1499
   end
   else if (csm_to_ST_Done_Wait14 == 1'b1) begin
      csm_next_timer = 15'd1499;  //no cycles(1500)-1=1499
   end
   else if (csm_to_s56 == 1'b1) begin
      csm_next_timer = 15'd999;  //no cycles(1000)-1=999
   end
   else if (csm_to_SIGN_IN1 == 1'b1) begin
      csm_next_timer = 15'd19999;  //no cycles(20000)-1=19999
   end
   else if (csm_to_s5 == 1'b1) begin
      csm_next_timer = 15'd3999;  //no cycles(4000)-1=3999
   end
   else if (csm_to_s6 == 1'b1) begin
      csm_next_timer = 15'd1499;  //no cycles(1500)-1=1499
   end
   else if (csm_to_s1 == 1'b1) begin
      csm_next_timer = 15'd19;  //no cycles(20)-1=19
   end
   else if (csm_to_ST_Wait_To_Act == 1'b1) begin
      csm_next_timer = 15'd19999;  //no cycles(20000)-1=19999
   end
   else if (csm_to_WRITE2 == 1'b1) begin
      csm_next_timer = 15'd1499;  //no cycles(1500)-1=1499
   end
   else if (csm_to_ACK8 == 1'b1) begin
      csm_next_timer = 15'd1499;  //no cycles(1500)-1=1499
   end
   else if (csm_to_ACK9 == 1'b1) begin
      csm_next_timer = 15'd1499;  //no cycles(1500)-1=1499
   end
   else if (csm_to_RESPMSGWAIT80 == 1'b1) begin
      csm_next_timer = 15'd1499;  //no cycles(1500)-1=1499
   end
   else if (csm_to_REQMSGWAIT96 == 1'b1) begin
      csm_next_timer = 15'd1499;  //no cycles(1500)-1=1499
   end
   else if (csm_to_WRITE3 == 1'b1) begin
      csm_next_timer = 15'd1499;  //no cycles(1500)-1=1499
   end
   else if (csm_to_ACK10 == 1'b1) begin
      csm_next_timer = 15'd1499;  //no cycles(1500)-1=1499
   end
   else if (csm_to_ACK174 == 1'b1) begin
      csm_next_timer = 15'd1499;  //no cycles(1500)-1=1499
   end
   else if (csm_to_RESPMSGWAIT81 == 1'b1) begin
      csm_next_timer = 15'd1499;  //no cycles(1500)-1=1499
   end
   else if (csm_to_REQMSGWAIT97 == 1'b1) begin
      csm_next_timer = 15'd1499;  //no cycles(1500)-1=1499
   end
   else if (csm_to_WRITE1 == 1'b1) begin
      csm_next_timer = 15'd1499;  //no cycles(1500)-1=1499
   end
   else if (csm_to_ACK6 == 1'b1) begin
      csm_next_timer = 15'd1499;  //no cycles(1500)-1=1499
   end
   else if (csm_to_ACK7 == 1'b1) begin
      csm_next_timer = 15'd1499;  //no cycles(1500)-1=1499
   end
   else if (csm_to_RESPMSGWAIT6 == 1'b1) begin
      csm_next_timer = 15'd1499;  //no cycles(1500)-1=1499
   end
   else if (csm_to_REQMSGWAIT6 == 1'b1) begin
      csm_next_timer = 15'd1499;  //no cycles(1500)-1=1499
   end
   else if (csm_to_READ92 == 1'b1) begin
      csm_next_timer = 15'd1499;  //no cycles(1500)-1=1499
   end
   else if (csm_to_ACK172 == 1'b1) begin
      csm_next_timer = 15'd1499;  //no cycles(1500)-1=1499
   end
   else if (csm_to_ACK173 == 1'b1) begin
      csm_next_timer = 15'd1499;  //no cycles(1500)-1=1499
   end
   else if (csm_to_REQMSGWAIT95 == 1'b1) begin
      csm_next_timer = 15'd1499;  //no cycles(1500)-1=1499
   end
   else if (csm_to_RESPMSGWAIT79 == 1'b1) begin
      csm_next_timer = 15'd1499;  //no cycles(1500)-1=1499
   end
   else if (csm_to_READ93 == 1'b1) begin
      csm_next_timer = 15'd1499;  //no cycles(1500)-1=1499
   end
   else if (csm_to_ACK175 == 1'b1) begin
      csm_next_timer = 15'd1499;  //no cycles(1500)-1=1499
   end
   else if (csm_to_ACK176 == 1'b1) begin
      csm_next_timer = 15'd1499;  //no cycles(1500)-1=1499
   end
   else if (csm_to_REQMSGWAIT98 == 1'b1) begin
      csm_next_timer = 15'd1499;  //no cycles(1500)-1=1499
   end
   else if (csm_to_RESPMSGWAIT82 == 1'b1) begin
      csm_next_timer = 15'd1499;  //no cycles(1500)-1=1499
   end
   else if (csm_to_READ97 == 1'b1) begin
      csm_next_timer = 15'd1499;  //no cycles(1500)-1=1499
   end
   else if (csm_to_ACK184 == 1'b1) begin
      csm_next_timer = 15'd1499;  //no cycles(1500)-1=1499
   end
   else if (csm_to_ACK185 == 1'b1) begin
      csm_next_timer = 15'd1499;  //no cycles(1500)-1=1499
   end
   else if (csm_to_REQMSGWAIT104 == 1'b1) begin
      csm_next_timer = 15'd1499;  //no cycles(1500)-1=1499
   end
   else if (csm_to_RESPMSGWAIT96 == 1'b1) begin
      csm_next_timer = 15'd1499;  //no cycles(1500)-1=1499
   end
   else begin
      csm_next_timer = (csm_timeout)? 15'd0: (csm_timer - 15'd1);
   end
end // Wait State Block
endmodule // data_generator_SM
