//
// Module mopshub_testbench.data_generator_SM.fsm
//
// Created:
//          by - dcs.dcs (chipdev2.physik.uni-wuppertal.de)
//          at - 16:39:00 07/06/23
//
// Generated by Mentor Graphics' HDL Designer(TM) 2019.4 (Build 4)
//
`resetall
`timescale 1ns/10ps
module data_generator_SM( 
   // Port Declarations
   // Port Declarations
   // Port Declarations
   // Port Declarations
   // Port Declarations
   // Port Declarations
   // Port Declarations
   input   wire               clk,                       // write FIFO clk
   input   wire               rst,                       // should be used through VIO
   output  reg                irq_elink_tra,             //  ena signal
   output  reg        [2:0]   state_o, 
   input   wire               start_read_elink, 
   output  reg                end_read_elink, 
   input   wire               txdec,                     // Axknowledgment of succesfully sent message
   input   wire               cnt_done, 
   output  reg                counter_gen_en, 
   output  reg                buffer_en, 
   output  integer            ch, 
   output  reg                custommsg,                 // To start a custom message
   output  reg        [63:0]  data,                      // Complete 8 bytes of data to be sent in a custom message
   output  reg                start,                     // To start Driver /generator
   output  reg                reqmsg,                    // Indicates a sent request to the testbench
   output  reg                respmsg,                   // Indicates a reponse from the MOPS chip 
   output  reg        [23:0]  indexsubindex,             // Value of index should be LSByte first 
   output  reg                read,                      // Prepare SDO read request
   output  reg        [31:0]  taildata,                  // Data which must be written to the chip 
   output  reg                write,                     // Prepare SDO write request
   output  reg                readadc,                   // indicates to read an ADC channel 
   output  reg        [10:0]  customcanid,               // ID to be sent in a custom message
   input   wire               test_rx, 
   output  reg                test_rx_start, 
   output  reg                test_rx_end, 
   input   wire               start_data_gen,            // This dignal should start the SM and comes from TB
   input   wire               test_mopshub_core, 
   input   wire               sel_bus, 
   output  reg                test_elink_data_done,      // dbg
   output  reg                rst_cnt, 
   input   wire               rxdec, 
   output  reg                start_write_emulator, 
   input   wire               test_tx, 
   input   wire               end_write_emulator, 
   output  reg                test_tx_end, 
   output  reg                test_tx_start, 
   output  reg                costum_msg_start, 
   output  reg                costum_msg_end, 
   input   wire               tx_mopshub, 
   input   wire               rx_mopshub, 
   input   wire               test_advanced, 
   output  reg        [75:0]  rand_rec_in, 
   output  reg                start_write_emulator_spi, 
   input   wire               end_write_emulator_spi, 
   output  reg                test_simult
);


// Internal Declarations


// Module Declarations

// State encoding
parameter 
          ST_Reset          = 8'd0,
          ST_WAIT           = 8'd1,
          READ65            = 8'd2,
          ACK133            = 8'd3,
          REQMSGWAIT67      = 8'd4,
          RESPMSGWAIT66     = 8'd5,
          REQMSG67          = 8'd6,
          RESPMSG66         = 8'd7,
          READ66            = 8'd8,
          ACK135            = 8'd9,
          REQMSGWAIT68      = 8'd10,
          RESPMSGWAIT67     = 8'd11,
          REQMSG68          = 8'd12,
          RESPMSG67         = 8'd13,
          READ67            = 8'd14,
          ACK137            = 8'd15,
          REQMSGWAIT69      = 8'd16,
          RESPMSGWAIT68     = 8'd17,
          REQMSG69          = 8'd18,
          RESPMSG68         = 8'd19,
          END_ADC           = 8'd20,
          START_ADC         = 8'd21,
          ST_Done           = 8'd22,
          ST_Done_Wait      = 8'd23,
          ST_Loop_cnt       = 8'd24,
          ST_Loop_cnt1      = 8'd25,
          ST_Wait           = 8'd26,
          ST_Rst_Cnt1       = 8'd27,
          ST_Rst_Cnt2       = 8'd28,
          ST_counter_Wait1  = 8'd29,
          ST_Done1          = 8'd30,
          ST_Loop_cnt2      = 8'd31,
          ST_Rst_Cnt3       = 8'd32,
          ST_counter_Wait2  = 8'd33,
          ST_test_tx_end    = 8'd34,
          ST_En_Buffer1     = 8'd35,
          ST_End_Read1      = 8'd36,
          REQMSG5           = 8'd37,
          RESPMSGWAIT85     = 8'd38,
          ST_Wait_Suc_Rec1  = 8'd39,
          RESPMSG5          = 8'd40,
          ST_Bus_cnt2       = 8'd41,
          ST_start_test     = 8'd42,
          ST_Enable_Data9   = 8'd43,
          ST_Wait_Suc_Tra10 = 8'd44,
          REQMSG15          = 8'd45,
          ST_Wait_Suc_Rec10 = 8'd46,
          RESPMSG15         = 8'd47,
          RESPMSGWAIT87     = 8'd48,
          ST_Enable_Data10  = 8'd49,
          ST_Wait_Suc_Tra11 = 8'd50,
          REQMSG16          = 8'd51,
          ST_Wait_Suc_Rec11 = 8'd52,
          RESPMSG16         = 8'd53,
          RESPMSGWAIT88     = 8'd54,
          ST_Enable_Data11  = 8'd55,
          ST_Wait_Suc_Tra12 = 8'd56,
          REQMSG17          = 8'd57,
          ST_Wait_Suc_Rec12 = 8'd58,
          RESPMSG17         = 8'd59,
          RESPMSGWAIT89     = 8'd60,
          ST_Wait_Suc_Tra14 = 8'd61,
          ST_Done_Wait15    = 8'd62,
          ST_En_Buffer3     = 8'd63,
          ST_End_Read3      = 8'd64,
          REQMSG20          = 8'd65,
          RESPMSGWAIT92     = 8'd66,
          ST_Wait_Suc_Rec15 = 8'd67,
          RESPMSG20         = 8'd68,
          ST_Bus_cnt4       = 8'd69,
          ST_start_test2    = 8'd70,
          ST_Wait_Suc_Tra16 = 8'd71,
          ST_Done_Wait17    = 8'd72,
          ST_En_Buffer4     = 8'd73,
          ST_End_Read4      = 8'd74,
          REQMSG21          = 8'd75,
          RESPMSGWAIT93     = 8'd76,
          ST_Wait_Suc_Rec16 = 8'd77,
          RESPMSG21         = 8'd78,
          ST_Bus_cnt5       = 8'd79,
          ST_start_test3    = 8'd80,
          ST_Wait_Suc_Tra17 = 8'd81,
          ST_Done_Wait18    = 8'd82,
          READ72            = 8'd83,
          ACK147            = 8'd84,
          ACK148            = 8'd85,
          RESPMSGWAIT78     = 8'd86,
          REQMSG74          = 8'd87,
          RESPMSG73         = 8'd88,
          Start1            = 8'd89,
          end_rand1         = 8'd90,
          _Wait3            = 8'd91,
          _Wait4            = 8'd92,
          ST_Enable_Data14  = 8'd93,
          ST_Wait_Suc_Tra19 = 8'd94,
          REQMSG23          = 8'd95,
          ST_Wait_Suc_Rec18 = 8'd96,
          RESPMSG23         = 8'd97,
          RESPMSGWAIT95     = 8'd98,
          ST_Done_Wait20    = 8'd99,
          _Wait7            = 8'd100,
          READ68            = 8'd101,
          READ69            = 8'd102,
          READ70            = 8'd103,
          READ74            = 8'd104,
          ACK151            = 8'd105,
          ACK152            = 8'd106,
          RESPMSGWAIT80     = 8'd107,
          REQMSG76          = 8'd108,
          RESPMSG75         = 8'd109,
          _Wait5            = 8'd110,
          ST_Enable_Data15  = 8'd111,
          ST_Wait_Suc_Tra20 = 8'd112,
          REQMSG24          = 8'd113,
          ST_Wait_Suc_Rec19 = 8'd114,
          RESPMSG24         = 8'd115,
          RESPMSGWAIT96     = 8'd116,
          ST_Done_Wait21    = 8'd117,
          _Wait9            = 8'd118,
          _Wait8            = 8'd119,
          Wait              = 8'd120,
          rst_Cnt           = 8'd121,
          ST_Enable_Data16  = 8'd122,
          ST_Wait_Suc_Tra21 = 8'd123,
          REQMSG25          = 8'd124,
          ST_Wait_Suc_Rec20 = 8'd125,
          RESPMSG25         = 8'd126,
          RESPMSGWAIT97     = 8'd127,
          ST_Done_Wait22    = 8'd128,
          _Wait10           = 8'd129,
          s3                = 8'd130,
          s4                = 8'd131,
          s2                = 8'd132,
          s5                = 8'd133,
          _Wait6            = 8'd134,
          _Wait11           = 8'd135;

reg [7:0] current_state, next_state;

// Wait State Signals
reg [16:0] csm_timer;
reg [16:0] csm_next_timer;
reg        csm_timeout;
reg        csm_to_READ65;
reg        csm_to_ACK133;
reg        csm_to_REQMSGWAIT67;
reg        csm_to_RESPMSGWAIT66;
reg        csm_to_READ66;
reg        csm_to_ACK135;
reg        csm_to_REQMSGWAIT68;
reg        csm_to_RESPMSGWAIT67;
reg        csm_to_READ67;
reg        csm_to_ACK137;
reg        csm_to_REQMSGWAIT69;
reg        csm_to_RESPMSGWAIT68;
reg        csm_to_ST_Done_Wait;
reg        csm_to_ST_Wait;
reg        csm_to_ST_counter_Wait1;
reg        csm_to_RESPMSGWAIT85;
reg        csm_to_ST_Wait_Suc_Rec1;
reg        csm_to_ST_Wait_Suc_Tra10;
reg        csm_to_ST_Wait_Suc_Rec10;
reg        csm_to_RESPMSGWAIT87;
reg        csm_to_ST_Wait_Suc_Tra11;
reg        csm_to_ST_Wait_Suc_Rec11;
reg        csm_to_RESPMSGWAIT88;
reg        csm_to_ST_Wait_Suc_Tra12;
reg        csm_to_ST_Wait_Suc_Rec12;
reg        csm_to_RESPMSGWAIT89;
reg        csm_to_ST_Wait_Suc_Tra14;
reg        csm_to_ST_Done_Wait15;
reg        csm_to_RESPMSGWAIT92;
reg        csm_to_ST_Wait_Suc_Rec15;
reg        csm_to_ST_Wait_Suc_Tra16;
reg        csm_to_ST_Done_Wait17;
reg        csm_to_RESPMSGWAIT93;
reg        csm_to_ST_Wait_Suc_Rec16;
reg        csm_to_ST_Wait_Suc_Tra17;
reg        csm_to_ST_Done_Wait18;
reg        csm_to_READ72;
reg        csm_to_ACK148;
reg        csm_to_RESPMSGWAIT78;
reg        csm_to__Wait3;
reg        csm_to__Wait4;
reg        csm_to_ST_Wait_Suc_Tra19;
reg        csm_to_ST_Wait_Suc_Rec18;
reg        csm_to_RESPMSGWAIT95;
reg        csm_to_ST_Done_Wait20;
reg        csm_to__Wait7;
reg        csm_to_READ69;
reg        csm_to_READ70;
reg        csm_to_READ74;
reg        csm_to_ACK152;
reg        csm_to_RESPMSGWAIT80;
reg        csm_to__Wait5;
reg        csm_to_ST_Wait_Suc_Tra20;
reg        csm_to_ST_Wait_Suc_Rec19;
reg        csm_to_RESPMSGWAIT96;
reg        csm_to_ST_Done_Wait21;
reg        csm_to__Wait9;
reg        csm_to__Wait8;
reg        csm_to_ST_Wait_Suc_Tra21;
reg        csm_to_ST_Wait_Suc_Rec20;
reg        csm_to_RESPMSGWAIT97;
reg        csm_to_ST_Done_Wait22;
reg        csm_to__Wait10;
reg        csm_to_s3;
reg        csm_to_s4;
reg        csm_to_s5;
reg        csm_to__Wait6;
reg        csm_to__Wait11;

//-----------------------------------------------------------------
// Next State Block for machine csm
//-----------------------------------------------------------------
always @(
   cnt_done, 
   csm_timeout, 
   current_state, 
   end_write_emulator, 
   end_write_emulator_spi, 
   sel_bus, 
   start_data_gen, 
   start_read_elink, 
   test_advanced, 
   test_mopshub_core, 
   test_rx, 
   test_tx, 
   tx_mopshub, 
   txdec
)
begin : next_state_block_proc
   // Default assignments to Wait State entry flags
   csm_to_READ65 = 1'b0;
   csm_to_ACK133 = 1'b0;
   csm_to_REQMSGWAIT67 = 1'b0;
   csm_to_RESPMSGWAIT66 = 1'b0;
   csm_to_READ66 = 1'b0;
   csm_to_ACK135 = 1'b0;
   csm_to_REQMSGWAIT68 = 1'b0;
   csm_to_RESPMSGWAIT67 = 1'b0;
   csm_to_READ67 = 1'b0;
   csm_to_ACK137 = 1'b0;
   csm_to_REQMSGWAIT69 = 1'b0;
   csm_to_RESPMSGWAIT68 = 1'b0;
   csm_to_ST_Done_Wait = 1'b0;
   csm_to_ST_Wait = 1'b0;
   csm_to_ST_counter_Wait1 = 1'b0;
   csm_to_RESPMSGWAIT85 = 1'b0;
   csm_to_ST_Wait_Suc_Rec1 = 1'b0;
   csm_to_ST_Wait_Suc_Tra10 = 1'b0;
   csm_to_ST_Wait_Suc_Rec10 = 1'b0;
   csm_to_RESPMSGWAIT87 = 1'b0;
   csm_to_ST_Wait_Suc_Tra11 = 1'b0;
   csm_to_ST_Wait_Suc_Rec11 = 1'b0;
   csm_to_RESPMSGWAIT88 = 1'b0;
   csm_to_ST_Wait_Suc_Tra12 = 1'b0;
   csm_to_ST_Wait_Suc_Rec12 = 1'b0;
   csm_to_RESPMSGWAIT89 = 1'b0;
   csm_to_ST_Wait_Suc_Tra14 = 1'b0;
   csm_to_ST_Done_Wait15 = 1'b0;
   csm_to_RESPMSGWAIT92 = 1'b0;
   csm_to_ST_Wait_Suc_Rec15 = 1'b0;
   csm_to_ST_Wait_Suc_Tra16 = 1'b0;
   csm_to_ST_Done_Wait17 = 1'b0;
   csm_to_RESPMSGWAIT93 = 1'b0;
   csm_to_ST_Wait_Suc_Rec16 = 1'b0;
   csm_to_ST_Wait_Suc_Tra17 = 1'b0;
   csm_to_ST_Done_Wait18 = 1'b0;
   csm_to_READ72 = 1'b0;
   csm_to_ACK148 = 1'b0;
   csm_to_RESPMSGWAIT78 = 1'b0;
   csm_to__Wait3 = 1'b0;
   csm_to__Wait4 = 1'b0;
   csm_to_ST_Wait_Suc_Tra19 = 1'b0;
   csm_to_ST_Wait_Suc_Rec18 = 1'b0;
   csm_to_RESPMSGWAIT95 = 1'b0;
   csm_to_ST_Done_Wait20 = 1'b0;
   csm_to__Wait7 = 1'b0;
   csm_to_READ69 = 1'b0;
   csm_to_READ70 = 1'b0;
   csm_to_READ74 = 1'b0;
   csm_to_ACK152 = 1'b0;
   csm_to_RESPMSGWAIT80 = 1'b0;
   csm_to__Wait5 = 1'b0;
   csm_to_ST_Wait_Suc_Tra20 = 1'b0;
   csm_to_ST_Wait_Suc_Rec19 = 1'b0;
   csm_to_RESPMSGWAIT96 = 1'b0;
   csm_to_ST_Done_Wait21 = 1'b0;
   csm_to__Wait9 = 1'b0;
   csm_to__Wait8 = 1'b0;
   csm_to_ST_Wait_Suc_Tra21 = 1'b0;
   csm_to_ST_Wait_Suc_Rec20 = 1'b0;
   csm_to_RESPMSGWAIT97 = 1'b0;
   csm_to_ST_Done_Wait22 = 1'b0;
   csm_to__Wait10 = 1'b0;
   csm_to_s3 = 1'b0;
   csm_to_s4 = 1'b0;
   csm_to_s5 = 1'b0;
   csm_to__Wait6 = 1'b0;
   csm_to__Wait11 = 1'b0;
   case (current_state) 
      ST_Reset: begin
         if (start_data_gen == 1)
            next_state = Wait;
         else
            next_state = ST_Reset;
      end
      ST_WAIT: begin
         if (test_rx ==1) begin
            next_state = _Wait3;
            csm_to__Wait3 = 1'b1;
         end
         else if (test_tx ==1) begin
            next_state = _Wait6;
            csm_to__Wait6 = 1'b1;
         end
         else if (test_mopshub_core ==1)
            next_state = ST_start_test;
         else if (test_advanced ==1) begin
            next_state = _Wait8;
            csm_to__Wait8 = 1'b1;
         end
         else
            next_state = ST_WAIT;
      end
      READ65: begin
         if (csm_timeout && (tx_mopshub == 0)) begin
            next_state = REQMSGWAIT67;
            csm_to_REQMSGWAIT67 = 1'b1;
         end
         else
            next_state = READ65;
      end
      ACK133: begin
         if (csm_timeout && (tx_mopshub == 0)) begin
            next_state = RESPMSGWAIT66;
            csm_to_RESPMSGWAIT66 = 1'b1;
         end
         else
            next_state = ACK133;
      end
      REQMSGWAIT67: begin
         if (csm_timeout)
            next_state = REQMSG67;
         else
            next_state = REQMSGWAIT67;
      end
      RESPMSGWAIT66: begin
         if (csm_timeout)
            next_state = RESPMSG66;
         else
            next_state = RESPMSGWAIT66;
      end
      REQMSG67: begin
         next_state = ACK133;
         csm_to_ACK133 = 1'b1;
      end
      RESPMSG66: begin
         next_state = READ66;
         csm_to_READ66 = 1'b1;
      end
      READ66: begin
         if (csm_timeout && (tx_mopshub == 0)) begin
            next_state = REQMSGWAIT68;
            csm_to_REQMSGWAIT68 = 1'b1;
         end
         else
            next_state = READ66;
      end
      ACK135: begin
         if (csm_timeout && (tx_mopshub == 0)) begin
            next_state = RESPMSGWAIT67;
            csm_to_RESPMSGWAIT67 = 1'b1;
         end
         else
            next_state = ACK135;
      end
      REQMSGWAIT68: begin
         if (csm_timeout)
            next_state = REQMSG68;
         else
            next_state = REQMSGWAIT68;
      end
      RESPMSGWAIT67: begin
         if (csm_timeout)
            next_state = RESPMSG67;
         else
            next_state = RESPMSGWAIT67;
      end
      REQMSG68: begin
         next_state = ACK135;
         csm_to_ACK135 = 1'b1;
      end
      RESPMSG67: begin
         next_state = READ67;
         csm_to_READ67 = 1'b1;
      end
      READ67: begin
         if (csm_timeout && (tx_mopshub == 0)) begin
            next_state = REQMSGWAIT69;
            csm_to_REQMSGWAIT69 = 1'b1;
         end
         else
            next_state = READ67;
      end
      ACK137: begin
         if (csm_timeout && (tx_mopshub == 0)) begin
            next_state = RESPMSGWAIT68;
            csm_to_RESPMSGWAIT68 = 1'b1;
         end
         else
            next_state = ACK137;
      end
      REQMSGWAIT69: begin
         if (csm_timeout)
            next_state = REQMSG69;
         else
            next_state = REQMSGWAIT69;
      end
      RESPMSGWAIT68: begin
         if (csm_timeout)
            next_state = RESPMSG68;
         else
            next_state = RESPMSGWAIT68;
      end
      REQMSG69: begin
         next_state = ACK137;
         csm_to_ACK137 = 1'b1;
      end
      RESPMSG68: begin
         if (sel_bus ==1 || cnt_done ==1)
            next_state = ST_Rst_Cnt1;
         else
            next_state = ST_Loop_cnt1;
      end
      END_ADC: begin
         next_state = ST_WAIT;
      end
      START_ADC: begin
         next_state = READ65;
         csm_to_READ65 = 1'b1;
      end
      ST_Done: begin
         next_state = ST_WAIT;
      end
      ST_Done_Wait: begin
         if (sel_bus ==1 || cnt_done ==1)
            next_state = ST_Rst_Cnt2;
         else
            next_state = ST_Loop_cnt;
      end
      ST_Loop_cnt: begin
         next_state = ST_counter_Wait1;
         csm_to_ST_counter_Wait1 = 1'b1;
      end
      ST_Loop_cnt1: begin
         next_state = ST_Wait;
         csm_to_ST_Wait = 1'b1;
      end
      ST_Wait: begin
         if (csm_timeout)
            next_state = START_ADC;
         else
            next_state = ST_Wait;
      end
      ST_Rst_Cnt1: begin
         next_state = END_ADC;
      end
      ST_Rst_Cnt2: begin
         next_state = ST_Done;
      end
      ST_counter_Wait1: begin
         if (csm_timeout)
            next_state = ST_start_test;
         else
            next_state = ST_counter_Wait1;
      end
      ST_Done1: begin
         next_state = ST_WAIT;
      end
      ST_Loop_cnt2: begin
         next_state = ST_counter_Wait2;
      end
      ST_Rst_Cnt3: begin
         next_state = ST_Done1;
      end
      ST_counter_Wait2: begin
         next_state = ST_test_tx_end;
      end
      ST_test_tx_end: begin
         next_state = ST_Enable_Data11;
      end
      ST_En_Buffer1: begin
         next_state = ST_End_Read1;
      end
      ST_End_Read1: begin
         next_state = ST_Wait_Suc_Tra14;
         csm_to_ST_Wait_Suc_Tra14 = 1'b1;
      end
      REQMSG5: begin
         next_state = ST_Wait_Suc_Rec1;
         csm_to_ST_Wait_Suc_Rec1 = 1'b1;
      end
      RESPMSGWAIT85: begin
         if (csm_timeout)
            next_state = RESPMSG5;
         else
            next_state = RESPMSGWAIT85;
      end
      ST_Wait_Suc_Rec1: begin
         if (csm_timeout && (tx_mopshub == 0)) begin
            next_state = RESPMSGWAIT85;
            csm_to_RESPMSGWAIT85 = 1'b1;
         end
         else
            next_state = ST_Wait_Suc_Rec1;
      end
      RESPMSG5: begin
         next_state = ST_Done_Wait15;
         csm_to_ST_Done_Wait15 = 1'b1;
      end
      ST_Bus_cnt2: begin
         next_state = ST_En_Buffer1;
      end
      ST_start_test: begin
         if (start_read_elink ==1)
            next_state = ST_Bus_cnt2;
         else
            next_state = ST_start_test;
      end
      ST_Enable_Data9: begin
         if (end_write_emulator ==1) begin
            next_state = ST_Wait_Suc_Tra10;
            csm_to_ST_Wait_Suc_Tra10 = 1'b1;
         end
         else
            next_state = ST_Enable_Data9;
      end
      ST_Wait_Suc_Tra10: begin
         if (csm_timeout)
            next_state = REQMSG15;
         else
            next_state = ST_Wait_Suc_Tra10;
      end
      REQMSG15: begin
         next_state = ST_Wait_Suc_Rec10;
         csm_to_ST_Wait_Suc_Rec10 = 1'b1;
      end
      ST_Wait_Suc_Rec10: begin
         if (csm_timeout && (tx_mopshub == 0)) begin
            next_state = RESPMSGWAIT87;
            csm_to_RESPMSGWAIT87 = 1'b1;
         end
         else
            next_state = ST_Wait_Suc_Rec10;
      end
      RESPMSG15: begin
         next_state = s5;
         csm_to_s5 = 1'b1;
      end
      RESPMSGWAIT87: begin
         if (csm_timeout)
            next_state = RESPMSG15;
         else
            next_state = RESPMSGWAIT87;
      end
      ST_Enable_Data10: begin
         if (end_write_emulator ==1) begin
            next_state = ST_Wait_Suc_Tra11;
            csm_to_ST_Wait_Suc_Tra11 = 1'b1;
         end
         else
            next_state = ST_Enable_Data10;
      end
      ST_Wait_Suc_Tra11: begin
         if (csm_timeout)
            next_state = REQMSG16;
         else
            next_state = ST_Wait_Suc_Tra11;
      end
      REQMSG16: begin
         next_state = ST_Wait_Suc_Rec11;
         csm_to_ST_Wait_Suc_Rec11 = 1'b1;
      end
      ST_Wait_Suc_Rec11: begin
         if (csm_timeout && (tx_mopshub == 0)) begin
            next_state = RESPMSGWAIT88;
            csm_to_RESPMSGWAIT88 = 1'b1;
         end
         else
            next_state = ST_Wait_Suc_Rec11;
      end
      RESPMSG16: begin
         next_state = s4;
         csm_to_s4 = 1'b1;
      end
      RESPMSGWAIT88: begin
         if (csm_timeout)
            next_state = RESPMSG16;
         else
            next_state = RESPMSGWAIT88;
      end
      ST_Enable_Data11: begin
         if (end_write_emulator ==1) begin
            next_state = ST_Wait_Suc_Tra12;
            csm_to_ST_Wait_Suc_Tra12 = 1'b1;
         end
         else
            next_state = ST_Enable_Data11;
      end
      ST_Wait_Suc_Tra12: begin
         if (csm_timeout)
            next_state = REQMSG17;
         else
            next_state = ST_Wait_Suc_Tra12;
      end
      REQMSG17: begin
         next_state = ST_Wait_Suc_Rec12;
         csm_to_ST_Wait_Suc_Rec12 = 1'b1;
      end
      ST_Wait_Suc_Rec12: begin
         if (csm_timeout && (tx_mopshub == 0)) begin
            next_state = RESPMSGWAIT89;
            csm_to_RESPMSGWAIT89 = 1'b1;
         end
         else
            next_state = ST_Wait_Suc_Rec12;
      end
      RESPMSG17: begin
         next_state = s3;
         csm_to_s3 = 1'b1;
      end
      RESPMSGWAIT89: begin
         if (csm_timeout)
            next_state = RESPMSG17;
         else
            next_state = RESPMSGWAIT89;
      end
      ST_Wait_Suc_Tra14: begin
         if (csm_timeout)
            next_state = REQMSG5;
         else
            next_state = ST_Wait_Suc_Tra14;
      end
      ST_Done_Wait15: begin
         next_state = ST_start_test2;
      end
      ST_En_Buffer3: begin
         next_state = ST_End_Read3;
      end
      ST_End_Read3: begin
         next_state = ST_Wait_Suc_Tra16;
         csm_to_ST_Wait_Suc_Tra16 = 1'b1;
      end
      REQMSG20: begin
         next_state = ST_Wait_Suc_Rec15;
         csm_to_ST_Wait_Suc_Rec15 = 1'b1;
      end
      RESPMSGWAIT92: begin
         if (csm_timeout)
            next_state = RESPMSG20;
         else
            next_state = RESPMSGWAIT92;
      end
      ST_Wait_Suc_Rec15: begin
         if (csm_timeout && (tx_mopshub == 0)) begin
            next_state = RESPMSGWAIT92;
            csm_to_RESPMSGWAIT92 = 1'b1;
         end
         else
            next_state = ST_Wait_Suc_Rec15;
      end
      RESPMSG20: begin
         next_state = ST_Done_Wait17;
         csm_to_ST_Done_Wait17 = 1'b1;
      end
      ST_Bus_cnt4: begin
         next_state = ST_En_Buffer3;
      end
      ST_start_test2: begin
         if (start_read_elink ==1)
            next_state = ST_Bus_cnt4;
         else
            next_state = ST_start_test2;
      end
      ST_Wait_Suc_Tra16: begin
         if (csm_timeout)
            next_state = REQMSG20;
         else
            next_state = ST_Wait_Suc_Tra16;
      end
      ST_Done_Wait17: begin
         next_state = ST_start_test3;
      end
      ST_En_Buffer4: begin
         next_state = ST_End_Read4;
      end
      ST_End_Read4: begin
         next_state = ST_Wait_Suc_Tra17;
         csm_to_ST_Wait_Suc_Tra17 = 1'b1;
      end
      REQMSG21: begin
         next_state = ST_Wait_Suc_Rec16;
         csm_to_ST_Wait_Suc_Rec16 = 1'b1;
      end
      RESPMSGWAIT93: begin
         if (csm_timeout)
            next_state = RESPMSG21;
         else
            next_state = RESPMSGWAIT93;
      end
      ST_Wait_Suc_Rec16: begin
         if (csm_timeout && (tx_mopshub == 0)) begin
            next_state = RESPMSGWAIT93;
            csm_to_RESPMSGWAIT93 = 1'b1;
         end
         else
            next_state = ST_Wait_Suc_Rec16;
      end
      RESPMSG21: begin
         next_state = ST_Done_Wait18;
         csm_to_ST_Done_Wait18 = 1'b1;
      end
      ST_Bus_cnt5: begin
         next_state = ST_En_Buffer4;
      end
      ST_start_test3: begin
         if (start_read_elink ==1)
            next_state = ST_Bus_cnt5;
         else
            next_state = ST_start_test3;
      end
      ST_Wait_Suc_Tra17: begin
         if (csm_timeout)
            next_state = REQMSG21;
         else
            next_state = ST_Wait_Suc_Tra17;
      end
      ST_Done_Wait18: begin
         next_state = ST_Done_Wait;
         csm_to_ST_Done_Wait = 1'b1;
      end
      READ72: begin
         if (csm_timeout && (tx_mopshub == 0))
            next_state = REQMSG74;
         else
            next_state = READ72;
      end
      ACK147: begin
         if (txdec == 0) begin
            next_state = RESPMSGWAIT78;
            csm_to_RESPMSGWAIT78 = 1'b1;
         end
         else
            next_state = ACK147;
      end
      ACK148: begin
         if (csm_timeout) begin
            next_state = READ70;
            csm_to_READ70 = 1'b1;
         end
         else
            next_state = ACK148;
      end
      RESPMSGWAIT78: begin
         if (csm_timeout)
            next_state = RESPMSG73;
         else
            next_state = RESPMSGWAIT78;
      end
      REQMSG74: begin
         next_state = ACK147;
      end
      RESPMSG73: begin
         next_state = ACK148;
         csm_to_ACK148 = 1'b1;
      end
      Start1: begin
         next_state = _Wait4;
         csm_to__Wait4 = 1'b1;
      end
      end_rand1: begin
         next_state = ST_WAIT;
      end
      _Wait3: begin
         if (csm_timeout)
            next_state = START_ADC;
         else
            next_state = _Wait3;
      end
      _Wait4: begin
         if (csm_timeout) begin
            next_state = READ72;
            csm_to_READ72 = 1'b1;
         end
         else
            next_state = _Wait4;
      end
      ST_Enable_Data14: begin
         if (end_write_emulator_spi ==1) begin
            next_state = ST_Wait_Suc_Tra19;
            csm_to_ST_Wait_Suc_Tra19 = 1'b1;
         end
         else
            next_state = ST_Enable_Data14;
      end
      ST_Wait_Suc_Tra19: begin
         if (csm_timeout)
            next_state = REQMSG23;
         else
            next_state = ST_Wait_Suc_Tra19;
      end
      REQMSG23: begin
         next_state = ST_Wait_Suc_Rec18;
         csm_to_ST_Wait_Suc_Rec18 = 1'b1;
      end
      ST_Wait_Suc_Rec18: begin
         if (csm_timeout) begin
            next_state = RESPMSGWAIT95;
            csm_to_RESPMSGWAIT95 = 1'b1;
         end
         else
            next_state = ST_Wait_Suc_Rec18;
      end
      RESPMSG23: begin
         next_state = ST_Done_Wait20;
         csm_to_ST_Done_Wait20 = 1'b1;
      end
      RESPMSGWAIT95: begin
         if (csm_timeout)
            next_state = RESPMSG23;
         else
            next_state = RESPMSGWAIT95;
      end
      ST_Done_Wait20: begin
         next_state = _Wait10;
         csm_to__Wait10 = 1'b1;
      end
      _Wait7: begin
         if (csm_timeout)
            next_state = ST_Enable_Data14;
         else
            next_state = _Wait7;
      end
      READ68: begin
         if (tx_mopshub == 0) begin
            next_state = READ69;
            csm_to_READ69 = 1'b1;
         end
         else
            next_state = READ68;
      end
      READ69: begin
         if (csm_timeout) begin
            next_state = _Wait9;
            csm_to__Wait9 = 1'b1;
         end
         else
            next_state = READ69;
      end
      READ70: begin
         if (csm_timeout)
            next_state = READ68;
         else
            next_state = READ70;
      end
      READ74: begin
         if (csm_timeout && (tx_mopshub == 0))
            next_state = REQMSG76;
         else
            next_state = READ74;
      end
      ACK151: begin
         if (txdec == 0) begin
            next_state = RESPMSGWAIT80;
            csm_to_RESPMSGWAIT80 = 1'b1;
         end
         else
            next_state = ACK151;
      end
      ACK152: begin
         if (csm_timeout) begin
            next_state = _Wait7;
            csm_to__Wait7 = 1'b1;
         end
         else
            next_state = ACK152;
      end
      RESPMSGWAIT80: begin
         if (csm_timeout)
            next_state = RESPMSG75;
         else
            next_state = RESPMSGWAIT80;
      end
      REQMSG76: begin
         next_state = ACK151;
      end
      RESPMSG75: begin
         next_state = ACK152;
         csm_to_ACK152 = 1'b1;
      end
      _Wait5: begin
         if (csm_timeout) begin
            next_state = READ74;
            csm_to_READ74 = 1'b1;
         end
         else
            next_state = _Wait5;
      end
      ST_Enable_Data15: begin
         if (end_write_emulator ==1) begin
            next_state = ST_Wait_Suc_Tra20;
            csm_to_ST_Wait_Suc_Tra20 = 1'b1;
         end
         else
            next_state = ST_Enable_Data15;
      end
      ST_Wait_Suc_Tra20: begin
         if (csm_timeout)
            next_state = REQMSG24;
         else
            next_state = ST_Wait_Suc_Tra20;
      end
      REQMSG24: begin
         next_state = ST_Wait_Suc_Rec19;
         csm_to_ST_Wait_Suc_Rec19 = 1'b1;
      end
      ST_Wait_Suc_Rec19: begin
         if (csm_timeout) begin
            next_state = RESPMSGWAIT96;
            csm_to_RESPMSGWAIT96 = 1'b1;
         end
         else
            next_state = ST_Wait_Suc_Rec19;
      end
      RESPMSG24: begin
         next_state = ST_Done_Wait21;
         csm_to_ST_Done_Wait21 = 1'b1;
      end
      RESPMSGWAIT96: begin
         if (csm_timeout)
            next_state = RESPMSG24;
         else
            next_state = RESPMSGWAIT96;
      end
      ST_Done_Wait21: begin
         next_state = _Wait5;
         csm_to__Wait5 = 1'b1;
      end
      _Wait9: begin
         if (csm_timeout)
            next_state = ST_Enable_Data15;
         else
            next_state = _Wait9;
      end
      _Wait8: begin
         if (csm_timeout)
            next_state = Start1;
         else
            next_state = _Wait8;
      end
      Wait: begin
         if (cnt_done ==1)
            next_state = rst_Cnt;
         else
            next_state = Wait;
      end
      rst_Cnt: begin
         next_state = _Wait11;
         csm_to__Wait11 = 1'b1;
      end
      ST_Enable_Data16: begin
         if (end_write_emulator_spi ==1) begin
            next_state = ST_Wait_Suc_Tra21;
            csm_to_ST_Wait_Suc_Tra21 = 1'b1;
         end
         else
            next_state = ST_Enable_Data16;
      end
      ST_Wait_Suc_Tra21: begin
         if (csm_timeout)
            next_state = REQMSG25;
         else
            next_state = ST_Wait_Suc_Tra21;
      end
      REQMSG25: begin
         next_state = ST_Wait_Suc_Rec20;
         csm_to_ST_Wait_Suc_Rec20 = 1'b1;
      end
      ST_Wait_Suc_Rec20: begin
         if (csm_timeout) begin
            next_state = RESPMSGWAIT97;
            csm_to_RESPMSGWAIT97 = 1'b1;
         end
         else
            next_state = ST_Wait_Suc_Rec20;
      end
      RESPMSG25: begin
         next_state = ST_Done_Wait22;
         csm_to_ST_Done_Wait22 = 1'b1;
      end
      RESPMSGWAIT97: begin
         if (csm_timeout)
            next_state = RESPMSG25;
         else
            next_state = RESPMSGWAIT97;
      end
      ST_Done_Wait22: begin
         next_state = end_rand1;
      end
      _Wait10: begin
         if (csm_timeout)
            next_state = ST_Enable_Data16;
         else
            next_state = _Wait10;
      end
      s3: begin
         if (csm_timeout)
            next_state = ST_Enable_Data10;
         else
            next_state = s3;
      end
      s4: begin
         if (csm_timeout)
            next_state = ST_Enable_Data9;
         else
            next_state = s4;
      end
      s2: begin
         if (sel_bus ==1 || cnt_done ==1)
            next_state = ST_Rst_Cnt3;
         else
            next_state = ST_Loop_cnt2;
      end
      s5: begin
         if (csm_timeout)
            next_state = s2;
         else
            next_state = s5;
      end
      _Wait6: begin
         if (csm_timeout)
            next_state = ST_test_tx_end;
         else
            next_state = _Wait6;
      end
      _Wait11: begin
         if (csm_timeout)
            next_state = ST_WAIT;
         else
            next_state = _Wait11;
      end
      default: 
         next_state = ST_Reset;
   endcase
end // Next State Block

//-----------------------------------------------------------------
// Output Block for machine csm
//-----------------------------------------------------------------
always @(
   current_state
)
begin : output_block_proc
   // Default Assignment
   irq_elink_tra = 0;
   state_o = 0;
   end_read_elink = 0;
   counter_gen_en = 0;
   buffer_en = 0;
   ch = 0;
   custommsg = 0;
   data = 0;
   start = 0;
   reqmsg = 0;
   respmsg = 0;
   indexsubindex = 0;
   read = 0;
   taildata = 0;
   write = 0;
   readadc = 0;
   customcanid = 0;
   test_rx_start = 0;
   test_rx_end = 0;
   test_elink_data_done = 0;
   rst_cnt = 0;
   start_write_emulator = 0;
   test_tx_end = 0;
   test_tx_start = 0;
   costum_msg_start = 0;
   costum_msg_end = 0;
   rand_rec_in = 76'b0;
   start_write_emulator_spi = 1'b0;
   test_simult = 1'b0;

   // Combined Actions
   case (current_state) 
      ST_Reset: begin
         state_o     = 3'b000;
         test_elink_data_done = 0;
         irq_elink_tra = 0;
         counter_gen_en = 0;
         buffer_en = 0;
         end_read_elink = 0;
         test_rx_start = 0;
         rst_cnt =0;
      end
      READ65: begin
         start = 1;
         readadc = 1 ;
         ch = 29 ;
      end
      REQMSG67: begin
         reqmsg = 1 ;
      end
      RESPMSG66: begin
         respmsg = 1 ;
      end
      READ66: begin
         start = 1;
         readadc = 1 ;
         ch = 30 ;
      end
      REQMSG68: begin
         reqmsg = 1 ;
      end
      RESPMSG67: begin
         respmsg = 1 ;
      end
      READ67: begin
         start = 1;
         readadc = 1 ;
         ch = 31 ;
      end
      REQMSG69: begin
         reqmsg = 1 ;
      end
      RESPMSG68: begin
         respmsg = 1 ;
      end
      END_ADC: begin
         test_rx_end = 1;
      end
      START_ADC: begin
         test_rx_start= 1;
      end
      ST_Done: begin
         state_o = 3'b110;
         test_elink_data_done =1;
      end
      ST_Done_Wait: begin
         state_o     = 3'b101;
      end
      ST_Loop_cnt: begin
         state_o     = 3'b010;
         counter_gen_en = 1;
      end
      ST_Loop_cnt1: begin
         counter_gen_en = 1;
      end
      ST_Rst_Cnt1: begin
         rst_cnt = 1 ;
      end
      ST_Rst_Cnt2: begin
         rst_cnt = 1 ;
      end
      ST_counter_Wait1: begin
         state_o     = 3'b101;
      end
      ST_Done1: begin
         test_tx_end =1;
      end
      ST_Loop_cnt2: begin
         counter_gen_en = 1;
      end
      ST_Rst_Cnt3: begin
         rst_cnt = 1 ;
      end
      ST_test_tx_end: begin
         test_tx_start =1;
      end
      ST_En_Buffer1: begin
         state_o     = 3'b011;
         buffer_en = 1;
      end
      ST_End_Read1: begin
         state_o     = 3'b100;
         end_read_elink =1;
      end
      REQMSG5: begin
         reqmsg = 1 ;
      end
      RESPMSG5: begin
         respmsg = 1 ;
      end
      ST_Bus_cnt2: begin
         state_o     = 3'b010;
         ch =12;
      end
      ST_start_test: begin
         state_o     = 3'b001;
         irq_elink_tra  = 1;
         ch =12;
      end
      ST_Enable_Data9: begin
         state_o     = 3'b001;
         ch = 12 ;
         start_write_emulator      = 1;
      end
      REQMSG15: begin
         reqmsg = 1 ;
      end
      RESPMSG15: begin
         respmsg = 1 ;
      end
      ST_Enable_Data10: begin
         state_o     = 3'b001;
         ch = 18;
         start_write_emulator      = 1;
      end
      REQMSG16: begin
         reqmsg = 1 ;
      end
      RESPMSG16: begin
         respmsg = 1 ;
      end
      ST_Enable_Data11: begin
         state_o     = 3'b001;
         ch = 17 ;
         start_write_emulator      = 1;
      end
      REQMSG17: begin
         reqmsg = 1 ;
      end
      RESPMSG17: begin
         respmsg = 1 ;
      end
      ST_Done_Wait15: begin
         state_o     = 3'b101;
      end
      ST_En_Buffer3: begin
         state_o     = 3'b011;
         buffer_en = 1;
      end
      ST_End_Read3: begin
         state_o     = 3'b100;
         end_read_elink =1;
      end
      REQMSG20: begin
         reqmsg = 1 ;
      end
      RESPMSG20: begin
         respmsg = 1 ;
      end
      ST_Bus_cnt4: begin
         state_o     = 3'b010;
         ch =14;
      end
      ST_start_test2: begin
         state_o     = 3'b001;
         irq_elink_tra  = 1;
         ch =14;
      end
      ST_Done_Wait17: begin
         state_o     = 3'b101;
      end
      ST_En_Buffer4: begin
         state_o     = 3'b011;
         buffer_en = 1;
      end
      ST_End_Read4: begin
         state_o     = 3'b100;
         end_read_elink =1;
      end
      REQMSG21: begin
         reqmsg = 1 ;
      end
      RESPMSG21: begin
         respmsg = 1 ;
      end
      ST_Bus_cnt5: begin
         state_o     = 3'b010;
         ch =15;
      end
      ST_start_test3: begin
         state_o     = 3'b001;
         irq_elink_tra  = 1;
         ch =15;
      end
      ST_Done_Wait18: begin
         state_o     = 3'b101;
      end
      READ72: begin
         start = 1;
         custommsg = 1;
         customcanid = {4'hC,7'h1};
         data = 64'hDEADBEEFDEADBEAF;
      end
      REQMSG74: begin
         reqmsg = 1 ;
      end
      RESPMSG73: begin
         respmsg = 1 ;
      end
      Start1: begin
         costum_msg_start =1;
      end
      end_rand1: begin
         costum_msg_end =1;
      end
      ST_Enable_Data14: begin
         rand_rec_in = {1'b0, 3'h2,8'h0,64'h180DBEEFDEADBEAF};
         start_write_emulator_spi = 1;
      end
      REQMSG23: begin
         reqmsg = 1 ;
      end
      RESPMSG23: begin
         respmsg = 1 ;
      end
      ST_Done_Wait20: begin
         state_o     = 3'b101;
      end
      READ68: begin
         start = 1;
         readadc = 1 ;
         ch = 29 ;
         test_simult =1;
      end
      READ69: begin
         test_simult =1;
      end
      READ70: begin
         test_simult =1;
      end
      READ74: begin
         start = 1;
         custommsg = 1;
         customcanid ={4'h4,7'h0};
         data = 64'hBEEFBEEFBEEFBEEF;
      end
      REQMSG76: begin
         reqmsg = 1 ;
      end
      RESPMSG75: begin
         respmsg = 1 ;
      end
      ST_Enable_Data15: begin
         rand_rec_in = {4'hC,7'h1,64'hDEADBEEFDEADBEAF};
         start_write_emulator = 1;
      end
      REQMSG24: begin
         reqmsg = 1 ;
      end
      RESPMSG24: begin
         respmsg = 1 ;
      end
      ST_Done_Wait21: begin
         state_o     = 3'b101;
      end
      rst_Cnt: begin
         rst_cnt = 1 ;
      end
      ST_Enable_Data16: begin
         rand_rec_in = {1'b0, 3'h3,8'h0,64'hDEADBEEFDEADBEAF};
         start_write_emulator_spi = 1;
      end
      REQMSG25: begin
         reqmsg = 1 ;
      end
      RESPMSG25: begin
         respmsg = 1 ;
      end
      ST_Done_Wait22: begin
         state_o     = 3'b101;
      end
   endcase
end // Output Block

//-----------------------------------------------------------------
// Clocked Block for machine csm
//-----------------------------------------------------------------
always @(
   posedge clk, 
   negedge rst
) 
begin : clocked_block_proc
   if (!rst) begin
      current_state <= ST_Reset;
      csm_timer <= 17'd0;
   end
   else 
   begin
      current_state <= next_state;
      csm_timer <= csm_next_timer;
   end
end // Clocked Block

//-----------------------------------------------------------------
// Wait state logic for machine csm
//-----------------------------------------------------------------
always @(
   csm_timer,
   csm_to_READ65,
   csm_to_ACK133,
   csm_to_REQMSGWAIT67,
   csm_to_RESPMSGWAIT66,
   csm_to_READ66,
   csm_to_ACK135,
   csm_to_REQMSGWAIT68,
   csm_to_RESPMSGWAIT67,
   csm_to_READ67,
   csm_to_ACK137,
   csm_to_REQMSGWAIT69,
   csm_to_RESPMSGWAIT68,
   csm_to_ST_Done_Wait,
   csm_to_ST_Wait,
   csm_to_ST_counter_Wait1,
   csm_to_RESPMSGWAIT85,
   csm_to_ST_Wait_Suc_Rec1,
   csm_to_ST_Wait_Suc_Tra10,
   csm_to_ST_Wait_Suc_Rec10,
   csm_to_RESPMSGWAIT87,
   csm_to_ST_Wait_Suc_Tra11,
   csm_to_ST_Wait_Suc_Rec11,
   csm_to_RESPMSGWAIT88,
   csm_to_ST_Wait_Suc_Tra12,
   csm_to_ST_Wait_Suc_Rec12,
   csm_to_RESPMSGWAIT89,
   csm_to_ST_Wait_Suc_Tra14,
   csm_to_ST_Done_Wait15,
   csm_to_RESPMSGWAIT92,
   csm_to_ST_Wait_Suc_Rec15,
   csm_to_ST_Wait_Suc_Tra16,
   csm_to_ST_Done_Wait17,
   csm_to_RESPMSGWAIT93,
   csm_to_ST_Wait_Suc_Rec16,
   csm_to_ST_Wait_Suc_Tra17,
   csm_to_ST_Done_Wait18,
   csm_to_READ72,
   csm_to_ACK148,
   csm_to_RESPMSGWAIT78,
   csm_to__Wait3,
   csm_to__Wait4,
   csm_to_ST_Wait_Suc_Tra19,
   csm_to_ST_Wait_Suc_Rec18,
   csm_to_RESPMSGWAIT95,
   csm_to_ST_Done_Wait20,
   csm_to__Wait7,
   csm_to_READ69,
   csm_to_READ70,
   csm_to_READ74,
   csm_to_ACK152,
   csm_to_RESPMSGWAIT80,
   csm_to__Wait5,
   csm_to_ST_Wait_Suc_Tra20,
   csm_to_ST_Wait_Suc_Rec19,
   csm_to_RESPMSGWAIT96,
   csm_to_ST_Done_Wait21,
   csm_to__Wait9,
   csm_to__Wait8,
   csm_to_ST_Wait_Suc_Tra21,
   csm_to_ST_Wait_Suc_Rec20,
   csm_to_RESPMSGWAIT97,
   csm_to_ST_Done_Wait22,
   csm_to__Wait10,
   csm_to_s3,
   csm_to_s4,
   csm_to_s5,
   csm_to__Wait6,
   csm_to__Wait11
)
begin : csm_wait_block_proc
   csm_timeout = (csm_timer == 17'd0);
   if (csm_to_READ65 == 1'b1) begin
      csm_next_timer = 17'd1499;  //no cycles(1500)-1=1499
   end
   else if (csm_to_ACK133 == 1'b1) begin
      csm_next_timer = 17'd1499;  //no cycles(1500)-1=1499
   end
   else if (csm_to_REQMSGWAIT67 == 1'b1) begin
      csm_next_timer = 17'd3999;  //no cycles(4000)-1=3999
   end
   else if (csm_to_RESPMSGWAIT66 == 1'b1) begin
      csm_next_timer = 17'd3999;  //no cycles(4000)-1=3999
   end
   else if (csm_to_READ66 == 1'b1) begin
      csm_next_timer = 17'd1499;  //no cycles(1500)-1=1499
   end
   else if (csm_to_ACK135 == 1'b1) begin
      csm_next_timer = 17'd1499;  //no cycles(1500)-1=1499
   end
   else if (csm_to_REQMSGWAIT68 == 1'b1) begin
      csm_next_timer = 17'd3999;  //no cycles(4000)-1=3999
   end
   else if (csm_to_RESPMSGWAIT67 == 1'b1) begin
      csm_next_timer = 17'd3999;  //no cycles(4000)-1=3999
   end
   else if (csm_to_READ67 == 1'b1) begin
      csm_next_timer = 17'd1499;  //no cycles(1500)-1=1499
   end
   else if (csm_to_ACK137 == 1'b1) begin
      csm_next_timer = 17'd1499;  //no cycles(1500)-1=1499
   end
   else if (csm_to_REQMSGWAIT69 == 1'b1) begin
      csm_next_timer = 17'd3999;  //no cycles(4000)-1=3999
   end
   else if (csm_to_RESPMSGWAIT68 == 1'b1) begin
      csm_next_timer = 17'd3999;  //no cycles(4000)-1=3999
   end
   else if (csm_to_ST_Done_Wait == 1'b1) begin
      csm_next_timer = 17'd4999;  //no cycles(5000)-1=4999
   end
   else if (csm_to_ST_Wait == 1'b1) begin
      csm_next_timer = 17'd19999;  //no cycles(20000)-1=19999
   end
   else if (csm_to_ST_counter_Wait1 == 1'b1) begin
      csm_next_timer = 17'd1999;  //no cycles(2000)-1=1999
   end
   else if (csm_to_RESPMSGWAIT85 == 1'b1) begin
      csm_next_timer = 17'd1499;  //no cycles(1500)-1=1499
   end
   else if (csm_to_ST_Wait_Suc_Rec1 == 1'b1) begin
      csm_next_timer = 17'd4999;  //no cycles(5000)-1=4999
   end
   else if (csm_to_ST_Wait_Suc_Tra10 == 1'b1) begin
      csm_next_timer = 17'd4999;  //no cycles(5000)-1=4999
   end
   else if (csm_to_ST_Wait_Suc_Rec10 == 1'b1) begin
      csm_next_timer = 17'd4999;  //no cycles(5000)-1=4999
   end
   else if (csm_to_RESPMSGWAIT87 == 1'b1) begin
      csm_next_timer = 17'd99999;  //no cycles(100000)-1=99999
   end
   else if (csm_to_ST_Wait_Suc_Tra11 == 1'b1) begin
      csm_next_timer = 17'd4999;  //no cycles(5000)-1=4999
   end
   else if (csm_to_ST_Wait_Suc_Rec11 == 1'b1) begin
      csm_next_timer = 17'd4999;  //no cycles(5000)-1=4999
   end
   else if (csm_to_RESPMSGWAIT88 == 1'b1) begin
      csm_next_timer = 17'd99999;  //no cycles(100000)-1=99999
   end
   else if (csm_to_ST_Wait_Suc_Tra12 == 1'b1) begin
      csm_next_timer = 17'd4999;  //no cycles(5000)-1=4999
   end
   else if (csm_to_ST_Wait_Suc_Rec12 == 1'b1) begin
      csm_next_timer = 17'd4999;  //no cycles(5000)-1=4999
   end
   else if (csm_to_RESPMSGWAIT89 == 1'b1) begin
      csm_next_timer = 17'd99999;  //no cycles(100000)-1=99999
   end
   else if (csm_to_ST_Wait_Suc_Tra14 == 1'b1) begin
      csm_next_timer = 17'd4999;  //no cycles(5000)-1=4999
   end
   else if (csm_to_ST_Done_Wait15 == 1'b1) begin
      csm_next_timer = 17'd1499;  //no cycles(1500)-1=1499
   end
   else if (csm_to_RESPMSGWAIT92 == 1'b1) begin
      csm_next_timer = 17'd1499;  //no cycles(1500)-1=1499
   end
   else if (csm_to_ST_Wait_Suc_Rec15 == 1'b1) begin
      csm_next_timer = 17'd4999;  //no cycles(5000)-1=4999
   end
   else if (csm_to_ST_Wait_Suc_Tra16 == 1'b1) begin
      csm_next_timer = 17'd4999;  //no cycles(5000)-1=4999
   end
   else if (csm_to_ST_Done_Wait17 == 1'b1) begin
      csm_next_timer = 17'd1499;  //no cycles(1500)-1=1499
   end
   else if (csm_to_RESPMSGWAIT93 == 1'b1) begin
      csm_next_timer = 17'd1499;  //no cycles(1500)-1=1499
   end
   else if (csm_to_ST_Wait_Suc_Rec16 == 1'b1) begin
      csm_next_timer = 17'd4999;  //no cycles(5000)-1=4999
   end
   else if (csm_to_ST_Wait_Suc_Tra17 == 1'b1) begin
      csm_next_timer = 17'd4999;  //no cycles(5000)-1=4999
   end
   else if (csm_to_ST_Done_Wait18 == 1'b1) begin
      csm_next_timer = 17'd1499;  //no cycles(1500)-1=1499
   end
   else if (csm_to_READ72 == 1'b1) begin
      csm_next_timer = 17'd999;  //no cycles(1000)-1=999
   end
   else if (csm_to_ACK148 == 1'b1) begin
      csm_next_timer = 17'd1499;  //no cycles(1500)-1=1499
   end
   else if (csm_to_RESPMSGWAIT78 == 1'b1) begin
      csm_next_timer = 17'd1499;  //no cycles(1500)-1=1499
   end
   else if (csm_to__Wait3 == 1'b1) begin
      csm_next_timer = 17'd19999;  //no cycles(20000)-1=19999
   end
   else if (csm_to__Wait4 == 1'b1) begin
      csm_next_timer = 17'd4999;  //no cycles(5000)-1=4999
   end
   else if (csm_to_ST_Wait_Suc_Tra19 == 1'b1) begin
      csm_next_timer = 17'd4999;  //no cycles(5000)-1=4999
   end
   else if (csm_to_ST_Wait_Suc_Rec18 == 1'b1) begin
      csm_next_timer = 17'd4999;  //no cycles(5000)-1=4999
   end
   else if (csm_to_RESPMSGWAIT95 == 1'b1) begin
      csm_next_timer = 17'd1499;  //no cycles(1500)-1=1499
   end
   else if (csm_to_ST_Done_Wait20 == 1'b1) begin
      csm_next_timer = 17'd14999;  //no cycles(15000)-1=14999
   end
   else if (csm_to__Wait7 == 1'b1) begin
      csm_next_timer = 17'd4999;  //no cycles(5000)-1=4999
   end
   else if (csm_to_READ69 == 1'b1) begin
      csm_next_timer = 17'd34999;  //no cycles(35000)-1=34999
   end
   else if (csm_to_READ70 == 1'b1) begin
      csm_next_timer = 17'd14999;  //no cycles(15000)-1=14999
   end
   else if (csm_to_READ74 == 1'b1) begin
      csm_next_timer = 17'd999;  //no cycles(1000)-1=999
   end
   else if (csm_to_ACK152 == 1'b1) begin
      csm_next_timer = 17'd1499;  //no cycles(1500)-1=1499
   end
   else if (csm_to_RESPMSGWAIT80 == 1'b1) begin
      csm_next_timer = 17'd1499;  //no cycles(1500)-1=1499
   end
   else if (csm_to__Wait5 == 1'b1) begin
      csm_next_timer = 17'd4999;  //no cycles(5000)-1=4999
   end
   else if (csm_to_ST_Wait_Suc_Tra20 == 1'b1) begin
      csm_next_timer = 17'd4999;  //no cycles(5000)-1=4999
   end
   else if (csm_to_ST_Wait_Suc_Rec19 == 1'b1) begin
      csm_next_timer = 17'd4999;  //no cycles(5000)-1=4999
   end
   else if (csm_to_RESPMSGWAIT96 == 1'b1) begin
      csm_next_timer = 17'd1499;  //no cycles(1500)-1=1499
   end
   else if (csm_to_ST_Done_Wait21 == 1'b1) begin
      csm_next_timer = 17'd14999;  //no cycles(15000)-1=14999
   end
   else if (csm_to__Wait9 == 1'b1) begin
      csm_next_timer = 17'd4999;  //no cycles(5000)-1=4999
   end
   else if (csm_to__Wait8 == 1'b1) begin
      csm_next_timer = 17'd999;  //no cycles(1000)-1=999
   end
   else if (csm_to_ST_Wait_Suc_Tra21 == 1'b1) begin
      csm_next_timer = 17'd4999;  //no cycles(5000)-1=4999
   end
   else if (csm_to_ST_Wait_Suc_Rec20 == 1'b1) begin
      csm_next_timer = 17'd4999;  //no cycles(5000)-1=4999
   end
   else if (csm_to_RESPMSGWAIT97 == 1'b1) begin
      csm_next_timer = 17'd1499;  //no cycles(1500)-1=1499
   end
   else if (csm_to_ST_Done_Wait22 == 1'b1) begin
      csm_next_timer = 17'd14999;  //no cycles(15000)-1=14999
   end
   else if (csm_to__Wait10 == 1'b1) begin
      csm_next_timer = 17'd4999;  //no cycles(5000)-1=4999
   end
   else if (csm_to_s3 == 1'b1) begin
      csm_next_timer = 17'd19999;  //no cycles(20000)-1=19999
   end
   else if (csm_to_s4 == 1'b1) begin
      csm_next_timer = 17'd19999;  //no cycles(20000)-1=19999
   end
   else if (csm_to_s5 == 1'b1) begin
      csm_next_timer = 17'd19999;  //no cycles(20000)-1=19999
   end
   else if (csm_to__Wait6 == 1'b1) begin
      csm_next_timer = 17'd19999;  //no cycles(20000)-1=19999
   end
   else if (csm_to__Wait11 == 1'b1) begin
      csm_next_timer = 17'd49999;  //no cycles(50000)-1=49999
   end
   else begin
      csm_next_timer = (csm_timeout)? 17'd0: (csm_timer - 17'd1);
   end
end // Wait State Block
endmodule // data_generator_SM
