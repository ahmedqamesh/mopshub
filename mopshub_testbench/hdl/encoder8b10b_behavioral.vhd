-- VHDL Entity mopshub_testbench.Encoder8b10b.symbol
--
-- Created:
--          by - dcs.dcs (chipdev2.physik.uni-wuppertal.de)
--          at - 14:10:06 04/06/22
--
-- Generated by Mentor Graphics' HDL Designer(TM) 2019.4 (Build 4)
--
----------------------------------------------------------------------------------
--! Company:  University and INFN Bologna  
--! Engineer: Nico Giangiacomi
--! 
--! Create Date:    02/02/2020 
--! Module Name:    Encoder8b10b
--! Project Name:   FELIX
--! Project description: Wrapper for 8b10b encoder
----------------------------------------------------------------------------------
--! Use standard library
LIBRARY IEEE;
USE IEEE.STD_LOGIC_1164.ALL;
LIBRARY mopshub_testbench;
USE mopshub_testbench.centralRouter_package.all;

-- ! a wrap for 8b10b decoder and alignment
-- 
ENTITY Encoder8b10b IS
   GENERIC( 
      GENERATE_FEI4B   : boolean := false;
      GENERATE_LCB_ENC : boolean := false      -- DG @ UBC
   );
   PORT( 
      reset       : IN     std_logic;                      --Active high reset
      clk40       : IN     std_logic;                      --BC clock for DataIn
      EnableIn    : IN     std_logic;
      DataIn      : IN     std_logic_vector (7 DOWNTO 0);  --8b Data from AxiStreamtoByte
      DataInValid : IN     std_logic;                      -- Data validated by AxiStreamtoByte
      EOP_in      : IN     std_logic;                      --End of Packet from AxiStreamtoByte
      toHostXoff  : IN     std_logic;
      readyIn     : IN     std_logic;                      --gearbox not ready
      readyOut    : OUT    std_logic;                      --m_axis_tready toward AxiStreamToByte
      DataOut     : OUT    std_logic_vector (9 DOWNTO 0)   --Towards GearBox
   );

-- Declarations

END Encoder8b10b ;

--
-- VHDL Architecture mopshub_testbench.Encoder8b10b.Behavioral
--
-- Created:
--          by - dcs.dcs (chipdev2.physik.uni-wuppertal.de)
--          at - 15:00:17 04/06/22
--
-- Generated by Mentor Graphics' HDL Designer(TM) 2019.4 (Build 4)
--


LIBRARY mopshub_testbench;

ARCHITECTURE Behavioral OF Encoder8b10b IS

   -- Architecture declarations

   -- Internal signal declarations
   SIGNAL toHostXoff_s : std_logic := '0';
   SIGNAL char_comma   : std_logic_vector(7 DOWNTO 0);
   SIGNAL char_SOP     : std_logic_vector(7 DOWNTO 0);
   SIGNAL char_EOP     : std_logic_vector(7 DOWNTO 0);
   SIGNAL char_SOB     : std_logic_vector(7 DOWNTO 0);
   SIGNAL char_EOB     : std_logic_vector(7 DOWNTO 0);
   SIGNAL isK          : std_logic;
   SIGNAL data_te      : std_logic_vector(7 DOWNTO 0);    --data ready to be encoded
   SIGNAL sendSOB      : std_logic;
   SIGNAL sendEOB      : std_logic;
   SIGNAL SOPSent      : std_logic;
   SIGNAL SendEOP      : std_logic;
   SIGNAL InsertIdle0  : std_logic;
   SIGNAL InsertIdle1  : std_logic;


   -- Component Declarations
   COMPONENT enc_8b10b
   PORT (
      reset   : IN     std_logic ;
      clk     : IN     std_logic ;
      ena     : IN     std_logic ;
      KI      : IN     std_logic ;                  -- Control (K) input(active high)
      datain  : IN     std_logic_vector (7 DOWNTO 0);
      dataout : OUT    std_logic_vector (9 DOWNTO 0)
   );
   END COMPONENT;

   -- Optional embedded configurations
   -- pragma synthesis_off
   FOR ALL : enc_8b10b USE ENTITY mopshub_testbench.enc_8b10b;
   -- pragma synthesis_on


BEGIN
   -- Architecture concurrent statements
   -- HDL Embedded Text Block 4 eb1
   readyOut <= readyIn and (not sendSOB) and (not sendEOB) and (SOPSent) and (not SendEOP) and (not InsertIdle0) and (not InsertIdle1);

   -- HDL Embedded Text Block 5 fromaxis_proc
   fromaxis_proc: process(clk40, EnableIn, char_comma, reset)
   begin
       if EnableIn = '0' or reset = '1' then --asynchronous, not sure this is ok
           isK          <= '1';
           data_te      <= char_comma;
           sendSOB <= '0';
           sendEOB <= '0';
           SOPSent <= '0';
           SendEOP <= '0';
           InsertIdle0 <= '0';
           InsertIdle1 <= '0';
       elsif rising_edge(clk40) then
       
           if (toHostXoff = '1' and toHostXoff_s = '0' and GENERATE_FEI4B=false and GENERATE_LCB_ENC=false ) then --XOFF rising edge
               sendSOB    <= '1';
           end if;
           if (toHostXoff = '0' and toHostXoff_s = '1' and GENERATE_FEI4B=false and GENERATE_LCB_ENC=false ) then --XOFF rising edge
               sendEOB    <= '1';
           end if;
           toHostXoff_s <= toHostXoff;
           
           if readyIn = '1' then
               isK          <= '1';
               if sendSOB = '1' then
                   data_te <= char_SOB;
                   sendSOB <= '0';
               elsif sendEOB = '1' then
                   data_te <= char_EOB;
                   sendEOB <= '0';
               elsif SOPSent = '0' and DataInValid = '1' then --Start of package
                   data_te <= char_SOP;
                   SOPSent <= '1';
               elsif SendEOP = '1' then
                   data_te <= char_EOP;
                   SendEOP <= '0';
                   InsertIdle0 <= '1';
               elsif InsertIdle0 = '1' then --After EOP insert 2 idles.
                   data_te <= char_comma;
                   InsertIdle0 <= '0';
                   InsertIdle1 <= '1';
               elsif InsertIdle1 = '1' then
                   data_te <= char_comma;
                   SOPSent <= '0';
                   InsertIdle1 <= '0';
               elsif DataInValid = '1' then
                   data_te <= DataIn;
                   isK          <= '0';
                   if EOP_in = '1' then
                       SendEOP <= '1';
                   end if;
               else
                   data_te <= char_comma;
               end if;
           end if;
       end if;
   end process;


   -- Instance port mappings.
   --  8b10b encoder
   -- 
   enc_8b10b_INST : enc_8b10b
      PORT MAP (
         reset   => reset,
         clk     => clk40,
         ena     => readyIn,
         KI      => isK,
         datain  => data_te,
         dataout => DataOut
      );

   GBT_mode: IF (GENERATE_FEI4B = false and GENERATE_LCB_ENC = false) GENERATE
   BEGIN
      -- HDL Embedded Text Block 1 GBT_mode
      char_comma  <=   Kchar_comma;
      char_SOP    <=   Kchar_sop;
      char_EOP    <=   Kchar_eop;
      char_SOB    <=   Kchar_sob;
      char_EOB    <=   Kchar_eob;

   END GENERATE GBT_mode;

   FEI4B: IF (GENERATE_FEI4B) GENERATE
   BEGIN
      -- HDL Embedded Text Block 2 FEI4B
      char_comma  <=   FEI4B_Kchar_comma;
      char_SOP    <=   FEI4B_Kchar_sop;
      char_EOP    <=   FEI4B_Kchar_eop;
      char_SOB    <=   x"00";
      char_EOB    <=   x"00";

   END GENERATE FEI4B;

   LCB: IF (GENERATE_FEI4B = false and GENERATE_LCB_ENC) GENERATE
   BEGIN
      -- HDL Embedded Text Block 3 LCB
      char_comma  <=   LCB_Kchar_comma;
      char_SOP    <=   LCB_Kchar_sop;
      char_EOP    <=   LCB_Kchar_eop;
      char_SOB    <=  x"00";
      char_EOB    <=  x"00";

   END GENERATE LCB;

END Behavioral;
