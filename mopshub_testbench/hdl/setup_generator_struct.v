//
// Module mopshub_testbench.setup_generator.struct
//
// Created:
//          by - dcs.dcs (chipdev2.physik.uni-wuppertal.de)
//          at - 10:50:39 01/11/22
//
// Generated by Mentor Graphics' HDL Designer(TM) 2019.4 (Build 4)
//

`resetall
`timescale 1ns/10ps
module setup_generator #(
   // synopsys template
   parameter n_buses              = 5'b11111,
   parameter seialize_data_stream = 1'b1
)
( 
   // Port Declarations
   input   wire            clk,                    // write FIFO clk
   output  wire            buffer_en, 
   input   wire            loop_en, 
   input   wire            start_read_elink, 
   input   wire            osc_auto_trim, 
   output  wire            reqmsg, 
   output  wire            respmsg, 
   output  wire    [31:0]  adc_ch, 
   output  wire            end_read_elink, 
   output  wire            trim_sig_start, 
   output  wire            test_rx_start, 
   output  wire    [75:0]  bus_dec_data, 
   input   wire            sel_bus, 
   output  wire            sign_in_end, 
   output  wire            sign_in_start, 
   output  wire            start_write_emulator, 
   input   wire            test_rx, 
   input   wire            test_tx, 
   output  wire            test_tx_end, 
   output  wire            test_rx_end, 
   output  wire            test_tx_start, 
   input   wire            test_mopshub_core, 
   output  wire            test_elink_data_done, 
   output  wire            trim_sig_end, 
   output  wire            trim_sig_done, 
   input   wire            clk_80, 
   input   wire            osc_auto_trim_mopshub, 
   input   wire            test_advanced, 
   input   wire    [4:0]   can_rec_select, 
   input   wire    [4:0]   power_bus_cnt, 
   input   wire            start_trim_osc, 
   input   wire    [75:0]  data_tra_downlink, 
   input   wire            start_init, 
   input   wire            end_init, 
   input   wire    [4:0]   can_tra_select, 
   input   wire    [75:0]  data_rec_uplink, 
   input   wire            end_trim_bus, 
   output  wire            costum_msg_end, 
   output  wire            costum_msg_start, 
   output  wire    [75:0]  bus_dec_data2
);


// Internal Declarations


// Local declarations

// Internal signal declarations
reg          rst                  = 1'b1;
reg   [7:0]  bus_id               = 8'b0;
reg          start_data_gen       = 1'b0;      // This dignal should start the SM and comes from TB
wire  [2:0]  state_o;
wire         clk_low;
wire         start;                            // To start Driver /generator
wire         read;                             // Prepare SDO read request
wire         write;                            // Prepare SDO write request
wire  [23:0] indexsubindex;                     // from state machine index and subindex to write and read. Index bytes are sent LSB first 
wire  [31:0] taildata;                         // Data which must be written to the chip 
wire  [63:0] data;                             // Complete 8 bytes of data to be sent in a custom message
wire         readadc;                          // indicates to read an ADC channel 
wire  [10:0] customcanid;                      // ID to be sent in a custom message
wire         custommsg;                        // To start a custom message
wire         txgen;
wire  [3:0]  dlc                  = 4'h8;      // "1" = wait for oscillator trimming before sign-in message 
wire  [10:0] id                   = 11'h601;   // here define the node id for the chip to communicate with 
wire         txdec;
wire         rxdec;
wire         tx_mopshub;
wire         rx_mopshub;
wire         end_write_emulator;
wire         reset;
wire         end_cnt_dbg          = 0;
wire         rx_elink1bit;
wire         tx_elink1bit;
wire  [1:0]  tx_elink2bit;
wire  [1:0]  rx_elink2bit;
wire         tx9;
wire         tx10;
wire         tx11;
wire         tx12;
wire         tx13;
wire         tx14;
wire         rx10;
wire         rx11;
wire         rx12;
wire         rx13;
wire         rx14;
wire         rx15;
wire         tx0_step2;
wire         tx0;
wire         tx1_step2;
wire         tx1;
wire         tx3;
wire         tx4;
wire         tx5;
wire         tx6;
wire         tx7;
wire         tx2;
wire         rx0_step2;
wire         rx0;
wire         rx1_step2;
wire         rx1;
wire         rx2;
wire         rx3;
wire         rx4;
wire         rx5;
wire         rx6;
wire         rx7;
wire         rxdec2;
wire         txdec2;
reg   [75:0] data_rec_76bit_reg   = 76'b0;
reg   [75:0] data_rec_76bit_reg2  = 76'b0;
wire  [75:0] bus_rec_out;
wire  [75:0] bus_rec_out2;
wire         irq_elink_rec1;
wire         irq_can_tra2;


// Instances 
mopshub_top #(n_buses,seialize_data_stream,1) Emulator_step1( 
   .clk                   (clk), 
   .clk_80                (clk_80), 
   .end_cnt_dbg           (end_cnt_dbg), 
   .osc_auto_trim_mopshub (osc_auto_trim_mopshub), 
   .reset                 (reset), 
   .rx0                   (rx0), 
   .rx1                   (rx1), 
   .rx2                   (rx2), 
   .rx3                   (rx3), 
   .rx4                   (rx4), 
   .rx5                   (rx5), 
   .rx6                   (rx6), 
   .rx7                   (rx7), 
   .rx_elink1bit          (rx_elink1bit), 
   .rx_elink2bit          (rx_elink2bit), 
   .irq_can_rec           (), 
   .irq_can_tra           (), 
   .irq_elink_rec         (irq_elink_rec1), 
   .irq_elink_tra         (), 
   .power_bus_en          (), 
   .rx_data_rdy           (), 
   .rx_fifo_full          (), 
   .tx0                   (tx0), 
   .tx1                   (tx1), 
   .tx2                   (tx2), 
   .tx3                   (tx3), 
   .tx4                   (tx4), 
   .tx5                   (tx5), 
   .tx6                   (tx6), 
   .tx7                   (tx7), 
   .tx_data_rdy           (), 
   .tx_efifo_full         (), 
   .tx_elink1bit          (tx_elink1bit), 
   .tx_elink2bit          (tx_elink2bit)
); 

mopshub_top #(n_buses,seialize_data_stream,1) Emulator_step2( 
   .clk                   (clk), 
   .clk_80                (clk_80), 
   .end_cnt_dbg           (end_cnt_dbg), 
   .osc_auto_trim_mopshub (osc_auto_trim_mopshub), 
   .reset                 (reset), 
   .rx0                   (rx0_step2), 
   .rx1                   (rx1_step2), 
   .rx2                   (rx10), 
   .rx3                   (rx11), 
   .rx4                   (rx12), 
   .rx5                   (rx13), 
   .rx6                   (rx14), 
   .rx7                   (rx15), 
   .rx_elink1bit          (tx_elink1bit), 
   .rx_elink2bit          (tx_elink2bit), 
   .irq_can_rec           (), 
   .irq_can_tra           (irq_can_tra2), 
   .irq_elink_rec         (), 
   .irq_elink_tra         (), 
   .power_bus_en          (), 
   .rx_data_rdy           (), 
   .rx_fifo_full          (), 
   .tx0                   (tx0_step2), 
   .tx1                   (tx1_step2), 
   .tx2                   (tx14), 
   .tx3                   (tx9), 
   .tx4                   (tx10), 
   .tx5                   (tx11), 
   .tx6                   (tx12), 
   .tx7                   (tx13), 
   .tx_data_rdy           (), 
   .tx_efifo_full         (), 
   .tx_elink1bit          (rx_elink1bit), 
   .tx_elink2bit          (rx_elink2bit)
); 

CANbus_decoder CANbus_decoder0( 
   .clk          (clk), 
   .rst          (rst), 
   .rx           (rxdec), 
   .data_rec_out (bus_rec_out), 
   .tx           (txdec)
); 

CANbus_decoder CANbus_decoder1( 
   .clk          (clk), 
   .rst          (rst), 
   .rx           (rxdec2), 
   .data_rec_out (bus_rec_out2), 
   .tx           (txdec2)
); 

can_bus_activity can_bus_activity0( 
   .clk                   (clk), 
   .rst                   (rst), 
   .bus_id                (bus_id), 
   .can_tra_select        (can_tra_select), 
   .can_rec_select        (can_rec_select), 
   .power_bus_cnt         (power_bus_cnt), 
   .start_init            (start_init), 
   .end_init              (end_init), 
   .trim_sig_start        (trim_sig_start), 
   .trim_sig_end          (trim_sig_end), 
   .sign_in_start         (sign_in_start), 
   .sign_in_end           (sign_in_end), 
   .test_tx               (test_tx), 
   .test_tx_start         (test_tx_start), 
   .test_tx_end           (test_tx_end), 
   .test_rx               (test_rx), 
   .test_rx_start         (test_rx_start), 
   .test_rx_end           (test_rx_end), 
   .test_mopshub_core     (test_mopshub_core), 
   .test_advanced         (test_advanced), 
   .costum_msg_start      (costum_msg_start), 
   .costum_msg_end        (costum_msg_end), 
   .osc_auto_trim         (osc_auto_trim), 
   .osc_auto_trim_mopshub (osc_auto_trim_mopshub), 
   .end_trim_bus          (end_trim_bus), 
   .start_trim_osc        (start_trim_osc), 
   .data_rec_uplink       (data_rec_uplink), 
   .data_tra_downlink     (data_tra_downlink), 
   .bus_dec_data          (bus_dec_data), 
   .reqmsg                (reqmsg), 
   .respmsg               (respmsg)
); 

canframegen canframegen_gen( 
   .clk           (clk), 
   .clk_low       (clk_low), 
   .rst_n         (rst), 
   .start         (start), 
   .read          (read), 
   .write         (write), 
   .random1000    (), 
   .indexsubindex (indexsubindex), 
   .rstchip       (), 
   .readadc       (readadc), 
   .allch         (), 
   .ch            (adc_ch), 
   .custommsg     (custommsg), 
   .dlc           (dlc), 
   .data          (data), 
   .id            (id), 
   .txgen         (txgen), 
   .doneranwire   (), 
   .finranmes     (), 
   .sendran       (), 
   .nextran       (), 
   .taildata      (taildata), 
   .customcanid   (customcanid)
); 

clk_div clk_div_gen( 
   .clk     (clk), 
   .clk_low (clk_low), 
   .rst     (rst)
); 

data_generator_SM data_generator_SM0( 
   .clk                  (clk), 
   .rst                  (rst), 
   .irq_elink_tra        (), 
   .state_o              (state_o), 
   .loop_en              (loop_en), 
   .start_read_elink     (start_read_elink), 
   .end_read_elink       (end_read_elink), 
   .txdec                (txdec2), 
   .cnt_done             (), 
   .counter_gen_en       (), 
   .buffer_en            (buffer_en), 
   .ch                   (adc_ch), 
   .custommsg            (custommsg), 
   .data                 (data), 
   .start                (start), 
   .reqmsg               (reqmsg), 
   .respmsg              (respmsg), 
   .indexsubindex        (indexsubindex), 
   .read                 (read), 
   .taildata             (taildata), 
   .write                (write), 
   .readadc              (readadc), 
   .customcanid          (customcanid), 
   .osc_auto_trim        (osc_auto_trim), 
   .sign_in_start        (sign_in_start), 
   .sign_in_end          (sign_in_end), 
   .test_rx              (test_rx), 
   .test_rx_start        (test_rx_start), 
   .test_rx_end          (test_rx_end), 
   .trim_sig_start       (trim_sig_start), 
   .trim_response_done   (), 
   .trim_sig_end         (trim_sig_end), 
   .start_data_gen       (start_data_gen), 
   .test_mopshub_core    (test_mopshub_core), 
   .sel_bus              (sel_bus), 
   .test_elink_data_done (test_elink_data_done), 
   .rst_cnt              (), 
   .rxdec                (rxdec2), 
   .start_write_emulator (start_write_emulator), 
   .test_tx              (test_tx), 
   .end_write_emulator   (end_write_emulator), 
   .test_tx_end          (test_tx_end), 
   .test_tx_start        (test_tx_start), 
   .rst_mops_dbg         (), 
   .trim_sig_done        (trim_sig_done), 
   .costum_msg_start     (costum_msg_start), 
   .costum_msg_end       (costum_msg_end), 
   .tx_mopshub           (tx_mopshub), 
   .rx_mopshub           (rx_mopshub), 
   .test_advanced        (test_advanced)
); 

// HDL Embedded Text Block 3 eb1

//Emulator 1                                        
//assign rx0   = ~(rst ^ (tx0 & txgen ));
//assign rxdec = rx0;
//assign tx_mopshub = tx0;
//assign rx_mopshub = rx0;
assign rx1   = ~(rst ^ (tx1 & txgen ));
assign rxdec = rx1;
assign tx_mopshub = tx1;
assign rx_mopshub = rx1;



//Emulator 2
//assign rx0_step2 =  ~(rst ^ (tx0_step2 & txdec2));
//assign rxdec2 = rx0_step2;

assign rx1_step2 =  ~(rst ^ (tx1_step2 & txdec2));
assign rxdec2 = rx1_step2;















// HDL Embedded Text Block 6 eb2
// eb1 1   
assign reset = !rst;                                     
// HDL Embedded Text Block 8 Data_rdy_signal2
//Save data into a buffer
assign bus_dec_data = data_rec_76bit_reg;
always@(posedge clk)//bitCLK)
begin 
  if (rst)
  begin
    data_rec_76bit_reg <= 76'b0;
  end
  if (irq_elink_rec1)
  begin
    data_rec_76bit_reg  <= {bus_rec_out[75:56], bus_rec_out[47:40], bus_rec_out[55:48],//b1Voted,b3Voted,b2Voted
                                 bus_rec_out[39:32], bus_rec_out[7:0]  , bus_rec_out[15:8],//b4Voted,b5Voted,b6Voted
                                 bus_rec_out[23:16], bus_rec_out[31:24]};//b7Voted,b8Voted} ; 
  end 
  else
  begin
   data_rec_76bit_reg  <= data_rec_76bit_reg ; 
  end
end  




































































































































// HDL Embedded Text Block 9 Data_rdy_signal3
//Save data into a buffer
assign bus_dec_data2 = data_rec_76bit_reg2;
always@(posedge clk)//bitCLK)
begin 
  if (rst)
  begin
    data_rec_76bit_reg2 <= 76'b0;
  end
  if (irq_can_tra2)
  begin
    data_rec_76bit_reg2  <= {bus_rec_out2[75:56], bus_rec_out2[47:40], bus_rec_out2[55:48],//b1Voted,b3Voted,b2Voted
                             bus_rec_out2[39:32], bus_rec_out2[7:0]  , bus_rec_out2[15:8],//b4Voted,b5Voted,b6Voted
                             bus_rec_out2[23:16], bus_rec_out2[31:24]};//b7Voted,b8Voted} ; 
  end 
  else
  begin
   data_rec_76bit_reg2  <= data_rec_76bit_reg2 ; 
  end
end  







































































































































// HDL Embedded Text Block 10 Data_rdy_signal4
  /////******* Reset Generator task--low active ****/////
  initial 
  begin
    rst = 1'b0;
    #10
    rst = 1'b1;
    #1500
    start_data_gen = 1'b1;
    #100
    start_data_gen = 1'b0;
  end 




































































































































endmodule // setup_generator

