//
// Module mopshub_testbench.mopshub_decoder.struct
//
// Created:
//          by - dcs.dcs (chipdev2.physik.uni-wuppertal.de)
//          at - 15:34:43 11/06/22
//
// Generated by Mentor Graphics' HDL Designer(TM) 2019.4 (Build 4)
//

`resetall
`timescale 1ns/10ps
module mopshub_decoder( 
   // Port Declarations
   input   wire            clk, 
   input   wire    [1:0]   rx_elink2bit, 
   input   wire            rst, 
   output  wire    [1:0]   tx_elink2bit, 
   input   wire            start_write_elink, 
   output  wire            end_write_elink,        // request to bridge FSM
   input   wire    [75:0]  data_rec_in, 
   output  wire            tx_emulator, 
   input   wire            start_read_elink, 
   input   wire    [31:0]  data_rec_spi_in, 
   input   wire            start_write_elink_spi, 
   output  wire            end_write_elink_spi
);


// Internal Declarations


// Local declarations

// Internal signal declarations
wire  [75:0] data_tra_out;
wire         irq_elink_tra;
wire         irq_elink_rec;
wire         end_read_elink;
wire         rx_fifo_full;
wire         tx_efifo_full;
wire         tx_data_rdy;
wire         rx_data_rdy;
wire         buffer_tra_en;
wire         fifo_flush          = 1'b0;
wire         timeoutrst          = 1'b0;   // timeout reset signal to the state machine in case bridge controller is not respoding for a specified time
wire         abort               = 1'b0;
wire  [9:0]  data_10bit_in_dbg;
wire         dbg_elink           = 1'b0;
wire         rdy_dbg;
wire  [7:0]  data_tra_mon_spi;
wire  [7:0]  spi_id;
wire  [7:0]  spi_tra_mon_select;
wire  [7:0]  spi_tra_mon_reg;
wire         spi_read_mode       = 1'b0;
wire         dbg_spi             = 1'b0;
wire         word10b_rdy;


// Instances 
elink_core elink_core_emulator( 
   .clk                   (clk), 
   .rst                   (rst), 
   .rx_fifo_full          (rx_fifo_full), 
   .data_rec_uplink       (data_rec_in), 
   .start_write_elink     (start_write_elink), 
   .tx_efifo_full         (tx_efifo_full), 
   .irq_elink_rec         (irq_elink_rec), 
   .irq_elink_tra         (irq_elink_tra), 
   .end_write_elink       (end_write_elink), 
   .start_read_elink      (start_read_elink), 
   .end_read_elink        (end_read_elink), 
   .data_2bit_in          (rx_elink2bit), 
   .data_2bit_out         (tx_elink2bit), 
   .fifo_flush            (fifo_flush), 
   .tx_data_rdy           (tx_data_rdy), 
   .rx_data_rdy           (rx_data_rdy), 
   .data_tra_out          (data_tra_out), 
   .buffer_tra_en         (buffer_tra_en), 
   .data_tra_mon_spi      (data_tra_mon_spi), 
   .irq_spi_tra           (), 
   .data_rec_spi_in       (data_rec_spi_in), 
   .end_write_elink_spi   (end_write_elink_spi), 
   .start_write_elink_spi (start_write_elink_spi), 
   .timeoutrst            (timeoutrst), 
   .spi_tra_mon_reg       (spi_tra_mon_reg), 
   .abort                 (abort), 
   .data_10bit_in_dbg     (data_10bit_in_dbg), 
   .dbg_elink             (dbg_elink), 
   .rdy_dbg               (rdy_dbg), 
   .spi_id                (spi_id), 
   .spi_tra_mon_select    (spi_tra_mon_select), 
   .spi_read_mode         (spi_read_mode), 
   .dbg_spi               (dbg_spi), 
   .word10b_rdy           (word10b_rdy)
); 

// HDL Embedded Text Block 6 Data_rdy_signal
//Save data into a buffer
assign tx_emulator = !irq_elink_tra;




































































































































endmodule // mopshub_decoder

