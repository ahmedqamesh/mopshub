//
// Module mopshub_testbench.mopshub_decoder.struct
//
// Created:
//          by - dcs.dcs (chipdev2.physik.uni-wuppertal.de)
//          at - 12:51:43 02/03/22
//
// Generated by Mentor Graphics' HDL Designer(TM) 2019.4 (Build 4)
//

`resetall
`timescale 1ns/10ps
module mopshub_decoder #(
   // synopsys template
   parameter seialize_data_stream = 1'b1
)
( 
   // Port Declarations
   input   wire            clk, 
   input   wire    [1:0]   rx_elink2bit, 
   input   wire            clk_80, 
   input   wire            rst, 
   output  wire    [75:0]  data_tra_out, 
   output  reg     [75:0]  data_tra_76bit_reg      = 76'b0, 
   output  wire    [1:0]   tx_elink2bit, 
   output  reg     [75:0]  data_rec_76bit_reg      = 76'b0, 
   input   wire            start_write_elink, 
   output  wire            end_write_elink,                  // request to bridge FSM
   input   wire    [75:0]  data_rec_in, 
   output  wire            tx_emulator, 
   output  wire            tx_elink1bit, 
   input   wire            rx_elink1bit, 
   input   wire            rx_din, 
   input   wire            enc_stream, 
   output  wire            tx_dout, 
   input   wire            start_read_elink, 
   input   wire    [31:0]  data_rec_spi_in, 
   input   wire            start_write_elink_spi, 
   output  wire            end_write_elink_spi
);


// Internal Declarations


// Local declarations

// Internal signal declarations
wire        irq_elink_tra;
wire        irq_elink_rec;
wire  [1:0] data_2bit_out;             //  @ 40MHz
reg         bitCount1       = 0;
reg         dout1bit_r      = 1'b1;
reg   [1:0] dout2bit_r      = 2'b10;
reg   [1:0] din2bit_r       = 2'b11;
reg   [1:0] data_2bit_in    = 2'b11;
wire        clk_en          = 1'b1;
wire        rl              = 1'b0;
wire        dout_in;
wire        tx_din;
wire        end_read_elink;
wire        rx_fifo_full;
wire        tx_efifo_full;
wire        tx_data_rdy;
wire        rx_data_rdy;
wire        buffer_tra_en;
wire        fifo_flush      = 1'b1;

// ModuleWare signal declarations(v1.12) for instance 'U_0' of 'shiftps'
reg mw_U_0reg_cval;
wire mw_U_0reg_nval;

// ModuleWare signal declarations(v1.12) for instance 'U_1' of 'shiftsp'
reg mw_U_1reg_cval;
wire mw_U_1reg_nval;


// Instances 
elink_core elink_core_emulator( 
   .rx_fifo_full          (rx_fifo_full), 
   .clk                   (clk), 
   .rst                   (rst), 
   .data_rec_uplink       (data_rec_in), 
   .start_write_elink     (start_write_elink), 
   .tx_efifo_full         (tx_efifo_full), 
   .irq_elink_rec         (irq_elink_rec), 
   .irq_elink_tra         (irq_elink_tra), 
   .data_tra_spi_out      (), 
   .data_tra_out          (data_tra_out), 
   .end_write_elink       (end_write_elink), 
   .start_read_elink      (start_read_elink), 
   .end_read_elink        (end_read_elink), 
   .buffer_tra_en         (buffer_tra_en), 
   .rx_data_rdy           (rx_data_rdy), 
   .tx_data_rdy           (tx_data_rdy), 
   .enc_stream            (enc_stream), 
   .data_2bit_in          (data_2bit_in), 
   .data_2bit_out         (data_2bit_out), 
   .fifo_flush            (fifo_flush), 
   .buffer_spi_tra_en     (), 
   .irq_spi_tra           (), 
   .data_rec_spi_in       (data_rec_spi_in), 
   .end_write_elink_spi   (end_write_elink_spi), 
   .start_write_elink_spi (start_write_elink_spi)
); 

// HDL Embedded Text Block 2 eb2
// HDL Embedded Text Block 1 serialization
//-------------------------------------------
//-- serialization of the 2-bit data output:
//-------------------------------------------                                       
always @(posedge clk_80)
begin
        bitCount1 <= ! bitCount1;
end


// HDL Embedded Text Block 4 eb4
//2 bits @ clk80, can interface 2-bit of GBT frame                                       
assign tx_elink2bit = data_2bit_out;//2 bits output
assign tx_elink1bit = dout1bit_r; //1 bit output
if (seialize_data_stream == 0) begin//:GBT_frame_case
always @(posedge clk)//serialized output with clk
    if(bitCount1 == 0)
      dout2bit_r <= data_2bit_out[0]; //serialize the first bit
    else
   begin 
    dout2bit_r <= data_2bit_out; //serialize the second bit which is filled in the other block ?bitCount1 = 0
   end
end
else begin//:Elink_frame_case 
   always @(posedge clk_80 )//serialized output
   begin
    if(bitCount1 == 0)
      begin
      dout1bit_r <= data_2bit_out[0]; //serialize the first bit
      end
    else
    begin
      dout1bit_r <= data_2bit_out[1]; //serialize the second bit which is filled in the other block ?bitCount1 = 0
      end
   end
end
































// HDL Embedded Text Block 6 Data_rdy_signal
//Save data into a buffer
assign tx_emulator = !irq_elink_tra;
always@(posedge clk )
begin 
  if (rst)
  begin
    data_tra_76bit_reg <= 76'b0;
  end
  if (irq_elink_tra)
  begin
    data_tra_76bit_reg <= data_tra_out; 
  end 
  else
  begin
   data_tra_76bit_reg <= data_tra_76bit_reg; 
  end
end  

//Save data into a buffer
always@(posedge clk)
begin 
  if (rst)
  begin
    data_rec_76bit_reg <= 76'b0;
  end
  if (irq_elink_rec)
  begin
    data_rec_76bit_reg  <= data_rec_in ; 
  end 
  else
  begin
   data_rec_76bit_reg  <= data_rec_76bit_reg ; 
  end
end  

































































































































// HDL Embedded Text Block 7 eb5
// Serialization
if (seialize_data_stream == 0)begin//:GBT_frame_case
  always@(posedge clk)
  if (!rst)
    begin
     data_2bit_in <= 2'b11;
    end
  else
    begin
      data_2bit_in <= rx_elink2bit;
    end 
  end
else begin//:Elink_frame_case
  always@(posedge clk_80 )
    if (!rst)
       din2bit_r <= 2'b11;
    else
      din2bit_r <= {rx_elink1bit,din2bit_r[1]};

  always@(posedge clk)
    if (!rst)
      data_2bit_in <= 2'b11;
  else
    begin
      data_2bit_in <= {din2bit_r[0],din2bit_r[1]};
    end      

end                                       
 







































// ModuleWare code(v1.12) for instance 'U_0' of 'shiftps'
assign tx_dout = mw_U_0reg_cval;
always @(posedge clk_80)
begin : u_0seq_proc
   if (clk_en)
      mw_U_0reg_cval = mw_U_0reg_nval;
end
assign mw_U_0reg_nval = (~rst) ? 1'd1
   : clk ? tx_din
   : rl ? mw_U_0reg_cval >> 1
   : mw_U_0reg_cval << 1;

// ModuleWare code(v1.12) for instance 'U_1' of 'shiftsp'
assign dout_in = mw_U_1reg_cval;
always @(posedge clk_80)
begin : u_1seq_proc
   if (clk_en)
      mw_U_1reg_cval = mw_U_1reg_nval;
end
assign mw_U_1reg_nval = (~rst) ? 1'd0
   : rl ? {rx_din,mw_U_1reg_cval} >> 1
   : {mw_U_1reg_cval,rx_din};

endmodule // mopshub_decoder

