//
// Module mopshub_testbench.mopshub_decoder.struct
//
// Created:
//          by - dcs.dcs (chipdev2.physik.uni-wuppertal.de)
//          at - 17:53:53 09/30/21
//
// Generated by Mentor Graphics' HDL Designer(TM) 2019.4 (Build 4)
//

`resetall
`timescale 1ns/10ps
module mopshub_decoder #(
   // synopsys template
   parameter generate_mopshub  = 0,
   parameter serialized_input  = 1,
   parameter Kchar_eop         = 8'b11011100,  // K28.6
   parameter Kchar_sop         = 8'b00111100,  // K28.1
   parameter serialized_output = 1
)
( 
   // Port Declarations
   input   wire            clk, 
   input   wire    [1:0]   rx_elink2bit, 
   input   wire            clk_80, 
   input   wire            swap_tx_bits, 
   input   wire            reverse_stream_10b_tx, 
   input   wire            reverse_stream_10b_rx, 
   input   wire            rst, 
   output  wire    [75:0]  data_tra_out, 
   output  reg     [75:0]  data_tra_76bit_reg      = 76'b0, 
   output  wire    [1:0]   tx_elink2bit, 
   output  reg     [75:0]  data_rec_76bit_reg      = 76'b0, 
   input   wire            start_write_elink, 
   output  wire            end_write_elink,                  // request to bridge FSM
   input   wire    [75:0]  data_rec_in, 
   output  wire    [7:0]   data_rec_8bitout, 
   output  wire    [1:0]   data_rec_delimiter, 
   output  wire            tx_elink1bit, 
   input   wire            rx_elink1bit, 
   input   wire            start_read_elink, 
   input   wire            clk_160
);


// Internal Declarations


// Local declarations

// Internal signal declarations
wire         fifo_flush;
wire         fifo_empty;
wire         elink_data_rdy;
wire         end_read_elink;              // request to bridge FSM 
reg          fifo_data_sop      = 1'b0;
reg          fifo_data_eop      = 1'b0;
wire         irq_elink_tra;
wire  [9:0]  data_rec_10bitout;
wire         cs_eread;
wire         cs_ewrite;
wire         irq_elink_rec;
wire  [75:0] gen_edata_tra;
wire         buffer_rec_en;
wire  [4:0]  addr_write;                  // request to caninterface block
wire  [4:0]  addr_read;                   // request to caninterface block
reg          fifo_data_packet;
wire  [9:0]  data_tra_10bitin;
wire  [9:0]  dec10b_Out_dbg;
wire         dec10b_rdy_dbg;
wire         enc10b_rdy_dbg;
wire  [9:0]  enc10b_in_dbg;
wire         efifo_empty;
wire         buffer_elink_en;
wire         buffer_tra_en;
wire         enc_stream         = 1'b1;
wire  [1:0]  data_2bit_out;               //  @ 40MHz
reg          bitCount1          = 0;
reg          dout1bit_r         = 1'b0;
reg   [1:0]  dout2bit_r         = 2'b0;
reg   [1:0]  din2bit_r          = 2'b0;
reg   [1:0]  data_2bit_in       = 2'b0;


// Instances 
buffer_rec_elink rec_elink_buf_emci( 
   .data_rec_in        (data_rec_in), 
   .addr               (addr_write), 
   .data_rec_8bitout   (data_rec_8bitout), 
   .data_rec_delimiter (data_rec_delimiter)
); 

buffer_tra_elink rec_elink_buf_decoder( 
   .clk             (clk), 
   .data_tra_8bitin (data_rec_8bitout), 
   .buffer_en       (buffer_rec_en), 
   .rst             (rst), 
   .addr            (addr_write), 
   .data_tra_out    (gen_edata_tra)
); 

buffer_tra_elink tra_elink_buf_emci( 
   .clk             (clk), 
   .data_tra_8bitin (data_tra_10bitin[7:0]), 
   .buffer_en       (buffer_elink_en), 
   .rst             (rst), 
   .addr            (addr_read), 
   .data_tra_out    (data_tra_out)
); 

elink_interface_rec_SM elink_interface_rec_SM_emci( 
   .abort             (), 
   .clk               (clk), 
   .rst               (rst), 
   .start_write_elink (start_write_elink), 
   .timeoutrst        (), 
   .addr_write        (addr_write), 
   .buffer_rec_en     (buffer_rec_en), 
   .cs_ewrite         (cs_ewrite), 
   .end_write_elink   (end_write_elink), 
   .irq_elink_rec     (irq_elink_rec), 
   .statedeb          ()
); 

elink_interface_tra_SM elink_interface_tra_SM_emci( 
   .abort            (), 
   .clk              (clk), 
   .fifo_data_eop    (fifo_data_eop), 
   .fifo_data_sop    (fifo_data_sop), 
   .fifo_elink_rdy   (elink_data_rdy), 
   .fifo_packet_rdy  (fifo_data_packet), 
   .rst              (rst), 
   .start_read_elink (start_read_elink), 
   .timeoutrst       (), 
   .addr_read        (addr_read), 
   .buffer_elink_en  (buffer_elink_en), 
   .buffer_tra_en    (buffer_tra_en), 
   .cs_eread         (cs_eread), 
   .end_read_elink   (end_read_elink), 
   .irq_elink_tra    (irq_elink_tra), 
   .statedeb         ()
); 

elink_to_fifo #(generate_mopshub) elink_to_fifo_emci( 
   .swap_rx_bits   (swap_tx_bits), 
   .fifo_empty     (fifo_empty), 
   .fifo_flush     (fifo_flush), 
   .fifo_full      (), 
   .fifo_dout      (data_tra_10bitin), 
   .clk            (clk), 
   .reverse_rx     (reverse_stream_10b_rx), 
   .fifo_rd_en     (cs_eread), 
   .fifo_wr_clk    (clk), 
   .dec10b_Out_dbg (dec10b_Out_dbg), 
   .data_2bit_in   (data_2bit_in), 
   .dec10b_rdy_dbg (dec10b_rdy_dbg), 
   .fifo_rd_clk    (clk), 
   .rst            (rst), 
   .enc_stream     (enc_stream), 
   .clk_160        (clk_160)
); 

fifo_to_elink fifo_to_elink_emci( 
   .fifo_wr_en            (cs_ewrite), 
   .clk                   (clk), 
   .fifo_din              (data_rec_10bitout), 
   .fifo_flush            (fifo_flush), 
   .reverse_stream_10b_tx (reverse_stream_10b_tx), 
   .swap_tx_bits          (swap_tx_bits), 
   .data_2bit_out         (data_2bit_out), 
   .enc10b_rdy_dbg        (enc10b_rdy_dbg), 
   .enc10b_in_dbg         (enc10b_in_dbg), 
   .efifo_empty           (efifo_empty), 
   .efifo_full            (), 
   .fifo_wr_clk           (clk), 
   .fifo_rd_clk           (clk), 
   .rst                   (rst), 
   .enc_stream            (enc_stream)
); 

// HDL Embedded Text Block 2 eb2
// HDL Embedded Text Block 1 serialization
//-------------------------------------------
//-- serialization of the 2-bit data output:
//-------------------------------------------                                       
always @(posedge clk_80)
begin
        bitCount1 <= ! bitCount1;
end


// HDL Embedded Text Block 4 eb4
// HDL Embedded Text Block 4 eb4
// eb4 4 
//2 bits @ clk80, can interface 2-bit of GBT frame                                       
assign tx_elink2bit = data_2bit_out;
assign tx_elink1bit = dout1bit_r; //1 bit output
if (serialized_output == 0) begin//:GBT_frame_case
always @(posedge clk)//serialized output with 160 clk
    if(bitCount1 == 0)
      dout2bit_r <= data_2bit_out[0]; //serialize the first bit
    else
   begin 
    dout2bit_r <= data_2bit_out; //serialize the second bit which is filled in the other block ?bitCount1 = 0
   end
end
else begin//:Elink_frame_case 
   always @(posedge clk_80 )//serialized output
   begin
    if(bitCount1 == 0)
      begin
      dout1bit_r <= data_2bit_out[0]; //serialize the first bit
      end
    else
    begin
      dout1bit_r <= data_2bit_out[1]; //serialize the second bit which is filled in the other block ?bitCount1 = 0
      end
   end
end


























// HDL Embedded Text Block 5 FIFO_read

//Check FIFO output
assign elink_data_rdy = !fifo_empty;
always@(data_tra_10bitin)
  begin
  if(data_tra_10bitin == {2'b10,Kchar_sop})// 0x3c = 0011 1100 SOP (if 8b10b)
      begin
        fifo_data_sop = 1'b1;
        fifo_data_eop = 1'b0;
        fifo_data_packet =1'b0;
      end 
    else if(cs_eread && data_tra_10bitin != {2'b10,Kchar_sop}&& data_tra_10bitin != {2'b01,Kchar_eop})// data
      begin
        fifo_data_sop = 1'b0;
        fifo_data_eop = 1'b0;
        fifo_data_packet = 1'b1;
      end   
    else if(data_tra_10bitin == {2'b01,Kchar_eop})// 0xdc = 1101 1100 (if 8b10b)
      begin
       fifo_data_sop = 1'b0;
       fifo_data_eop = 1'b1;
       fifo_data_packet =1'b0;
      end
    else  
      begin
       fifo_data_sop = 1'b0;
       fifo_data_eop = 1'b0;
       fifo_data_packet =1'b0;
      end    
  end






























































































































// HDL Embedded Text Block 6 Data_rdy_signal
//Save data into a buffer
always@(posedge clk )//bitCLK)
begin 
  if (rst)
  begin
    data_tra_76bit_reg <= 76'b0;
  end
  if (irq_elink_tra)
  begin
    data_tra_76bit_reg <= data_tra_out; 
  end 
  else
  begin
   data_tra_76bit_reg <= data_tra_76bit_reg; 
  end
end  

//Save data into a buffer
always@(posedge clk)//bitCLK)
begin 
  if (rst)
  begin
    data_rec_76bit_reg <= 76'b0;
  end
  if (irq_elink_rec)
  begin
    data_rec_76bit_reg  <= data_rec_in ; 
  end 
  else
  begin
   data_rec_76bit_reg  <= data_rec_76bit_reg ; 
  end
end  































































































































// HDL Embedded Text Block 7 eb5
// Serialization
if (serialized_input == 0)begin//:GBT_frame_case
  always@(posedge clk)
  if (!rst)
    begin
     data_2bit_in <= 2'b0;
    end
  else
    begin
      if(swap_tx_bits)
      data_2bit_in <= {rx_elink2bit[0],rx_elink2bit[1]}; 
      else
      data_2bit_in <= rx_elink2bit;
    end 
  end
else begin//:Elink_frame_case
  always@(posedge clk_80 )
    if (!rst)
       din2bit_r <= 2'b0;
    else
      din2bit_r <= {rx_elink1bit,din2bit_r[1]};

///swap the 2bits  
  always@(posedge clk)
    if (!rst)
      data_2bit_in <= 2'b0;
  else
    begin
      if(swap_tx_bits)
        data_2bit_in <= din2bit_r;
      else
        data_2bit_in <= {din2bit_r[0],din2bit_r[1]};
    end      

end                                       
 






























// HDL Embedded Text Block 8 reset
assign fifo_flush = !rst;  




































































































































// HDL Embedded Text Block 9 FIFO_write
assign data_rec_10bitout ={data_rec_delimiter,data_rec_8bitout}; 







































































































































endmodule // mopshub_decoder

