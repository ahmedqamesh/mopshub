//
// Module mopshub_testbench.mopshub_decoder.struct
//
// Created:
//          by - dcs.dcs (chipdev2.physik.uni-wuppertal.de)
//          at - 09:42:11 03/04/22
//
// Generated by Mentor Graphics' HDL Designer(TM) 2019.4 (Build 4)
//

`resetall
`timescale 1ns/10ps
module mopshub_decoder( 
   // Port Declarations
   input   wire            clk, 
   input   wire    [1:0]   rx_elink2bit, 
   input   wire            clk_80, 
   input   wire            rst, 
   output  wire    [75:0]  data_tra_out, 
   output  reg     [75:0]  data_tra_76bit_reg      = 76'b0, 
   output  wire    [1:0]   tx_elink2bit, 
   output  reg     [75:0]  data_rec_76bit_reg      = 76'b0, 
   input   wire            start_write_elink, 
   output  wire            end_write_elink,                  // request to bridge FSM
   input   wire    [75:0]  data_rec_in, 
   output  wire            tx_emulator, 
   output  wire            tx_elink1bit, 
   input   wire            rx_elink1bit, 
   input   wire            rx_din, 
   output  wire            tx_dout, 
   input   wire            start_read_elink, 
   input   wire    [31:0]  data_rec_spi_in, 
   input   wire            start_write_elink_spi, 
   output  wire            end_write_elink_spi, 
   input   wire            seialize_data_stream
);


// Internal Declarations


// Local declarations

// Internal signal declarations
wire        irq_elink_tra;
wire        irq_elink_rec;
wire  [1:0] data_2bit_out;                  //  @ 40MHz
reg         bitCount             = 0;
reg         dout1bit_r           = 1'b1;
reg   [1:0] data_2bit_in         = 2'b11;
wire        clk_en               = 1'b1;
wire        rl                   = 1'b0;
wire        end_read_elink;
wire        rx_fifo_full;
wire        tx_efifo_full;
wire        tx_data_rdy;
wire        rx_data_rdy;
wire        buffer_tra_en;
wire        fifo_flush           = 1'b0;
wire        timeoutrst           = 1'b0;    // timeout reset signal to the state machine in case bridge controller is not respoding for a specified time
wire        abort                = 1'b0;
wire  [1:0] data_2bit_inb;
reg   [1:0] data_2bit_in_serial  = 2'b11;
wire  [1:0] data_2bit_in_active;

// ModuleWare signal declarations(v1.12) for instance 'tx_emulate' of 'shiftps'
reg [1:0] mw_tx_emulatereg_cval;
wire [1:0] mw_tx_emulatereg_nval;

// ModuleWare signal declarations(v1.12) for instance 'rx_emulate' of 'shiftsp'
reg [1:0] mw_rx_emulatereg_cval;
wire [1:0] mw_rx_emulatereg_nval;


// Instances 
elink_core elink_core_emulator( 
   .clk                   (clk), 
   .rst                   (rst), 
   .rx_fifo_full          (rx_fifo_full), 
   .data_rec_uplink       (data_rec_in), 
   .start_write_elink     (start_write_elink), 
   .tx_efifo_full         (tx_efifo_full), 
   .irq_elink_rec         (irq_elink_rec), 
   .irq_elink_tra         (irq_elink_tra), 
   .end_write_elink       (end_write_elink), 
   .start_read_elink      (start_read_elink), 
   .end_read_elink        (end_read_elink), 
   .data_2bit_in          (data_2bit_in_active), 
   .data_2bit_out         (data_2bit_out), 
   .fifo_flush            (fifo_flush), 
   .tx_data_rdy           (tx_data_rdy), 
   .rx_data_rdy           (rx_data_rdy), 
   .data_tra_out          (data_tra_out), 
   .buffer_tra_en         (buffer_tra_en), 
   .data_tra_spi_out      (), 
   .irq_spi_tra           (), 
   .buffer_spi_tra_en     (), 
   .data_rec_spi_in       (data_rec_spi_in), 
   .end_write_elink_spi   (end_write_elink_spi), 
   .start_write_elink_spi (start_write_elink_spi), 
   .timeoutrst            (timeoutrst), 
   .abort                 (abort)
); 

// HDL Embedded Text Block 4 eb4
//2 bits @ clk80, can interface 2-bit of GBT frame                                       
assign tx_elink2bit = data_2bit_out;//2 bits output
assign tx_elink1bit = dout1bit_r; //1 bit output
//-------------------------------------------
//-- serialization of the 2-bit data output:
//-------------------------------------------                                       
always @(posedge clk_80)
begin
  bitCount <= ! bitCount;
end

 always @(posedge clk_80)
  if (!rst) dout1bit_r <= 1'b1;
  else
   begin
    if(bitCount == 0) dout1bit_r <= data_2bit_out[0]; //serialize the first bit
    else dout1bit_r <= data_2bit_out[1]; //serialize the second bit which is filled in the other block ?bitCount1 = 0
   end







































// HDL Embedded Text Block 6 Data_rdy_signal
//Save data into a buffer
assign tx_emulator = !irq_elink_tra;
always@(posedge clk )
begin 
  if (rst)
  begin
    data_tra_76bit_reg <= 76'b0;
  end
  if (irq_elink_tra)
  begin
    data_tra_76bit_reg <= data_tra_out; 
  end 
  else
  begin
   data_tra_76bit_reg <= data_tra_76bit_reg; 
  end
end  

//Save data into a buffer
always@(posedge clk)
begin 
  if (rst)
  begin
    data_rec_76bit_reg <= 76'b0;
  end
  if (irq_elink_rec)
  begin
    data_rec_76bit_reg  <= data_rec_in ; 
  end 
  else
  begin
   data_rec_76bit_reg  <= data_rec_76bit_reg ; 
  end
end  

































































































































// HDL Embedded Text Block 7 eb5
// Serialization
assign data_2bit_in_active = (seialize_data_stream ==1) ? data_2bit_in_serial : data_2bit_in;

always@(posedge clk)
if (!rst) data_2bit_in <= 2'b11;
else      data_2bit_in <= rx_elink2bit;

  
always@(posedge clk_80)
  if (!rst) data_2bit_in_serial <= 2'b11;
  else      data_2bit_in_serial <= {data_2bit_in_serial[0],rx_elink1bit}; 
                               
 







































// ModuleWare code(v1.12) for instance 'tx_emulate' of 'shiftps'
assign tx_dout = (bitCount) ? mw_tx_emulatereg_cval[0] : mw_tx_emulatereg_cval[1];
always @(posedge clk_80)
begin : tx_emulateseq_proc
   if (clk_en)
      mw_tx_emulatereg_cval = mw_tx_emulatereg_nval;
end
assign mw_tx_emulatereg_nval = (~rst) ? 2'd0
   : clk ? data_2bit_out
   : bitCount ? {mw_tx_emulatereg_cval[1],mw_tx_emulatereg_cval} >> 1
   : mw_tx_emulatereg_cval << 1;

// ModuleWare code(v1.12) for instance 'rx_emulate' of 'shiftsp'
assign data_2bit_inb = mw_rx_emulatereg_cval;
always @(posedge clk_80)
begin : rx_emulateseq_proc
   if (clk_en)
      mw_rx_emulatereg_cval = mw_rx_emulatereg_nval;
end
assign mw_rx_emulatereg_nval = (~rst) ? 2'd0
   : rl ? {rx_din,mw_rx_emulatereg_cval} >> 1
   : {mw_rx_emulatereg_cval,rx_din};

endmodule // mopshub_decoder

