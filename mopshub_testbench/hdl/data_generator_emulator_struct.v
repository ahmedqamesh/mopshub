//
// Module mopshub_testbench.data_generator_emulator.struct
//
// Created:
//          by - dcs.dcs (chipdev2.physik.uni-wuppertal.de)
//          at - 10:36:51 10/30/21
//
// Generated by Mentor Graphics' HDL Designer(TM) 2019.4 (Build 4)
//

`resetall
`timescale 1ns/10ps
module data_generator_emulator #(
   // synopsys template
   parameter SDO_TX               = 5'h0C,
   parameter n_buses              = 5'b11111,
   parameter seialize_data_stream = 1'b1,
   parameter generate_mopshub     = 1'b1
)
( 
   // Port Declarations
   input   wire            rst, 
   input   wire            clk,                            // write FIFO clk
   output  wire            buffer_en, 
   input   wire            loop_en, 
   input   wire            start_read_elink, 
   input   wire            osc_auto_trim, 
   output  wire            reqmsg, 
   output  wire            respmsg, 
   output  wire    [31:0]  adc_ch, 
   output  wire            rx0, 
   output  wire            end_read_elink, 
   output  wire            trim_sig_start, 
   output  wire            test_rx_start, 
   output  wire    [75:0]  bus_dec_data, 
   output  wire            rx1, 
   input   wire            tx0, 
   input   wire            tx1, 
   output  reg     [7:0]   bus_id                 = 8'b0, 
   input   wire            start_data_gen, 
   input   wire            sel_bus, 
   input   wire    [4:0]   bus_cnt, 
   output  wire            sign_in_end, 
   output  wire            sign_in_start, 
   input   wire            irq_can_ack, 
   output  wire    [1:0]   tx_elink2bit, 
   input   wire    [1:0]   rx_elink2bit, 
   input   wire            rx_elink1bit, 
   output  wire            tx_elink1bit, 
   output  wire            start_write_emulator, 
   input   wire            test_rx, 
   input   wire            test_tx, 
   output  wire            test_tx_end, 
   output  wire            test_rx_end, 
   output  wire            test_tx_start, 
   input   wire            test_mopshub_core, 
   output  wire            test_elink_data_done, 
   output  wire            rx2, 
   output  wire            rx3, 
   input   wire            tx2, 
   input   wire            tx3, 
   output  wire            rx4, 
   output  wire            rx5, 
   input   wire            tx4, 
   input   wire            tx5, 
   output  wire            rx6, 
   output  wire            trim_sig_end, 
   output  wire            rx7, 
   input   wire            tx6, 
   input   wire            ext_rst_mops, 
   input   wire            ext_trim_mops, 
   input   wire            tx7, 
   output  wire            trim_sig_done, 
   input   wire            clk_80
);


// Internal Declarations


// Local declarations

// Internal signal declarations
wire         rst_em;
wire         rx_em;
wire         tx_em;
reg          rst_mops;
reg   [75:0] data_rec_in            = 76'b0100000;
wire         start_read_emulator    = 1'b1;
wire         irq_elink;                              //  ena signal
wire  [4:0]  bus_loop_cnt;
wire  [11:0] sdoid;                                   // this is the actual ID of the CANOpen message for SDO objects
wire         counter_gen_en;
wire         counter_en;
wire  [2:0]  state_o;
reg          cnt_done;
wire         clk_low;
wire         start;                                  // To start Driver /generator
wire         read;                                   // Prepare SDO read request
wire         write;                                  // Prepare SDO write request
wire  [23:0] indexsubindex;                           // from state machine index and subindex to write and read. Index bytes are sent LSB first 
wire  [31:0] taildata;                               // Data which must be written to the chip 
wire  [63:0] data;                                   // Complete 8 bytes of data to be sent in a custom message
wire         readadc;                                // indicates to read an ADC channel 
wire  [10:0] customcanid;                            // ID to be sent in a custom message
wire         custommsg;                              // To start a custom message
wire         txgen;
wire  [3:0]  dlc                    = 4'h8;          // "1" = wait for oscillator trimming before sign-in message 
wire  [10:0] id                     = 11'h601;       // here define the node id for the chip to communicate with 
reg   [6:0]  can_nodeid             = 7'h1;           // Hardwired CANopen Node-ID for each DCS controller chip
wire         txmops_em;
wire         txmops;
wire         ready_osc_em;
wire         ready_osc;
wire         txdec;
reg   [31:0] payload                = 32'b0;
wire         rxdec;
wire         rxmops_em;
wire         rxmops;
wire  [4:0]  select_bus;
wire         rst_cnt;
wire         tx_mopshub;
wire         rx_mopshub;
wire         swap_bits              = 0;
wire         reverse_stream_10b_rx  = 0;
wire         reverse_stream_10b_tx  = 1;
wire         end_write_emulator;
wire  [75:0] data_rec_76bit_reg;
wire  [75:0] data_tra_76bit_reg;
wire         rst_mops_dbg;
wire         auto_trim_mops;
wire         enc_stream             = 1;
wire         reset;
wire         end_cnt_dbg            = 1'b0;
wire  [4:0]  can_tra_select_dbg     = 5'b0;
wire         osc_auto_trim_mopshub  = 1'b0;
wire         irq_can_rec_em;
wire         irq_can_tra_em;
wire         irq_elink_tra_em;
wire         irq_elink_rec_em;
wire         power_bus_en;


// Instances 
bit_counter bit_counter2( 
   .ext_rst    (rst_cnt), 
   .rst        (rst), 
   .data_out   (bus_loop_cnt), 
   .clk        (clk), 
   .cnt_enable (counter_en)
); 

mopshub_top #(n_buses,seialize_data_stream,generate_mopshub) mopshub_top_emulator( 
   .clk                   (clk), 
   .clk_80                (clk_80), 
   .end_cnt_dbg           (end_cnt_dbg), 
   .osc_auto_trim_mopshub (osc_auto_trim_mopshub), 
   .reset                 (reset), 
   .reverse_stream_10b_rx (reverse_stream_10b_rx), 
   .reverse_stream_10b_tx (reverse_stream_10b_tx), 
   .rx0                   (), 
   .rx1                   (rx_em), 
   .rx2                   (), 
   .rx3                   (), 
   .rx4                   (), 
   .rx5                   (), 
   .rx6                   (), 
   .rx7                   (), 
   .rx_elink1bit          (tx_elink1bit), 
   .rx_elink2bit          (tx_elink2bit), 
   .swap_bits             (swap_bits), 
   .irq_can_rec_dbg       (irq_can_rec_em), 
   .irq_can_tra_dbg       (irq_can_tra_em), 
   .irq_elink_rec         (irq_elink_rec_em), 
   .irq_elink_tra         (irq_elink_tra_em), 
   .mopshub_sm_dbg        (), 
   .power_bus_en          (power_bus_en), 
   .rx_data_rdy           (), 
   .rx_fifo_full          (), 
   .tx0                   (), 
   .tx1                   (tx_em), 
   .tx2                   (), 
   .tx3                   (), 
   .tx4                   (), 
   .tx5                   (), 
   .tx6                   (), 
   .tx7                   (), 
   .tx_data_rdy           (), 
   .tx_efifo_full         (), 
   .tx_elink1bit          (), 
   .tx_elink2bit          ()
); 

CANbus_decoder CANbus_decoder0( 
   .clk          (clk), 
   .rst          (rst), 
   .rx           (rxdec), 
   .data_rec_out (bus_dec_data), 
   .tx           (txdec)
); 

can_net_decoder can_net_decoder_Gen( 
   .clk           (clk), 
   .ext_rst_mops  (ext_rst_mops), 
   .ext_trim_mops (ext_trim_mops), 
   .osc_auto_trim (auto_trim_mops), 
   .rst           (rst), 
   .tx_mobshub0   (), 
   .tx_mobshub1   (), 
   .tx_mobshub2   (), 
   .tx_mobshub3   (), 
   .tx_mobshub4   (), 
   .tx_mobshub5   (), 
   .tx_mobshub6   (), 
   .rx_mobshub0   (), 
   .rx_mobshub1   (), 
   .rx_mobshub2   (), 
   .rx_mobshub3   (), 
   .rx_mobshub4   (), 
   .rx_mobshub5   (), 
   .rx_mobshub6   (), 
   .rx_mobshub7   ()
); 

canframegen canframegen_gen( 
   .clk           (clk), 
   .clk_low       (clk_low), 
   .rst_n         (rst), 
   .start         (start), 
   .read          (read), 
   .write         (write), 
   .random1000    (), 
   .indexsubindex (indexsubindex), 
   .rstchip       (), 
   .readadc       (readadc), 
   .allch         (), 
   .ch            (adc_ch), 
   .custommsg     (custommsg), 
   .dlc           (dlc), 
   .data          (data), 
   .id            (id), 
   .txgen         (txgen), 
   .doneranwire   (), 
   .finranmes     (), 
   .sendran       (), 
   .nextran       (), 
   .taildata      (taildata), 
   .customcanid   (customcanid)
); 

clk_div clk_div_gen( 
   .clk     (clk), 
   .clk_low (clk_low), 
   .rst     (rst)
); 

data_generator_SM data_generator_SM0( 
   .clk                  (clk), 
   .rst                  (rst), 
   .irq_elink            (irq_elink), 
   .state_o              (state_o), 
   .loop_en              (loop_en), 
   .start_read_elink     (start_read_elink), 
   .end_read_elink       (end_read_elink), 
   .txdec                (tx_mopshub), 
   .irq_can_ack          (irq_can_ack), 
   .cnt_done             (cnt_done), 
   .counter_gen_en       (counter_gen_en), 
   .buffer_en            (buffer_en), 
   .ch                   (adc_ch), 
   .custommsg            (custommsg), 
   .data                 (data), 
   .start                (start), 
   .reqmsg               (reqmsg), 
   .respmsg              (respmsg), 
   .indexsubindex        (indexsubindex), 
   .read                 (read), 
   .taildata             (taildata), 
   .write                (write), 
   .readadc              (readadc), 
   .customcanid          (customcanid), 
   .osc_auto_trim        (osc_auto_trim), 
   .sign_in_start        (sign_in_start), 
   .sign_in_end          (sign_in_end), 
   .test_rx              (test_rx), 
   .test_rx_start        (test_rx_start), 
   .test_rx_end          (test_rx_end), 
   .trim_sig_start       (trim_sig_start), 
   .trim_response_done   (ready_osc), 
   .trim_sig_end         (trim_sig_end), 
   .start_data_gen       (start_data_gen), 
   .test_mopshub_core    (test_mopshub_core), 
   .sel_bus              (sel_bus), 
   .test_elink_data_done (test_elink_data_done), 
   .rst_cnt              (rst_cnt), 
   .rxdec                (rx_mopshub), 
   .start_write_emulator (start_write_emulator), 
   .test_tx              (test_tx), 
   .end_write_emulator   (end_write_emulator), 
   .test_tx_end          (test_tx_end), 
   .test_tx_start        (test_tx_start), 
   .rst_mops_dbg         (rst_mops_dbg), 
   .trim_sig_done        (trim_sig_done)
); 

mops_top_level mops_top_level0( 
   .can_nodeid    (can_nodeid), 
   .clk           (clk), 
   .osc_auto_trim (auto_trim_mops), 
   .rst_n         (rst_mops), 
   .rxmops        (rxmops), 
   .ready_osc     (ready_osc), 
   .txmops        (txmops)
); 

mops_top_level mops_top_level1( 
   .can_nodeid    (can_nodeid), 
   .clk           (clk), 
   .osc_auto_trim (auto_trim_mops), 
   .rst_n         (rst_em), 
   .rxmops        (rxmops_em), 
   .ready_osc     (ready_osc_em), 
   .txmops        (txmops_em)
); 

mopshub_decoder #(generate_mopshub,8'b11011100,8'b00111100,seialize_data_stream) mopshub_decoder_emulator( 
   .clk                   (clk), 
   .rx_elink2bit          (rx_elink2bit), 
   .clk_80                (clk_80), 
   .swap_bits             (swap_bits), 
   .reverse_stream_10b_tx (reverse_stream_10b_tx), 
   .reverse_stream_10b_rx (reverse_stream_10b_rx), 
   .rst                   (rst), 
   .data_tra_out          (), 
   .data_tra_76bit_reg    (data_tra_76bit_reg), 
   .tx_elink2bit          (tx_elink2bit), 
   .data_rec_76bit_reg    (data_rec_76bit_reg), 
   .start_write_elink     (start_write_emulator), 
   .end_write_elink       (end_write_emulator), 
   .data_rec_in           (data_rec_in), 
   .data_rec_8bitout      (), 
   .data_rec_delimiter    (), 
   .tx_elink1bit          (tx_elink1bit), 
   .rx_elink1bit          (rx_elink1bit), 
   .start_read_elink      (start_read_emulator), 
   .enc_stream            (enc_stream)
); 

// HDL Embedded Text Block 1 data_loader
// data_loader 1
assign sdoid = {SDO_TX,can_nodeid}; //600+nodeid 
always @(posedge clk)
begin
  if(!rst)
  begin
    bus_id  <= 8'h20;
    data_rec_in <= {sdoid,32'h0, bus_id};
  end
  else
  case (select_bus)
    5'h0 : begin 
      bus_id  <= 8'h0; 
      data_rec_in  <= {sdoid,payload,bus_id, 8'h0,16'h0};
      
    end
    5'h1 : begin
      bus_id  <= 8'h1; 
      data_rec_in  <= {sdoid,payload,bus_id, 8'h0,16'h0};
      
    end
    5'h2 : begin 
      bus_id  <= 8'h2; 
      data_rec_in  <= {sdoid,payload,bus_id, 8'h0,16'h0};
      
    end
    5'h3 : begin 
      bus_id  <= 8'h3; 
      data_rec_in  <= {sdoid,payload,bus_id, 8'h0,16'h0};
      
    end
    5'h4 : begin 
      bus_id  <= 8'h4;
      data_rec_in  <= {sdoid,payload,bus_id, 8'h0,16'h0};
      
    end
    5'h5 : begin
      bus_id  <= 8'h5; 
      data_rec_in  <= {sdoid,payload,bus_id, 8'h0,16'h0};
      
    end
    5'h6 : begin 
      bus_id  <= 8'h6; 
      data_rec_in  <= {sdoid,payload,bus_id, 8'h0,16'h0};
      
    end
    5'h7 : begin 
      bus_id  <= 8'h7; 
      data_rec_in  <= {sdoid,payload,bus_id, 8'h0,16'h0};
      
    end
    5'h8 : begin 
      bus_id  <= 8'h8; 
      data_rec_in  <= {sdoid,payload,bus_id, 8'h0,16'h0};
      
    end
    5'h9 : begin 
      bus_id  <= 8'h9;
      data_rec_in  <= {sdoid,payload,bus_id, 8'h0,16'h0};
      
    end
    5'hA : begin 
      bus_id  <= 8'hA; 
      data_rec_in  <= {sdoid,payload,bus_id, 8'h0,16'h0};
      
    end
    5'hB : begin 
      bus_id  <= 8'hB; 
      data_rec_in  <= {sdoid,payload,bus_id, 8'h0,16'h0};
      
    end
    5'hC : begin 
      bus_id  <= 8'hC; 
      data_rec_in  <= {sdoid,payload,bus_id, 8'h0,16'h0};
      
    end
    5'hD : begin 
      bus_id  <= 8'hD; 
      data_rec_in  <= {sdoid,payload,bus_id, 8'h0,16'h0};
      
    end
    5'hE : begin 
      bus_id  <= 8'hE;
      data_rec_in  <= {sdoid,payload,bus_id, 8'h0,16'h0};
      
    end
    5'hF : begin 
      bus_id  <= 8'hF; 
      data_rec_in  <= {sdoid,payload,bus_id, 8'h0,16'h0};
      
    end
    5'h10 : begin 
      bus_id  <= 8'h10; 
      data_rec_in  <= {sdoid,payload,bus_id, 8'h0,16'h0};
      
    end
    5'h11 : begin 
      bus_id  <= 8'h11; 
      data_rec_in  <= {sdoid,payload,bus_id, 8'h0,16'h0};
      
    end
    5'h12 : begin 
      bus_id  <= 8'h12; 
      data_rec_in  <= {sdoid,payload,bus_id, 8'h0,16'h0};
      
    end
    5'h13 : begin 
      bus_id  <= 8'h13;
      data_rec_in  <= {sdoid,payload,bus_id, 8'h0,16'h0};
      
    end
    5'h14 : begin 
      bus_id  <= 8'h14; 
      data_rec_in  <= {sdoid,payload,bus_id, 8'h0,16'h0};
      
    end
    5'h15 : begin 
      bus_id  <= 8'h15; 
      data_rec_in  <= {sdoid,payload,bus_id, 8'h0,16'h0};
      
    end
    5'h16 : begin 
      bus_id  <= 8'h16; 
      data_rec_in  <= {sdoid,payload,bus_id, 8'h0,16'h0};
      
    end
    5'h17 : begin 
      bus_id  <= 8'h17;
      data_rec_in  <= {sdoid,payload,bus_id, 8'h0,16'h0};
      
    end
    5'h18 : begin 
      bus_id  <= 8'h18; 
      data_rec_in  <= {sdoid,payload,bus_id, 8'h0,16'h0};
      
    end
    5'h19 : begin 
      bus_id  <= 8'h19; 
      data_rec_in  <= {sdoid,payload,bus_id, 8'h0,16'h0};
      
    end
    5'h1A : begin 
      bus_id  <= 8'h1A; 
      data_rec_in  <= {sdoid,payload,bus_id, 8'h0,16'h0};
      
    end
    5'h1B : begin 
      bus_id  <= 8'h1B; 
      data_rec_in  <= {sdoid,payload,bus_id, 8'h0,16'h0};
      
    end
    5'h1C : begin 
      bus_id  <= 8'h1C;
      data_rec_in  <= {sdoid,payload,bus_id, 8'h0,16'h0};
      
    end 
    5'h1D : begin 
      bus_id  <= 8'h1D; 
      data_rec_in  <= {sdoid,payload,bus_id, 8'h0,16'h0};
      
    end
    5'h1E : begin 
      bus_id  <= 8'h1E; 
      data_rec_in  <= {sdoid,payload,bus_id, 8'h0,16'h0};
      
    end
    5'h1F : begin 
      bus_id  <= 8'h1F;
      data_rec_in  <= {sdoid,payload,bus_id, 8'h0,16'h0};
      
    end
    default: begin 
      bus_id  <= 8'h20;
      data_rec_in  <=  {sdoid,56'h0, bus_id, 8'h0,16'h0}; 
    end    
  endcase
//  else
//  begin 
//      bus_id  <= bus_id;
//      data_rec_in  <= data_rec_in; 
//    end  
end                                            





























































































// HDL Embedded Text Block 2 trigger_signal
always @(posedge clk)
  begin
    if (!rst)
    begin
    cnt_done <= 0;
    end
    else 
    begin
      case(bus_loop_cnt)
       n_buses:begin
          cnt_done <= 1;
        end
      default:begin
          cnt_done <= 0;
        end
      endcase
  end
end

















// HDL Embedded Text Block 3 rx_assign
assign select_bus =(sel_bus ==1'b1) ? bus_cnt: bus_loop_cnt;
assign rx0 = (select_bus == 5'd0) ? ~(rst ^ (tx0 & txgen & txmops)): 0;
assign rx1 = (select_bus == 5'd1) ? ~(rst ^ (tx1 & txgen & txmops)): 0;
assign rx2 = (select_bus == 5'd2) ? ~(rst ^ (tx2 & txgen & txmops)): 0;
assign rx3 = (select_bus == 5'd3) ? ~(rst ^ (tx3 & txgen & txmops)): 0;
assign rx4 = (select_bus == 5'd4) ? ~(rst ^ (tx4 & txgen & txmops)): 0;
assign rx5 = (select_bus == 5'd5) ? ~(rst ^ (tx5 & txgen & txmops)): 0;
assign rx6 = (select_bus == 5'd6) ? ~(rst ^ (tx6 & txgen & txmops)): 0;
assign rx7 = (select_bus == 5'd7) ? ~(rst ^ (tx7 & txgen & txmops)): 0;

assign rxdec       = rx_mopshub; 
assign rxmops      = rx_mopshub;
assign rx_mopshub  = ~(rst ^ (rx0 | rx1 | rx2 | rx3 | rx4  | rx5 | rx6 | rx7));
assign tx_mopshub  = ~(rst ^ (tx0 & tx1 & tx2 & tx3 & tx4& tx5 & tx6 & tx7));

































































































































































// HDL Embedded Text Block 4 channel_definition
always @(posedge clk)
begin
  if(!rst)
  payload <= {16'h0, 16'h0};
  else
  case (adc_ch)
    5'h0 : 
    begin 
      payload  <= {16'h4010, 16'h2301};
      
    end
    5'h1 : 
    begin
      payload  <= {16'h4010, 16'h2302};
      
    end
    5'h2 : 
    begin 
      payload  <= {16'h4010, 16'h2303};
      
    end
    5'h3 : 
    begin  
      payload  <= {16'h4000, 16'h2401};
      
    end
    5'h4 : 
    begin 
      payload  <= {16'h4000, 16'h2402};
    end
    5'h5 : 
    begin 
      payload  <= {16'h4000, 16'h2403};     
    end
    5'h6 : 
    begin 
      payload  <= {16'h4000, 16'h2404};  
    end
    5'h7 : 
    begin 
      payload  <= {16'h4000, 16'h2405};
      
    end
    5'h8 : 
    begin 
      payload  <= {16'h4000, 16'h2406};
      
    end
    5'h9 : 
    begin 
      payload  <= {16'h4000, 16'h2407};
      
    end
    5'hA : 
    begin  
      payload  <= {16'h4000, 16'h2408};
      
    end
    5'hB : 
    begin 
      payload  <= {16'h4000, 16'h2409};
      
    end
    5'hC : 
    begin 
      payload  <= {16'h4000, 16'h240A};
      
    end
    5'hD : 
    begin 
      payload  <= {16'h4000, 16'h240B};
      
    end
    5'hE : 
    begin 
      payload  <= {16'h4000, 16'h240C};
      
    end
    5'hF : 
    begin 
      payload  <= {16'h4000, 16'h240D};
      
    end
    5'h10 : 
    begin 
      payload  <= {16'h4000, 16'h240E};
      
    end
    5'h11 : 
    begin 
      payload  <= {16'h4000, 16'h240F};
      
    end
    5'h12 : 
    begin
      payload  <= {16'h4000, 16'h24010};
      
    end
    5'h13 : 
    begin
      payload  <= {16'h4000, 16'h24011};
      
    end
    5'h14 : 
    begin 
      payload  <= {16'h4000, 16'h24012};
      
    end
    5'h15 : 
    begin 
      payload  <= {16'h4000, 16'h24013};
      
    end
    5'h16 : 
    begin
      payload  <= {16'h4000, 16'h24014};
      
    end
    5'h17 : 
    begin
      payload  <= {16'h4000, 16'h24015};
      
    end
    5'h18 : 
    begin  
      payload  <= {16'h4000, 16'h24016};
      
    end
    5'h19 : 
    begin 
      payload  <= {16'h4000, 16'h24017};
      
    end
    5'h1A : 
    begin
      payload  <= {16'h4000, 16'h24018};
      
    end
    5'h1B : 
    begin 
      payload  <= {16'h4000, 16'h24019};
      
    end
    5'h1C : 
    begin
      payload  <= {16'h4000, 16'h2401A};
      
    end 
    5'h1D : 
    begin
      payload  <= {16'h4000, 16'h2401B};
      
    end
    5'h1E : 
    begin 
      payload  <= {16'h4000, 16'h2401C};
      
    end
    5'h1F : 
    begin 
      payload  <= {16'h4000, 16'h2401D};
      
    end
    5'h20 : begin 
      payload  <= {16'h4000, 16'h2401E};
      
    end
    5'h21 : 
    begin 
      payload  <= {16'h4000, 16'h2401F};
      
    end
    5'h22 : 
    begin 
      payload  <= {16'h4000, 16'h24020};
      
    end
    5'h23 : 
    begin 
      payload  <= {16'h4000, 16'h24021};
      
    end
    5'h24 : 
    begin 
      payload  <= {16'h4000, 16'h24022};
      
    end
    5'h25 : 
    begin 
      payload  <= {16'h4000, 16'h24023};
      
    end
    5'h26 : 
    begin 
      payload  <= {16'h4000, 16'h24024};
      
    end
    5'h27 : 
    begin 
      payload  <= {16'h4000, 16'h24025}; 
    end        
    default: 
    begin 
      payload  <= {16'h0, 16'h0};
    end    
  endcase
end                                            

















































































// HDL Embedded Text Block 5 rst_mops
assign auto_trim_mops = (ext_trim_mops||osc_auto_trim);
assign counter_en = (ext_rst_mops||counter_gen_en);
always@(posedge clk)
if (!rst)
rst_mops <=0;
else 
begin
if (rst_mops_dbg ==1 ||ext_rst_mops==1)
rst_mops <=0;
else
rst_mops <=1; 
end
















// HDL Embedded Text Block 6 rx_assign1
assign reset =!rst;
assign rst_em = power_bus_en; 
assign rx_em = ~(rst ^ (tx_em &txmops_em));
assign rxmops_em = rx_em;

















































































































































































endmodule // data_generator_emulator

