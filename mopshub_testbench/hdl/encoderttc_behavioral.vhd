-- VHDL Entity mopshub_testbench.EncoderTTC.symbol
--
-- Created:
--          by - dcs.dcs (chipdev2.physik.uni-wuppertal.de)
--          at - 14:10:15 04/06/22
--
-- Generated by Mentor Graphics' HDL Designer(TM) 2019.4 (Build 4)
--
----------------------------------------------------------------------------------
--! Company:  University and INFN Bologna  
--! Engineer: Nico Giangiacomi
--! 
--! Create Date:    02/02/2020 
--! Module Name:    EncoderTTC
--! Project Name:   FELIX
--! Project description: Wrapper for 8b10b encoder
----------------------------------------------------------------------------------
--! Use standard library
LIBRARY IEEE;
USE IEEE.STD_LOGIC_1164.ALL;
LIBRARY mopshub_testbench;
USE mopshub_testbench.centralRouter_package.all;
LIBRARY mopshub_testbench;
USE mopshub_testbench.FELIX_package.all;
USE ieee.numeric_std.ALL;

-- ! a wrap for 8b10b decoder and alignment
-- 
ENTITY EncoderTTC IS
   GENERIC( 
      MAX_OUTPUT : integer := 8
   );
   PORT( 
      clk40     : IN     std_logic;                                    --BC clock
      enable    : IN     std_logic;                                    --Active high enable
      TTCOption : IN     std_logic_vector (3 DOWNTO 0);
      TTCin     : IN     TTCin_data_type;
      ElinkOut  : OUT    std_logic_vector ((MAX_OUTPUT -1) DOWNTO 0)   --ElinkElinkOut
   );

-- Declarations

END EncoderTTC ;

--
-- VHDL Architecture mopshub_testbench.EncoderTTC.Behavioral
--
-- Created:
--          by - dcs.dcs (chipdev2.physik.uni-wuppertal.de)
--          at - 14:10:20 04/06/22
--
-- Generated by Mentor Graphics' HDL Designer(TM) 2019.4 (Build 4)
--


LIBRARY mopshub_testbench;

ARCHITECTURE Behavioral OF EncoderTTC IS

   -- Architecture declarations

   -- Internal signal declarations
   SIGNAL TTCin_r           : TTCin_data_type;                                                -- use to sync the TTCin vector with the extended BCR pulse.
   SIGNAL TTCin_r2          : std_logic;                                                      -- BCR signal. Use to extend the BCR two a pulse of 2 clocks for OCR.
   SIGNAL TTCin_r9          : std_logic;                                                      -- broadcast bit#7 signal. When set, extend the BCR to 2 clocks pulse (OCR indication).
   type ElinkOut_TTC_case_type is array(6 downto 0) of std_logic_vector(7 downto 0);
   SIGNAL ElinkOut_TTC_case : ElinkOut_TTC_case_type       := (others => (others => '0'));
   SIGNAL TTCOption_i       : std_logic_vector(2 DOWNTO 0) := (others => '0');


constant zeros8bit : std_logic_vector(7 downto 0) := x"00";

   -- Component Declarations
   COMPONENT MUX8_Nbit
   GENERIC (
      N : integer := 16
   );
   PORT (
      data0    : IN     std_logic_vector ((N-1) DOWNTO 0);
      data1    : IN     std_logic_vector ((N-1) DOWNTO 0);
      data2    : IN     std_logic_vector ((N-1) DOWNTO 0);
      data3    : IN     std_logic_vector ((N-1) DOWNTO 0);
      data4    : IN     std_logic_vector ((N-1) DOWNTO 0);
      data5    : IN     std_logic_vector ((N-1) DOWNTO 0);
      data6    : IN     std_logic_vector ((N-1) DOWNTO 0);
      data7    : IN     std_logic_vector ((N-1) DOWNTO 0);
      sel      : IN     std_logic_vector (2 DOWNTO 0);
      data_out : OUT    std_logic_vector ((N-1) DOWNTO 0)
   );
   END COMPONENT;

   -- Optional embedded configurations
   -- pragma synthesis_off
   FOR ALL : MUX8_Nbit USE ENTITY mopshub_testbench.MUX8_Nbit;
   -- pragma synthesis_on


BEGIN
   -- Architecture concurrent statements
   -- HDL Embedded Text Block 1 output_select
   output_select: process(clk40)
      begin
         if rising_edge(clk40) then
            -- synchronous reset
            if (enable = '0') then
               for i in 0 to 5 loop
                  ElinkOut_TTC_case(i)       <= (others => '0');
               end loop;
            else
               --IG:                             | B-chan  |  L1A    | 
               ElinkOut_TTC_case(0) <= "000000" & TTCin.Bchan &  TTCin.L1A;
               --IG:                        | B-chan     |  ECR   |  BCR  |  L1A    | 
               ElinkOut_TTC_case(1) <= x"0" & TTCin.Bchan & TTCin.ECR & TTCin.BCR & TTCin.L1A;
               --IG:                |  B-chan   | Brc_d4(3 downto 0) |  ECR     |  BCR       |  L1A    | 
               ElinkOut_TTC_case(2) <= TTCin.Bchan & TTCin.Brcst(3 downto 0) & TTCin.ECR & TTCin.BCR & TTCin.L1A;
               --IG:                |  L1A         | Soft Reset       | Test Pulse               |  ECR         |  BCR     |  L0A*       |  SCA             |  EC0R     | 
               ElinkOut_TTC_case(3) <= TTCin_r.L1A & TTCin_r.Brcst(1) & TTCin_r.ExtendedTestPulse & TTCin_r.ECR & TTCin_r2 & TTCin_r.L1A & TTCin_r.Brcst(3) & TTCin_r.ECR; --IG: duplicate L1A over L0A
               --IG:                          |  BCR    |  BCR     |  BCR     |  BCR    | 
               ElinkOut_TTC_case(4) <= x"0" & (TTCin.BCR & TTCin.BCR & TTCin.BCR & TTCin.BCR); -- expend BCR signal over the entire 25nSec (4x BCR bit)
               --IG:                              | BCR      |  BCRd   |
               ElinkOut_TTC_case(5) <= "000000" & (TTCin.BCR & TTCin_r.BCR);
               --IG:                |  L1A         | Latched Soft Reset | Test Pulse               |  ECR         |  BCR     |  L0A*       |  SCA             |  EC0R     | 
                   ElinkOut_TTC_case(6) <= TTCin_r.L1A & TTCin_r.Brcst_latched(1) & TTCin_r.ExtendedTestPulse & TTCin_r.ECR & TTCin_r2 & TTCin_r.L1A & TTCin_r.Brcst(3) & TTCin_r.ECR;
   
               TTCOption_i<=TTCOption(2 downto 0);
            end if;
         end if;
      end process output_select;

   -- HDL Embedded Text Block 2 eb1
   --
      -- sample the TTCin vector to support OCR modification
      process(clk40)
      begin
            if rising_edge(clk40) then
                  -- synchronous enable
                  if (enable = '0') then
                        TTCin_r     <= TTCin_zero;
                  else
                        TTCin_r     <= TTCin;
                  end if;
            end if;
      end process;

   -- HDL Embedded Text Block 3 eb2
   -- set the OCR indication
      process(clk40)
      begin
            if rising_edge(clk40) then
                  -- synchronous enable
                  if (enable = '0') then
                        TTCin_r9      <= '0';
                  -- OCR indication set
                  elsif (TTCin.Brcst(5) = '1') then
                        TTCin_r9      <= '1';
                  -- clear the OCR indication when OCR indication set and BCR arrive
                  elsif ((TTCin_r9 = '1') and (TTCin_r2 = '1')) then
                        TTCin_r9      <= '0';
                  -- keep the OCR indication value
                  else
                        TTCin_r9      <= TTCin_r9;
                  end if;
            end if;
      end process;

   -- HDL Embedded Text Block 4 eb3
   -- determine the BCR value
      process(clk40)
      begin
            if rising_edge(clk40) then
                  -- synchronous enable
                  if (enable = '0') then
                        TTCin_r2      <= '0';
                  -- BCR arrive
                  elsif (TTCin.BCR = '1') then
                        TTCin_r2      <= '1';
                  -- OCR indication set and BCR arrive
                  elsif ((TTCin_r9 = '1') and (TTCin_r2 = '1')) then
                        TTCin_r2      <= '1';
                  -- default value
                  else
                        TTCin_r2      <= '0';
                  end if;
            end if;
      end process;


   -- Instance port mappings.
   -- -----------------------------------------------------------------------------------------
   --  output data and busy according to the encoding settings
   -- -----------------------------------------------------------------------------------------
   -- 
   dataOUTmux : MUX8_Nbit
      GENERIC MAP (
         N => MAX_OUTPUT
      )
      PORT MAP (
         sel => TTCOption_i,
         data_out => ElinkOut(MAX_OUTPUT-1 downto 0),
         data0 => ElinkOut_TTC_case(0)(MAX_OUTPUT-1 downto 0),
         data1 => ElinkOut_TTC_case(1)(MAX_OUTPUT-1 downto 0),
         data2 => ElinkOut_TTC_case(2)(MAX_OUTPUT-1 downto 0),
         data3 => ElinkOut_TTC_case(3)(MAX_OUTPUT-1 downto 0),
         data4 => ElinkOut_TTC_case(4)(MAX_OUTPUT-1 downto 0),
         data5 => ElinkOut_TTC_case(5)(MAX_OUTPUT-1 downto 0),
         data6 => zeros8bit(MAX_OUTPUT-1 downto 0),
         data7 => zeros8bit(MAX_OUTPUT-1 downto 0)
      );

END Behavioral;
