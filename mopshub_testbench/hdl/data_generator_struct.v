//
// Module mopshub_testbench.data_generator.struct
//
// Created:
//          by - dcs.dcs (chipdev2.physik.uni-wuppertal.de)
//          at - 17:01:59 02/02/24
//
// Generated by Mentor Graphics' HDL Designer(TM) 2019.4 (Build 4)
//

`resetall
`timescale 1ns/10ps
module data_generator #(
   // synopsys template
   parameter SDO_TX = 5'h0C
)
( 
   // Port Declarations
   input   wire            rst, 
   input   wire            clk,                    // write FIFO clk
   input   wire            start_read_elink, 
   output  wire    [31:0]  adc_ch, 
   output  wire            rx0, 
   output  wire            end_read_elink, 
   output  wire            test_rx_start, 
   output  wire    [75:0]  bus_dec_data, 
   output  wire            rx1, 
   input   wire            tx0, 
   input   wire            tx1, 
   output  wire    [7:0]   bus_id, 
   input   wire            sign_on_sig, 
   input   wire            sel_bus, 
   input   wire    [4:0]   bus_cnt, 
   output  wire    [1:0]   tx_elink2bit, 
   input   wire    [1:0]   rx_elink2bit, 
   input   wire            test_rx, 
   input   wire            test_tx, 
   output  wire            test_tx_end, 
   output  wire            test_rx_end, 
   output  wire            test_tx_start, 
   input   wire            test_mopshub_core, 
   output  wire            test_elink_data_done, 
   output  wire            rx2, 
   output  wire            rx3, 
   input   wire            tx2, 
   input   wire            tx3, 
   output  wire            rx4, 
   output  wire            rx5, 
   input   wire            tx4, 
   input   wire            tx5, 
   output  wire            rx6, 
   output  wire            rx7, 
   input   wire            tx6, 
   input   wire            ext_rst_mops, 
   input   wire            ext_trim_mops, 
   input   wire            tx7, 
   input   wire    [75:0]  data_rec_uplink, 
   input   wire    [75:0]  data_tra_downlink, 
   input   wire            start_init, 
   input   wire            end_init, 
   input   wire    [4:0]   can_tra_select, 
   input   wire            end_trim_bus, 
   input   wire            osc_auto_trim_mopshub, 
   input   wire    [4:0]   power_bus_cnt, 
   input   wire            start_trim_osc, 
   input   wire    [4:0]   can_rec_select, 
   input   wire            test_advanced, 
   output  wire            test_advanced_end, 
   output  wire            rx10, 
   output  wire            rx11, 
   output  wire            rx12, 
   output  wire            rx13, 
   output  wire            rx14, 
   output  wire            rx15, 
   output  wire            rx8, 
   output  wire            rx9, 
   input   wire            tx10, 
   input   wire            tx11, 
   input   wire            tx12, 
   input   wire            tx13, 
   input   wire            tx14, 
   input   wire            tx15, 
   input   wire            tx8, 
   input   wire            tx9, 
   output  wire            rx16, 
   output  wire            rx17, 
   output  wire            rx18, 
   output  wire            rx19, 
   output  wire            rx20, 
   output  wire            rx21, 
   output  wire            rx22, 
   output  wire            rx23, 
   input   wire            tx16, 
   input   wire            tx17, 
   input   wire            tx18, 
   input   wire            tx19, 
   input   wire            tx20, 
   input   wire            tx21, 
   input   wire            tx22, 
   input   wire            tx23, 
   output  wire            rx24, 
   output  wire            rx25, 
   output  wire            rx26, 
   output  wire            rx27, 
   output  wire            rx28, 
   output  wire            rx29, 
   output  wire            rx30, 
   output  wire            rx31, 
   input   wire            tx24, 
   input   wire            tx25, 
   input   wire            tx26, 
   input   wire            tx27, 
   input   wire            tx28, 
   input   wire            tx29, 
   input   wire            tx30, 
   input   wire            tx31, 
   input   wire            clk_mops, 
   input   wire    [4:0]   n_buses, 
   input   wire            clk_elink, 
   input   wire    [4:0]   bus_cnt_power, 
   input   wire    [75:0]  data_tra_mon_spi, 
   input   wire    [75:0]  data_tra_power_spi
);


// Internal Declarations


// Local declarations

// Internal signal declarations
wire         start_write_emulator;
wire         buffer_en;
wire         irq_elink_tra;                           //  ena signal
reg   [75:0] data_rec_decoder;
wire         start_read_emulator         = 1'b1;
wire  [4:0]  bus_loop_cnt;
wire  [11:0] sdoid;                                    // this is the actual ID of the CANOpen message for SDO objects
wire         start;                                   // To start Driver /generator
wire         read;                                    // Prepare SDO read request
wire         write;                                   // Prepare SDO write request
wire  [23:0] indexsubindex;                            // from state machine index and subindex to write and read. Index bytes are sent LSB first 
wire  [31:0] taildata;                                // Data which must be written to the chip 
wire  [63:0] data;                                    // Complete 8 bytes of data to be sent in a custom message
wire         readadc;                                 // indicates to read an ADC channel 
wire  [10:0] customcanid;                             // ID to be sent in a custom message
wire         custommsg;                               // To start a custom message
wire         txgen;
wire  [3:0]  dlc                         = 4'd8;      // "1" = wait for oscillator trimming before sign-in message 
wire  [10:0] id                          = 11'h601;   // here define the node id for the chip to communicate with 
reg   [6:0]  can_nodeid                  = 7'h1;       // Hardwired CANopen Node-ID for each DCS controller chip
wire         ready_osc;
reg   [31:0] payload                     = 32'b0;
wire         rxdec;
wire  [4:0]  select_bus;
wire         tx_mopshub;
wire         rx_mopshub;
wire         end_write_emulator;
wire         const_val;
wire  [75:0] data_rec_decoder_spi;
wire         tx_emulator;
wire         start_write_emulator_spi;
wire         end_write_emulator_spi;
wire         test_simult;
wire         respmsg;                                 // Indicates a reponse from the MOPS chip 
wire         reqmsg;                                  // Indicates a sent request to the testbench
wire         test_advanced_start;
wire         finranmes;
wire  [31:0] sim_failures;
wire         txdec_active;
wire         txdec;
wire         clk_bus;                                 // This clock is equal to bus speed
wire         no_respmsg;
wire  [75:0] data_tra_decoder;
wire  [75:0] requestreg;
wire  [75:0] responsereg;
wire         random1000;
wire         nextran;
wire         sendran;
wire         doneranwire;
wire  [7:0]  data_out_counter;
wire  [7:0]  counter8bit_limit;
wire         test_spi;
wire  [75:0] data_tra_mon_decoder_spi;
wire  [75:0] data_tra_power_decoder_spi;
wire  [75:0] response_cld;


// Instances 
can_bus_activity_wrapper can_bus_activity_wrapper0( 
   .clk                   (clk), 
   .rst                   (rst), 
   .bus_id                (bus_id), 
   .n_buses               (n_buses), 
   .can_tra_select        (can_tra_select), 
   .can_rec_select        (can_rec_select), 
   .power_bus_cnt         (power_bus_cnt), 
   .start_init            (start_init), 
   .end_init              (end_init), 
   .test_tx               (test_tx), 
   .test_tx_start         (test_tx_start), 
   .test_tx_end           (test_tx_end), 
   .test_rx               (test_rx), 
   .test_rx_start         (test_rx_start), 
   .test_rx_end           (test_rx_end), 
   .test_advanced         (test_advanced), 
   .test_spi              (test_spi), 
   .random1000            (random1000), 
   .test_advanced_start   (test_advanced_start), 
   .test_advanced_end     (test_advanced_end), 
   .request_data          (requestreg), 
   .response_data         (responsereg), 
   .osc_auto_trim_mopshub (osc_auto_trim_mopshub), 
   .end_trim_bus          (end_trim_bus), 
   .start_trim_osc        (start_trim_osc), 
   .bus_dec_data          (bus_dec_data), 
   .reqmsg                (reqmsg), 
   .respmsg               (respmsg), 
   .no_respmsg            (no_respmsg)
); 

can_net_decoder can_net_decoder_Gen( 
   .bus_cnt       (bus_cnt), 
   .bus_loop_cnt  (bus_loop_cnt), 
   .clk           (clk), 
   .clk_mops      (clk_mops), 
   .ext_rst_mops  (ext_rst_mops), 
   .ext_trim_mops (ext_trim_mops), 
   .power_bus_cnt (power_bus_cnt), 
   .random1000    (random1000), 
   .rst           (rst), 
   .sel_bus       (sel_bus), 
   .test_advanced (test_advanced), 
   .test_simult   (test_simult), 
   .tx_mopshub0   (tx0), 
   .tx_mopshub1   (tx1), 
   .tx_mopshub10  (tx10), 
   .tx_mopshub11  (tx11), 
   .tx_mopshub12  (tx12), 
   .tx_mopshub13  (tx13), 
   .tx_mopshub14  (tx14), 
   .tx_mopshub15  (tx15), 
   .tx_mopshub16  (tx16), 
   .tx_mopshub17  (tx17), 
   .tx_mopshub18  (tx18), 
   .tx_mopshub19  (tx19), 
   .tx_mopshub2   (tx2), 
   .tx_mopshub20  (tx20), 
   .tx_mopshub21  (tx21), 
   .tx_mopshub22  (tx22), 
   .tx_mopshub23  (tx23), 
   .tx_mopshub24  (tx24), 
   .tx_mopshub25  (tx25), 
   .tx_mopshub26  (tx26), 
   .tx_mopshub27  (tx27), 
   .tx_mopshub28  (tx28), 
   .tx_mopshub29  (tx29), 
   .tx_mopshub3   (tx3), 
   .tx_mopshub30  (tx30), 
   .tx_mopshub31  (tx31), 
   .tx_mopshub4   (tx4), 
   .tx_mopshub5   (tx5), 
   .tx_mopshub6   (tx6), 
   .tx_mopshub7   (tx7), 
   .tx_mopshub8   (tx8), 
   .tx_mopshub9   (tx9), 
   .txdec         (txdec), 
   .txgen         (txgen), 
   .ready_osc     (ready_osc), 
   .rx_mopshub    (rx_mopshub), 
   .rx_mopshub0   (rx0), 
   .rx_mopshub1   (rx1), 
   .rx_mopshub10  (rx10), 
   .rx_mopshub11  (rx11), 
   .rx_mopshub12  (rx12), 
   .rx_mopshub13  (rx13), 
   .rx_mopshub14  (rx14), 
   .rx_mopshub15  (rx15), 
   .rx_mopshub16  (rx16), 
   .rx_mopshub17  (rx17), 
   .rx_mopshub18  (rx18), 
   .rx_mopshub19  (rx19), 
   .rx_mopshub2   (rx2), 
   .rx_mopshub20  (rx20), 
   .rx_mopshub21  (rx21), 
   .rx_mopshub22  (rx22), 
   .rx_mopshub23  (rx23), 
   .rx_mopshub24  (rx24), 
   .rx_mopshub25  (rx25), 
   .rx_mopshub26  (rx26), 
   .rx_mopshub27  (rx27), 
   .rx_mopshub28  (rx28), 
   .rx_mopshub29  (rx29), 
   .rx_mopshub3   (rx3), 
   .rx_mopshub30  (rx30), 
   .rx_mopshub31  (rx31), 
   .rx_mopshub4   (rx4), 
   .rx_mopshub5   (rx5), 
   .rx_mopshub6   (rx6), 
   .rx_mopshub7   (rx7), 
   .rx_mopshub8   (rx8), 
   .rx_mopshub9   (rx9), 
   .rxdec         (rxdec), 
   .select_bus    (select_bus), 
   .tx_mopshub    (tx_mopshub)
); 

canbus_decoder_mopshub CANbus_decoder0( 
   .clk          (clk_mops), 
   .rst          (rst), 
   .rx           (rxdec), 
   .data_rec_out (bus_dec_data), 
   .tx           (txdec)
); 

canframegen_mopshub canframegen_mopshub0( 
   .clk           (clk_mops), 
   .clk_low       (clk_bus), 
   .rst_n         (rst), 
   .start         (start), 
   .read          (read), 
   .write         (write), 
   .random1000    (random1000), 
   .indexsubindex (indexsubindex), 
   .rstchip       (const_val), 
   .readadc       (readadc), 
   .allch         (const_val), 
   .ch            (adc_ch), 
   .custommsg     (custommsg), 
   .dlc           (dlc), 
   .data          (data), 
   .id            (id), 
   .txgen         (txgen), 
   .doneranwire   (doneranwire), 
   .finranmes     (finranmes), 
   .sendran       (sendran), 
   .nextran       (nextran), 
   .taildata      (taildata), 
   .customcanid   (customcanid)
); 

clock_divider #(28'd80) clock_divider0( 
   .clock_in  (clk_mops), 
   .clock_out (clk_bus)
); 

data_generator_sm data_generator_SM0( 
   .clk                        (clk), 
   .rst                        (rst), 
   .counter8bit_limit          (counter8bit_limit), 
   .irq_elink_tra              (irq_elink_tra), 
   .start_read_elink           (start_read_elink), 
   .end_read_elink             (end_read_elink), 
   .buffer_en                  (buffer_en), 
   .ch                         (adc_ch), 
   .custommsg                  (custommsg), 
   .data                       (data), 
   .start                      (start), 
   .reqmsg                     (reqmsg), 
   .respmsg                    (respmsg), 
   .indexsubindex              (indexsubindex), 
   .read                       (read), 
   .taildata                   (taildata), 
   .write                      (write), 
   .readadc                    (readadc), 
   .customcanid                (customcanid), 
   .test_rx                    (test_rx), 
   .test_rx_start              (test_rx_start), 
   .test_rx_end                (test_rx_end), 
   .sign_on_sig                (sign_on_sig), 
   .test_mopshub_core          (test_mopshub_core), 
   .sel_bus                    (sel_bus), 
   .test_elink_data_done       (test_elink_data_done), 
   .start_write_emulator       (start_write_emulator), 
   .test_tx                    (test_tx), 
   .end_write_emulator         (end_write_emulator), 
   .test_tx_end                (test_tx_end), 
   .test_tx_start              (test_tx_start), 
   .test_advanced_start        (test_advanced_start), 
   .test_advanced_end          (test_advanced_end), 
   .tx_mopshub                 (tx_mopshub), 
   .rx_mopshub                 (rx_mopshub), 
   .test_advanced              (test_advanced), 
   .data_rec_decoder_spi       (data_rec_decoder_spi), 
   .start_write_emulator_spi   (start_write_emulator_spi), 
   .end_write_emulator_spi     (end_write_emulator_spi), 
   .test_simult                (test_simult), 
   .no_respmsg                 (no_respmsg), 
   .requestreg                 (requestreg), 
   .responsereg                (responsereg), 
   .data_rec_uplink            (data_rec_uplink), 
   .data_tra_downlink          (data_tra_downlink), 
   .data_tra_decoder           (data_tra_decoder), 
   .random1000                 (random1000), 
   .sendran                    (sendran), 
   .nextran                    (nextran), 
   .doneran                    (doneranwire), 
   .counter8bit_reg            (data_out_counter), 
   .n_buses                    (n_buses), 
   .txdec                      (txdec_active), 
   .test_spi                   (test_spi), 
   .data_tra_mon_spi           (data_tra_mon_spi), 
   .data_tra_power_spi         (data_tra_power_spi), 
   .data_tra_mon_decoder_spi   (data_tra_mon_decoder_spi), 
   .data_tra_power_decoder_spi (data_tra_power_decoder_spi)
); 

elink_decoder mopshub_decoder_emulator( 
   .clk                        (clk), 
   .clk_elink                  (clk_elink), 
   .data_rec_decoder           (data_rec_decoder), 
   .data_rec_decoder_spi       (data_rec_decoder_spi), 
   .rst                        (rst), 
   .rx_elink2bit               (rx_elink2bit), 
   .start_read_elink           (start_read_emulator), 
   .start_write_elink          (start_write_emulator), 
   .start_write_elink_spi      (start_write_emulator_spi), 
   .data_tra_decoder           (data_tra_decoder), 
   .data_tra_mon_decoder_spi   (data_tra_mon_decoder_spi), 
   .data_tra_power_decoder_spi (data_tra_power_decoder_spi), 
   .end_write_elink            (end_write_emulator), 
   .end_write_elink_spi        (end_write_emulator_spi), 
   .tx_elink2bit               (tx_elink2bit), 
   .tx_emulator                (tx_emulator)
); 

// HDL Embedded Text Block 1 data_loader
//control Signals
initial data_rec_decoder =76'b0;
assign txdec_active = ^(txdec &tx_emulator);
assign sim_failures = can_bus_activity_wrapper0.can_bus_activity0.failures; 
assign bus_loop_cnt = (osc_auto_trim_mopshub  == 1'b1)? bus_cnt_power:data_out_counter[4:0];
assign counter8bit_limit = 8'd2;
assign response_cld = {data_tra_power_decoder_spi[75:44],data_rec_uplink[43:0]};
// data_loader 1
assign sdoid  = {SDO_TX,can_nodeid}; 
assign bus_id = {3'h0,select_bus};
always @(posedge clk)
begin
  if(!rst) data_rec_decoder <= {sdoid,32'h0, bus_id};
  else
  case (select_bus)
    5'h0  : data_rec_decoder  <= {sdoid,payload,bus_id, 8'h0,16'h0};
    5'h1  : data_rec_decoder  <= {sdoid,payload,bus_id, 8'h0,16'h0};
    5'h2  : data_rec_decoder  <= {sdoid,payload,bus_id, 8'h0,16'h0};
    5'h3  : data_rec_decoder  <= {sdoid,payload,bus_id, 8'h0,16'h0};
    5'h4  : data_rec_decoder  <= {sdoid,payload,bus_id, 8'h0,16'h0};
    5'h5  : data_rec_decoder  <= {sdoid,payload,bus_id, 8'h0,16'h0};
    5'h6  : data_rec_decoder  <= {sdoid,payload,bus_id, 8'h0,16'h0};
    5'h7  : data_rec_decoder  <= {sdoid,payload,bus_id, 8'h0,16'h0};
    5'h8  : data_rec_decoder  <= {sdoid,payload,bus_id, 8'h0,16'h0};
    5'h9  : data_rec_decoder  <= {sdoid,payload,bus_id, 8'h0,16'h0};
    5'hA  : data_rec_decoder  <= {sdoid,payload,bus_id, 8'h0,16'h0};
    5'hB  : data_rec_decoder  <= {sdoid,payload,bus_id, 8'h0,16'h0};
    5'hC  : data_rec_decoder  <= {sdoid,payload,bus_id, 8'h0,16'h0};
    5'hD  : data_rec_decoder  <= {sdoid,payload,bus_id, 8'h0,16'h0};
    5'hE  : data_rec_decoder  <= {sdoid,payload,bus_id, 8'h0,16'h0};
    5'hF  : data_rec_decoder  <= {sdoid,payload,bus_id, 8'h0,16'h0};
    5'h10 : data_rec_decoder  <= {sdoid,payload,bus_id, 8'h0,16'h0};
    5'h11 : data_rec_decoder  <= {sdoid,payload,bus_id, 8'h0,16'h0};
    5'h12 : data_rec_decoder  <= {sdoid,payload,bus_id, 8'h0,16'h0};
    5'h13 : data_rec_decoder  <= {sdoid,payload,bus_id, 8'h0,16'h0};
    5'h14 : data_rec_decoder  <= {sdoid,payload,bus_id, 8'h0,16'h0};
    5'h15 : data_rec_decoder  <= {sdoid,payload,bus_id, 8'h0,16'h0};
    5'h16 : data_rec_decoder  <= {sdoid,payload,bus_id, 8'h0,16'h0};
    5'h17 : data_rec_decoder  <= {sdoid,payload,bus_id, 8'h0,16'h0};
    5'h18 : data_rec_decoder  <= {sdoid,payload,bus_id, 8'h0,16'h0};
    5'h19 : data_rec_decoder  <= {sdoid,payload,bus_id, 8'h0,16'h0};
    5'h1A : data_rec_decoder  <= {sdoid,payload,bus_id, 8'h0,16'h0};
    5'h1B : data_rec_decoder  <= {sdoid,payload,bus_id, 8'h0,16'h0};
    5'h1C : data_rec_decoder  <= {sdoid,payload,bus_id, 8'h0,16'h0};
    5'h1D : data_rec_decoder  <= {sdoid,payload,bus_id, 8'h0,16'h0};
    5'h1E : data_rec_decoder  <= {sdoid,payload,bus_id, 8'h0,16'h0};
    5'h1F : data_rec_decoder  <= {sdoid,payload,bus_id, 8'h0,16'h0};
    default: data_rec_decoder  <=  {sdoid,56'h0, bus_id, 8'h0,16'h0};    
  endcase 
end                                            

//Choose Channel
always @(posedge clk)
begin
  if(!rst) payload <= {16'h0, 16'h0};
  else
  case (adc_ch)
    32'h0  : payload  <= {16'h4010, 16'h2301};
    32'h1  : payload  <= {16'h4010, 16'h2302};
    32'h2  : payload  <= {16'h4010, 16'h2303};
    32'h3  : payload  <= {16'h4000, 16'h2401};
    32'h4  : payload  <= {16'h4000, 16'h2402};
    32'h5  : payload  <= {16'h4000, 16'h2403};    
    32'h6  : payload  <= {16'h4000, 16'h2404};  
    32'h7  : payload  <= {16'h4000, 16'h2405};
    32'h8  : payload  <= {16'h4000, 16'h2406};
    32'h9  : payload  <= {16'h4000, 16'h2407};
    32'hA  : payload  <= {16'h4000, 16'h2408};
    32'hB  : payload  <= {16'h4000, 16'h2409};
    32'hC  : payload  <= {16'h4000, 16'h240A};
    32'hD  : payload  <= {16'h4000, 16'h240B};
    32'hE  : payload  <= {16'h4000, 16'h240C};
    32'hF  : payload  <= {16'h4000, 16'h240D};
    32'h10 : payload  <= {16'h4000, 16'h240E};
    32'h11 : payload  <= {16'h4000, 16'h240F};
    32'h12 : payload  <= {16'h4000, 16'h2410};
    32'h13 : payload  <= {16'h4000, 16'h2411};
    32'h14 : payload  <= {16'h4000, 16'h2412};
    32'h15 : payload  <= {16'h4000, 16'h2413};
    32'h16 : payload  <= {16'h4000, 16'h2414};
    32'h17 : payload  <= {16'h4000, 16'h2415};
    32'h18 : payload  <= {16'h4000, 16'h2416};
    32'h19 : payload  <= {16'h4000, 16'h2417};
    32'h1A : payload  <= {16'h4000, 16'h2418};
    32'h1B : payload  <= {16'h4000, 16'h2419};
    32'h1C : payload  <= {16'h4000, 16'h241A};
    32'h1D : payload  <= {16'h4000, 16'h241B};
    32'h1E : payload  <= {16'h4000, 16'h241C};
    32'h1F : payload  <= {16'h4000, 16'h241D};
    32'h20 : payload  <= {16'h4000, 16'h241E};
    32'h21 : payload  <= {16'h4000, 16'h241F};
    32'h22 : payload  <= {16'h4000, 16'h2420};
    32'h23 : payload  <= {16'h4000, 16'h2421};
    32'h24 : payload  <= {16'h4000, 16'h2422};
    32'h25 : payload  <= {16'h4000, 16'h2423};
    32'h26 : payload  <= {16'h4000, 16'h2424};
    32'h27 : payload  <= {16'h4000, 16'h2425};        
    default: payload  <= {16'h0, 16'h0};   
  endcase
end                                            















































































































































































































// ModuleWare code(v1.12) for instance 'const' of 'constval'
assign const_val = 1'd0;

endmodule // data_generator

