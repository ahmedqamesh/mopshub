//
// Module mopshub_testbench.can_net_decoder.struct
//
// Created:
//          by - dcs.dcs (chipdev2.physik.uni-wuppertal.de)
//          at - 10:23:02 09/15/21
//
// Generated by Mentor Graphics' HDL Designer(TM) 2019.4 (Build 4)
//

`resetall
`timescale 1ns/10ps
module can_net_decoder( 
   // Port Declarations
   input   wire      clk, 
   input   wire      ext_rst_mops, 
   input   wire      ext_trim_mops, 
   input   wire      osc_auto_trim, 
   input   wire      rst, 
   input   wire      tx_mobshub0, 
   input   wire      tx_mobshub1, 
   input   wire      tx_mobshub2, 
   input   wire      tx_mobshub3, 
   input   wire      tx_mobshub4, 
   input   wire      tx_mobshub5, 
   input   wire      tx_mobshub6, 
   output  wire      rx_mobshub0, 
   output  wire      rx_mobshub1, 
   output  wire      rx_mobshub2, 
   output  wire      rx_mobshub3, 
   output  wire      rx_mobshub4, 
   output  wire      rx_mobshub5, 
   output  wire      rx_mobshub6, 
   output  wire      rx_mobshub7
);


// Internal Declarations


// Local declarations

// Internal signal declarations
reg   [6:0] can_nodeid0  = 7'h0;    // Hardwired CANopen Node-ID for each DCS controller chip
reg   [6:0] can_nodeid1  = 7'h1;    // Hardwired CANopen Node-ID for each DCS controller chip
reg         rst_n;
wire        rx0_mops0;
wire        rx0_mops1;
wire        rx1_mops0;
wire        rx1_mops1;
wire        tx0_mops0;
wire        tx0_mops1;
wire        tx1_mops0;
wire        tx1_mops1;


// Instances 
mops_top_level mops_top_level0m0( 
   .can_nodeid    (can_nodeid0), 
   .clk           (clk), 
   .osc_auto_trim (osc_auto_trim), 
   .rst_n         (rst_n), 
   .rxmops        (rx0_mops0), 
   .ready_osc     (), 
   .txmops        (tx0_mops0)
); 

mops_top_level mops_top_level0m1( 
   .can_nodeid    (can_nodeid1), 
   .clk           (clk), 
   .osc_auto_trim (osc_auto_trim), 
   .rst_n         (rst_n), 
   .rxmops        (rx0_mops1), 
   .ready_osc     (), 
   .txmops        (tx0_mops1)
); 

mops_top_level mops_top_level1m0( 
   .can_nodeid    (can_nodeid0), 
   .clk           (clk), 
   .osc_auto_trim (osc_auto_trim), 
   .rst_n         (rst_n), 
   .rxmops        (rx1_mops0), 
   .ready_osc     (), 
   .txmops        (tx1_mops0)
); 

mops_top_level mops_top_level1m1( 
   .can_nodeid    (can_nodeid1), 
   .clk           (clk), 
   .osc_auto_trim (osc_auto_trim), 
   .rst_n         (rst_n), 
   .rxmops        (rx1_mops1), 
   .ready_osc     (), 
   .txmops        (tx1_mops1)
); 

// HDL Embedded Text Block 4 Bus_signals0
assign rx_mobshub0 =  ~(rst ^ (tx_mobshub0 & tx0_mops0 & tx0_mops1));
assign rx0_mops0  = ~(rst ^rx_mobshub0);
assign rx0_mops1  = ~(rst ^rx_mobshub0);




























































































































































// HDL Embedded Text Block 5 Bus_signals1
assign rx_mobshub1 =  ~(rst ^ (tx_mobshub1 & tx1_mops0 & tx1_mops1));
assign rx1_mops0  = ~(rst ^rx_mobshub1);
assign rx1_mops1  = ~(rst ^rx_mobshub1);





























































































































































// HDL Embedded Text Block 6 rst_mops1
always@(posedge clk)
if (!rst)
rst_n <=0;
else 
begin
if (ext_rst_mops ==1)
rst_n <=0;
else
rst_n <=1; 
end




















endmodule // can_net_decoder

