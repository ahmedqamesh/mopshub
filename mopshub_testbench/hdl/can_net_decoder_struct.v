//
// Module mopshub_testbench.can_net_decoder.struct
//
// Created:
//          by - dcs.dcs (chipdev2.physik.uni-wuppertal.de)
//          at - 13:27:13 01/18/22
//
// Generated by Mentor Graphics' HDL Designer(TM) 2019.4 (Build 4)
//

`resetall
`timescale 1ns/10ps
module can_net_decoder( 
   // Port Declarations
   input   wire    [4:0]  bus_cnt, 
   input   wire    [4:0]  bus_loop_cnt, 
   input   wire           clk, 
   input   wire           ext_rst_mops, 
   input   wire           ext_trim_mops, 
   input   wire           osc_auto_trim, 
   input   wire           rst, 
   input   wire           rst_mops, 
   input   wire           sel_bus, 
   input   wire           tx_mopshub0, 
   input   wire           tx_mopshub1, 
   input   wire           tx_mopshub10, 
   input   wire           tx_mopshub11, 
   input   wire           tx_mopshub12, 
   input   wire           tx_mopshub13, 
   input   wire           tx_mopshub14, 
   input   wire           tx_mopshub15, 
   input   wire           tx_mopshub16, 
   input   wire           tx_mopshub17, 
   input   wire           tx_mopshub18, 
   input   wire           tx_mopshub19, 
   input   wire           tx_mopshub2, 
   input   wire           tx_mopshub20, 
   input   wire           tx_mopshub21, 
   input   wire           tx_mopshub22, 
   input   wire           tx_mopshub23, 
   input   wire           tx_mopshub3, 
   input   wire           tx_mopshub4, 
   input   wire           tx_mopshub5, 
   input   wire           tx_mopshub6, 
   input   wire           tx_mopshub7, 
   input   wire           tx_mopshub8, 
   input   wire           tx_mopshub9, 
   input   wire           txgen, 
   output  wire           ready_osc, 
   output  wire           rx_mopshub, 
   output  wire           rx_mopshub0, 
   output  wire           rx_mopshub1, 
   output  wire           rx_mopshub10, 
   output  wire           rx_mopshub11, 
   output  wire           rx_mopshub12, 
   output  wire           rx_mopshub13, 
   output  wire           rx_mopshub14, 
   output  wire           rx_mopshub15, 
   output  wire           rx_mopshub16, 
   output  wire           rx_mopshub17, 
   output  wire           rx_mopshub18, 
   output  wire           rx_mopshub19, 
   output  wire           rx_mopshub2, 
   output  wire           rx_mopshub20, 
   output  wire           rx_mopshub21, 
   output  wire           rx_mopshub22, 
   output  wire           rx_mopshub23, 
   output  wire           rx_mopshub3, 
   output  wire           rx_mopshub4, 
   output  wire           rx_mopshub5, 
   output  wire           rx_mopshub6, 
   output  wire           rx_mopshub7, 
   output  wire           rx_mopshub8, 
   output  wire           rx_mopshub9, 
   output  wire           rxdec, 
   output  wire    [4:0]  select_bus, 
   output  wire           tx_mopshub
);


// Internal Declarations


// Local declarations

// Internal signal declarations
wire        auto_trim_mops;
reg   [6:0] can_nodeid      = 7'h1;    // Hardwired CANopen Node-ID for each DCS controller chip
reg   [6:0] can_nodeid0     = 7'h0;    // Hardwired CANopen Node-ID for each DCS controller chip
reg   [6:0] can_nodeid1     = 7'h1;    // Hardwired CANopen Node-ID for each DCS controller chip
reg         rst_n;
wire        rx0_mops0;
wire        rx0_mops1;
wire        rx1_mops0;
wire        rx1_mops1;
wire        rxmops;
wire        tx0_mops0;
wire        tx0_mops1;
wire        tx1_mops0;
wire        tx1_mops1;
wire        txmops;


// Instances 
mops_top_level mops_top_level0( 
   .can_nodeid    (can_nodeid), 
   .clk           (clk), 
   .osc_auto_trim (auto_trim_mops), 
   .rst_n         (rst_mops), 
   .rxmops        (rxmops), 
   .ready_osc     (ready_osc), 
   .txmops        (txmops)
); 

mops_top_level mops_top_level0m0( 
   .can_nodeid    (can_nodeid0), 
   .clk           (clk), 
   .osc_auto_trim (), 
   .rst_n         (rst_n), 
   .rxmops        (rx0_mops0), 
   .ready_osc     (), 
   .txmops        (tx0_mops0)
); 

mops_top_level mops_top_level0m1( 
   .can_nodeid    (can_nodeid1), 
   .clk           (clk), 
   .osc_auto_trim (), 
   .rst_n         (rst_n), 
   .rxmops        (rx0_mops1), 
   .ready_osc     (), 
   .txmops        (tx0_mops1)
); 

mops_top_level mops_top_level1m0( 
   .can_nodeid    (can_nodeid0), 
   .clk           (clk), 
   .osc_auto_trim (), 
   .rst_n         (rst_n), 
   .rxmops        (rx1_mops0), 
   .ready_osc     (), 
   .txmops        (tx1_mops0)
); 

mops_top_level mops_top_level1m1( 
   .can_nodeid    (can_nodeid1), 
   .clk           (clk), 
   .osc_auto_trim (), 
   .rst_n         (rst_n), 
   .rxmops        (rx1_mops1), 
   .ready_osc     (), 
   .txmops        (tx1_mops1)
); 

// HDL Embedded Text Block 4 Bus_signals0
//assign rx_mopshub0 =  ~(rst ^ (tx_mopshub0 & tx0_mops0 & tx0_mops1 & txgen));
assign rx0_mops0  = ~(rst ^rx_mopshub0);
assign rx0_mops1  = ~(rst ^rx_mopshub0);











































































































































































// HDL Embedded Text Block 5 Bus_signals1
//assign rx_mopshub1 =  ~(rst ^(tx_mopshub1 & tx1_mops0 & tx1_mops1 & txgen));
assign rx1_mops0   = ~(rst ^rx_mopshub1);
assign rx1_mops1   = ~(rst ^rx_mopshub1);



































































































































































// HDL Embedded Text Block 6 rst_mops1
assign auto_trim_mops = (ext_trim_mops||osc_auto_trim);



















// HDL Embedded Text Block 7 rx_assign1
assign select_bus =(sel_bus ==1'b1) ? bus_cnt: bus_loop_cnt;


assign rx_mopshub0 = (select_bus == 5'd0) ? ~(rst ^ (tx_mopshub0 & txgen & txmops)): 0;
assign rx_mopshub1 = (select_bus == 5'd1) ? ~(rst ^ (tx_mopshub1 & txgen & txmops)): 0;
assign rx_mopshub2 = (select_bus == 5'd2) ? ~(rst ^ (tx_mopshub2 & txgen & txmops)): 0;
assign rx_mopshub3 = (select_bus == 5'd3) ? ~(rst ^ (tx_mopshub3 & txgen & txmops)): 0;
assign rx_mopshub4 = (select_bus == 5'd4) ? ~(rst ^ (tx_mopshub4 & txgen & txmops)): 0;
assign rx_mopshub5 = (select_bus == 5'd5) ? ~(rst ^ (tx_mopshub5 & txgen & txmops)): 0;
assign rx_mopshub6 = (select_bus == 5'd6) ? ~(rst ^ (tx_mopshub6 & txgen & txmops)): 0;
assign rx_mopshub7 = (select_bus == 5'd7) ? ~(rst ^ (tx_mopshub7 & txgen & txmops)): 0;


assign rx_mopshub8  = (select_bus == 5'd8)  ? ~(rst ^ (tx_mopshub8  & txgen & txmops)): 0;
assign rx_mopshub9  = (select_bus == 5'd9)  ? ~(rst ^ (tx_mopshub9  & txgen & txmops)): 0;
assign rx_mopshub10 = (select_bus == 5'd10) ? ~(rst ^ (tx_mopshub10 & txgen & txmops)): 0;
assign rx_mopshub11 = (select_bus == 5'd11) ? ~(rst ^ (tx_mopshub11 & txgen & txmops)): 0;
assign rx_mopshub12 = (select_bus == 5'd12) ? ~(rst ^ (tx_mopshub12 & txgen & txmops)): 0;
assign rx_mopshub13 = (select_bus == 5'd13) ? ~(rst ^ (tx_mopshub13 & txgen & txmops)): 0;
assign rx_mopshub14 = (select_bus == 5'd14) ? ~(rst ^ (tx_mopshub14 & txgen & txmops)): 0;
assign rx_mopshub15 = (select_bus == 5'd15) ? ~(rst ^ (tx_mopshub15 & txgen & txmops)): 0;

assign rx_mopshub16 = (select_bus == 5'd16) ? ~(rst ^ (tx_mopshub16 & txgen & txmops)): 0;
assign rx_mopshub17 = (select_bus == 5'd17) ? ~(rst ^ (tx_mopshub17 & txgen & txmops)): 0;
assign rx_mopshub18 = (select_bus == 5'd18) ? ~(rst ^ (tx_mopshub18 & txgen & txmops)): 0;
assign rx_mopshub19 = (select_bus == 5'd19) ? ~(rst ^ (tx_mopshub19 & txgen & txmops)): 0;
assign rx_mopshub20 = (select_bus == 5'd20) ? ~(rst ^ (tx_mopshub20 & txgen & txmops)): 0;
assign rx_mopshub21 = (select_bus == 5'd21) ? ~(rst ^ (tx_mopshub21 & txgen & txmops)): 0;
assign rx_mopshub22 = (select_bus == 5'd22) ? ~(rst ^ (tx_mopshub22 & txgen & txmops)): 0;
assign rx_mopshub23 = (select_bus == 5'd23) ? ~(rst ^ (tx_mopshub23 & txgen & txmops)): 0;


assign rxdec       = rx_mopshub; 
assign rxmops      = rx_mopshub;
assign rx_mopshub  = ~(rst ^ (rx_mopshub0 | rx_mopshub1 | rx_mopshub2 | rx_mopshub3 | rx_mopshub4  | rx_mopshub5 | rx_mopshub6 | rx_mopshub7
                             |rx_mopshub8 | rx_mopshub9 | rx_mopshub10| rx_mopshub11| rx_mopshub12 | rx_mopshub13| rx_mopshub14| rx_mopshub15
                             |rx_mopshub16| rx_mopshub17| rx_mopshub18| rx_mopshub19| rx_mopshub20 | rx_mopshub21| rx_mopshub22| rx_mopshub23));
                             
assign tx_mopshub  = ~(rst ^ (tx_mopshub0 & tx_mopshub1 & tx_mopshub2 & tx_mopshub3 & tx_mopshub4  & tx_mopshub5 & tx_mopshub6 & tx_mopshub7 
                             &tx_mopshub8 & tx_mopshub9 & tx_mopshub10& tx_mopshub11& tx_mopshub12 & tx_mopshub13& tx_mopshub14& tx_mopshub15
                             &tx_mopshub16& tx_mopshub17& tx_mopshub18& tx_mopshub19& tx_mopshub20 & tx_mopshub21& tx_mopshub22& tx_mopshub23));
























































































































































































endmodule // can_net_decoder

