//
// Module mopshub_testbench.canbus_decoder_mopshub.struct
//
// Created:
//          by - dcs.dcs (chipdev2.physik.uni-wuppertal.de)
//          at - 09:21:57 07/13/23
//
// Generated by Mentor Graphics' HDL Designer(TM) 2019.4 (Build 4)
//

`resetall
`timescale 1ns/10ps
module canbus_decoder_mopshub( 
   // Port Declarations
   input   wire            clk, 
   input   wire            rst, 
   input   wire            rx, 
   output  wire    [75:0]  data_rec_out, 
   output  wire            tx
);

//tmrg default triplicate
//tmrg tmr_error false
// Internal Declarations


// Local declarations

// Internal signal declarations
wire  [7:0]  Kd;
wire  [7:0]  Ki;
wire  [7:0]  Kp;
wire  [4:0]  addr_can;
wire         cs_can;
wire  [15:0] data_init;
wire         en;                // enable signal
wire         en_osc_trim;
wire         end_init;
wire         end_read_can;
wire         end_write_can;
wire         entimeout;
wire         highprio;
wire         id_comp;
wire         idcmpdone;
wire  [10:0] idprev;
wire         init;
wire         irqsucrec;
wire         irqsuctra;
wire         lowprio;
wire  [6:0]  nodeid;
wire  [15:0] read_can;
wire         read_sig_can_n;
wire         reset_irq_can;
wire         rstid;
wire  [7:0]  sdocmd;            // SDO command byte to tell write or read operation
wire         send_mes_can;
wire         start_read_can;
wire         start_write_can;
wire  [4:0]  statedeb;
wire  [5:0]  statedebcan;
wire         timeoutrst;
wire  [15:0] write_can;
wire         write_sig_can_n;


// Instances 
CANAkari_interfacedec CANAkari_interfacedec0( 
   .abort           (), 
   .clk             (clk), 
   .data_init       (data_init), 
   .data_tra_mes    (), 
   .id_comp         (id_comp), 
   .idprev          (idprev), 
   .init            (init), 
   .read_can        (read_can), 
   .reset_irq_can   (reset_irq_can), 
   .rst             (rst), 
   .sdocmd          (sdocmd), 
   .send_mes        (send_mes_can), 
   .start_read      (start_read_can), 
   .start_write     (start_write_can), 
   .timeoutrst      (), 
   .addr_can        (addr_can), 
   .cs_can          (cs_can), 
   .en_rec_reg      (en), 
   .end_init        (end_init), 
   .end_read        (end_read_can), 
   .end_write       (end_write_can), 
   .highprio        (highprio), 
   .idcmpdone       (idcmpdone), 
   .lowprio         (lowprio), 
   .read_sig_can_n  (read_sig_can_n), 
   .rstid           (rstid), 
   .statedebcan     (statedebcan), 
   .write_can       (write_can), 
   .write_sig_can_n (write_sig_can_n)
); 

bridgeSMdec bridgeSMdec0( 
   .clk             (clk), 
   .co_busy         (), 
   .end_init        (end_init), 
   .end_read_can    (end_read_can), 
   .end_read_co     (), 
   .end_write_can   (end_write_can), 
   .end_write_co    (), 
   .endwait         (), 
   .genrst          (rstid), 
   .highpr          (highprio), 
   .idcmpdone       (idcmpdone), 
   .irq_can_rec     (irqsucrec), 
   .irq_can_tra     (irqsuctra), 
   .irq_co          (), 
   .lowpr           (lowprio), 
   .rst             (rst), 
   .timeoutrst      (timeoutrst), 
   .abort_mes       (), 
   .entimeout       (entimeout), 
   .id_comp         (id_comp), 
   .init            (init), 
   .reset_irq_can   (reset_irq_can), 
   .send_mes_can    (send_mes_can), 
   .signonsig       (), 
   .start_read_can  (start_read_can), 
   .start_read_co   (), 
   .start_write_can (start_write_can), 
   .start_write_co  (), 
   .statedeb        (statedeb)
); 

initialize_blockdec initialize_blockdec0( 
   .addr      (addr_can), 
   .data_init (data_init), 
   .nodeid    (nodeid)
); 

rec_mes_bufdec rec_mes_bufdec0( 
   .clk          (clk), 
   .data_rec_in  (read_can), 
   .en           (en), 
   .rst          (rst), 
   .addr         (addr_can), 
   .sdocmd       (sdocmd), 
   .data_rec_out (data_rec_out), 
   .idprev       (idprev)
); 

timoutrstdec timeoutrstdec0( 
   .clk        (clk), 
   .entimeout  (entimeout), 
   .rst        (rst), 
   .timeoutrst (timeoutrst)
); 

can canakari_decoder0( 
   .clock             (clk), 
   .reset             (rst), 
   .address           (addr_can), 
   .writedata         (write_can), 
   .cs                (cs_can), 
   .read_n            (read_sig_can_n), 
   .write_n           (write_sig_can_n), 
   .rx                (rx), 
   .en_osc_trim       (en_osc_trim), 
   .Kd                (Kd), 
   .Kp                (Kp), 
   .Ki                (Ki), 
   .readdata          (read_can), 
   .irq               (), 
   .irqstatus         (), 
   .irqsuctra         (irqsuctra), 
   .irqsucrec         (irqsucrec), 
   .tx                (tx), 
   .statedeb          (), 
   .Prescale_EN_debug (), 
   .bitst             (), 
   .ftrim             (), 
   .ready_osc         ()
); 

// HDL Embedded Text Block 1 eb1
// eb1 1                                        
//assign debugbus[24]    = timeoutrst;
//assign debugbus[23]    = irq_can_rec;
//assign debugbus[22]    = irq_can_tra;
//assign debugbus[21]    = start_read_can;
//assign debugbus[20]    = start_read_co;
//assign debugbus[19]    = ack_od;
//assign debugbus[18:16] = statedebadc;
//assign debugbus[15:10] = statedebcan;
//assign debugbus[9:5]   = statedeb;
//assign debugbus[4:0]   = statedebco;


// HDL Embedded Text Block 2 eb2
assign Kd =8'd0;
assign Ki =8'd0;
assign Kp =8'd0;
assign en_osc_trim =1'b0;

endmodule // canbus_decoder_mopshub

