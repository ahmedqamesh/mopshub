//
// Module mopshub_testbench.elink_decoder.struct
//
// Created:
//          by - dcs.dcs (chipdev2.physik.uni-wuppertal.de)
//          at - 16:40:45 12/07/23
//
// Generated by Mentor Graphics' HDL Designer(TM) 2019.4 (Build 4)
//

`resetall
`timescale 1ns/10ps
module elink_decoder( 
   // Port Declarations
   input   wire            clk, 
   input   wire            clk_elink, 
   input   wire    [75:0]  data_rec_decoder, 
   input   wire    [75:0]  data_rec_decoder_spi, 
   input   wire            rst, 
   input   wire    [1:0]   rx_elink2bit, 
   input   wire            start_read_elink, 
   input   wire            start_write_elink, 
   input   wire            start_write_elink_spi, 
   output  wire    [75:0]  data_tra_decoder, 
   output  wire    [75:0]  data_tra_mon_decoder_spi, 
   output  wire    [75:0]  data_tra_power_decoder_spi, 
   output  wire            end_write_elink, 
   output  wire            end_write_elink_spi, 
   output  wire    [1:0]   tx_elink2bit, 
   output  wire            tx_emulator
);


// Internal Declarations


// Local declarations

// Internal signal declarations
reg   [9:0]  COMMAn;
reg   [9:0]  COMMAp;
reg   [7:0]  Kchar_comma;
reg   [7:0]  Kchar_eop;
reg   [7:0]  Kchar_sop;
wire         abort                  = 1'b0;
wire         buffer_tra_en;
wire  [9:0]  data_10bit_in_dbg      = 10'b0;
wire         data_rdy_10bit_in_dbg  = 1'b0;
wire  [75:0] data_rec_dbg_in        = 76'b0;
wire         dbg_elink              = 1'b0;
wire         dbg_spi                = 1'b0;
reg          end_elink_proc;
wire         end_read_elink;
wire         fifo_flush             = 1'b0;
wire         irq_elink_rec;
wire         irq_elink_tra;
wire  [3:0]  mopshub_id;
wire         rx_data_rdy;
wire         rx_fifo_full;
wire         sign_on_signal         = 1'b0;
wire         start_write_elink_dbg  = 1'b0;
wire         timeoutrst             = 1'b0;    // timeout reset signal to the state machine in case bridge controller is not respoding for a specified time
wire         tx_data_rdy;
wire         tx_efifo_full;
wire         word10b_rdy;


// Instances 
elink_core elink_core_decoder( 
   .clk                   (clk), 
   .rst                   (rst), 
   .rx_fifo_full          (rx_fifo_full), 
   .data_rec_uplink       (data_rec_decoder), 
   .start_write_elink     (start_write_elink), 
   .tx_efifo_full         (tx_efifo_full), 
   .irq_elink_rec         (irq_elink_rec), 
   .irq_elink_tra         (irq_elink_tra), 
   .end_write_elink       (end_write_elink), 
   .start_read_elink      (start_read_elink), 
   .end_read_elink        (end_read_elink), 
   .data_2bit_in          (rx_elink2bit), 
   .data_2bit_out         (tx_elink2bit), 
   .fifo_flush            (fifo_flush), 
   .tx_data_rdy           (tx_data_rdy), 
   .rx_data_rdy           (rx_data_rdy), 
   .data_tra_out          (data_tra_decoder), 
   .buffer_tra_en         (buffer_tra_en), 
   .data_tra_mon_spi      (data_tra_mon_decoder_spi), 
   .data_rec_spi_in       (data_rec_decoder_spi), 
   .end_write_elink_spi   (end_write_elink_spi), 
   .start_write_elink_spi (start_write_elink_spi), 
   .timeoutrst            (timeoutrst), 
   .abort                 (abort), 
   .data_10bit_in_dbg     (data_10bit_in_dbg), 
   .dbg_elink             (dbg_elink), 
   .dbg_spi               (dbg_spi), 
   .statedeb_elink_tra    (), 
   .statedeb_elink_rec    (), 
   .word10b_rdy           (word10b_rdy), 
   .start_write_elink_dbg (start_write_elink_dbg), 
   .data_rec_dbg_in       (data_rec_dbg_in), 
   .end_write_elink_dbg   (), 
   .irq_elink_eth         (), 
   .data_tra_power_spi    (data_tra_power_decoder_spi), 
   .irq_spi_power_on      (), 
   .buffer_eth_en         (), 
   .irq_spi_mon_tra       (), 
   .dec10b_Out_dbg        (), 
   .dec10b_out_rdy_dbg    (), 
   .data_rdy_10bit_in_dbg (data_rdy_10bit_in_dbg), 
   .Kchar_comma           (Kchar_comma), 
   .Kchar_eop             (Kchar_eop), 
   .Kchar_sop             (Kchar_sop), 
   .COMMAn                (COMMAn), 
   .COMMAp                (COMMAp), 
   .start_read_eth_fifo   (), 
   .sign_on_signal        (sign_on_signal), 
   .end_elink_proc        (end_elink_proc), 
   .clk_elink             (clk_elink), 
   .endwait               (abort), 
   .data_10bit_in         (), 
   .data_in_rdy           (), 
   .code_err              (), 
   .disp_err              (), 
   .irq_spi_power_off     (), 
   .mopshub_id            (mopshub_id)
); 

// HDL Embedded Text Block 7 Data_rdy_signal1
//Save data into a buffer
assign tx_emulator = !irq_elink_tra;
always @(posedge clk)
  if (!rst)  end_elink_proc <= 1'b0 ; 
  else 
 begin
    if (end_read_elink) end_elink_proc <= end_read_elink;
    else end_elink_proc <= 1'b0 ; 
  end

































































































































// HDL Embedded Text Block 13 K_Code2
// Wire_assign 1                     
assign  mopshub_id=4'b1;
initial Kchar_comma = 8'b10111100;//K28.5  BC
initial Kchar_eop = 8'b11011100;// K28.6 DC
initial Kchar_sop = 8'b00111100;// K28.1 3C
initial COMMAn = 10'b1100000101;
initial COMMAp = 10'b0011111010;

































































































































endmodule // elink_decoder

